//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for AssetClassCommodityEnergy1Choice.  ISO2002 ID# _pBoTZg2nEeW72qLtWESimw.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Defines commodity attributes of a derivative where the type is energy.
/// </summary>
[KnownType(typeof(AssetClassCommodityEnergy1Choice.Electricity))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.NaturalGas))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.Oil))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.Coal))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.InterEnergy))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.RenewableEnergy))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.LightEnd))]
[KnownType(typeof(AssetClassCommodityEnergy1Choice.Distillates))]
public abstract partial record AssetClassCommodityEnergy1Choice_ : IIsoXmlSerilizable<AssetClassCommodityEnergy1Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static AssetClassCommodityEnergy1Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "Elctrcty" => AssetClassCommodityEnergy1Choice.Electricity.Deserialize(elementWithPayload),
             "NtrlGas" => AssetClassCommodityEnergy1Choice.NaturalGas.Deserialize(elementWithPayload),
             "Oil" => AssetClassCommodityEnergy1Choice.Oil.Deserialize(elementWithPayload),
             "Coal" => AssetClassCommodityEnergy1Choice.Coal.Deserialize(elementWithPayload),
             "IntrNrgy" => AssetClassCommodityEnergy1Choice.InterEnergy.Deserialize(elementWithPayload),
             "RnwblNrgy" => AssetClassCommodityEnergy1Choice.RenewableEnergy.Deserialize(elementWithPayload),
             "LghtEnd" => AssetClassCommodityEnergy1Choice.LightEnd.Deserialize(elementWithPayload),
             "Dstllts" => AssetClassCommodityEnergy1Choice.Distillates.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid AssetClassCommodityEnergy1Choice choice.")
        };
    }
}
