//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for BusinessDayInformation.  ISO2002 ID# _w64j4ZlcEeeE1Ya-LgRsuQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.BusinessDayReportOrError8Choice;

/// <summary>
/// Requested system details for a specific business day.
/// </summary>
public partial record BusinessDayInformation : BusinessDayReportOrError8Choice_
     , IIsoXmlSerilizable<BusinessDayInformation>
{
    #nullable enable
    
    /// <summary>
    /// Date for which the availability information is provided.
    /// </summary>
    public IsoISODate? SystemDate { get; init; } 
    /// <summary>
    /// Status of a system and the period of time during which the status is valid.
    /// </summary>
    public SystemStatus3? SystemStatus { get; init; } 
    /// <summary>
    /// Information relating to system operations and foreseen events relating to the operation of the system.
    /// </summary>
    public SystemAvailabilityAndEvents2? SystemInformationPerCurrency { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SystemDate is IsoISODate SystemDateValue)
        {
            writer.WriteStartElement(null, "SysDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(SystemDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (SystemStatus is SystemStatus3 SystemStatusValue)
        {
            writer.WriteStartElement(null, "SysSts", xmlNamespace );
            SystemStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SystemInformationPerCurrency is SystemAvailabilityAndEvents2 SystemInformationPerCurrencyValue)
        {
            writer.WriteStartElement(null, "SysInfPerCcy", xmlNamespace );
            SystemInformationPerCurrencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new BusinessDayInformation Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
