//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for CancellationByTransferInstructionDetails.  ISO2002 ID# _l0CXoQgMEeSFYfyUKDXKaw.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
using System.ComponentModel.DataAnnotations;
#endif
namespace BeneficialStrategies.Iso20022.Choices.Cancellation7Choice
{
    /// <summary>
    /// Information related to the transfer instruction to be cancelled.
    /// </summary>
    [IsoId("_l0CXoQgMEeSFYfyUKDXKaw")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Cancellation By Transfer Instruction Details")]
    #endif
    #if DECLARE_SERIALIZABLE
    [Serializable]
    #endif
    #if DECLARE_DATACONTRACT
    [DataContract]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public partial record CancellationByTransferInstructionDetails : Cancellation7Choice_
    #else
    public partial class CancellationByTransferInstructionDetails : Cancellation7Choice_
    #endif
    {
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        // No constructor needed for NET8 and above.
        #else
        /// <summary>
        /// Constructs a CancellationByTransferInstructionDetails instance using the members the ISO20022 deems required.
        /// It is higly recommended that you update to .NET 8 or above so you can use required initialization syntax instead
        /// </summary>
        public CancellationByTransferInstructionDetails( Account15 reqTransferorAccount,PartyIdentification2Choice_ reqTransferee,ISATransfer20 reqProductTransferAndReference )
        {
            TransferorAccount = reqTransferorAccount;
            Transferee = reqTransferee;
            ProductTransferAndReference = reqProductTransferAndReference;
        }
        #endif
        #nullable enable
        
        /// <summary>
        /// Information identifying the primary individual investor, for example, name, address, social security number and date of birth.
        /// </summary>
        [IsoId("_mPHxLQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Primary Individual Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public IndividualPerson8? PrimaryIndividualInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public IndividualPerson8? PrimaryIndividualInvestor { get; init; } 
        #else
        public IndividualPerson8? PrimaryIndividualInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Information identifying the secondary individual investor, for example, name, address, social security number and date of birth.
        /// </summary>
        [IsoId("_mPHxLwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Secondary Individual Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public IndividualPerson8? SecondaryIndividualInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public IndividualPerson8? SecondaryIndividualInvestor { get; init; } 
        #else
        public IndividualPerson8? SecondaryIndividualInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Information identifying the other individual investors, for example, name, address, social security number and date of birth.
        /// </summary>
        [IsoId("_mPHxMQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Other Individual Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public IndividualPerson8? OtherIndividualInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public IndividualPerson8? OtherIndividualInvestor { get; init; } 
        #else
        public IndividualPerson8? OtherIndividualInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Information identifying the primary corporate investor, for example, name and address.
        /// </summary>
        [IsoId("_mPHxMwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Primary Corporate Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Organisation4? PrimaryCorporateInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Organisation4? PrimaryCorporateInvestor { get; init; } 
        #else
        public Organisation4? PrimaryCorporateInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Information identifying the secondary corporate investor, for example, name and address.
        /// </summary>
        [IsoId("_mPHxNQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Secondary Corporate Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Organisation4? SecondaryCorporateInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Organisation4? SecondaryCorporateInvestor { get; init; } 
        #else
        public Organisation4? SecondaryCorporateInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Information identifying the other corporate investors, for example, name and address.
        /// </summary>
        [IsoId("_mPHxNwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Other Corporate Investor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Organisation4? OtherCorporateInvestor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Organisation4? OtherCorporateInvestor { get; init; } 
        #else
        public Organisation4? OtherCorporateInvestor { get; set; } 
        #endif
        
        /// <summary>
        /// Identification of an account owned by the investor at the old plan manager (account servicer).
        /// </summary>
        [IsoId("_mPHxOQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Transferor Account")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required Account15 TransferorAccount { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public Account15 TransferorAccount { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Account15 TransferorAccount { get; init; } 
        #else
        public Account15 TransferorAccount { get; set; } 
        #endif
        
        /// <summary>
        /// Account held in the name of a party that is not the name of the beneficial owner of the shares.
        /// </summary>
        [IsoId("_mPHxOwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Nominee Account")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Account16? NomineeAccount { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Account16? NomineeAccount { get; init; } 
        #else
        public Account16? NomineeAccount { get; set; } 
        #endif
        
        /// <summary>
        /// Information related to the institution to which the financial instrument is to be transferred.
        /// </summary>
        [IsoId("_mPHxPQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Transferee")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required PartyIdentification2Choice_ Transferee { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public PartyIdentification2Choice_ Transferee { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PartyIdentification2Choice_ Transferee { get; init; } 
        #else
        public PartyIdentification2Choice_ Transferee { get; set; } 
        #endif
        
        /// <summary>
        /// Identification of an account owned by the investor to which a cash entry is made based on the transfer of asset(s).
        /// </summary>
        [IsoId("_mPHxPwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Cash Account")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public CashAccount29? CashAccount { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public CashAccount29? CashAccount { get; init; } 
        #else
        public CashAccount29? CashAccount { get; set; } 
        #endif
        
        /// <summary>
        /// Details of the transfer to be cancelled.
        /// </summary>
        [IsoId("_mPHxQQgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Product Transfer And Reference")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required ISATransfer20 ProductTransferAndReference { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public ISATransfer20 ProductTransferAndReference { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public ISATransfer20 ProductTransferAndReference { get; init; } 
        #else
        public ISATransfer20 ProductTransferAndReference { get; set; } 
        #endif
        
        /// <summary>
        /// Additional information that cannot be captured in the structured elements and/or any other specific block.
        /// </summary>
        [IsoId("_mPHxQwgMEeSFYfyUKDXKaw")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Extension")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Extension1? Extension { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Extension1? Extension { get; init; } 
        #else
        public Extension1? Extension { get; set; } 
        #endif
        
        
        #nullable disable
        
    }
}
