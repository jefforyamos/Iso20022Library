//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Return.  ISO2002 ID# _sWEhc4pIEeaNTaanBSMWmg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.CollateralMovement5Choice;

/// <summary>
/// Provides the collateral movement direction that is a return only.
/// </summary>
public partial record Return : CollateralMovement5Choice_
     , IIsoXmlSerilizable<Return>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the reference to the unambiguous identification of the margin call request.
    /// </summary>
    public required IsoMax35Text MarginCallRequestIdentification { get; init; } 
    /// <summary>
    /// Specifies the reference to the unambiguous identification of the margin call response.
    /// </summary>
    public IsoMax35Text? MarginCallResponseIdentification { get; init; } 
    /// <summary>
    /// Specifies the standard settlement instructions.
    /// </summary>
    public IsoMax140Text? StandardSettlementInstructions { get; init; } 
    /// <summary>
    /// Specifies the reference to the unambiguous identification of the collateral proposal response (in case of counter proposal).
    /// </summary>
    public IsoMax35Text? CollateralProposalResponseIdentification { get; init; } 
    /// <summary>
    /// Collateral type is securities.
    /// </summary>
    public SecuritiesCollateral8? SecuritiesCollateral { get; init; } 
    /// <summary>
    /// Collateral type is cash.
    /// </summary>
    public CashCollateral2? CashCollateral { get; init; } 
    /// <summary>
    /// Collateral type is other than securities or cash for example letter of credit.
    /// </summary>
    public OtherCollateral5? OtherCollateral { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MrgnCallReqId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(MarginCallRequestIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (MarginCallResponseIdentification is IsoMax35Text MarginCallResponseIdentificationValue)
        {
            writer.WriteStartElement(null, "MrgnCallRspnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MarginCallResponseIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (StandardSettlementInstructions is IsoMax140Text StandardSettlementInstructionsValue)
        {
            writer.WriteStartElement(null, "StdSttlmInstrs", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(StandardSettlementInstructionsValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (CollateralProposalResponseIdentification is IsoMax35Text CollateralProposalResponseIdentificationValue)
        {
            writer.WriteStartElement(null, "CollPrpslRspnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CollateralProposalResponseIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SecuritiesCollateral is SecuritiesCollateral8 SecuritiesCollateralValue)
        {
            writer.WriteStartElement(null, "SctiesColl", xmlNamespace );
            SecuritiesCollateralValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashCollateral is CashCollateral2 CashCollateralValue)
        {
            writer.WriteStartElement(null, "CshColl", xmlNamespace );
            CashCollateralValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherCollateral is OtherCollateral5 OtherCollateralValue)
        {
            writer.WriteStartElement(null, "OthrColl", xmlNamespace );
            OtherCollateralValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Return Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
