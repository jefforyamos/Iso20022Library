//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for CounterpartyTradeNature15Choice.  ISO2002 ID# _1y9eQQz1Ee2YoLD-1vFj0g.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Nature of the counterparty's company activities.
/// </summary>
[KnownType(typeof(CounterpartyTradeNature15Choice.FinancialInstitution))]
[KnownType(typeof(CounterpartyTradeNature15Choice.NonFinancialInstitution))]
[KnownType(typeof(CounterpartyTradeNature15Choice.CentralCounterParty))]
[KnownType(typeof(CounterpartyTradeNature15Choice.Other))]
public abstract partial record CounterpartyTradeNature15Choice_ : IIsoXmlSerilizable<CounterpartyTradeNature15Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static CounterpartyTradeNature15Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "FI" => CounterpartyTradeNature15Choice.FinancialInstitution.Deserialize(elementWithPayload),
             "NFI" => CounterpartyTradeNature15Choice.NonFinancialInstitution.Deserialize(elementWithPayload),
             "CntrlCntrPty" => CounterpartyTradeNature15Choice.CentralCounterParty.Deserialize(elementWithPayload),
             "Othr" => CounterpartyTradeNature15Choice.Other.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid CounterpartyTradeNature15Choice choice.")
        };
    }
}
