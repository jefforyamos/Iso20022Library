//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for CounterpartyTradeNature4Choice.  ISO2002 ID# _6UemybsAEea-m5tPqiasmQ.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Nature of the reporting counterparty's company activities.
/// </summary>
[KnownType(typeof(CounterpartyTradeNature4Choice.FinancialInstitution))]
[KnownType(typeof(CounterpartyTradeNature4Choice.NonFinancialInstitution))]
[KnownType(typeof(CounterpartyTradeNature4Choice.CentralCounterParty))]
[KnownType(typeof(CounterpartyTradeNature4Choice.Other))]
public abstract partial record CounterpartyTradeNature4Choice_ : IIsoXmlSerilizable<CounterpartyTradeNature4Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static CounterpartyTradeNature4Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "FI" => CounterpartyTradeNature4Choice.FinancialInstitution.Deserialize(elementWithPayload),
             "NFI" => CounterpartyTradeNature4Choice.NonFinancialInstitution.Deserialize(elementWithPayload),
             "CntrlCntrPty" => CounterpartyTradeNature4Choice.CentralCounterParty.Deserialize(elementWithPayload),
             "Othr" => CounterpartyTradeNature4Choice.Other.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid CounterpartyTradeNature4Choice choice.")
        };
    }
}
