//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SingleNameCreditDefaultSwap.  ISO2002 ID# _xSzjUSe0Eei12pGEsJIAeQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.CreditDefaultSwapsDerivative4Choice;

/// <summary>
/// A credit default swap on a single name instrument.
/// </summary>
public partial record SingleNameCreditDefaultSwap : CreditDefaultSwapsDerivative4Choice_
     , IIsoXmlSerilizable<SingleNameCreditDefaultSwap>
{
    #nullable enable
    
    /// <summary>
    /// Reference entity of a single name credit default swap (CDS) or a derivative on single name CDS.
    /// </summary>
    public required IsoTrueFalseIndicator SovereignIssuer { get; init; } 
    /// <summary>
    /// Reference entity of a single name credit default swap (CDS) or a derivative on single name credit default swap (CDS).
    /// </summary>
    public DerivativePartyIdentification1Choice_? ReferenceParty { get; init; } 
    /// <summary>
    /// Currency in which the notional is denominated.
    /// </summary>
    public required ActiveOrHistoricCurrencyCode NotionalCurrency { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "SvrgnIssr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(SovereignIssuer)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (ReferenceParty is DerivativePartyIdentification1Choice_ ReferencePartyValue)
        {
            writer.WriteStartElement(null, "RefPty", xmlNamespace );
            ReferencePartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "NtnlCcy", xmlNamespace );
        writer.WriteValue(NotionalCurrency.ToString()); // Enum value
        writer.WriteEndElement();
    }
    public static new SingleNameCreditDefaultSwap Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
