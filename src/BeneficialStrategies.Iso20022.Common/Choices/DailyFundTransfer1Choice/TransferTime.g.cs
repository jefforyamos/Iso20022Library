//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for TransferTime.  ISO2002 ID# _K4zysCc7Eea7avjfd7yDAA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.DailyFundTransfer1Choice;

/// <summary>
/// Time daily balances are transferred.
/// </summary>
public partial record TransferTime : DailyFundTransfer1Choice_
     , IIsoXmlSerilizable<TransferTime>
{
    #nullable enable
    
    /// <summary>
    /// Contains the main value for the container.
    /// A particular point in the progression of time in a calendar day expressed in either UTC time format (hh:mm:ss.sssZ), local time with UTC offset format (hh:mm:ss.sss+/-hh:mm), or local time format (hh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.|Note on the time format:|1) beginning / end of calendar day|00:00:00 = the beginning of a calendar day|24:00:00 = the end of a calendar day|2) fractions of second in time format|Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
    /// </summary>
    public required IsoISOTime Value { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TrfTm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISOTime(Value)); // data type ISOTime System.TimeOnly
        writer.WriteEndElement();
    }
    public static new TransferTime Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
