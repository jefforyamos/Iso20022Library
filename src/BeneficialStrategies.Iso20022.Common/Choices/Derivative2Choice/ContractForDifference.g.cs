//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for ContractForDifference.  ISO2002 ID# _JXb7AWkwEeaLAKoEUNsD9g.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Derivative2Choice;

/// <summary>
/// Details specific for Contract for difference (CFDs).
/// </summary>
public partial record ContractForDifference : Derivative2Choice_
     , IIsoXmlSerilizable<ContractForDifference>
{
    #nullable enable
    
    /// <summary>
    /// Underlying type of the contract for difference.
    /// </summary>
    public required UnderlyingContractForDifferenceType3Code UnderlyingType { get; init; } 
    /// <summary>
    /// Currency 1 of the underlying currency pair.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? NotionalCurrency1 { get; init; } 
    /// <summary>
    /// Currency 2 of the underlying currency pair.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? NotionalCurrency2 { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "UndrlygTp", xmlNamespace );
        writer.WriteValue(UnderlyingType.ToString()); // Enum value
        writer.WriteEndElement();
        if (NotionalCurrency1 is ActiveOrHistoricCurrencyCode NotionalCurrency1Value)
        {
            writer.WriteStartElement(null, "NtnlCcy1", xmlNamespace );
            writer.WriteValue(NotionalCurrency1Value.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NotionalCurrency2 is ActiveOrHistoricCurrencyCode NotionalCurrency2Value)
        {
            writer.WriteStartElement(null, "NtnlCcy2", xmlNamespace );
            writer.WriteValue(NotionalCurrency2Value.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static new ContractForDifference Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
