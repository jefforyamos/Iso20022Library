//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SegregatedIndependentAmount.  ISO2002 ID# _-sdWM4LZEeWrrO9HojbPQA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.ExpectedCollateral2Choice;

/// <summary>
/// Provides the expected collateral type and direction for the segregated independent amount.
/// </summary>
public partial record SegregatedIndependentAmount : ExpectedCollateral2Choice_
     , IIsoXmlSerilizable<SegregatedIndependentAmount>
{
    #nullable enable
    
    /// <summary>
    /// Type of collateral that will be delivered and date by which the collateral movement is expected.
    /// </summary>
    public CollateralMovement9? Delivery { get; init; } 
    /// <summary>
    /// Type of collateral that will be returned and date by which the collateral movement is expected.
    /// </summary>
    public CollateralMovement9? Return { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Delivery is CollateralMovement9 DeliveryValue)
        {
            writer.WriteStartElement(null, "Dlvry", xmlNamespace );
            DeliveryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Return is CollateralMovement9 ReturnValue)
        {
            writer.WriteStartElement(null, "Rtr", xmlNamespace );
            ReturnValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new SegregatedIndependentAmount Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
