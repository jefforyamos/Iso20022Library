//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for RecurrentDate.  ISO2002 ID# _98U8AXltEeG7BsjMvd1mEw_-1677013285.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.FixedOrRecurrentDate1Choice;

/// <summary>
/// Details related to recurrent dates on which the variation is triggered.
/// </summary>
public partial record RecurrentDate : FixedOrRecurrentDate1Choice_
     , IIsoXmlSerilizable<RecurrentDate>
{
    #nullable enable
    
    /// <summary>
    /// Date on which a recurrent date will commence.
    /// </summary>
    public required IsoISODate StartDate { get; init; } 
    /// <summary>
    /// Specifies the regularity of the trigger date.
    /// </summary>
    public required ExternalDateFrequency1Code Frequency { get; init; } 
    /// <summary>
    /// Maximum number of trigger date occurrence cycles.
    /// </summary>
    public required IsoNumber Number { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "StartDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(StartDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Frqcy", xmlNamespace );
        writer.WriteValue(Frequency.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Nb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoNumber(Number)); // data type Number System.UInt64
        writer.WriteEndElement();
    }
    public static new RecurrentDate Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
