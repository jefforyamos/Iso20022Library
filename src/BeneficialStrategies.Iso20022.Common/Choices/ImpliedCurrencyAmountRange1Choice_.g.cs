//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for ImpliedCurrencyAmountRange1Choice.  ISO2002 ID# _O3sLVZlcEeeE1Ya-LgRsuQ.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Choice between ranges of values in which an amount is considered valid or a specified amount value which has to be matched or unmatched to be valid.
/// </summary>
[KnownType(typeof(ImpliedCurrencyAmountRange1Choice.FromAmount))]
[KnownType(typeof(ImpliedCurrencyAmountRange1Choice.ToAmount))]
[KnownType(typeof(ImpliedCurrencyAmountRange1Choice.FromToAmount))]
[KnownType(typeof(ImpliedCurrencyAmountRange1Choice.EqualAmount))]
[KnownType(typeof(ImpliedCurrencyAmountRange1Choice.NotEqualAmount))]
public abstract partial record ImpliedCurrencyAmountRange1Choice_ : IIsoXmlSerilizable<ImpliedCurrencyAmountRange1Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static ImpliedCurrencyAmountRange1Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "FrAmt" => ImpliedCurrencyAmountRange1Choice.FromAmount.Deserialize(elementWithPayload),
             "ToAmt" => ImpliedCurrencyAmountRange1Choice.ToAmount.Deserialize(elementWithPayload),
             "FrToAmt" => ImpliedCurrencyAmountRange1Choice.FromToAmount.Deserialize(elementWithPayload),
             "EQAmt" => ImpliedCurrencyAmountRange1Choice.EqualAmount.Deserialize(elementWithPayload),
             "NEQAmt" => ImpliedCurrencyAmountRange1Choice.NotEqualAmount.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid ImpliedCurrencyAmountRange1Choice choice.")
        };
    }
}
