//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Floating.  ISO2002 ID# _hFv8E6x2Eem81-uIvTF5rQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.InterestRate20Choice;

/// <summary>
/// Details about the variable rate.
/// </summary>
public partial record Floating : InterestRate20Choice_
     , IIsoXmlSerilizable<Floating>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the reference index for the debt instrument.
    /// </summary>
    public BenchmarkCurveName10Choice_? ReferenceRate { get; init; } 
    /// <summary>
    /// Term of the reference rate of the floating rate bond. The term shall be expressed in days, weeks, months or years.
    /// </summary>
    public InterestRateContractTerm2? Term { get; init; } 
    /// <summary>
    /// Information related to payment frequency.
    /// </summary>
    public InterestRateContractTerm2? PaymentFrequency { get; init; } 
    /// <summary>
    /// Information related to reset of payment frequency.
    /// </summary>
    public InterestRateContractTerm2? ResetFrequency { get; init; } 
    /// <summary>
    /// Provides the number of basis points added to (if positive) or deducted from (if negative) the underlying reference rate to calculate the actual interest rate applicable for a given period at issuance of the floating rate instrument.
    /// </summary>
    public IsoDecimalNumber? BasisPointSpread { get; init; } 
    /// <summary>
    /// Specifies the rate adjustments as determined by the rate schedule.
    /// </summary>
    public RateAdjustment1? RateAdjustment { get; init; } 
    /// <summary>
    /// Method for calculating the accrued interest on the principal amount for a fixed rate.
    /// </summary>
    public InterestComputationMethodFormat6Choice_? DayCountBasis { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ReferenceRate is BenchmarkCurveName10Choice_ ReferenceRateValue)
        {
            writer.WriteStartElement(null, "RefRate", xmlNamespace );
            ReferenceRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Term is InterestRateContractTerm2 TermValue)
        {
            writer.WriteStartElement(null, "Term", xmlNamespace );
            TermValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PaymentFrequency is InterestRateContractTerm2 PaymentFrequencyValue)
        {
            writer.WriteStartElement(null, "PmtFrqcy", xmlNamespace );
            PaymentFrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ResetFrequency is InterestRateContractTerm2 ResetFrequencyValue)
        {
            writer.WriteStartElement(null, "RstFrqcy", xmlNamespace );
            ResetFrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BasisPointSpread is IsoDecimalNumber BasisPointSpreadValue)
        {
            writer.WriteStartElement(null, "BsisPtSprd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(BasisPointSpreadValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (RateAdjustment is RateAdjustment1 RateAdjustmentValue)
        {
            writer.WriteStartElement(null, "RateAdjstmnt", xmlNamespace );
            RateAdjustmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DayCountBasis is InterestComputationMethodFormat6Choice_ DayCountBasisValue)
        {
            writer.WriteStartElement(null, "DayCntBsis", xmlNamespace );
            DayCountBasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Floating Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
