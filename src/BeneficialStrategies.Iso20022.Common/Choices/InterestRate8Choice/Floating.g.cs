//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Floating.  ISO2002 ID# _IEREA35aEea2k7EBUopqxw.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.InterestRate8Choice;

/// <summary>
/// Interest rate is a variable / floating rate, based on an index.
/// </summary>
public partial record Floating : InterestRate8Choice_
     , IIsoXmlSerilizable<Floating>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the reference index for the instrument. 
    /// Usage:
    /// Index or name if the reference rate is not included in the index list.
    /// </summary>
    public required BenchmarkCurveName5Choice_ ReferenceRate { get; init; } 
    /// <summary>
    /// Term of the reference rate.
    /// </summary>
    public InterestRateContractTerm2? Term { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RefRate", xmlNamespace );
        ReferenceRate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Term is InterestRateContractTerm2 TermValue)
        {
            writer.WriteStartElement(null, "Term", xmlNamespace );
            TermValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Floating Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
