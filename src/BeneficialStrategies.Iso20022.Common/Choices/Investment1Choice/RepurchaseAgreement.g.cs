//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for RepurchaseAgreement.  ISO2002 ID# _AIsK8LJXEeaYqc4G3TTwhA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Investment1Choice;

/// <summary>
/// Indicates that the investment was made in a repurchase agreement.
/// </summary>
public partial record RepurchaseAgreement : Investment1Choice_
     , IIsoXmlSerilizable<RepurchaseAgreement>
{
    #nullable enable
    
    /// <summary>
    /// Date on which the repurchase agreement matures.
    /// </summary>
    public required IsoISODate MaturityDate { get; init; } 
    /// <summary>
    /// Specifies the repurchase price at maturity of the repo.
    /// </summary>
    public required IsoActiveCurrencyAndAmount SecondLegPrice { get; init; } 
    /// <summary>
    /// Specifies the dirty price of the underlying security or securities in repo.
    /// </summary>
    public required IsoActiveCurrencyAndAmount CollateralMarketValue { get; init; } 
    /// <summary>
    /// Identifies the counterparty to the repurchase agreement.
    /// </summary>
    public required IsoLEIIdentifier Counterparty { get; init; } 
    /// <summary>
    /// Specifies the type of repurchase agreement.
    /// </summary>
    public required RepurchaseAgreementType3Choice_ RepurchaseAgreementType { get; init; } 
    /// <summary>
    /// Identifies the triparty repurchase agent.
    /// </summary>
    public IsoLEIIdentifier? TripartyAgentIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MtrtyDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(MaturityDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ScndLegPric", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(SecondLegPrice)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CollMktVal", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(CollateralMarketValue)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CtrPty", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(Counterparty)); // data type LEIIdentifier System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RpAgrmtTp", xmlNamespace );
        RepurchaseAgreementType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TripartyAgentIdentification is IsoLEIIdentifier TripartyAgentIdentificationValue)
        {
            writer.WriteStartElement(null, "TrptyAgtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(TripartyAgentIdentificationValue)); // data type LEIIdentifier System.String
            writer.WriteEndElement();
        }
    }
    public static new RepurchaseAgreement Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
