//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for CreditTransferMandate.  ISO2002 ID# _a4TwE9cZEeqRFcf2R4bPBw.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.MandateRelatedData2Choice;

/// <summary>
/// Specific credit transfer mandate data.
/// </summary>
public partial record CreditTransferMandate : MandateRelatedData2Choice_
     , IIsoXmlSerilizable<CreditTransferMandate>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification, as assigned by the creditor, to unambiguously identify the mandate.
    /// </summary>
    public IsoMax35Text? MandateIdentification { get; init; } 
    /// <summary>
    /// Specifies the type of mandate, such as paper, electronic or scheme.
    /// </summary>
    public MandateTypeInformation2? Type { get; init; } 
    /// <summary>
    /// Date on which the credit transfer mandate has been signed by the debtor.
    /// </summary>
    public IsoISODate? DateOfSignature { get; init; } 
    /// <summary>
    /// Date on which the credit transfer mandate has been verified.
    /// </summary>
    public IsoISODateTime? DateOfVerification { get; init; } 
    /// <summary>
    /// Additional security provisions, such as a digital signature, as provided by the debtor.
    /// </summary>
    public IsoMax10KBinary? ElectronicSignature { get; init; } 
    /// <summary>
    /// Date of the first payment of a recurrent credit transfer as per the mandate.
    /// </summary>
    public IsoISODate? FirstPaymentDate { get; init; } 
    /// <summary>
    /// Date of the final payment of a recurrent credit transfer as per the mandate.
    /// </summary>
    public IsoISODate? FinalPaymentDate { get; init; } 
    /// <summary>
    /// Regularity with which credit transfer instructions are to be created and processed.
    /// </summary>
    public Frequency36Choice_? Frequency { get; init; } 
    /// <summary>
    /// Reason for the setup of the credit transfer mandate.
    /// Usage: 
    /// The reason will allow the user to distinguish between different mandates for the same creditor.
    /// </summary>
    public MandateSetupReason1Choice_? Reason { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MandateIdentification is IsoMax35Text MandateIdentificationValue)
        {
            writer.WriteStartElement(null, "MndtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MandateIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Type is MandateTypeInformation2 TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DateOfSignature is IsoISODate DateOfSignatureValue)
        {
            writer.WriteStartElement(null, "DtOfSgntr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateOfSignatureValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (DateOfVerification is IsoISODateTime DateOfVerificationValue)
        {
            writer.WriteStartElement(null, "DtOfVrfctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(DateOfVerificationValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (ElectronicSignature is IsoMax10KBinary ElectronicSignatureValue)
        {
            writer.WriteStartElement(null, "ElctrncSgntr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10KBinary(ElectronicSignatureValue)); // data type Max10KBinary System.Byte[]
            writer.WriteEndElement();
        }
        if (FirstPaymentDate is IsoISODate FirstPaymentDateValue)
        {
            writer.WriteStartElement(null, "FrstPmtDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(FirstPaymentDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (FinalPaymentDate is IsoISODate FinalPaymentDateValue)
        {
            writer.WriteStartElement(null, "FnlPmtDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(FinalPaymentDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Frequency is Frequency36Choice_ FrequencyValue)
        {
            writer.WriteStartElement(null, "Frqcy", xmlNamespace );
            FrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Reason is MandateSetupReason1Choice_ ReasonValue)
        {
            writer.WriteStartElement(null, "Rsn", xmlNamespace );
            ReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new CreditTransferMandate Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
