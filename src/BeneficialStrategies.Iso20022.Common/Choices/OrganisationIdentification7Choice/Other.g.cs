//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Other.  ISO2002 ID# _XUZ6A5QEEeiILOjNP8ro1w.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.OrganisationIdentification7Choice;

/// <summary>
/// Unique identification of a counterparty, using a client code or a business identification code.
/// </summary>
public partial record Other : OrganisationIdentification7Choice_
     , IIsoXmlSerilizable<Other>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of the organisation.
    /// </summary>
    public required OrganisationIdentification8Choice_ Identification { get; init; } 
    /// <summary>
    /// Indicates the name of the reporting counterparty.
    /// </summary>
    public IsoMax105Text? Name { get; init; } 
    /// <summary>
    /// Indicates the domicile of counterparty.
    /// </summary>
    public IsoMax500Text? Domicile { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Name is IsoMax105Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax105Text(NameValue)); // data type Max105Text System.String
            writer.WriteEndElement();
        }
        if (Domicile is IsoMax500Text DomicileValue)
        {
            writer.WriteStartElement(null, "Dmcl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax500Text(DomicileValue)); // data type Max500Text System.String
            writer.WriteEndElement();
        }
    }
    public static new Other Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
