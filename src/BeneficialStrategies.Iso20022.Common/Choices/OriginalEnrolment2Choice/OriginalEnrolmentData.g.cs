//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for OriginalEnrolmentData.  ISO2002 ID# _UZbOI-H7Eeqbls7Gk4-ckA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.OriginalEnrolment2Choice;

/// <summary>
/// Provides the original enrolment data.
/// </summary>
public partial record OriginalEnrolmentData : OriginalEnrolment2Choice_
     , IIsoXmlSerilizable<OriginalEnrolmentData>
{
    #nullable enable
    
    /// <summary>
    /// Detailed activation data related to the creditor enrolment.
    /// </summary>
    public required CreditorServiceEnrolment1 Enrolment { get; init; } 
    /// <summary>
    /// Name used by a business for commercial purposes, although its registered legal name, used for contracts and other formal situations, may be another, such as the brand name.
    /// </summary>
    public IsoMax140Text? CreditorTradingName { get; init; } 
    /// <summary>
    /// Party to which an amount of money is due.
    /// </summary>
    public required RTPPartyIdentification1 Creditor { get; init; } 
    /// <summary>
    /// Ultimate party to which an amount of money is due.
    /// </summary>
    public RTPPartyIdentification1? UltimateCreditor { get; init; } 
    /// <summary>
    /// Classification of a business by the types of goods or services it provides.
    /// </summary>
    public required IsoMerchantCategoryCodeIdentifier MerchantCategoryCode { get; init; } 
    /// <summary>
    /// Commercial logo of the creditor.
    /// </summary>
    public IsoMax10KBinary? CreditorLogo { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Enrlmnt", xmlNamespace );
        Enrolment.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CreditorTradingName is IsoMax140Text CreditorTradingNameValue)
        {
            writer.WriteStartElement(null, "CdtrTradgNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(CreditorTradingNameValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Cdtr", xmlNamespace );
        Creditor.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (UltimateCreditor is RTPPartyIdentification1 UltimateCreditorValue)
        {
            writer.WriteStartElement(null, "UltmtCdtr", xmlNamespace );
            UltimateCreditorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "MrchntCtgyCd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMerchantCategoryCodeIdentifier(MerchantCategoryCode)); // data type MerchantCategoryCodeIdentifier System.String
        writer.WriteEndElement();
        if (CreditorLogo is IsoMax10KBinary CreditorLogoValue)
        {
            writer.WriteStartElement(null, "CdtrLogo", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10KBinary(CreditorLogoValue)); // data type Max10KBinary System.Byte[]
            writer.WriteEndElement();
        }
    }
    public static new OriginalEnrolmentData Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
