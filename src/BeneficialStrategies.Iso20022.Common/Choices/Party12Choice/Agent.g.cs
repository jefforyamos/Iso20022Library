//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Agent.  ISO2002 ID# _4O9pIdFmEd-Lq65KLayVeg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Party12Choice;

/// <summary>
/// Identification of a financial institution.
/// </summary>
public partial record Agent : Party12Choice_
     , IIsoXmlSerilizable<Agent>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of a financial institution, as assigned under an internationally recognised or proprietary identification scheme.
    /// </summary>
    public required FinancialInstitutionIdentification8 FinancialInstitutionIdentification { get; init; } 
    /// <summary>
    /// Identifies a specific branch of a financial institution.||Usage: This component should be used in case the identification information in the financial institution component does not provide identification up to branch level.
    /// </summary>
    public BranchData2? BranchIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "FinInstnId", xmlNamespace );
        FinancialInstitutionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BranchIdentification is BranchData2 BranchIdentificationValue)
        {
            writer.WriteStartElement(null, "BrnchId", xmlNamespace );
            BranchIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Agent Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
