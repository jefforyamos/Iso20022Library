//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for IndividualPerson.  ISO2002 ID# _u1elk0KSEeWuG5hmkcJWSQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Party30Choice;

/// <summary>
/// Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person').
/// </summary>
public partial record IndividualPerson : Party30Choice_
     , IIsoXmlSerilizable<IndividualPerson>
{
    #nullable enable
    
    /// <summary>
    /// Term used to address the person.
    /// </summary>
    public NamePrefix1Choice_? NamePrefix { get; init; } 
    /// <summary>
    /// First name of the person.
    /// </summary>
    public IsoMax35Text? GivenName { get; init; } 
    /// <summary>
    /// Second name of the person.
    /// </summary>
    public IsoMax35Text? MiddleName { get; init; } 
    /// <summary>
    /// Name by which the party is known and which is usually used to identify that person.
    /// </summary>
    public required IsoMax350Text Name { get; init; } 
    /// <summary>
    /// Additional information about the person that follows a person's name, for example, qualification such as Doctor of Philosophy (PhD).
    /// </summary>
    public IsoMax35Text? NameSuffix { get; init; } 
    /// <summary>
    /// Gender of the person.
    /// </summary>
    public GenderCode? Gender { get; init; } 
    /// <summary>
    /// Date on which the person was born.
    /// </summary>
    public IsoISODate? BirthDate { get; init; } 
    /// <summary>
    /// Country where the person was born.
    /// </summary>
    public CountryCode? CountryOfBirth { get; init; } 
    /// <summary>
    /// Province where the person was born.
    /// </summary>
    public IsoMax35Text? ProvinceOfBirth { get; init; } 
    /// <summary>
    /// City where the person was born.
    /// </summary>
    public IsoMax35Text? CityOfBirth { get; init; } 
    /// <summary>
    /// Name of the occupation or job of the person.
    /// </summary>
    public IsoMax35Text? Profession { get; init; } 
    /// <summary>
    /// Information related to an address to be inserted, updated or deleted.
    /// </summary>
    public ValueList<ModificationScope34> ModifiedPostalAddress { get; init; } = [];
    /// <summary>
    /// Citizenship information to be inserted or deleted.
    /// </summary>
    public ValueList<ModificationScope3> ModifiedCitizenship { get; init; } = [];
    /// <summary>
    /// Organisation represented by a person, or for which a person works.
    /// </summary>
    public IsoMax140Text? EmployingCompany { get; init; } 
    /// <summary>
    /// Title of the function.
    /// </summary>
    public IsoMax35Text? BusinessFunction { get; init; } 
    /// <summary>
    /// Specifies if due diligence checks on the political exposure of the investor or account servicer have been carried out and whether these checks are national or foreign. (A politically exposed person is someone who has been entrusted with a prominent public function, or an individual who is closely related to such a person.).
    /// </summary>
    public PoliticalExposureType1Choice_? PoliticallyExposedPersonType { get; init; } 
    /// <summary>
    /// Date of death.
    /// </summary>
    public IsoISODate? DeathDate { get; init; } 
    /// <summary>
    /// Civil status of the individual person.
    /// </summary>
    public CivilStatus1Choice_? CivilStatus { get; init; } 
    /// <summary>
    /// Highest level of education reached by the individual person.
    /// </summary>
    public IsoMax35Text? EducationLevel { get; init; } 
    /// <summary>
    /// Information related to the person.
    /// </summary>
    public PersonalInformation1? FamilyInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (NamePrefix is NamePrefix1Choice_ NamePrefixValue)
        {
            writer.WriteStartElement(null, "NmPrfx", xmlNamespace );
            NamePrefixValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GivenName is IsoMax35Text GivenNameValue)
        {
            writer.WriteStartElement(null, "GvnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(GivenNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MiddleName is IsoMax35Text MiddleNameValue)
        {
            writer.WriteStartElement(null, "MddlNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MiddleNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Nm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(Name)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (NameSuffix is IsoMax35Text NameSuffixValue)
        {
            writer.WriteStartElement(null, "NmSfx", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NameSuffixValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Gender is GenderCode GenderValue)
        {
            writer.WriteStartElement(null, "Gndr", xmlNamespace );
            writer.WriteValue(GenderValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (BirthDate is IsoISODate BirthDateValue)
        {
            writer.WriteStartElement(null, "BirthDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(BirthDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CountryOfBirth is CountryCode CountryOfBirthValue)
        {
            writer.WriteStartElement(null, "CtryOfBirth", xmlNamespace );
            writer.WriteValue(CountryOfBirthValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ProvinceOfBirth is IsoMax35Text ProvinceOfBirthValue)
        {
            writer.WriteStartElement(null, "PrvcOfBirth", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ProvinceOfBirthValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CityOfBirth is IsoMax35Text CityOfBirthValue)
        {
            writer.WriteStartElement(null, "CityOfBirth", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CityOfBirthValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Profession is IsoMax35Text ProfessionValue)
        {
            writer.WriteStartElement(null, "Prfssn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ProfessionValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ModfdPstlAdr", xmlNamespace );
        ModifiedPostalAddress.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ModfdCtznsh", xmlNamespace );
        ModifiedCitizenship.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EmployingCompany is IsoMax140Text EmployingCompanyValue)
        {
            writer.WriteStartElement(null, "EmplngCpny", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(EmployingCompanyValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (BusinessFunction is IsoMax35Text BusinessFunctionValue)
        {
            writer.WriteStartElement(null, "BizFctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(BusinessFunctionValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PoliticallyExposedPersonType is PoliticalExposureType1Choice_ PoliticallyExposedPersonTypeValue)
        {
            writer.WriteStartElement(null, "PltclyXpsdPrsnTp", xmlNamespace );
            PoliticallyExposedPersonTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeathDate is IsoISODate DeathDateValue)
        {
            writer.WriteStartElement(null, "DthDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DeathDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CivilStatus is CivilStatus1Choice_ CivilStatusValue)
        {
            writer.WriteStartElement(null, "CvlSts", xmlNamespace );
            CivilStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EducationLevel is IsoMax35Text EducationLevelValue)
        {
            writer.WriteStartElement(null, "EdctnLvl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(EducationLevelValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (FamilyInformation is PersonalInformation1 FamilyInformationValue)
        {
            writer.WriteStartElement(null, "FmlyInf", xmlNamespace );
            FamilyInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new IndividualPerson Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
