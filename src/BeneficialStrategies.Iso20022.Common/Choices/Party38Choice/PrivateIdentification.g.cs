//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for PrivateIdentification.  ISO2002 ID# _6VWvRW48EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Party38Choice;

/// <summary>
/// Unique and unambiguous identification of a person, for example a passport.
/// </summary>
[DataContract(Namespace = "")]
public partial record PrivateIdentification : Party38Choice_
     , IIsoXmlSerilizable<PrivateIdentification>
{
    #nullable enable
    /// <summary>
    /// Date and place of birth of a person.
    /// </summary>
    [DataMember]
    public DateAndPlaceOfBirth1? DateAndPlaceOfBirth { get; init; } 
    /// <summary>
    /// Unique identification of a person, as assigned by an institution, using an identification scheme.
    /// </summary>
    [DataMember]
    public GenericPersonIdentification1? Other { get; init;  } // Warning: Don't know multiplicity.
    #nullable disable
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (DateAndPlaceOfBirth is DateAndPlaceOfBirth1 DateAndPlaceOfBirthValue)
        {
            writer.WriteStartElement(null, "DtAndPlcOfBirth", xmlNamespace );
            DateAndPlaceOfBirthValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        // Not sure how to serialize Other, multiplicity Unknown
    }
    public static new PrivateIdentification Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
