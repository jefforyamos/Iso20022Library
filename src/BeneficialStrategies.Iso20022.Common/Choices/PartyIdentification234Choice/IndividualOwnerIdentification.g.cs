//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for IndividualOwnerIdentification.  ISO2002 ID# _F-iyOR9REeuFz_FaCzCLgQ.
// Copyright 2024 Jeff Ward, Beneficial Strategies. Usage subject to license of enclosing library.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
using System.ComponentModel.DataAnnotations;
#endif
namespace BeneficialStrategies.Iso20022.Choices.PartyIdentification234Choice
{
    /// <summary>
    /// Individual local country specific identification of the owner agreed between the account servicer and account owner.
    /// </summary>
    [IsoId("_F-iyOR9REeuFz_FaCzCLgQ")]
    [DisplayName("Individual Owner Identification")]
    #if DECLARE_SERIALIZABLE
    [Serializable]
    #endif
    #if DECLARE_DATACONTRACT
    [DataContract]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public partial record IndividualOwnerIdentification : PartyIdentification234Choice_
    #else
    public partial class IndividualOwnerIdentification : PartyIdentification234Choice_
    #endif
    {
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        // No constructor needed for NET8 and above.
        #else
        /// <summary>
        /// Constructs a IndividualOwnerIdentification instance using the members the ISO20022 deems required.
        /// It is higly recommended that you update to .NET 8 or above so you can use required initialization syntax instead
        /// </summary>
        public IndividualOwnerIdentification( IdentificationType42Choice_ reqIdentificationType,string reqCountry,System.String reqAlternateIdentification )
        {
            IdentificationType = reqIdentificationType;
            Country = reqCountry;
            AlternateIdentification = reqAlternateIdentification;
        }
        #endif
        #nullable enable
        
        /// <summary>
        /// Specifies the type of alternate identification of the party identified.
        /// </summary>
        [IsoId("_BbMrdR5gEeWE3PufGMdJ3w")]
        [DisplayName("Identification Type")]
        #if DECLARE_DATACONTRACT
        [DataMember(Name="IdTp")]
        #endif
        [IsoXmlTag("IdTp")]
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required IdentificationType42Choice_ IdentificationType { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public required IdentificationType42Choice_ IdentificationType { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public IdentificationType42Choice_ IdentificationType { get; init; } 
        #else
        public IdentificationType42Choice_ IdentificationType { get; set; } 
        #endif
        
        /// <summary>
        /// Country in which a person resides (the place of a person&apos;s home). In the case of a company, it is the country from which the affairs of that company are directed.
        /// </summary>
        [IsoId("_BbMrfR5gEeWE3PufGMdJ3w")]
        [DisplayName("Country")]
        #if DECLARE_DATACONTRACT
        [DataMember(Name="Ctry")]
        #endif
        [IsoXmlTag("Ctry")]
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required CountryCode Country { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public required string Country { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public string Country { get; init; } 
        #else
        public string Country { get; set; } 
        #endif
        
        /// <summary>
        /// Alternate identification for a party.
        /// </summary>
        [IsoId("_BbMrhR5gEeWE3PufGMdJ3w")]
        [DisplayName("Alternate Identification")]
        #if DECLARE_DATACONTRACT
        [DataMember(Name="AltrnId")]
        #endif
        [IsoXmlTag("AltrnId")]
        [IsoSimpleType(IsoSimpleType.Max35Text)]
        [StringLength(maximumLength: 35 ,MinimumLength = 1)]
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required IsoMax35Text AlternateIdentification { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public required System.String AlternateIdentification { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public System.String AlternateIdentification { get; init; } 
        #else
        public System.String AlternateIdentification { get; set; } 
        #endif
        
        
        #nullable disable
        
    }
}
