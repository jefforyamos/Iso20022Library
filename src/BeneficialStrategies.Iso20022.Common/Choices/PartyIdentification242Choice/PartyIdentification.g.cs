//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for PartyIdentification.  ISO2002 ID# _BXmqtwN1Ee2-vqzwMUAewg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.PartyIdentification242Choice;

/// <summary>
/// Party Identification specified as a list of values per element.
/// </summary>
public partial record PartyIdentification : PartyIdentification242Choice_
     , IIsoXmlSerilizable<PartyIdentification>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the party expressed as the party's name.
    /// </summary>
    public IsoMax34Text? PartyName { get; init; } 
    /// <summary>
    /// Identification of the party expressed as a BIC and an optional alternative identifier.
    /// </summary>
    public PartyIdentification265? AnyBIC { get; init; } 
    /// <summary>
    /// Provides the party's account number.
    /// </summary>
    public IsoMax34Text? AccountNumber { get; init; } 
    /// <summary>
    /// Provides the party's address.
    /// </summary>
    public IsoMax105Text? Address { get; init; } 
    /// <summary>
    /// Choice of a clearing system identifier.
    /// </summary>
    public ClearingSystemIdentification2Choice_? ClearingSystemIdentification { get; init; } 
    /// <summary>
    /// Provides the Legal Entity Identifier. This is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)".
    /// </summary>
    public IsoLEIIdentifier? LegalEntityIdentifier { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PartyName is IsoMax34Text PartyNameValue)
        {
            writer.WriteStartElement(null, "PtyNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax34Text(PartyNameValue)); // data type Max34Text System.String
            writer.WriteEndElement();
        }
        if (AnyBIC is PartyIdentification265 AnyBICValue)
        {
            writer.WriteStartElement(null, "AnyBIC", xmlNamespace );
            AnyBICValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountNumber is IsoMax34Text AccountNumberValue)
        {
            writer.WriteStartElement(null, "AcctNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax34Text(AccountNumberValue)); // data type Max34Text System.String
            writer.WriteEndElement();
        }
        if (Address is IsoMax105Text AddressValue)
        {
            writer.WriteStartElement(null, "Adr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax105Text(AddressValue)); // data type Max105Text System.String
            writer.WriteEndElement();
        }
        if (ClearingSystemIdentification is ClearingSystemIdentification2Choice_ ClearingSystemIdentificationValue)
        {
            writer.WriteStartElement(null, "ClrSysId", xmlNamespace );
            ClearingSystemIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LegalEntityIdentifier is IsoLEIIdentifier LegalEntityIdentifierValue)
        {
            writer.WriteStartElement(null, "LglNttyIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(LegalEntityIdentifierValue)); // data type LEIIdentifier System.String
            writer.WriteEndElement();
        }
    }
    public static new PartyIdentification Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
