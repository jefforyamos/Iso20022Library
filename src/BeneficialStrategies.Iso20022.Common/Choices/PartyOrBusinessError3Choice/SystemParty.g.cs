//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SystemParty.  ISO2002 ID# _0NEVY4wXEei289CGNqs21g.
//

using BeneficialStrategies.Iso20022.Components;

namespace BeneficialStrategies.Iso20022.Choices.PartyOrBusinessError3Choice;

/// <summary>
/// Specifications of a party defined within a system.
/// </summary>
public partial record SystemParty : IPartyOrBusinessError3Choice
{
    #nullable enable
    /// <summary>
    /// Unique identification of the party within the system.
    /// </summary>
    public SystemPartyIdentification9? PartyIdentification { get; init; } 
    /// <summary>
    /// Information that locates and identifies a specific address.
    /// </summary>
    public PostalAddress25? Address { get; init; } 
    /// <summary>
    /// Specifies the options on how to contact the party.
    /// </summary>
    public Contact5? ContactDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies the opening date of the party.
    /// </summary>
    public IsoISODate? OpeningDate { get; init; } 
    /// <summary>
    /// Specifies the closing date of the party.
    /// </summary>
    public IsoISODate? ClosingDate { get; init; } 
    /// <summary>
    /// Specifies the type classification of the party.
    /// </summary>
    public ISystemPartyType1Choice? Type { get; init; } 
    /// <summary>
    /// Unique technical address to unambiguously identify a party for receiving messages from the executing system.
    /// </summary>
    public ITechnicalIdentification2Choice? TechnicalAddress { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Additional attributes defined by a central security depositary for a party.
    /// </summary>
    public MarketSpecificAttribute1? MarketSpecificAttribute { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Name by which a party is known and which is usually used to identify that party.
    /// </summary>
    public PartyName4? Name { get; init; } 
    /// <summary>
    /// Specifies the type of residence where the party has its permanent home or principal establishment.
    /// </summary>
    public ResidenceType1Code? ResidenceType { get; init; } 
    /// <summary>
    /// Specifies whether the party is locked or not, and the reason for this status, when required.
    /// </summary>
    public PartyLockStatus1? LockStatus { get; init; } 
    /// <summary>
    /// Defines the specific processing characteristics for a party to ensure configurability of specific requirements, as prescribed by national legal and regulatory requirements and practices.
    /// </summary>
    public SystemRestriction1? Restriction { get; init;  } // Warning: Don't know multiplicity.
    #nullable disable
}
