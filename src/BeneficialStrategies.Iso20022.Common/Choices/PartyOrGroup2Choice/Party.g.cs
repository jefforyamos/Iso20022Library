//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Party.  ISO2002 ID# _DDQTg249EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.PartyOrGroup2Choice;

/// <summary>
/// Specifies a party.
/// </summary>
public partial record Party : PartyOrGroup2Choice_
     , IIsoXmlSerilizable<Party>
{
    #nullable enable
    
    public required PartyIdentification135 Value { get; init; } 
    /// <summary>
    /// Security certificate used to sign electronically.
    /// </summary>
    public IsoMax10KBinary? Certificate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Pty", xmlNamespace );
        Value.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Certificate is IsoMax10KBinary CertificateValue)
        {
            writer.WriteStartElement(null, "Cert", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10KBinary(CertificateValue)); // data type Max10KBinary System.Byte[]
            writer.WriteEndElement();
        }
    }
    public static new Party Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
