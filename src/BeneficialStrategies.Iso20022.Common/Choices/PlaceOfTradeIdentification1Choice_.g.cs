//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for PlaceOfTradeIdentification1Choice.  ISO2002 ID# _TCWUu9p-Ed-ak6NoX_4Aeg_-2100921873.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Context, or geographic environment, in which trading parties may meet in order to negotiate and execute trades among themselves.
/// </summary>
[KnownType(typeof(PlaceOfTradeIdentification1Choice.Country))]
[KnownType(typeof(PlaceOfTradeIdentification1Choice.Exchange))]
[KnownType(typeof(PlaceOfTradeIdentification1Choice.Party))]
[KnownType(typeof(PlaceOfTradeIdentification1Choice.OverTheCounter))]
public abstract partial record PlaceOfTradeIdentification1Choice_ : IIsoXmlSerilizable<PlaceOfTradeIdentification1Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static PlaceOfTradeIdentification1Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "Ctry" => PlaceOfTradeIdentification1Choice.Country.Deserialize(elementWithPayload),
             "Xchg" => PlaceOfTradeIdentification1Choice.Exchange.Deserialize(elementWithPayload),
             "Pty" => PlaceOfTradeIdentification1Choice.Party.Deserialize(elementWithPayload),
             "OverTheCntr" => PlaceOfTradeIdentification1Choice.OverTheCounter.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid PlaceOfTradeIdentification1Choice choice.")
        };
    }
}
