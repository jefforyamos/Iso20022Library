//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by AbstractChoiceGenerator for PriceFormat7Choice.  ISO2002 ID# _Q4qEUNp-Ed-ak6NoX_4Aeg_354313475.
//

using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices;

/// <summary>
/// Choice between a percentage price or an amount price or an amount price per amount or an amount price per financial instrument quantity.
/// </summary>
[KnownType(typeof(PriceFormat7Choice.PercentagePrice))]
[KnownType(typeof(PriceFormat7Choice.AmountPrice))]
[KnownType(typeof(PriceFormat7Choice.AmountPricePerFinancialInstrumentQuantity))]
[KnownType(typeof(PriceFormat7Choice.AmountPricePerAmount))]
public abstract partial record PriceFormat7Choice_ : IIsoXmlSerilizable<PriceFormat7Choice_>
{
    /// <summary>
    /// Serialize the state of this record per ISO 20022 specifications.
    /// Abstract here, overridden in each of the concrete choices.
    /// </summary>
    public abstract void Serialize(XmlWriter writer, string xmlNamespace);
    
    /// <summary>
    /// After detecting the choice being deserialized, defers the serialization of the element to the appropriate concrete choice record.
    /// </summary>
    public static PriceFormat7Choice_ Deserialize(XElement element)
    {
        var elementWithPayload = element;
        return elementWithPayload.Name.LocalName switch
        {
             "PctgPric" => PriceFormat7Choice.PercentagePrice.Deserialize(elementWithPayload),
             "AmtPric" => PriceFormat7Choice.AmountPrice.Deserialize(elementWithPayload),
             "AmtPricPerFinInstrmQty" => PriceFormat7Choice.AmountPricePerFinancialInstrumentQuantity.Deserialize(elementWithPayload),
             "AmtPricPerAmt" => PriceFormat7Choice.AmountPricePerAmount.Deserialize(elementWithPayload),
            _ => throw new InvalidOperationException($@"Xml tag '{elementWithPayload.Name.LocalName}' does not correspond to a valid PriceFormat7Choice choice.")
        };
    }
}
