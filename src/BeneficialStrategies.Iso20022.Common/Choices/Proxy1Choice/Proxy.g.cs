//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Proxy.  ISO2002 ID# _RD1Zkdp-Ed-ak6NoX_4Aeg_2099927655.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Proxy1Choice;

/// <summary>
/// Specifies the elements required to assign a proxy.
/// </summary>
public partial record Proxy : Proxy1Choice_
     , IIsoXmlSerilizable<Proxy>
{
    #nullable enable
    
    /// <summary>
    /// Indicates how to register a proxy.
    /// </summary>
    public IsoMax350Text? RegistrationMethod { get; init; } 
    /// <summary>
    /// Date by which the information on proxy assignment must be received by the intermediary.
    /// </summary>
    public DateFormat2Choice_? Deadline { get; init; } 
    /// <summary>
    /// Date by which the information on proxy assignment must be received by the intermediary (STP mode).
    /// </summary>
    public DateFormat2Choice_? STPDeadline { get; init; } 
    /// <summary>
    /// Date by which the information on proxy assignment must be received by the issuer.
    /// </summary>
    public DateFormat2Choice_? MarketDeadline { get; init; } 
    /// <summary>
    /// Specifies the proxy persons which are authorised by the issuer.
    /// </summary>
    public ValueList<Proxy3> AuthorisedProxy { get; init; } = [];
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (RegistrationMethod is IsoMax350Text RegistrationMethodValue)
        {
            writer.WriteStartElement(null, "RegnMtd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(RegistrationMethodValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (Deadline is DateFormat2Choice_ DeadlineValue)
        {
            writer.WriteStartElement(null, "Ddln", xmlNamespace );
            DeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (STPDeadline is DateFormat2Choice_ STPDeadlineValue)
        {
            writer.WriteStartElement(null, "STPDdln", xmlNamespace );
            STPDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketDeadline is DateFormat2Choice_ MarketDeadlineValue)
        {
            writer.WriteStartElement(null, "MktDdln", xmlNamespace );
            MarketDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AuthrsdPrxy", xmlNamespace );
        AuthorisedProxy.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static new Proxy Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
