//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for ReportingRequirement.  ISO2002 ID# _IVUQMV55Ee2a_-MvhEjKmA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.ReportingRequirement2Choice;

/// <summary>
/// Specifies categories of statuses of a derivative when there is a reporting requirement for both counterparties.
/// </summary>
public partial record ReportingRequirement : ReportingRequirement2Choice_
     , IIsoXmlSerilizable<ReportingRequirement>
{
    #nullable enable
    
    /// <summary>
    /// Indicator of receiving only one side or both sides of the derivatives.
    /// </summary>
    public required TradeRepositoryReportingType1Code ReportingType { get; init; } 
    /// <summary>
    /// Indicator of side identification of the same derivative.
    /// </summary>
    public required PairingStatus1Code Pairing { get; init; } 
    /// <summary>
    /// Indicator if reconciliation of derivatives for which all the reconcilable fields are within the allowed tolerances.
    /// </summary>
    public required ReconciliationStatus1Code Reconciliation { get; init; } 
    /// <summary>
    /// Indicator if reconciliation of derivatives for which all the reconcilable fields are within the allowed tolerances.
    /// </summary>
    public required ReconciliationStatus2Code ValuationReconciliation { get; init; } 
    /// <summary>
    /// Indicator of derivative reopening, terminated or cancelled by mistake.
    /// </summary>
    public required IsoYesNoIndicator Revived { get; init; } 
    /// <summary>
    /// Indicator of modification to the terms or details of a previously reported derivative, at a trade or position level, but not a correction of a report.
    /// </summary>
    public required IsoYesNoIndicator FurtherModification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptgTp", xmlNamespace );
        writer.WriteValue(ReportingType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Pairg", xmlNamespace );
        writer.WriteValue(Pairing.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rcncltn", xmlNamespace );
        writer.WriteValue(Reconciliation.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ValtnRcncltn", xmlNamespace );
        writer.WriteValue(ValuationReconciliation.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rvvd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(Revived)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FrthrMod", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(FurtherModification)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static new ReportingRequirement Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
