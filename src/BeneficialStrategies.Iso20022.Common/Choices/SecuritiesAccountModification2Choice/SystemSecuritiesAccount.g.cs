//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SystemSecuritiesAccount.  ISO2002 ID# _8IwTgTp0Eemk2e6qGBk8IQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecuritiesAccountModification2Choice;

/// <summary>
/// Account to or from which a securities entry is made.
/// </summary>
public partial record SystemSecuritiesAccount : SecuritiesAccountModification2Choice_
     , IIsoXmlSerilizable<SystemSecuritiesAccount>
{
    #nullable enable
    
    /// <summary>
    /// Legal closing date of the securities account.
    /// </summary>
    public IsoISODate? ClosingDate { get; init; } 
    /// <summary>
    /// Indicates whether the securities account is on hold or not.
    /// Usage:
    /// - Meaning when true: account is in hold status.
    /// - Meaning when false: account is in release status.
    /// </summary>
    public IsoTrueFalseIndicator? HoldIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the securities account can hold a negative position in a security or not.
    /// </summary>
    public IsoTrueFalseIndicator? NegativePosition { get; init; } 
    /// <summary>
    /// Specifies information to identify securities accounts where allocation instructions are posted.
    /// </summary>
    public IsoExact4AlphaNumericText? EndInvestorFlag { get; init; } 
    /// <summary>
    /// Defines how the price is applied to the securities account.
    /// </summary>
    public IsoExact4AlphaNumericText? PricingScheme { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ClosingDate is IsoISODate ClosingDateValue)
        {
            writer.WriteStartElement(null, "ClsgDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(ClosingDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (HoldIndicator is IsoTrueFalseIndicator HoldIndicatorValue)
        {
            writer.WriteStartElement(null, "HldInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(HoldIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (NegativePosition is IsoTrueFalseIndicator NegativePositionValue)
        {
            writer.WriteStartElement(null, "NegPos", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(NegativePositionValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (EndInvestorFlag is IsoExact4AlphaNumericText EndInvestorFlagValue)
        {
            writer.WriteStartElement(null, "EndInvstrFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4AlphaNumericText(EndInvestorFlagValue)); // data type Exact4AlphaNumericText System.String
            writer.WriteEndElement();
        }
        if (PricingScheme is IsoExact4AlphaNumericText PricingSchemeValue)
        {
            writer.WriteStartElement(null, "PricgSchme", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4AlphaNumericText(PricingSchemeValue)); // data type Exact4AlphaNumericText System.String
            writer.WriteEndElement();
        }
    }
    public static new SystemSecuritiesAccount Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
