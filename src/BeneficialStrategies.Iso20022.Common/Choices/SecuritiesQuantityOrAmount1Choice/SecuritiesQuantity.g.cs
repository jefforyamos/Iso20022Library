//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SecuritiesQuantity.  ISO2002 ID# _Gql3oIlYEeavwKddCbm3hg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecuritiesQuantityOrAmount1Choice;

/// <summary>
/// Provides information about securities quantity linked to a corporate action option.
/// </summary>
public partial record SecuritiesQuantity : SecuritiesQuantityOrAmount1Choice_
     , IIsoXmlSerilizable<SecuritiesQuantity>
{
    #nullable enable
    
    /// <summary>
    /// Minimum quantity of securities to be accepted (used in the framework of conditional privilege on election). In case of proration, if this minimum quantity is not reached then the instruction is void.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? ConditionalQuantity { get; init; } 
    /// <summary>
    /// Quantity of securities to which this instruction applies.
    /// </summary>
    public required Quantity40Choice_ InstructedQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ConditionalQuantity is FinancialInstrumentQuantity15Choice_ ConditionalQuantityValue)
        {
            writer.WriteStartElement(null, "CondlQty", xmlNamespace );
            ConditionalQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InstdQty", xmlNamespace );
        InstructedQuantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static new SecuritiesQuantity Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
