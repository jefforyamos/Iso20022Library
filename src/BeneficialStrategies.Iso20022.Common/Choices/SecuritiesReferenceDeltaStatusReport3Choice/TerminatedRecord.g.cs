//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for TerminatedRecord.  ISO2002 ID# _PjgBpSdoEei12pGEsJIAeQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecuritiesReferenceDeltaStatusReport3Choice;

/// <summary>
/// Specifies instruments which have been terminated / have reached there pre-set termination data and are no longer valid instruments.
/// </summary>
public partial record TerminatedRecord : SecuritiesReferenceDeltaStatusReport3Choice_
     , IIsoXmlSerilizable<TerminatedRecord>
{
    #nullable enable
    
    /// <summary>
    /// Unique identifier of a record in a message used as part of error management and status advice message.
    /// Usage:
    /// This identification will be used in the status advice report sent back.
    /// </summary>
    public IsoMax35Text? TechnicalRecordIdentification { get; init; } 
    /// <summary>
    /// Attributes and characteristics of the financial instrument.
    /// </summary>
    public required SecurityInstrumentDescription9 FinancialInstrumentGeneralAttributes { get; init; } 
    /// <summary>
    /// LEI of Issuer or trading venue operator.
    /// </summary>
    public required IsoLEIIdentifier Issuer { get; init; } 
    /// <summary>
    /// Traded venue related attributes.
    /// </summary>
    public TradingVenueAttributes1? TradingVenueRelatedAttributes { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _LGQmKyX7EeigZbhgJcrASA
    /// <summary>
    /// Attributes specific to debt instruments.
    /// </summary>
    public DebtInstrument2? DebtInstrumentAttributes { get; init; } 
    /// <summary>
    /// Attributes specific to derivative instruments.
    /// </summary>
    public DerivativeInstrument5? DerivativeInstrumentAttributes { get; init; } 
    /// <summary>
    /// Technical attributes.
    /// </summary>
    public RecordTechnicalData4? TechnicalAttributes { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TechnicalRecordIdentification is IsoMax35Text TechnicalRecordIdentificationValue)
        {
            writer.WriteStartElement(null, "TechRcrdId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TechnicalRecordIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FinInstrmGnlAttrbts", xmlNamespace );
        FinancialInstrumentGeneralAttributes.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Issr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(Issuer)); // data type LEIIdentifier System.String
        writer.WriteEndElement();
        // Not sure how to serialize TradingVenueRelatedAttributes, multiplicity Unknown
        if (DebtInstrumentAttributes is DebtInstrument2 DebtInstrumentAttributesValue)
        {
            writer.WriteStartElement(null, "DebtInstrmAttrbts", xmlNamespace );
            DebtInstrumentAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DerivativeInstrumentAttributes is DerivativeInstrument5 DerivativeInstrumentAttributesValue)
        {
            writer.WriteStartElement(null, "DerivInstrmAttrbts", xmlNamespace );
            DerivativeInstrumentAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TechnicalAttributes is RecordTechnicalData4 TechnicalAttributesValue)
        {
            writer.WriteStartElement(null, "TechAttrbts", xmlNamespace );
            TechnicalAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new TerminatedRecord Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
