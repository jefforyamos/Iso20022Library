//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for DigitalTokenPrice.  ISO2002 ID# _fc2HMKOrEe2UDKy7o9_HIg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecuritiesTransactionPrice22Choice;

/// <summary>
/// Predetermined price at which the holder will have to buy or sell the underlying instrument, when the price is available in both monetary value and digital token amount.
/// </summary>
public partial record DigitalTokenPrice : SecuritiesTransactionPrice22Choice_
     , IIsoXmlSerilizable<DigitalTokenPrice>
{
    #nullable enable
    
    /// <summary>
    /// Price expressed as a monetary value.
    /// </summary>
    public required AmountAndDirection61 MonetaryValue { get; init; } 
    /// <summary>
    /// Price expressed as a number of digital tokens.
    /// </summary>
    public required DigitalTokenAmount2 DigitalTokenQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MntryVal", xmlNamespace );
        MonetaryValue.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DgtlTknQty", xmlNamespace );
        DigitalTokenQuantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static new DigitalTokenPrice Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
