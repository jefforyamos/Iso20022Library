//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Commodity.  ISO2002 ID# _Ul6y88gyEeuGrNSsxk3B0A.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecurityCommodity7Choice;

/// <summary>
/// Data specific to commodities being subject to the transaction.
/// </summary>
public partial record Commodity : SecurityCommodity7Choice_
     , IIsoXmlSerilizable<Commodity>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether the values defined asset class commodity are matching or not.
    /// </summary>
    public CompareCommodityAssetClass3? Classification { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as decimal number are matching or not.
    /// </summary>
    public CompareDecimalNumber3? Quantity { get; init; } 
    /// <summary>
    /// Specifies whether the the unit prices are matching or not.
    /// </summary>
    public CompareUnitPrice6? UnitPrice { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareAmountAndDirection2? MarketValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as unit of measure code are matching or not.
    /// </summary>
    public CompareUnitOfMeasure3? UnitOfMeasure { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Classification is CompareCommodityAssetClass3 ClassificationValue)
        {
            writer.WriteStartElement(null, "Clssfctn", xmlNamespace );
            ClassificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Quantity is CompareDecimalNumber3 QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            QuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnitPrice is CompareUnitPrice6 UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            UnitPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketValue is CompareAmountAndDirection2 MarketValueValue)
        {
            writer.WriteStartElement(null, "MktVal", xmlNamespace );
            MarketValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnitOfMeasure is CompareUnitOfMeasure3 UnitOfMeasureValue)
        {
            writer.WriteStartElement(null, "UnitOfMeasr", xmlNamespace );
            UnitOfMeasureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Commodity Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
