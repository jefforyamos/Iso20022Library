//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for InstrumentDescription.  ISO2002 ID# _TBKB8tp-Ed-ak6NoX_4Aeg_-1421894924.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.SecurityIdentification6Choice;

/// <summary>
/// Provides the ability to describe the instrument through a description and main characteristics.
/// </summary>
public partial record InstrumentDescription : SecurityIdentification6Choice_
     , IIsoXmlSerilizable<InstrumentDescription>
{
    #nullable enable
    
    /// <summary>
    /// Description of the security.
    /// </summary>
    public IsoMax350Text? Description { get; init; } 
    /// <summary>
    /// Classification type of the financial instrument, as per the ISO Classification of Financial Instrument (CFI) codification, eg, common share with voting rights, fully paid, or registered.
    /// </summary>
    public SecurityClassificationType1Choice_? ClassificationType { get; init; } 
    /// <summary>
    /// Provides the place of listing using a market identifier code (MIC).
    /// </summary>
    public IsoMICIdentifier? PlaceOfListing { get; init; } 
    /// <summary>
    /// Exercise date/time of a derivative contract.
    /// </summary>
    public IsoISODate? ExerciseDate { get; init; } 
    /// <summary>
    /// Maturity date/time at which an interest bearing security becomes due.
    /// </summary>
    public IsoISODate? MaturityDate { get; init; } 
    /// <summary>
    /// Specifies whether it is a call option (right to purchase a specific underlying asset) or a put option (right to sell a specific underlying asset).
    /// </summary>
    public OptionTypeCode? OptionType { get; init; } 
    /// <summary>
    /// Predetermined price at which the holder will have to buy or sell the underlying instrument.
    /// </summary>
    public PriceRateOrAmountChoice_? StrikePrice { get; init; } 
    /// <summary>
    /// Indicates the ratio or multiplying factor used to convert one contract into a quantity. In the case of an equity or a bond, the price multiplier is 1.
    /// </summary>
    public IsoBaseOneRate? Multiplier { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Description is IsoMax350Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(DescriptionValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ClassificationType is SecurityClassificationType1Choice_ ClassificationTypeValue)
        {
            writer.WriteStartElement(null, "ClssfctnTp", xmlNamespace );
            ClassificationTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PlaceOfListing is IsoMICIdentifier PlaceOfListingValue)
        {
            writer.WriteStartElement(null, "PlcOfListg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMICIdentifier(PlaceOfListingValue)); // data type MICIdentifier System.String
            writer.WriteEndElement();
        }
        if (ExerciseDate is IsoISODate ExerciseDateValue)
        {
            writer.WriteStartElement(null, "ExrcDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(ExerciseDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (MaturityDate is IsoISODate MaturityDateValue)
        {
            writer.WriteStartElement(null, "MtrtyDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(MaturityDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (OptionType is OptionTypeCode OptionTypeValue)
        {
            writer.WriteStartElement(null, "OptnTp", xmlNamespace );
            writer.WriteValue(OptionTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (StrikePrice is PriceRateOrAmountChoice_ StrikePriceValue)
        {
            writer.WriteStartElement(null, "StrkPric", xmlNamespace );
            StrikePriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Multiplier is IsoBaseOneRate MultiplierValue)
        {
            writer.WriteStartElement(null, "Mltplr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOneRate(MultiplierValue)); // data type BaseOneRate System.Decimal
            writer.WriteEndElement();
        }
    }
    public static new InstrumentDescription Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
