//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Debit.  ISO2002 ID# _7HIKc248EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
using System.ComponentModel.DataAnnotations;
#endif
namespace BeneficialStrategies.Iso20022.Choices.SettlementMethod2Choice
{
    /// <summary>
    /// Specifies details of the payment to be made by the new account servicer to the old account servicer in case of a negative closing balance.
    /// </summary>
    [IsoId("_7HIKc248EeiU9cctagi5ow")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Debit")]
    #endif
    #if DECLARE_SERIALIZABLE
    [Serializable]
    #endif
    #if DECLARE_DATACONTRACT
    [DataContract]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public partial record Debit : SettlementMethod2Choice_
    #else
    public partial class Debit : SettlementMethod2Choice_
    #endif
    {
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        // No constructor needed for NET8 and above.
        #else
        /// <summary>
        /// Constructs a Debit instance using the members the ISO20022 deems required.
        /// It is higly recommended that you update to .NET 8 or above so you can use required initialization syntax instead
        /// </summary>
        public Debit( PaymentIdentification6 reqPaymentIdentification,System.Decimal reqAmount,BranchAndFinancialInstitutionIdentification6 reqCreditorAgent )
        {
            PaymentIdentification = reqPaymentIdentification;
            Amount = reqAmount;
            CreditorAgent = reqCreditorAgent;
        }
        #endif
        #nullable enable
        
        /// <summary>
        /// Set of elements used to reference a payment instruction. 
        /// </summary>
        [IsoId("_7RaH3W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Payment Identification")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required PaymentIdentification6 PaymentIdentification { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public PaymentIdentification6 PaymentIdentification { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PaymentIdentification6 PaymentIdentification { get; init; } 
        #else
        public PaymentIdentification6 PaymentIdentification { get; set; } 
        #endif
        
        /// <summary>
        /// Set of elements used to further specify the type of transaction.
        /// </summary>
        [IsoId("_7RaH3248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Payment Type Information")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public PaymentTypeInformation26? PaymentTypeInformation { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PaymentTypeInformation26? PaymentTypeInformation { get; init; } 
        #else
        public PaymentTypeInformation26? PaymentTypeInformation { get; set; } 
        #endif
        
        /// <summary>
        /// Specifies the rate of tax levied.
        /// </summary>
        [IsoId("_7RaH4W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Tax Rate Marker")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public TaxRateMarker1Code? TaxRateMarker { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public TaxRateMarker1Code? TaxRateMarker { get; init; } 
        #else
        public TaxRateMarker1Code? TaxRateMarker { get; set; } 
        #endif
        
        /// <summary>
        /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
        /// </summary>
        [IsoId("_7RaH4248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Amount")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required IsoActiveCurrencyAndAmount Amount { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public System.Decimal Amount { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public System.Decimal Amount { get; init; } 
        #else
        public System.Decimal Amount { get; set; } 
        #endif
        
        /// <summary>
        /// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
        /// </summary>
        [IsoId("_7RaH5W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Charge Bearer")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public ChargeBearerType1Code? ChargeBearer { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public ChargeBearerType1Code? ChargeBearer { get; init; } 
        #else
        public ChargeBearerType1Code? ChargeBearer { get; set; } 
        #endif
        
        /// <summary>
        /// Set of elements needed to issue a cheque.
        /// </summary>
        [IsoId("_7RaH5248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Cheque Instruction")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Cheque11? ChequeInstruction { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Cheque11? ChequeInstruction { get; init; } 
        #else
        public Cheque11? ChequeInstruction { get; set; } 
        #endif
        
        /// <summary>
        /// The schedule for a credit payment arrangement. 
        /// </summary>
        [IsoId("_7RaH6W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Frequency")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Frequency1? Frequency { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Frequency1? Frequency { get; init; } 
        #else
        public Frequency1? Frequency { get; set; } 
        #endif
        
        /// <summary>
        /// Provides further information about the status of transferred scheduled payment(s).
        /// </summary>
        [IsoId("_7RaH6248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Transfer Instruction")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public TransferInstruction1? TransferInstruction { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public TransferInstruction1? TransferInstruction { get; init; } 
        #else
        public TransferInstruction1? TransferInstruction { get; set; } 
        #endif
        
        /// <summary>
        /// Ultimate party that owes an amount of money to the (ultimate) creditor.
        /// </summary>
        [IsoId("_7RaH7W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Ultimate Debtor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public PartyIdentification135? UltimateDebtor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PartyIdentification135? UltimateDebtor { get; init; } 
        #else
        public PartyIdentification135? UltimateDebtor { get; set; } 
        #endif
        
        /// <summary>
        /// Agent between the debtor's agent and the creditor's agent.||Usage: If more than one intermediary agent is present, then IntermediaryAgent1 identifies the agent between the DebtorAgent and the IntermediaryAgent2.
        /// </summary>
        [IsoId("_7RaH7248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Intermediary Agent")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent1 { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent1 { get; init; } 
        #else
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent1 { get; set; } 
        #endif
        
        /// <summary>
        /// Agent between the debtor's agent and the creditor's agent.||Usage: If more than two intermediary agents are present, then IntermediaryAgent2 identifies the agent between the IntermediaryAgent1 and the IntermediaryAgent3.
        /// </summary>
        [IsoId("_7RaH8W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Intermediary Agent")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent2 { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent2 { get; init; } 
        #else
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent2 { get; set; } 
        #endif
        
        /// <summary>
        /// Agent between the debtor's agent and the creditor's agent.||Usage: If IntermediaryAgent3 is present, then it identifies the agent between the IntermediaryAgent 2 and the CreditorAgent.
        /// </summary>
        [IsoId("_7RaH8248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Intermediary Agent")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent3 { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent3 { get; init; } 
        #else
        public BranchAndFinancialInstitutionIdentification6? IntermediaryAgent3 { get; set; } 
        #endif
        
        /// <summary>
        /// Financial institution servicing an account for the creditor.
        /// </summary>
        [IsoId("_7RaH9W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Creditor Agent")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public required BranchAndFinancialInstitutionIdentification6 CreditorAgent { get; init; } 
        #elif NET7_0_OR_GREATER // C# 11 Records, required members
        public BranchAndFinancialInstitutionIdentification6 CreditorAgent { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public BranchAndFinancialInstitutionIdentification6 CreditorAgent { get; init; } 
        #else
        public BranchAndFinancialInstitutionIdentification6 CreditorAgent { get; set; } 
        #endif
        
        /// <summary>
        /// Party to which an amount of money is due.
        /// </summary>
        [IsoId("_7RaH9248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Creditor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public PartyIdentification135? Creditor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PartyIdentification135? Creditor { get; init; } 
        #else
        public PartyIdentification135? Creditor { get; set; } 
        #endif
        
        /// <summary>
        /// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
        /// </summary>
        [IsoId("_7RaH-W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Creditor Account")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public CashAccount38? CreditorAccount { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public CashAccount38? CreditorAccount { get; init; } 
        #else
        public CashAccount38? CreditorAccount { get; set; } 
        #endif
        
        /// <summary>
        /// Ultimate party to which an amount of money is due.
        /// </summary>
        [IsoId("_7RaH-248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Ultimate Creditor")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public PartyIdentification135? UltimateCreditor { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public PartyIdentification135? UltimateCreditor { get; init; } 
        #else
        public PartyIdentification135? UltimateCreditor { get; set; } 
        #endif
        
        /// <summary>
        /// Further information related to the processing of the payment instruction, provided by the initiating party, and intended for the creditor agent.
        /// </summary>
        [IsoId("_7RaH_W48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Instruction For Creditor Agent")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public InstructionForCreditorAgent1? InstructionForCreditorAgent { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public InstructionForCreditorAgent1? InstructionForCreditorAgent { get; init; } 
        #else
        public InstructionForCreditorAgent1? InstructionForCreditorAgent { get; set; } 
        #endif
        
        /// <summary>
        /// Underlying reason for the payment transaction.
        /// Usage: Purpose is used by the end-customers, that is initiating party, (ultimate) debtor, (ultimate) creditor to provide information concerning the nature of the payment. Purpose is a content element, which is not used for processing by any of the agents involved in the payment chain.
        /// </summary>
        [IsoId("_7RaH_248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Purpose")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public Purpose2Choice_? Purpose { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public Purpose2Choice_? Purpose { get; init; } 
        #else
        public Purpose2Choice_? Purpose { get; set; } 
        #endif
        
        /// <summary>
        /// Information needed due to regulatory and statutory requirements.
        /// </summary>
        [IsoId("_7RaIAW48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Regulatory Reporting")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [MinLength(0)]
        [MaxLength(10)]
        #endif
        public ValueList<RegulatoryReporting3> RegulatoryReporting { get; init; } = new ValueList<RegulatoryReporting3>(){};
        
        /// <summary>
        /// Provides details on the tax.
        /// </summary>
        [IsoId("_7RaIA248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Tax")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public TaxInformation8? Tax { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public TaxInformation8? Tax { get; init; } 
        #else
        public TaxInformation8? Tax { get; set; } 
        #endif
        
        /// <summary>
        /// Provides information related to the handling of the remittance information by any of the agents in the transaction processing chain.
        /// </summary>
        [IsoId("_7RaIBW48EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Related Remittance Information")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [MinLength(0)]
        [MaxLength(10)]
        #endif
        public ValueList<RemittanceLocation6> RelatedRemittanceInformation { get; init; } = new ValueList<RemittanceLocation6>(){};
        
        /// <summary>
        /// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
        /// </summary>
        [IsoId("_7RaIB248EeiU9cctagi5ow")]
        #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        [DisplayName("Remittance Information")]
        #endif
        #if DECLARE_DATACONTRACT
        [DataMember]
        #endif
        #if NET8_0_OR_GREATER // C# 12 Global type alias
        public RemittanceInformation16? RemittanceInformation { get; init; } 
        #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
        public RemittanceInformation16? RemittanceInformation { get; init; } 
        #else
        public RemittanceInformation16? RemittanceInformation { get; set; } 
        #endif
        
        
        #nullable disable
        
    }
}
