//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for SwitchOrderDetailsReport.  ISO2002 ID# _bpQwZUHPEeazV4RAqPV71g.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Status24Choice;

/// <summary>
/// Status report details of a switch order.
/// </summary>
public partial record SwitchOrderDetailsReport : Status24Choice_
     , IIsoXmlSerilizable<SwitchOrderDetailsReport>
{
    #nullable enable
    
    /// <summary>
    /// Reference assigned to a set of orders or trades in order to link them together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the order, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of the order. This reference can typically be used in a hub scenario to give the reference of the order as assigned by the underlying client.
    /// </summary>
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the order execution, as assigned by the confirming party.
    /// </summary>
    public IsoMax35Text? DealReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the order cancellation, as assigned by the instructing party.
    /// </summary>
    public IsoMax35Text? CancellationReference { get; init; } 
    /// <summary>
    /// Status of the switch order.
    /// </summary>
    public required OrderStatus4Choice_ OrderStatus { get; init; } 
    /// <summary>
    /// Information about a switch leg that is rejected or repaired.
    /// </summary>
    public SwitchLegReferences2? LegInformation { get; init; } 
    /// <summary>
    /// Party that initiates the status of the order.
    /// </summary>
    public PartyIdentification113? StatusInitiator { get; init; } 
    /// <summary>
    /// Order data.
    /// </summary>
    public FundOrderData6? OrderData { get; init; } 
    /// <summary>
    /// Expected execution information.
    /// </summary>
    public ExpectedExecutionDetails2? NewDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MasterReference is IsoMax35Text MasterReferenceValue)
        {
            writer.WriteStartElement(null, "MstrRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MasterReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OrdrRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(OrderReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ClientReference is IsoMax35Text ClientReferenceValue)
        {
            writer.WriteStartElement(null, "ClntRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ClientReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DealReference is IsoMax35Text DealReferenceValue)
        {
            writer.WriteStartElement(null, "DealRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DealReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CancellationReference is IsoMax35Text CancellationReferenceValue)
        {
            writer.WriteStartElement(null, "CxlRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CancellationReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OrdrSts", xmlNamespace );
        OrderStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (LegInformation is SwitchLegReferences2 LegInformationValue)
        {
            writer.WriteStartElement(null, "LegInf", xmlNamespace );
            LegInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatusInitiator is PartyIdentification113 StatusInitiatorValue)
        {
            writer.WriteStartElement(null, "StsInitr", xmlNamespace );
            StatusInitiatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OrderData is FundOrderData6 OrderDataValue)
        {
            writer.WriteStartElement(null, "OrdrData", xmlNamespace );
            OrderDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewDetails is ExpectedExecutionDetails2 NewDetailsValue)
        {
            writer.WriteStartElement(null, "NewDtls", xmlNamespace );
            NewDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new SwitchOrderDetailsReport Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
