//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for State.  ISO2002 ID# _CA8442EbEe2P-L9DBerEgA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.TradeData58Choice;

/// <summary>
/// Information related to trade state reporting.
/// </summary>
public partial record State : TradeData58Choice_
     , IIsoXmlSerilizable<State>
{
    #nullable enable
    
    /// <summary>
    /// Data specific to counterparties and related fields.
    /// </summary>
    public ValueList<CounterpartySpecificData36> CounterpartySpecificData { get; init; } = [];
    /// <summary>
    /// Data specifically related to transaction.
    /// </summary>
    public required CommonTradeDataReport70 CommonTradeData { get; init; } 
    /// <summary>
    /// Specifies technical attributes of the message.
    /// </summary>
    public TechnicalAttributes5? TechnicalAttributes { get; init; } 
    /// <summary>
    /// Information regarding the public dissemination of trade data.
    /// </summary>
    public DisseminationData1? PublicDisseminationData { get; init; } 
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "CtrPtySpcfcData", xmlNamespace );
        CounterpartySpecificData.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CmonTradData", xmlNamespace );
        CommonTradeData.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TechnicalAttributes is TechnicalAttributes5 TechnicalAttributesValue)
        {
            writer.WriteStartElement(null, "TechAttrbts", xmlNamespace );
            TechnicalAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PublicDisseminationData is DisseminationData1 PublicDisseminationDataValue)
        {
            writer.WriteStartElement(null, "PblcDssmntnData", xmlNamespace );
            PublicDisseminationDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new State Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
