//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for AdHocQuery.  ISO2002 ID# _noAwEWE3Ee2S65ml6YCOtA.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.TradeReportQuery16Choice;

/// <summary>
/// Query criteria specifically applied to ad-hoc queries.
/// </summary>
public partial record AdHocQuery : TradeReportQuery16Choice_
     , IIsoXmlSerilizable<AdHocQuery>
{
    #nullable enable
    
    /// <summary>
    /// Field to define whether the query response file will include all reports submitted for a trade [true]or only the current state of the trade [false].
    /// If false is selected, the reporting timestamp field cannot be used.
    /// </summary>
    public required IsoTrueFalseIndicator TradeLifeCycleHistory { get; init; } 
    /// <summary>
    /// Field to define whether if the query response file will include all trades or only the outstanding trades.
    /// </summary>
    public required IsoTrueFalseIndicator OutstandingTradeIndicator { get; init; } 
    /// <summary>
    /// Query criteria related to counterparties.
    /// </summary>
    public TradePartyQueryCriteria6? TradePartyCriteria { get; init; } 
    /// <summary>
    /// Indicates the query criteria related to financial instruments.
    /// </summary>
    public TradeSecurityIdentificationQueryCriteria3? FinancialInstrumentCriteria { get; init; } 
    /// <summary>
    /// Query criteria related to time values.
    /// </summary>
    public TradeDateTimeQueryCriteria5? TimeCriteria { get; init; } 
    /// <summary>
    /// Query criteria related to other fields.
    /// </summary>
    public TradeAdditionalQueryCriteria9? OtherCriteria { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradLifeCyclHstry", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(TradeLifeCycleHistory)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OutsdngTradInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OutstandingTradeIndicator)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (TradePartyCriteria is TradePartyQueryCriteria6 TradePartyCriteriaValue)
        {
            writer.WriteStartElement(null, "TradPtyCrit", xmlNamespace );
            TradePartyCriteriaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinancialInstrumentCriteria is TradeSecurityIdentificationQueryCriteria3 FinancialInstrumentCriteriaValue)
        {
            writer.WriteStartElement(null, "FinInstrmCrit", xmlNamespace );
            FinancialInstrumentCriteriaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TimeCriteria is TradeDateTimeQueryCriteria5 TimeCriteriaValue)
        {
            writer.WriteStartElement(null, "TmCrit", xmlNamespace );
            TimeCriteriaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherCriteria is TradeAdditionalQueryCriteria9 OtherCriteriaValue)
        {
            writer.WriteStartElement(null, "OthrCrit", xmlNamespace );
            OtherCriteriaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new AdHocQuery Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
