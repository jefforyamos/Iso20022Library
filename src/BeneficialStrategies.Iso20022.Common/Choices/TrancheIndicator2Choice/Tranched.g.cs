//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Tranched.  ISO2002 ID# _52td0byOEeaUov4jN5X9Qw.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.TrancheIndicator2Choice;

/// <summary>
/// Indication that derivative contract is tranched.
/// </summary>
public partial record Tranched : TrancheIndicator2Choice_
     , IIsoXmlSerilizable<Tranched>
{
    #nullable enable
    
    /// <summary>
    /// Indicates the point at which losses in the pool will attach to a particular tranche.
    /// </summary>
    public IsoBaseOneRate? AttachmentPoint { get; init; } 
    /// <summary>
    /// Indicates the point beyond which losses do not affect the particular tranche.
    /// </summary>
    public IsoBaseOneRate? DetachmentPoint { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AttachmentPoint is IsoBaseOneRate AttachmentPointValue)
        {
            writer.WriteStartElement(null, "AttchmntPt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOneRate(AttachmentPointValue)); // data type BaseOneRate System.Decimal
            writer.WriteEndElement();
        }
        if (DetachmentPoint is IsoBaseOneRate DetachmentPointValue)
        {
            writer.WriteStartElement(null, "DtchmntPt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOneRate(DetachmentPointValue)); // data type BaseOneRate System.Decimal
            writer.WriteEndElement();
        }
    }
    public static new Tranched Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
