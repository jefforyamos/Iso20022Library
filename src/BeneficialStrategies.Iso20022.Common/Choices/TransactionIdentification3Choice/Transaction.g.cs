//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Transaction.  ISO2002 ID# _hY22AcK4EeuFNp8LZAnorg.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.TransactionIdentification3Choice;

/// <summary>
/// Provides identification of the securities financial transaction.
/// </summary>
public partial record Transaction : TransactionIdentification3Choice_
     , IIsoXmlSerilizable<Transaction>
{
    #nullable enable
    
    /// <summary>
    /// Unique identifier of a record in a message used as part of error management and status advice message.
    /// </summary>
    public IsoMax140Text? TechnicalRecordIdentification { get; init; } 
    /// <summary>
    /// Unique code identifying the reporting counterparty.
    /// </summary>
    public required OrganisationIdentification15Choice_ ReportingCounterparty { get; init; } 
    /// <summary>
    /// Unique code identifying the entity with which the reporting counterparty concluded the transaction.
    /// </summary>
    public required PartyIdentification236Choice_ OtherCounterparty { get; init; } 
    /// <summary>
    /// Unique code identifying that counterparty in the case where a financial counterparty is responsible for reporting on behalf of the other counterparty.
    /// </summary>
    public OrganisationIdentification15Choice_? EntityResponsibleForReport { get; init; } 
    /// <summary>
    /// Unique trade Identifier (UTI) as agreed with the counterparty.
    /// </summary>
    public IsoMax52Text? UniqueTradeIdentifier { get; init; } 
    /// <summary>
    /// Details related to the master agreement.
    /// </summary>
    public MasterAgreement7? MasterAgreement { get; init; } 
    /// <summary>
    /// Identification of the agent lender involved in the securities lending transaction.
    /// </summary>
    public OrganisationIdentification15Choice_? AgentLender { get; init; } 
    /// <summary>
    /// Identification of the third party that administers the transaction.
    /// </summary>
    public OrganisationIdentification15Choice_? TripartyAgent { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TechnicalRecordIdentification is IsoMax140Text TechnicalRecordIdentificationValue)
        {
            writer.WriteStartElement(null, "TechRcrdId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(TechnicalRecordIdentificationValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RptgCtrPty", xmlNamespace );
        ReportingCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OthrCtrPty", xmlNamespace );
        OtherCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EntityResponsibleForReport is OrganisationIdentification15Choice_ EntityResponsibleForReportValue)
        {
            writer.WriteStartElement(null, "NttyRspnsblForRpt", xmlNamespace );
            EntityResponsibleForReportValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UniqueTradeIdentifier is IsoMax52Text UniqueTradeIdentifierValue)
        {
            writer.WriteStartElement(null, "UnqTradIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax52Text(UniqueTradeIdentifierValue)); // data type Max52Text System.String
            writer.WriteEndElement();
        }
        if (MasterAgreement is MasterAgreement7 MasterAgreementValue)
        {
            writer.WriteStartElement(null, "MstrAgrmt", xmlNamespace );
            MasterAgreementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AgentLender is OrganisationIdentification15Choice_ AgentLenderValue)
        {
            writer.WriteStartElement(null, "AgtLndr", xmlNamespace );
            AgentLenderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TripartyAgent is OrganisationIdentification15Choice_ TripartyAgentValue)
        {
            writer.WriteStartElement(null, "TrptyAgt", xmlNamespace );
            TripartyAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Transaction Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
