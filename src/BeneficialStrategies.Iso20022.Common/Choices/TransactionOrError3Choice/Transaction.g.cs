//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for Transaction.  ISO2002 ID# _NRCCc5lPEee-Zps0fZQaFQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.TransactionOrError3Choice;

/// <summary>
/// Requested information on the payment transaction.
/// </summary>
public partial record Transaction : TransactionOrError3Choice_
     , IIsoXmlSerilizable<Transaction>
{
    #nullable enable
    
    /// <summary>
    /// Destination of the payment (be it a member or a system or both).
    /// </summary>
    public System1? PaymentTo { get; init; } 
    /// <summary>
    /// Origin of the payment (be it a member or a system or both).
    /// </summary>
    public System1? PaymentFrom { get; init; } 
    /// <summary>
    /// Indicates whether the payment transaction is a debit or credit transaction. |.
    /// </summary>
    public CreditDebitCode? CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Instruction to pay an amount of money to an ultimate beneficiary, on behalf of an originator. This instruction may have to be forwarded several times to complete the settlement chain.|.
    /// </summary>
    public PaymentInstruction26? Payment { get; init; } 
    /// <summary>
    /// Posting of an item to a cash account, in the context of a cash transaction, that results in an increase or decrease to the balance of the account.
    /// </summary>
    public CashAccountAndEntry2? AccountEntry { get; init; } 
    /// <summary>
    /// Provides the references of the underlying securities transaction.
    /// </summary>
    public SecuritiesTransactionReferences1? SecuritiesTransactionReferences { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PaymentTo is System1 PaymentToValue)
        {
            writer.WriteStartElement(null, "PmtTo", xmlNamespace );
            PaymentToValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PaymentFrom is System1 PaymentFromValue)
        {
            writer.WriteStartElement(null, "PmtFr", xmlNamespace );
            PaymentFromValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditDebitIndicator is CreditDebitCode CreditDebitIndicatorValue)
        {
            writer.WriteStartElement(null, "CdtDbtInd", xmlNamespace );
            writer.WriteValue(CreditDebitIndicatorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Payment is PaymentInstruction26 PaymentValue)
        {
            writer.WriteStartElement(null, "Pmt", xmlNamespace );
            PaymentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountEntry is CashAccountAndEntry2 AccountEntryValue)
        {
            writer.WriteStartElement(null, "AcctNtry", xmlNamespace );
            AccountEntryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecuritiesTransactionReferences is SecuritiesTransactionReferences1 SecuritiesTransactionReferencesValue)
        {
            writer.WriteStartElement(null, "SctiesTxRefs", xmlNamespace );
            SecuritiesTransactionReferencesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static new Transaction Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
