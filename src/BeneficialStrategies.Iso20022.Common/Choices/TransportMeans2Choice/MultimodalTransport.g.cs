//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for MultimodalTransport.  ISO2002 ID# _U7oxk9p-Ed-ak6NoX_4Aeg_205481039.
//

using BeneficialStrategies.Iso20022.Components;

namespace BeneficialStrategies.Iso20022.Choices.TransportMeans2Choice;

/// <summary>
/// Specifies the different movements and places and their role in a multimodal conveyance of goods.
/// </summary>
public partial record MultimodalTransport : ITransportMeans2Choice
{
    #nullable enable
    /// <summary>
    /// Place from where the goods must leave.
    /// </summary>
    public IAirportName1Choice? DepartureAirport { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Place where the goods must arrive.
    /// </summary>
    public IAirportName1Choice? DestinationAirport { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the party that is responsible for the conveyance of the goods from one place to another.
    /// </summary>
    public IsoMax35Text? AirCarrierName { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the port where the goods are loaded on board the ship.
    /// </summary>
    public IsoMax35Text? PortOfLoading { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the port where the goods are discharged.
    /// </summary>
    public IsoMax35Text? PortOfDischarge { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Name of a vessel.
    /// </summary>
    public IsoMax35Text? VesselName { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the location where the goods are received for transportation.
    /// </summary>
    public IsoMax35Text? PlaceOfReceipt { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the location of delivery of the goods.
    /// </summary>
    public IsoMax35Text? PlaceOfDelivery { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the location where the goods are take in charge for transportation.
    /// </summary>
    public IsoMax35Text? TakingInCharge { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the location of the final destination of the goods.
    /// </summary>
    public IsoMax35Text? PlaceOfFinalDestination { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies a place in a country.
    /// </summary>
    public IsoMax35Text? TransitLocation { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the party that is responsible for the conveyance of the goods from one place to another.
    /// </summary>
    public IsoMax35Text? RoadCarrierName { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the party that is responsible for the conveyance of the goods from one place to another.
    /// </summary>
    public IsoMax35Text? RailCarrierName { get; init;  } // Warning: Don't know multiplicity.
    #nullable disable
}
