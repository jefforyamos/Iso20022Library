//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ConcreteChoiceGenerator for VoteInstruction.  ISO2002 ID# _iNq0w166EeSjaerr_EM7AQ.
//

using BeneficialStrategies.Iso20022.Components;
using BeneficialStrategies.Iso20022.ExternalSchema;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Choices.Vote3Choice;

/// <summary>
/// Instruction specifying the instructed quantity of voting rights per resolution. Split votes can be indicated. If only one type of decision is indicated, the number of votes cast must not be adjusted if the position of the voting party increases.
/// </summary>
public partial record VoteInstruction : Vote3Choice_
     , IIsoXmlSerilizable<VoteInstruction>
{
    #nullable enable
    
    /// <summary>
    /// Numbering of the resolution as specified by the issuer or its agent.
    /// </summary>
    public required IsoMax35Text IssuerLabel { get; init; } 
    /// <summary>
    /// Number of votes in favour of one resolution.
    /// </summary>
    public IsoNumber? For { get; init; } 
    /// <summary>
    /// Number of votes against one resolution.
    /// </summary>
    public IsoNumber? Against { get; init; } 
    /// <summary>
    /// Number of votes expressed as abstain for one resolution.
    /// </summary>
    public IsoNumber? Abstain { get; init; } 
    /// <summary>
    /// Number of votes withheld for one resolution.
    /// </summary>
    public IsoNumber? Withhold { get; init; } 
    /// <summary>
    /// Number of votes in line with the votes of the management.
    /// </summary>
    public IsoNumber? WithManagement { get; init; } 
    /// <summary>
    /// Number of votes against the voting recommendation of the management.
    /// </summary>
    public IsoNumber? AgainstManagement { get; init; } 
    /// <summary>
    /// Number of votes for which decision is left to the party that will exercise the voting right.
    /// </summary>
    public IsoNumber? Discretionary { get; init; } 
    /// <summary>
    /// Number of votes in favour for one year for "say on pay" type of resolution.
    /// </summary>
    public IsoNumber? OneYear { get; init; } 
    /// <summary>
    /// Number of votes in favour of two years for "say on pay" type of resolution.
    /// </summary>
    public IsoNumber? TwoYears { get; init; } 
    /// <summary>
    /// Number of votes in favour of three years for "say on pay" type of resolution.
    /// </summary>
    public IsoNumber? ThreeYears { get; init; } 
    /// <summary>
    /// Number of votes for which no action has been taken.
    /// </summary>
    public IsoNumber? NoAction { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public override void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "IssrLabl", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(IssuerLabel)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (For is IsoNumber ForValue)
        {
            writer.WriteStartElement(null, "For", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(ForValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (Against is IsoNumber AgainstValue)
        {
            writer.WriteStartElement(null, "Agnst", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(AgainstValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (Abstain is IsoNumber AbstainValue)
        {
            writer.WriteStartElement(null, "Abstn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(AbstainValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (Withhold is IsoNumber WithholdValue)
        {
            writer.WriteStartElement(null, "Wthhld", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(WithholdValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (WithManagement is IsoNumber WithManagementValue)
        {
            writer.WriteStartElement(null, "WthMgmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(WithManagementValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (AgainstManagement is IsoNumber AgainstManagementValue)
        {
            writer.WriteStartElement(null, "AgnstMgmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(AgainstManagementValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (Discretionary is IsoNumber DiscretionaryValue)
        {
            writer.WriteStartElement(null, "Dscrtnry", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(DiscretionaryValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (OneYear is IsoNumber OneYearValue)
        {
            writer.WriteStartElement(null, "OneYr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(OneYearValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (TwoYears is IsoNumber TwoYearsValue)
        {
            writer.WriteStartElement(null, "TwoYrs", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TwoYearsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (ThreeYears is IsoNumber ThreeYearsValue)
        {
            writer.WriteStartElement(null, "ThreeYrs", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(ThreeYearsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (NoAction is IsoNumber NoActionValue)
        {
            writer.WriteStartElement(null, "NoActn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(NoActionValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
    }
    public static new VoteInstruction Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
