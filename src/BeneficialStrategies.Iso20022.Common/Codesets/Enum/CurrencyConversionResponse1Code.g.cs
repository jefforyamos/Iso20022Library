//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for CurrencyConversionResponse1Code.  ISO2002 ID# _fRlkkEesEeODR7vDcYOqmg.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20022.Codesets;

/// <summary>
/// Result of a requested currency conversion.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_fRlkkEesEeODR7vDcYOqmg")]
[Description(@"Result of a requested currency conversion.")]
[DerivedFrom(typeof(CurrencyConversionResponseCode))]
public enum CurrencyConversionResponse1Code
{
    /// <summary>
    /// Dynamic currency conversion may be offered to the cardholder.
    /// Encoded/decoded by serializers as "ODCC".
    /// </summary>
    [EnumMember(Value = "ODCC")]
    [IsoId("_iDXIoUesEeODR7vDcYOqmg")]
    [Description(@"Dynamic currency conversion may be offered to the cardholder.")]
    Allowed = CurrencyConversionResponseCode.Allowed, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Transaction authorised with dynamic currency conversion.
    /// Encoded/decoded by serializers as "DCCA".
    /// </summary>
    [EnumMember(Value = "DCCA")]
    [IsoId("_iK9lc0esEeODR7vDcYOqmg")]
    [Description(@"Transaction authorised with dynamic currency conversion.")]
    Assumed = CurrencyConversionResponseCode.Assumed, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// The card is not valid for dynamic currency conversion.
    /// Encoded/decoded by serializers as "ICRD".
    /// </summary>
    [EnumMember(Value = "ICRD")]
    [IsoId("_iOrn0UesEeODR7vDcYOqmg")]
    [Description(@"The card is not valid for dynamic currency conversion.")]
    InvalidCard = CurrencyConversionResponseCode.InvalidCard, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// The card acceptor has not been recognised.
    /// Encoded/decoded by serializers as "IMER".
    /// </summary>
    [EnumMember(Value = "IMER")]
    [IsoId("_iYN-U0esEeODR7vDcYOqmg")]
    [Description(@"The card acceptor has not been recognised.")]
    InvalidMerchant = CurrencyConversionResponseCode.InvalidMerchant, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Dynamic currency conversion service cannot be offered for this card product.
    /// Encoded/decoded by serializers as "IPRD".
    /// </summary>
    [EnumMember(Value = "IPRD")]
    [IsoId("_ib8nwUesEeODR7vDcYOqmg")]
    [Description(@"Dynamic currency conversion service cannot be offered for this card product.")]
    InvalidProduct = CurrencyConversionResponseCode.InvalidProduct, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Exchange rates are not available.
    /// Encoded/decoded by serializers as "IRAT".
    /// </summary>
    [EnumMember(Value = "IRAT")]
    [IsoId("_iipss0esEeODR7vDcYOqmg")]
    [Description(@"Exchange rates are not available.")]
    NoRate = CurrencyConversionResponseCode.NoRate, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Dynamic currency conversion is not available for other reason.
    /// Encoded/decoded by serializers as "NDCC".
    /// </summary>
    [EnumMember(Value = "NDCC")]
    [IsoId("_ipWxo0esEeODR7vDcYOqmg")]
    [Description(@"Dynamic currency conversion is not available for other reason.")]
    NotAvailable = CurrencyConversionResponseCode.NotAvailable, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class CurrencyConversionResponse1CodeMetadataExtensions
{
    private static readonly CurrencyConversionResponse1CodeDropdownSource _dropdownSource = new CurrencyConversionResponse1CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ICurrencyConversionResponse1CodeDropdownRow GetMetadata(this CurrencyConversionResponse1Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


