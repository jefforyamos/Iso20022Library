//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for ExternalCashAccountTypeCode.  ISO2002 ID# _5lMfIIKTEeeCI5iKR7LsYQ.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the nature, or use, of the cash account in the format of character string with a maximum length of 4 characters.
/// The list of valid codes is an external code list published separately.
/// External code sets can be downloaded from www.iso20022.org.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_5lMfIIKTEeeCI5iKR7LsYQ")]
[Description(@"Specifies the nature, or use, of the cash account in the format of character string with a maximum length of 4 characters. The list of valid codes is an external code list published separately. External code sets can be downloaded from www.iso20022.org.")]
public enum ExternalCashAccountTypeCode
{
    /// <summary>
    /// Account used to post debits and credits when no specific account has been nominated.
    /// </summary>
    [EnumMember(Value = "CACC")]
    [IsoId("_uLQ32fRYEeuLhpyIdtJzwg")]
    [Description(@"Account used to post debits and credits when no specific account has been nominated.")]
    CACC,
    
    /// <summary>
    /// Account used for credit card payments.
    /// </summary>
    [EnumMember(Value = "CARD")]
    [IsoId("_uLQ33PRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for credit card payments.")]
    CARD,
    
    /// <summary>
    /// Account used for the payment of cash.
    /// </summary>
    [EnumMember(Value = "CASH")]
    [IsoId("_uLao0PRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for the payment of cash.")]
    CASH,
    
    /// <summary>
    /// Account used for charges if different from the account for|payment.
    /// </summary>
    [EnumMember(Value = "CHAR")]
    [IsoId("_uLao0_RYEeuLhpyIdtJzwg")]
    [Description(@"Account used for charges if different from the account for|payment.")]
    CHAR,
    
    /// <summary>
    /// Account used for payment of income if different from the current cash account
    /// </summary>
    [EnumMember(Value = "CISH")]
    [IsoId("_uLao1vRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for payment of income if different from the current cash account")]
    CISH,
    
    /// <summary>
    /// Account used for commission if different from the account|for payment.
    /// </summary>
    [EnumMember(Value = "COMM")]
    [IsoId("_uLao2fRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for commission if different from the account|for payment.")]
    COMM,
    
    /// <summary>
    /// Account used to post settlement debit and credit entries on behalf of a designated Clearing Participant.
    /// </summary>
    [EnumMember(Value = "CPAC")]
    [IsoId("_uLjywPRYEeuLhpyIdtJzwg")]
    [Description(@"Account used to post settlement debit and credit entries on behalf of a designated Clearing Participant.")]
    CPAC,
    
    /// <summary>
    /// Account used for savings with special interest and withdrawal terms.  
    /// </summary>
    [EnumMember(Value = "LLSV")]
    [IsoId("_uLjyw_RYEeuLhpyIdtJzwg")]
    [Description(@"Account used for savings with special interest and withdrawal terms.  ")]
    LLSV,
    
    /// <summary>
    /// Account used for loans.
    /// </summary>
    [EnumMember(Value = "LOAN")]
    [IsoId("_uLjyxvRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for loans.")]
    LOAN,
    
    /// <summary>
    /// Account used for a marginal lending facility.
    /// </summary>
    [EnumMember(Value = "MGLD")]
    [IsoId("_uLjyyfRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for a marginal lending facility.")]
    MGLD,
    
    /// <summary>
    /// Account used for money markets if different from the cash|account.
    /// </summary>
    [EnumMember(Value = "MOMA")]
    [IsoId("_uLjyzPRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for money markets if different from the cash|account.")]
    MOMA,
    
    /// <summary>
    /// Account used for non-resident external.
    /// </summary>
    [EnumMember(Value = "NREX")]
    [IsoId("_uLtjwPRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for non-resident external.")]
    NREX,
    
    /// <summary>
    /// Account is used for overdrafts.
    /// </summary>
    [EnumMember(Value = "ODFT")]
    [IsoId("_uLtjw_RYEeuLhpyIdtJzwg")]
    [Description(@"Account is used for overdrafts.")]
    ODFT,
    
    /// <summary>
    /// Account used for overnight deposits.
    /// </summary>
    [EnumMember(Value = "ONDP")]
    [IsoId("_uLtjxvRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for overnight deposits.")]
    ONDP,
    
    /// <summary>
    /// Account not otherwise specified. 
    /// </summary>
    [EnumMember(Value = "OTHR")]
    [IsoId("_uLtjyfRYEeuLhpyIdtJzwg")]
    [Description(@"Account not otherwise specified. ")]
    OTHR,
    
    /// <summary>
    /// Account used to post debit and credit entries, as a result of transactions cleared and settled through a specific clearing and settlement system.
    /// </summary>
    [EnumMember(Value = "SACC")]
    [IsoId("_uLtjzPRYEeuLhpyIdtJzwg")]
    [Description(@"Account used to post debit and credit entries, as a result of transactions cleared and settled through a specific clearing and settlement system.")]
    SACC,
    
    /// <summary>
    /// Accounts used for salary payments.
    /// </summary>
    [EnumMember(Value = "SLRY")]
    [IsoId("_uL2tsPRYEeuLhpyIdtJzwg")]
    [Description(@"Accounts used for salary payments.")]
    SLRY,
    
    /// <summary>
    /// Account used for savings.
    /// </summary>
    [EnumMember(Value = "SVGS")]
    [IsoId("_uL2ts_RYEeuLhpyIdtJzwg")]
    [Description(@"Account used for savings.")]
    SVGS,
    
    /// <summary>
    /// Account used for taxes if different from the account for|payment.
    /// </summary>
    [EnumMember(Value = "TAXE")]
    [IsoId("_uL2ttvRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for taxes if different from the account for|payment.")]
    TAXE,
    
    /// <summary>
    /// A transacting account is the most basic type of bank account that you can get. The main difference between transaction and cheque accounts is that you usually do not get a cheque book with your transacting account and neither are you offered an overdraft facility.
    /// </summary>
    [EnumMember(Value = "TRAN")]
    [IsoId("_uL2tufRYEeuLhpyIdtJzwg")]
    [Description(@"A transacting account is the most basic type of bank account that you can get. The main difference between transaction and cheque accounts is that you usually do not get a cheque book with your transacting account and neither are you offered an overdraft facility.")]
    TRAN,
    
    /// <summary>
    /// Account used for trading if different from the current cash|account.
    /// </summary>
    [EnumMember(Value = "TRAS")]
    [IsoId("_uL2tvPRYEeuLhpyIdtJzwg")]
    [Description(@"Account used for trading if different from the current cash|account.")]
    TRAS,
    
    /// <summary>
    /// Account created virtually to facilitate collection and reconciliation.
    /// </summary>
    [EnumMember(Value = "VACC")]
    [IsoId("_UtIU8I5FEeyANo-d7JlQ1A")]
    [Description(@"Account created virtually to facilitate collection and reconciliation.")]
    VACC,
    
    /// <summary>
    /// Non-Resident Individual / Entity Foreign Current held domestically.
    /// </summary>
    [EnumMember(Value = "NFCA")]
    [IsoId("_YbOMAGvbEe2F6NrIyOmXcA")]
    [Description(@"Non-Resident Individual / Entity Foreign Current held domestically.")]
    NFCA,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class ExternalCashAccountTypeCodeMetadataExtensions
{
    private static readonly ExternalCashAccountTypeCodeDropdownSource _dropdownSource = new ExternalCashAccountTypeCodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IExternalCashAccountTypeCodeDropdownRow GetMetadata(this ExternalCashAccountTypeCode code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


