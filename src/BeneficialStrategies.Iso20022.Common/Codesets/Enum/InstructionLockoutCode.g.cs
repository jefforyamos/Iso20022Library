//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for InstructionLockoutCode.  ISO2002 ID# _1oFf1TL3EeKU9IrkkToqcw_-1695680614.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies status of the instruction lock (for elections).
/// </summary>
[DataContract]
[Serializable]
[IsoId("_1oFf1TL3EeKU9IrkkToqcw_-1695680614")]
[Description(@"Specifies status of the instruction lock (for elections).")]
[Derivations(typeof(InstructionLockout1Code))]
public enum InstructionLockoutCode
{
    /// <summary>
    /// System suspended elections processing based on business rules.
    /// Encoded/decoded by serializers as "SYLK".
    /// </summary>
    [EnumMember(Value = "SYLK")]
    [IsoId("_1oOpwDL3EeKU9IrkkToqcw_-978797614")]
    [Description(@"System suspended elections processing based on business rules.")]
    SystemicLocked,
    
    /// <summary>
    /// DTC (the Depository Trust Company) personnel suspended elections processing.
    /// Encoded/decoded by serializers as "MALK".
    /// </summary>
    [EnumMember(Value = "MALK")]
    [IsoId("_1oOpwTL3EeKU9IrkkToqcw_1556868203")]
    [Description(@"DTC (the Depository Trust Company) personnel suspended elections processing.")]
    ManualLocked,
    
    /// <summary>
    /// Eligible for elections processing.
    /// Encoded/decoded by serializers as "NOLO".
    /// </summary>
    [EnumMember(Value = "NOLO")]
    [IsoId("_1oOpwjL3EeKU9IrkkToqcw_-748248972")]
    [Description(@"Eligible for elections processing.")]
    NotLocked,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class InstructionLockoutCodeMetadataExtensions
{
    private static readonly InstructionLockoutCodeDropdownSource _dropdownSource = new InstructionLockoutCodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IInstructionLockoutCodeDropdownRow GetMetadata(this InstructionLockoutCode code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


