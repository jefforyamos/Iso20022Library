//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for LimitType3Code.  ISO2002 ID# _8MSRlKMgEeCJ6YNENx4h-w_1763115037.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20022.Codesets;

/// <summary>
/// Specifies the type of risk management limit.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_8MSRlKMgEeCJ6YNENx4h-w_1763115037")]
[Description(@"Specifies the type of risk management limit.")]
[DerivedFrom(typeof(LimitTypeCode))]
public enum LimitType3Code
{
    /// <summary>
    /// Limit is a maximum amount value applied to, or by, a participant to a set of counterparties. The multilateral limit is taken into account by the transaction administrator to contain the risk in the system. With the help of the multilateral limit, the direct participant restricts the use of liquidity when clearing payments with all other direct participants for which no bilateral limit is set.
    /// Encoded/decoded by serializers as "MULT".
    /// </summary>
    [EnumMember(Value = "MULT")]
    [IsoId("_8MSRlaMgEeCJ6YNENx4h-w_-886584824")]
    [Description(@"Limit is a maximum amount value applied to, or by, a participant to a set of counterparties. The multilateral limit is taken into account by the transaction administrator to contain the risk in the system. With the help of the multilateral limit, the direct participant restricts the use of liquidity when clearing payments with all other direct participants for which no bilateral limit is set.")]
    Multilateral = LimitTypeCode.Multilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.
    /// Encoded/decoded by serializers as "BILI".
    /// </summary>
    [EnumMember(Value = "BILI")]
    [IsoId("_8MSRlqMgEeCJ6YNENx4h-w_766042684")]
    [Description(@"Limit is applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.")]
    Bilateral = LimitTypeCode.Bilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Mandatory part of the bilateral limit applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.
    /// Encoded/decoded by serializers as "MAND".
    /// </summary>
    [EnumMember(Value = "MAND")]
    [IsoId("_8MSRl6MgEeCJ6YNENx4h-w_944161356")]
    [Description(@"Mandatory part of the bilateral limit applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.")]
    MandatoryBilateral = LimitTypeCode.MandatoryBilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Discretionary part of the bilateral limit applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.
    /// Encoded/decoded by serializers as "DISC".
    /// </summary>
    [EnumMember(Value = "DISC")]
    [IsoId("_8McCkKMgEeCJ6YNENx4h-w_652203618")]
    [Description(@"Discretionary part of the bilateral limit applied by one party to a specific counterparty, and corresponds to the maximum amount of traffic party setting the limit can send to that counterparty. The limit can be expressed as a debit or a credit limit. With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.")]
    DiscretionaryBilateral = LimitTypeCode.DiscretionaryBilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is applied by one party to a specific counterparty, and corresponds to the maximum net balance acceptable by the party that is setting the limit. The limit is calculated as an arithmetic sum in value of the bilateral flows exchanged between the two parties. The net bilateral limit can be expressed as a debit or a credit balance.
    /// Encoded/decoded by serializers as "NELI".
    /// </summary>
    [EnumMember(Value = "NELI")]
    [IsoId("_8McCkaMgEeCJ6YNENx4h-w_-1883657177")]
    [Description(@"Limit is applied by one party to a specific counterparty, and corresponds to the maximum net balance acceptable by the party that is setting the limit. The limit is calculated as an arithmetic sum in value of the bilateral flows exchanged between the two parties. The net bilateral limit can be expressed as a debit or a credit balance.")]
    NetBilateral = LimitTypeCode.NetBilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is a maximum value set by a direct participant with respect to its indirect participant. The limit represents the maximum amount the indirect participant can use to settle its operations.
    /// Encoded/decoded by serializers as "INBI".
    /// </summary>
    [EnumMember(Value = "INBI")]
    [IsoId("_8McCkqMgEeCJ6YNENx4h-w_-231029669")]
    [Description(@"Limit is a maximum value set by a direct participant with respect to its indirect participant. The limit represents the maximum amount the indirect participant can use to settle its operations.")]
    IndirectBilateral = LimitTypeCode.IndirectBilateral, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Maximum value set by either the transaction administrator or by a member for the participation of a member in the system. The global limit may be expressed as a credit or debit maximum value and is taken into account by the transaction administrator when processing transaction inside the system. With the help of the global limit, the direct participant may limit the use of liquidity when clearing specific type of payments.
    /// Encoded/decoded by serializers as "GLBL".
    /// </summary>
    [EnumMember(Value = "GLBL")]
    [IsoId("_8McCk6MgEeCJ6YNENx4h-w_-52910997")]
    [Description(@"Maximum value set by either the transaction administrator or by a member for the participation of a member in the system. The global limit may be expressed as a credit or debit maximum value and is taken into account by the transaction administrator when processing transaction inside the system. With the help of the global limit, the direct participant may limit the use of liquidity when clearing specific type of payments.")]
    Global = LimitTypeCode.Global, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit not to be exceeded for direct debit operations.
    /// Encoded/decoded by serializers as "DIDB".
    /// </summary>
    [EnumMember(Value = "DIDB")]
    [IsoId("_8McClKMgEeCJ6YNENx4h-w_-344868735")]
    [Description(@"Limit not to be exceeded for direct debit operations.")]
    DirectDebit = LimitTypeCode.DirectDebit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Single direct debit payment limit not to be exceeded by any single direct debit transaction by a customer.
    /// Encoded/decoded by serializers as "SPLC".
    /// </summary>
    [EnumMember(Value = "SPLC")]
    [IsoId("_8McClaMgEeCJ6YNENx4h-w_1414237766")]
    [Description(@"Single direct debit payment limit not to be exceeded by any single direct debit transaction by a customer.")]
    SingleCustomerDirectDebit = LimitTypeCode.SingleCustomerDirectDebit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Single direct debit payment limit not to be exceeded by any single direct debit transaction initiated by a financial institution.
    /// Encoded/decoded by serializers as "SPLF".
    /// </summary>
    [EnumMember(Value = "SPLF")]
    [IsoId("_8McClqMgEeCJ6YNENx4h-w_-1228102022")]
    [Description(@"Single direct debit payment limit not to be exceeded by any single direct debit transaction initiated by a financial institution.")]
    SingleFinancialInstitutionDirectDebit = LimitTypeCode.SingleFinancialInstitutionDirectDebit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Total daily payments limit for customer direct debits not to be exceeded by the total of all direct debit transactions initiated by customers.
    /// Encoded/decoded by serializers as "TDLC".
    /// </summary>
    [EnumMember(Value = "TDLC")]
    [IsoId("_8McCl6MgEeCJ6YNENx4h-w_-1049983350")]
    [Description(@"Total daily payments limit for customer direct debits not to be exceeded by the total of all direct debit transactions initiated by customers.")]
    TotalDailyCustomerDirectDebit = LimitTypeCode.TotalDailyCustomerDirectDebit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Total daily payments limit for financial institutions direct debits not to be exceeded by the total of all direct debit transactions initiated by financial institutions.
    /// Encoded/decoded by serializers as "TDLF".
    /// </summary>
    [EnumMember(Value = "TDLF")]
    [IsoId("_8McCmKMgEeCJ6YNENx4h-w_-1341941088")]
    [Description(@"Total daily payments limit for financial institutions direct debits not to be exceeded by the total of all direct debit transactions initiated by financial institutions.")]
    TotalDailyFinancialInstitutionDirectDebit = LimitTypeCode.TotalDailyFinancialInstitutionDirectDebit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is related to a cap amount granted by a national central bank or a settlement bank, but generally unsecured outside of the market infrastructure.
    /// Encoded/decoded by serializers as "UCDT".
    /// </summary>
    [EnumMember(Value = "UCDT")]
    [IsoId("_8MlMgKMgEeCJ6YNENx4h-w_-916327290")]
    [Description(@"Limit is related to a cap amount granted by a national central bank or a settlement bank, but generally unsecured outside of the market infrastructure.")]
    UnsecuredCredit = LimitTypeCode.UnsecuredCredit, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is related to a credit operation that is or can be triggered when a buyer does not have a sufficient amount of money to settle a securities transaction in order to improve its cash position for the next settlement cycle. The credit provided can be secured using securities already held by the buyer (“collateral stocks”) or the securities that are being purchased (“collateral flows”).
    /// Encoded/decoded by serializers as "ACOL".
    /// </summary>
    [EnumMember(Value = "ACOL")]
    [IsoId("_8MlMgaMgEeCJ6YNENx4h-w_-2082490424")]
    [Description(@"Limit is related to a credit operation that is or can be triggered when a buyer does not have a sufficient amount of money to settle a securities transaction in order to improve its cash position for the next settlement cycle. The credit provided can be secured using securities already held by the buyer (“collateral stocks”) or the securities that are being purchased (“collateral flows”).")]
    AutoCollateralisation = LimitTypeCode.AutoCollateralisation, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Limit is related to a cap amount granted by a national central bank or a settlement bank.
    /// Encoded/decoded by serializers as "EXGT".
    /// </summary>
    [EnumMember(Value = "EXGT")]
    [IsoId("_8MlMgqMgEeCJ6YNENx4h-w_1399870397")]
    [Description(@"Limit is related to a cap amount granted by a national central bank or a settlement bank.")]
    ExternalGuarantee = LimitTypeCode.ExternalGuarantee, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class LimitType3CodeMetadataExtensions
{
    private static readonly LimitType3CodeDropdownSource _dropdownSource = new LimitType3CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ILimitType3CodeDropdownRow GetMetadata(this LimitType3Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


