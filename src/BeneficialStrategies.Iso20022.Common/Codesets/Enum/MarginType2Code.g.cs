//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for MarginType2Code.  ISO2002 ID# _7TLccKsiEeayv9XxdmMwKQ.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the type of margin, for example, initial margin, variation margin, initial deposit or coupon margin.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_7TLccKsiEeayv9XxdmMwKQ")]
[Description(@"Specifies the type of margin, for example, initial margin, variation margin, initial deposit or coupon margin.")]
[DerivedFrom(typeof(MarginTypeCode))]
public enum MarginType2Code
{
    /// <summary>
    /// Additional margin required to cover the daily risk encountered by the central counterparty before the clearing member is actually called to cover the default fund. Indeed, central counterparty calculates the margin on the default fund on a daily basis but only calls the clearing member at the end of the month.
    /// Encoded/decoded by serializers as "ADFM".
    /// </summary>
    [EnumMember(Value = "ADFM")]
    [IsoId("_946IkasiEeayv9XxdmMwKQ")]
    [Description(@"Additional margin required to cover the daily risk encountered by the central counterparty before the clearing member is actually called to cover the default fund. Indeed, central counterparty calculates the margin on the default fund on a daily basis but only calls the clearing member at the end of the month.")]
    AdditionalDefaultFundMargin = MarginTypeCode.AdditionalDefaultFundMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin required to cover the non payment of the monthly premium (for credit derivatives).
    /// Encoded/decoded by serializers as "COMA".
    /// </summary>
    [EnumMember(Value = "COMA")]
    [IsoId("_Ba5ooasjEeayv9XxdmMwKQ")]
    [Description(@"Margin required to cover the non payment of the monthly premium (for credit derivatives).")]
    CouponMargin = MarginTypeCode.CouponMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin required to cover the risk of any event linked to the underlying (for example the payment default by the issuer of a debt).
    /// Encoded/decoded by serializers as "CEMA".
    /// </summary>
    [EnumMember(Value = "CEMA")]
    [IsoId("_DZD-casjEeayv9XxdmMwKQ")]
    [Description(@"Margin required to cover the risk of any event linked to the underlying (for example the payment default by the issuer of a debt).")]
    CreditEventMargin = MarginTypeCode.CreditEventMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin required to cover the risk of non settlement of the underlying. Also used to cover the risk linked to the non settlement on payment platforms (for example TARGET2 vs CLS).
    /// Encoded/decoded by serializers as "SEMA".
    /// </summary>
    [EnumMember(Value = "SEMA")]
    [IsoId("_Km2a0asjEeayv9XxdmMwKQ")]
    [Description(@"Margin required to cover the risk of non settlement of the underlying. Also used to cover the risk linked to the non settlement on payment platforms (for example TARGET2 vs CLS).")]
    SettlementRiskMargin = MarginTypeCode.SettlementRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin required to cover the concentration risk linked to the default of the seller of the "protection" (for example CDS seller).
    /// Encoded/decoded by serializers as "SCMA".
    /// </summary>
    [EnumMember(Value = "SCMA")]
    [IsoId("_MTm3kasjEeayv9XxdmMwKQ")]
    [Description(@"Margin required to cover the concentration risk linked to the default of the seller of the ""protection"" (for example CDS seller).")]
    ShortChargeMargin = MarginTypeCode.ShortChargeMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin required to cover the non payment of the upfront premium (for credit derivatives).
    /// Encoded/decoded by serializers as "UFMA".
    /// </summary>
    [EnumMember(Value = "UFMA")]
    [IsoId("_NRWSMasjEeayv9XxdmMwKQ")]
    [Description(@"Margin required to cover the non payment of the upfront premium (for credit derivatives).")]
    UpfrontMargin = MarginTypeCode.UpfrontMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called to cover potential future exposures caused by volatility in the underlying risk factors of a set of financial instruments.
    /// Encoded/decoded by serializers as "MARM".
    /// </summary>
    [EnumMember(Value = "MARM")]
    [IsoId("_uHELAasjEeayv9XxdmMwKQ")]
    [Description(@"Margin called to cover potential future exposures caused by volatility in the underlying risk factors of a set of financial instruments.")]
    MarketRiskMargin = MarginTypeCode.MarketRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin to cover the risk of a credit event relating to a sovereign issuer.
    /// Encoded/decoded by serializers as "SORM".
    /// </summary>
    [EnumMember(Value = "SORM")]
    [IsoId("_uP_dgasjEeayv9XxdmMwKQ")]
    [Description(@"Margin to cover the risk of a credit event relating to a sovereign issuer.")]
    SovereignRiskMargin = MarginTypeCode.SovereignRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called to cover additional current or potential future exposures that may arise due to a connection between the credit quality of the counterparty and the movement in a set of risk factors of a financial instruments or portfolio of financial instruments.
    /// Encoded/decoded by serializers as "WWRM".
    /// </summary>
    [EnumMember(Value = "WWRM")]
    [IsoId("_ucV3casjEeayv9XxdmMwKQ")]
    [Description(@"Margin called to cover additional current or potential future exposures that may arise due to a connection between the credit quality of the counterparty and the movement in a set of risk factors of a financial instruments or portfolio of financial instruments.")]
    WrongWayRiskMargin = MarginTypeCode.WrongWayRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin requirement to cover the risk of a breakdown in the assumed relationship between two financial instruments or risk factors when calculating the margin requirement for a portfolio of financial instruments.
    /// Encoded/decoded by serializers as "BARM".
    /// </summary>
    [EnumMember(Value = "BARM")]
    [IsoId("_urXK4asjEeayv9XxdmMwKQ")]
    [Description(@"Margin requirement to cover the risk of a breakdown in the assumed relationship between two financial instruments or risk factors when calculating the margin requirement for a portfolio of financial instruments.")]
    BasisRiskMargin = MarginTypeCode.BasisRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called to cover differences in the assumed liquidation cost of a portfolio of financial instruments when estimating potential future exposure relative. For instance, where the potential future exposure is estimated using mid-prices but fails to consider the necessity to pay a bid-ask spread, or the additional cost of liquidation that may arise when liquidating a large portfolio.
    /// Encoded/decoded by serializers as "LIRM".
    /// </summary>
    [EnumMember(Value = "LIRM")]
    [IsoId("_u2OXEasjEeayv9XxdmMwKQ")]
    [Description(@"Margin called to cover differences in the assumed liquidation cost of a portfolio of financial instruments when estimating potential future exposure relative. For instance, where the potential future exposure is estimated using mid-prices but fails to consider the necessity to pay a bid-ask spread, or the additional cost of liquidation that may arise when liquidating a large portfolio.")]
    LiquidityRiskMargin = MarginTypeCode.LiquidityRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called to cover an increase in the probability of default by a counterparty in relation to an OTC derivative or cleared transaction. The calculation of such margin is typically independent of any changes in current or potential future exposure.
    /// Encoded/decoded by serializers as "CRAM".
    /// </summary>
    [EnumMember(Value = "CRAM")]
    [IsoId("_f0mw0a16EeaJ-ZG7I88yBQ")]
    [Description(@"Margin called to cover an increase in the probability of default by a counterparty in relation to an OTC derivative or cleared transaction. The calculation of such margin is typically independent of any changes in current or potential future exposure.")]
    CreditRiskAdditionalMargin = MarginTypeCode.CreditRiskAdditionalMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called, by a central counterparty, to cover current exposures for a portfolio of financial instruments where collateral called against such current exposures is held by the central counterparty and returned to the poster of such collateral at the delivery of the financial instrument.
    /// Encoded/decoded by serializers as "CVMA".
    /// </summary>
    [EnumMember(Value = "CVMA")]
    [IsoId("_-bz5cfqDEeaQh_7a05rSJQ")]
    [Description(@"Margin called, by a central counterparty, to cover current exposures for a portfolio of financial instruments where collateral called against such current exposures is held by the central counterparty and returned to the poster of such collateral at the delivery of the financial instrument.")]
    ContingentVariationMargin = MarginTypeCode.ContingentVariationMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin to cover risks relating to a sponsored clearing member. That is were a third party carries out a number of obligations under the rulebook of the central counterparty on behalf of a clearing member but doing so creates additional risks for the central counterparty with respect to the clearing member.
    /// Encoded/decoded by serializers as "SPMA".
    /// </summary>
    [EnumMember(Value = "SPMA")]
    [IsoId("__aAAAfqDEeaQh_7a05rSJQ")]
    [Description(@"Margin to cover risks relating to a sponsored clearing member. That is were a third party carries out a number of obligations under the rulebook of the central counterparty on behalf of a clearing member but doing so creates additional risks for the central counterparty with respect to the clearing member.")]
    SponsorRiskMargin = MarginTypeCode.SponsorRiskMargin, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin called to cover a potential increase in current exposure due to the revaluation of a financial instrument, where such revaluation is caused by a sharp discontinuous increase in the probability of default of the financial instrument or major risk factor of such financial instrument.
    /// Encoded/decoded by serializers as "JTDR".
    /// </summary>
    [EnumMember(Value = "JTDR")]
    [IsoId("_AK8UwfqEEeaQh_7a05rSJQ")]
    [Description(@"Margin called to cover a potential increase in current exposure due to the revaluation of a financial instrument, where such revaluation is caused by a sharp discontinuous increase in the probability of default of the financial instrument or major risk factor of such financial instrument.")]
    JumpToDefaultRequirement = MarginTypeCode.JumpToDefaultRequirement, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin set called at the discretion of the caller.
    /// Encoded/decoded by serializers as "DRAO".
    /// </summary>
    [EnumMember(Value = "DRAO")]
    [IsoId("_BQ3bAfqEEeaQh_7a05rSJQ")]
    [Description(@"Margin set called at the discretion of the caller.")]
    DiscretionaryRiskAddOn = MarginTypeCode.DiscretionaryRiskAddOn, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Margin not categorised by any other margin type code.
    /// Encoded/decoded by serializers as "OTHR".
    /// </summary>
    [EnumMember(Value = "OTHR")]
    [IsoId("_BuB4IfqEEeaQh_7a05rSJQ")]
    [Description(@"Margin not categorised by any other margin type code.")]
    Other = MarginTypeCode.Other, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class MarginType2CodeMetadataExtensions
{
    private static readonly MarginType2CodeDropdownSource _dropdownSource = new MarginType2CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IMarginType2CodeDropdownRow GetMetadata(this MarginType2Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


