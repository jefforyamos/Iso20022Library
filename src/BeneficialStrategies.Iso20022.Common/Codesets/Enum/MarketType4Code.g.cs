//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for MarketType4Code.  ISO2002 ID# _aUmaVNp-Ed-ak6NoX_4Aeg_-863621443.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the type of place where a trade was executed, a price was sourced from, an instrument is listed.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_aUmaVNp-Ed-ak6NoX_4Aeg_-863621443")]
[Description(@"Specifies the type of place where a trade was executed, a price was sourced from, an instrument is listed.")]
[DerivedFrom(typeof(MarketTypeCode))]
public enum MarketType4Code
{
    /// <summary>
    /// The place is a fund (transfer agent, fund itself, etc.).
    /// Encoded/decoded by serializers as "FUND".
    /// </summary>
    [EnumMember(Value = "FUND")]
    [IsoId("_aUmaVdp-Ed-ak6NoX_4Aeg_-1841693350")]
    [Description(@"The place is a fund (transfer agent, fund itself, etc.).")]
    Fund = MarketTypeCode.Fund, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// The place is a local market.
    /// Encoded/decoded by serializers as "LMAR".
    /// </summary>
    [EnumMember(Value = "LMAR")]
    [IsoId("_aUmaVtp-Ed-ak6NoX_4Aeg_-790560278")]
    [Description(@"The place is a local market.")]
    LocalMarket = MarketTypeCode.LocalMarket, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// The place is theoretical.
    /// Encoded/decoded by serializers as "THEO".
    /// </summary>
    [EnumMember(Value = "THEO")]
    [IsoId("_aUmaV9p-Ed-ak6NoX_4Aeg_1996754313")]
    [Description(@"The place is theoretical.")]
    Theoretical = MarketTypeCode.Theoretical, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// The place is a vendor.
    /// Encoded/decoded by serializers as "VEND".
    /// </summary>
    [EnumMember(Value = "VEND")]
    [IsoId("_aUmaWNp-Ed-ak6NoX_4Aeg_-831064220")]
    [Description(@"The place is a vendor.")]
    Vendor = MarketTypeCode.Vendor, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class MarketType4CodeMetadataExtensions
{
    private static readonly MarketType4CodeDropdownSource _dropdownSource = new MarketType4CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IMarketType4CodeDropdownRow GetMetadata(this MarketType4Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


