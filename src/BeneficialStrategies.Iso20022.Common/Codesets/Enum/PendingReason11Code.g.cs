//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for PendingReason11Code.  ISO2002 ID# _dc-9MCdcEeOXAt_43VmZGw.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the reason the transaction/instruction is pending or failing settlement. Settlement on the instructed settlement date is still possible, status is pending. Settlement on the instructed settlement date is no longer possible, status is failing.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_dc-9MCdcEeOXAt_43VmZGw")]
[Description(@"Specifies the reason the transaction/instruction is pending or failing settlement. Settlement on the instructed settlement date is still possible, status is pending. Settlement on the instructed settlement date is no longer possible, status is failing.")]
[DerivedFrom(typeof(PendingFailingReasonCode))]
public enum PendingReason11Code
{
    /// <summary>
    /// Instruction was received after the account servicer's deadline. Processed on best effort basis.
    /// Encoded/decoded by serializers as "AccountServicerDeadlineMissed".
    /// </summary>
    [EnumMember(Value = "ADEA")]
    [IsoId("_V3td0SdwEeOXAt_43VmZGw")]
    [Description(@"Instruction was received after the account servicer's deadline. Processed on best effort basis.")]
    AccountServicerDeadlineMissed,
    
    /// <summary>
    /// Tax reclaim has been sent to the tax authorities.
    /// Encoded/decoded by serializers as "SentToTaxAuthorities".
    /// </summary>
    [EnumMember(Value = "AUTH")]
    [IsoId("_YMot0SdwEeOXAt_43VmZGw")]
    [Description(@"Tax reclaim has been sent to the tax authorities.")]
    SentToTaxAuthorities,
    
    /// <summary>
    /// Pending receipt of beneficiary owner details.
    /// Encoded/decoded by serializers as "PendingBeneficiaryOwnerDetails".
    /// </summary>
    [EnumMember(Value = "BOIS")]
    [IsoId("_hO70wSdwEeOXAt_43VmZGw")]
    [Description(@"Pending receipt of beneficiary owner details.")]
    PendingBeneficiaryOwnerDetails,
    
    /// <summary>
    /// Quantity of financial instruments does not match.
    /// Encoded/decoded by serializers as "QuantityDisagreement".
    /// </summary>
    [EnumMember(Value = "DQUA")]
    [IsoId("_jTyocSdwEeOXAt_43VmZGw")]
    [Description(@"Quantity of financial instruments does not match.")]
    QuantityDisagreement,
    
    /// <summary>
    /// Insufficient financial instruments in your account.
    /// Encoded/decoded by serializers as "LackOfSecurities".
    /// </summary>
    [EnumMember(Value = "LACK")]
    [IsoId("_kuGqUSdwEeOXAt_43VmZGw")]
    [Description(@"Insufficient financial instruments in your account.")]
    LackOfSecurities,
    
    /// <summary>
    /// Instruction was received after market deadline.
    /// Encoded/decoded by serializers as "MarketDeadlineMissed".
    /// </summary>
    [EnumMember(Value = "LATE")]
    [IsoId("_lx8F4SdwEeOXAt_43VmZGw")]
    [Description(@"Instruction was received after market deadline.")]
    MarketDeadlineMissed,
    
    /// <summary>
    /// Awaiting receipt of adequate certification.
    /// Encoded/decoded by serializers as "MissingCertification".
    /// </summary>
    [EnumMember(Value = "MCER")]
    [IsoId("_mv1RgSdwEeOXAt_43VmZGw")]
    [Description(@"Awaiting receipt of adequate certification.")]
    MissingCertification,
    
    /// <summary>
    /// Insufficient money in your account.
    /// Encoded/decoded by serializers as "InsufficientMoney".
    /// </summary>
    [EnumMember(Value = "MONY")]
    [IsoId("_n69n4SdwEeOXAt_43VmZGw")]
    [Description(@"Insufficient money in your account.")]
    InsufficientMoney,
    
    /// <summary>
    /// Other. See Narrative.
    /// Encoded/decoded by serializers as "Other".
    /// </summary>
    [EnumMember(Value = "OTHR")]
    [IsoId("_o7PZISdwEeOXAt_43VmZGw")]
    [Description(@"Other. See Narrative.")]
    Other,
    
    /// <summary>
    /// Payment has not been made by issuer.
    /// Encoded/decoded by serializers as "NoPayment".
    /// </summary>
    [EnumMember(Value = "NPAY")]
    [IsoId("_plCkESdwEeOXAt_43VmZGw")]
    [Description(@"Payment has not been made by issuer.")]
    NoPayment,
    
    /// <summary>
    /// Financial instruments have not been delivered by the issuer.
    /// Encoded/decoded by serializers as "NotDelivered".
    /// </summary>
    [EnumMember(Value = "NSEC")]
    [IsoId("_qSRdgSdwEeOXAt_43VmZGw")]
    [Description(@"Financial instruments have not been delivered by the issuer.")]
    NotDelivered,
    
    /// <summary>
    /// The instruction is pending receipt of securities, for example, from a purchase, loan etc.
    /// Encoded/decoded by serializers as "PendingReceipt".
    /// </summary>
    [EnumMember(Value = "PENR")]
    [IsoId("_rIbCYSdwEeOXAt_43VmZGw")]
    [Description(@"The instruction is pending receipt of securities, for example, from a purchase, loan etc.")]
    PendingReceipt,
    
    /// <summary>
    /// For tax reclaim, the event is pending, the tax reclaim is valid for the tax authorities.
    /// Encoded/decoded by serializers as "ValidForTaxAuthorities".
    /// </summary>
    [EnumMember(Value = "VLDA")]
    [IsoId("_sNwSwSdwEeOXAt_43VmZGw")]
    [Description(@"For tax reclaim, the event is pending, the tax reclaim is valid for the tax authorities.")]
    ValidForTaxAuthorities,
    
    /// <summary>
    /// Certificate number error.
    /// Encoded/decoded by serializers as "WrongCertificatesNumbers".
    /// </summary>
    [EnumMember(Value = "CERT")]
    [IsoId("_wSabASdwEeOXAt_43VmZGw")]
    [Description(@"Certificate number error.")]
    WrongCertificatesNumbers,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class PendingReason11CodeMetadataExtensions
{
    private static readonly PendingReason11CodeDropdownSource _dropdownSource = new PendingReason11CodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IPendingReason11CodeDropdownRow GetMetadata(this PendingReason11Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


