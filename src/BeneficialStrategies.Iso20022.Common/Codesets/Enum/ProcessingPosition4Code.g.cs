//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for ProcessingPosition4Code.  ISO2002 ID# _A2UAQBEhEeKG5rB3aM9OkQ.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20022.Codesets;

/// <summary>
/// Specifies when a transaction/instruction is to be executed relative to a linked transaction/instruction.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_A2UAQBEhEeKG5rB3aM9OkQ")]
[Description(@"Specifies when a transaction/instruction is to be executed relative to a linked transaction/instruction.")]
[DerivedFrom(typeof(ProcessingPositionCode))]
public enum ProcessingPosition4Code
{
    /// <summary>
    /// Specifies that the transaction/instruction is to be executed after the linked transaction/instruction.
    /// Encoded/decoded by serializers as "AFTE".
    /// </summary>
    [EnumMember(Value = "AFTE")]
    [IsoId("_DsSH0REhEeKG5rB3aM9OkQ")]
    [Description(@"Specifies that the transaction/instruction is to be executed after the linked transaction/instruction.")]
    After = ProcessingPositionCode.After, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Specifies that the transaction/instruction is to be executed before the linked transaction/instruction.
    /// Encoded/decoded by serializers as "BEFO".
    /// </summary>
    [EnumMember(Value = "BEFO")]
    [IsoId("_D2RKQREhEeKG5rB3aM9OkQ")]
    [Description(@"Specifies that the transaction/instruction is to be executed before the linked transaction/instruction.")]
    Before = ProcessingPositionCode.Before, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Specifies that the transaction/instruction is to be executed with the linked transaction/instruction.
    /// Encoded/decoded by serializers as "WITH".
    /// </summary>
    [EnumMember(Value = "WITH")]
    [IsoId("_EAs4oREhEeKG5rB3aM9OkQ")]
    [Description(@"Specifies that the transaction/instruction is to be executed with the linked transaction/instruction.")]
    With = ProcessingPositionCode.With, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class ProcessingPosition4CodeMetadataExtensions
{
    private static readonly ProcessingPosition4CodeDropdownSource _dropdownSource = new ProcessingPosition4CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static IProcessingPosition4CodeDropdownRow GetMetadata(this ProcessingPosition4Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


