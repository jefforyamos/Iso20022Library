//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for SettlementTransactionCondition13Code.  ISO2002 ID# _tm2EEAzVEeuUZuaHWzkTew.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the conditions under which the order/trade is to be settled.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_tm2EEAzVEeuUZuaHWzkTew")]
[Description(@"Specifies the conditions under which the order/trade is to be settled.")]
[DerivedFrom(typeof(SettlementTransactionConditionCode))]
public enum SettlementTransactionCondition13Code
{
    /// <summary>
    /// Tax-exempt financial instruments are to be settled.
    /// Encoded/decoded by serializers as "Clean".
    /// </summary>
    [EnumMember(Value = "CLEN")]
    [IsoId("_tm2EEgzVEeuUZuaHWzkTew")]
    [Description(@"Tax-exempt financial instruments are to be settled.")]
    Clean,
    
    /// <summary>
    /// Taxable financial instruments are to be settled.
    /// Encoded/decoded by serializers as "Dirty".
    /// </summary>
    [EnumMember(Value = "DIRT")]
    [IsoId("_tm2EFAzVEeuUZuaHWzkTew")]
    [Description(@"Taxable financial instruments are to be settled.")]
    Dirty,
    
    /// <summary>
    /// Matching receipt instruction not required (only for concerned international or national central securities depositories).
    /// Encoded/decoded by serializers as "DeliveryWithoutMatching".
    /// </summary>
    [EnumMember(Value = "DLWM")]
    [IsoId("_tm2EEQzVEeuUZuaHWzkTew")]
    [Description(@"Matching receipt instruction not required (only for concerned international or national central securities depositories).")]
    DeliveryWithoutMatching,
    
    /// <summary>
    /// Securities are to be physically settled.
    /// Encoded/decoded by serializers as "Physical".
    /// </summary>
    [EnumMember(Value = "PHYS")]
    [IsoId("_tm2EFQzVEeuUZuaHWzkTew")]
    [Description(@"Securities are to be physically settled.")]
    Physical,
    
    /// <summary>
    /// Settlement transactions to be settled with special delivery.
    /// Encoded/decoded by serializers as "SpecialDelivery".
    /// </summary>
    [EnumMember(Value = "SPDL")]
    [IsoId("_tm2EFgzVEeuUZuaHWzkTew")]
    [Description(@"Settlement transactions to be settled with special delivery.")]
    SpecialDelivery,
    
    /// <summary>
    /// Money and financial instruments settle in different locations.
    /// Encoded/decoded by serializers as "SplitSettlement".
    /// </summary>
    [EnumMember(Value = "SPST")]
    [IsoId("_tm2EFwzVEeuUZuaHWzkTew")]
    [Description(@"Money and financial instruments settle in different locations.")]
    SplitSettlement,
    
    /// <summary>
    /// No market claim should be automatically generated.
    /// Encoded/decoded by serializers as "NoAutomaticMarketClaim".
    /// </summary>
    [EnumMember(Value = "NOMC")]
    [IsoId("_tm2EEwzVEeuUZuaHWzkTew")]
    [Description(@"No market claim should be automatically generated.")]
    NoAutomaticMarketClaim,
    
    /// <summary>
    /// Identification of settlement instructions created as a result of a partial successful buy-in.
    /// Encoded/decoded by serializers as "PartialSuccessfulBuyIn".
    /// </summary>
    [EnumMember(Value = "BPSS")]
    [IsoId("_ySxnsAzVEeuUZuaHWzkTew")]
    [Description(@"Identification of settlement instructions created as a result of a partial successful buy-in.")]
    PartialSuccessfulBuyIn,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class SettlementTransactionCondition13CodeMetadataExtensions
{
    private static readonly SettlementTransactionCondition13CodeDropdownSource _dropdownSource = new SettlementTransactionCondition13CodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ISettlementTransactionCondition13CodeDropdownRow GetMetadata(this SettlementTransactionCondition13Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


