//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for TaxWithholdingMethod3Code.  ISO2002 ID# _nyrU8L-IEeWfsa741pI6WA.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the method by which the tax on the interests is to be processed i.e. either withheld at source or reported to tax authorities or a tax certificate has been provided by the beneficiary.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_nyrU8L-IEeWfsa741pI6WA")]
[Description(@"Specifies the method by which the tax on the interests is to be processed i.e. either withheld at source or reported to tax authorities or a tax certificate has been provided by the beneficiary.")]
[DerivedFrom(typeof(TaxWithholdingMethodCode))]
public enum TaxWithholdingMethod3Code
{
    /// <summary>
    /// Minority interest tax is withheld.
    /// Encoded/decoded by serializers as "MinorityInterestTax".
    /// </summary>
    [EnumMember(Value = "MITX")]
    [IsoId("_rHlbQb-IEeWfsa741pI6WA")]
    [Description(@"Minority interest tax is withheld.")]
    MinorityInterestTax,
    
    /// <summary>
    /// Withholding tax is applied to an investment company.
    /// Encoded/decoded by serializers as "InvestmentCompany".
    /// </summary>
    [EnumMember(Value = "INVE")]
    [IsoId("_sBdCgb-IEeWfsa741pI6WA")]
    [Description(@"Withholding tax is applied to an investment company.")]
    InvestmentCompany,
    
    /// <summary>
    /// Dividend tax is exempt according to the accountant.
    /// Encoded/decoded by serializers as "Accountant".
    /// </summary>
    [EnumMember(Value = "ACCT")]
    [IsoId("_shvsIb-IEeWfsa741pI6WA")]
    [Description(@"Dividend tax is exempt according to the accountant.")]
    Accountant,
    
    /// <summary>
    /// Dividend tax is exempt.
    /// Encoded/decoded by serializers as "Exempt".
    /// </summary>
    [EnumMember(Value = "EXMT")]
    [IsoId("_tfyBsb-IEeWfsa741pI6WA")]
    [Description(@"Dividend tax is exempt.")]
    Exempt,
    
    /// <summary>
    /// Tax information is reported to the tax authorities and therefore not withheld at source.
    /// Encoded/decoded by serializers as "ReportTax".
    /// </summary>
    [EnumMember(Value = "REPT")]
    [IsoId("_y3UHEb-IEeWfsa741pI6WA")]
    [Description(@"Tax information is reported to the tax authorities and therefore not withheld at source.")]
    ReportTax,
    
    /// <summary>
    /// Tax certificate is provided by the beneficiary from its tax authority in its country of residence. Therefore, the obligation of withholding tax is waived and tax information will be reported to the tax authorities.
    /// Encoded/decoded by serializers as "TaxCertificate".
    /// </summary>
    [EnumMember(Value = "CRTF")]
    [IsoId("_y_WBsb-IEeWfsa741pI6WA")]
    [Description(@"Tax certificate is provided by the beneficiary from its tax authority in its country of residence. Therefore, the obligation of withholding tax is waived and tax information will be reported to the tax authorities.")]
    TaxCertificate,
    
    /// <summary>
    /// Withholding tax is applied to a corporate.
    /// Encoded/decoded by serializers as "WithholdingCorporateTax".
    /// </summary>
    [EnumMember(Value = "WHCO")]
    [IsoId("_zLZgsb-IEeWfsa741pI6WA")]
    [Description(@"Withholding tax is applied to a corporate.")]
    WithholdingCorporateTax,
    
    /// <summary>
    /// Tax is withheld at source.
    /// Encoded/decoded by serializers as "WithholdTax".
    /// </summary>
    [EnumMember(Value = "WTHD")]
    [IsoId("_zSr0cb-IEeWfsa741pI6WA")]
    [Description(@"Tax is withheld at source.")]
    WithholdTax,
    
    /// <summary>
    /// Tax is withheld at source and the tax information is also reported to the tax authorities.
    /// Encoded/decoded by serializers as "WithholdTaxAndReport".
    /// </summary>
    [EnumMember(Value = "WTRE")]
    [IsoId("_zauWIL-IEeWfsa741pI6WA")]
    [Description(@"Tax is withheld at source and the tax information is also reported to the tax authorities.")]
    WithholdTaxAndReport,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class TaxWithholdingMethod3CodeMetadataExtensions
{
    private static readonly TaxWithholdingMethod3CodeDropdownSource _dropdownSource = new TaxWithholdingMethod3CodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ITaxWithholdingMethod3CodeDropdownRow GetMetadata(this TaxWithholdingMethod3Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


