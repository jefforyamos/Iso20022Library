//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for TradeCertificateType2Code.  ISO2002 ID# _YmLwt9p-Ed-ak6NoX_4Aeg_1999753422.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Specifies the type of trade certificate.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_YmLwt9p-Ed-ak6NoX_4Aeg_1999753422")]
[Description(@"Specifies the type of trade certificate.")]
[DerivedFrom(typeof(TradeCertificateTypeCode))]
public enum TradeCertificateType2Code
{
    /// <summary>
    /// Beneficiary certificate.
    /// Encoded/decoded by serializers as "BENE".
    /// </summary>
    [EnumMember(Value = "BENE")]
    [IsoId("_YmLwuNp-Ed-ak6NoX_4Aeg_2058856409")]
    [Description(@"Beneficiary certificate.")]
    Beneficiary = TradeCertificateTypeCode.Beneficiary, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Shipping line certificate.
    /// Encoded/decoded by serializers as "SHIP".
    /// </summary>
    [EnumMember(Value = "SHIP")]
    [IsoId("_YmLwudp-Ed-ak6NoX_4Aeg_2058856410")]
    [Description(@"Shipping line certificate.")]
    ShippingLine = TradeCertificateTypeCode.ShippingLine, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Undefined certificate at this stage.
    /// Encoded/decoded by serializers as "UND1".
    /// </summary>
    [EnumMember(Value = "UND1")]
    [IsoId("_YmVhsNp-Ed-ak6NoX_4Aeg_2058856418")]
    [Description(@"Undefined certificate at this stage.")]
    Undefined1 = TradeCertificateTypeCode.Undefined1, // same ordinal as derivation source for type conversions
    
    /// <summary>
    /// Undefined certificate at this stage.
    /// Encoded/decoded by serializers as "UND2".
    /// </summary>
    [EnumMember(Value = "UND2")]
    [IsoId("_YmVhsdp-Ed-ak6NoX_4Aeg_2058856419")]
    [Description(@"Undefined certificate at this stage.")]
    Undefined2 = TradeCertificateTypeCode.Undefined2, // same ordinal as derivation source for type conversions
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class TradeCertificateType2CodeMetadataExtensions
{
    private static readonly TradeCertificateType2CodeDropdownSource _dropdownSource = new TradeCertificateType2CodeDropdownSource();
    
    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ITradeCertificateType2CodeDropdownRow GetMetadata(this TradeCertificateType2Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


