//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for TradeExecutionSessionCode.  ISO2002 ID# _YmerpNp-Ed-ak6NoX_4Aeg_336259624.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Represents a specific market trading session. It is used to identify a portion of the session where the execution might take place ("after market", "pre-market").|It is used to support order routing, quoting, and trade and market data reporting. For instance, orders can be routed to one or more Trading Sessions. Examples of Trading Session usage may be to facilitate extended hours trading, to differentiate between concurrent electronic and open-outcry trading, or to differentiate block and/or oddlot trading.|It is used by Exchanges, ECN's, and ATS's.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_YmerpNp-Ed-ak6NoX_4Aeg_336259624")]
[Description(@"Represents a specific market trading session. It is used to identify a portion of the session where the execution might take place (""after market"", ""pre-market"").|It is used to support order routing, quoting, and trade and market data reporting. For instance, orders can be routed to one or more Trading Sessions. Examples of Trading Session usage may be to facilitate extended hours trading, to differentiate between concurrent electronic and open-outcry trading, or to differentiate block and/or oddlot trading.|It is used by Exchanges, ECN's, and ATS's.")]
public enum TradeExecutionSessionCode
{
    /// <summary>
    /// Opening Session. 8: 00 AM - 9: 30 AM Eastern of the Archipelago Exchange (Pacific Stock Exchange).
    /// Encoded/decoded by serializers as "ACHO".
    /// </summary>
    [EnumMember(Value = "ACHO")]
    [IsoId("_Ymerpdp-Ed-ak6NoX_4Aeg_336259625")]
    [Description(@"Opening Session. 8: 00 AM - 9: 30 AM Eastern of the Archipelago Exchange (Pacific Stock Exchange).")]
    ArchipelagoOpeningSession,
    
    /// <summary>
    /// Core Trading Session. 9: 30 AM - 4: 00 PM Eastern of the Archipelago Exchange (Pacific Stock Exchange).
    /// Encoded/decoded by serializers as "ACHC".
    /// </summary>
    [EnumMember(Value = "ACHC")]
    [IsoId("_Ymerptp-Ed-ak6NoX_4Aeg_336259626")]
    [Description(@"Core Trading Session. 9: 30 AM - 4: 00 PM Eastern of the Archipelago Exchange (Pacific Stock Exchange).")]
    ArchipelagoCoreSession,
    
    /// <summary>
    /// Late Trading Session. 4: 00 PM - 8: 00 PM Easternof the Archipelago Exchange (Pacific Stock Exchange).
    /// Encoded/decoded by serializers as "ACHL".
    /// </summary>
    [EnumMember(Value = "ACHL")]
    [IsoId("_Ymerp9p-Ed-ak6NoX_4Aeg_336259627")]
    [Description(@"Late Trading Session. 4: 00 PM - 8: 00 PM Easternof the Archipelago Exchange (Pacific Stock Exchange).")]
    ArchipelagoLateSession,
    
    /// <summary>
    /// Early Morning Electronic Trading Session of the Chicago Board Options Exchange.
    /// Encoded/decoded by serializers as "WAM1".
    /// </summary>
    [EnumMember(Value = "WAM1")]
    [IsoId("_YmerqNp-Ed-ak6NoX_4Aeg_336259635")]
    [Description(@"Early Morning Electronic Trading Session of the Chicago Board Options Exchange.")]
    ChicagoBoardOptionsEarlySession,
    
    /// <summary>
    /// Regular hours open outcry market of the Chicago Board Options Exchange.
    /// Encoded/decoded by serializers as "WMAI".
    /// </summary>
    [EnumMember(Value = "WMAI")]
    [IsoId("_YmocoNp-Ed-ak6NoX_4Aeg_336259636")]
    [Description(@"Regular hours open outcry market of the Chicago Board Options Exchange.")]
    ChicagoBoardOptionsRegularHours,
    
    /// <summary>
    /// An electronic communication system operated by Nagoya Securities Exchange.
    /// Encoded/decoded by serializers as "NNET".
    /// </summary>
    [EnumMember(Value = "NNET")]
    [IsoId("_Ymocodp-Ed-ak6NoX_4Aeg_336259637")]
    [Description(@"An electronic communication system operated by Nagoya Securities Exchange.")]
    NagoyaExchange,
    
    /// <summary>
    /// An electronic communication system by which the Osaka Securities Exchange (OSE), OSE members (Securities companies) and investors are directly connected with each other via a multi-layered computer network.
    /// Encoded/decoded by serializers as "JNET".
    /// </summary>
    [EnumMember(Value = "JNET")]
    [IsoId("_Ymocotp-Ed-ak6NoX_4Aeg_336259638")]
    [Description(@"An electronic communication system by which the Osaka Securities Exchange (OSE), OSE members (Securities companies) and investors are directly connected with each other via a multi-layered computer network.")]
    OsakaExchange,
    
    /// <summary>
    /// An off hour trade session of Tokyo Stock Exchange (TSE) for TSE listed stocks only. For Single/List trade.
    /// Encoded/decoded by serializers as "TOS1".
    /// </summary>
    [EnumMember(Value = "TOS1")]
    [IsoId("_Ymoco9p-Ed-ak6NoX_4Aeg_336259639")]
    [Description(@"An off hour trade session of Tokyo Stock Exchange (TSE) for TSE listed stocks only. For Single/List trade.")]
    TokyoSingleListedTrade,
    
    /// <summary>
    /// An off hour trade session of Tokyo Stock Exchange (TSE) for TSE listed stocks only. For trade based on close price of regular trading session.
    /// Encoded/decoded by serializers as "TOS2".
    /// </summary>
    [EnumMember(Value = "TOS2")]
    [IsoId("_YmocpNp-Ed-ak6NoX_4Aeg_336259640")]
    [Description(@"An off hour trade session of Tokyo Stock Exchange (TSE) for TSE listed stocks only. For trade based on close price of regular trading session.")]
    TokyoClosingPriceTrade,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class TradeExecutionSessionCodeMetadataExtensions
{
    private static readonly TradeExecutionSessionCodeDropdownSource _dropdownSource = new TradeExecutionSessionCodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ITradeExecutionSessionCodeDropdownRow GetMetadata(this TradeExecutionSessionCode code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


