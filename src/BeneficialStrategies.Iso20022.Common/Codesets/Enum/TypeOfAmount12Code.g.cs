//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by CodesetEnumGenerator for TypeOfAmount12Code.  ISO2002 ID# _xy4xoFT6EeetiruPyDPo0Q.
//

using System.Reflection;
using System.Runtime.Serialization;

namespace BeneficialStrategies.Iso20222.Common;

/// <summary>
/// Type of amount.
/// </summary>
[DataContract]
[Serializable]
[IsoId("_xy4xoFT6EeetiruPyDPo0Q")]
[Description(@"Type of amount.")]
[DerivedFrom(typeof(TypeOfAmountCode))]
public enum TypeOfAmount12Code
{
    /// <summary>
    /// Transaction amount that has been authorised.
    /// Encoded/decoded by serializers as "AuthorisedAmount".
    /// </summary>
    [EnumMember(Value = "AMTH")]
    [IsoId("_z_oWAVT6EeetiruPyDPo0Q")]
    [Description(@"Transaction amount that has been authorised.")]
    AuthorisedAmount,
    
    /// <summary>
    /// Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount.
    /// Encoded/decoded by serializers as "Discount".
    /// </summary>
    [EnumMember(Value = "DCNT")]
    [IsoId("_4CMzkVT6EeetiruPyDPo0Q")]
    [Description(@"Discount, rebate or voucher, related to loyalty programs. This amount is counted as a negative amount.")]
    Discount,
    
    /// <summary>
    /// Fee applied by the card issuer to the cardholder.
    /// Encoded/decoded by serializers as "IssuerCardholderFee".
    /// </summary>
    [EnumMember(Value = "ISCF")]
    [IsoId("_5p5KIVT6EeetiruPyDPo0Q")]
    [Description(@"Fee applied by the card issuer to the cardholder.")]
    IssuerCardholderFee,
    
    /// <summary>
    /// Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase.
    /// Encoded/decoded by serializers as "Cumulative".
    /// </summary>
    [EnumMember(Value = "CUAT")]
    [IsoId("_IFzkoVT8EeetiruPyDPo0Q")]
    [Description(@"Contains the total amount of all authorisations related to the same cardholder purchase activities. Example: total of all incremental or splitted shipment authorisations for the same purchase.")]
    Cumulative,
    
    /// <summary>
    /// Maximum amount (the final amount must be less or equal).
    /// Encoded/decoded by serializers as "Maximum".
    /// </summary>
    [EnumMember(Value = "MAXI")]
    [IsoId("_NlW9kVT8EeetiruPyDPo0Q")]
    [Description(@"Maximum amount (the final amount must be less or equal).")]
    Maximum,
    
    /// <summary>
    /// Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined.
    /// Encoded/decoded by serializers as "MaximumAllowedAmount".
    /// </summary>
    [EnumMember(Value = "AMTX")]
    [IsoId("_OU91kVT8EeetiruPyDPo0Q")]
    [Description(@"Maximum amount allowed for the transaction in the transaction amount currency if the transaction amount of the request was declined.")]
    MaximumAllowedAmount,
    
    /// <summary>
    /// Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined.
    /// Encoded/decoded by serializers as "MinimumAllowedAmount".
    /// </summary>
    [EnumMember(Value = "AMTN")]
    [IsoId("_OdmNIVT8EeetiruPyDPo0Q")]
    [Description(@"Minimum amount allowed in the TransactionAmount currency if the transaction amount of the request was declined.")]
    MinimumAllowedAmount,
    
    /// <summary>
    /// Transaction amount that has been requested to be authorised.
    /// Encoded/decoded by serializers as "RequestedAmount".
    /// </summary>
    [EnumMember(Value = "AMTQ")]
    [IsoId("_PRg9YVT8EeetiruPyDPo0Q")]
    [Description(@"Transaction amount that has been requested to be authorised.")]
    RequestedAmount,
    
    /// <summary>
    /// Other type of amount defined at national level.
    /// Encoded/decoded by serializers as "OtherNational".
    /// </summary>
    [EnumMember(Value = "OTHN")]
    [IsoId("_PxWUAVT8EeetiruPyDPo0Q")]
    [Description(@"Other type of amount defined at national level.")]
    OtherNational,
    
    /// <summary>
    /// Other type of amount defined at private level.
    /// Encoded/decoded by serializers as "OtherPrivate".
    /// </summary>
    [EnumMember(Value = "OTHP")]
    [IsoId("_P_e2oVT8EeetiruPyDPo0Q")]
    [Description(@"Other type of amount defined at private level.")]
    OtherPrivate,
    
    /// <summary>
    /// Requested cashback amount
    /// Encoded/decoded by serializers as "RequestedCashback".
    /// </summary>
    [EnumMember(Value = "RQCH")]
    [IsoId("_2t9sYRcJEeit0dtP9bTmEg")]
    [Description(@"Requested cashback amount")]
    RequestedCashback,
    
    /// <summary>
    /// Amount anticipated for the transaction
    /// Encoded/decoded by serializers as "Anticipated".
    /// </summary>
    [EnumMember(Value = "ANTA")]
    [IsoId("_27WoIRcJEeit0dtP9bTmEg")]
    [Description(@"Amount anticipated for the transaction")]
    Anticipated,
    
    /// <summary>
    /// Local amount before DCC (Dynamic Currency Conversion) was applied.
    /// Encoded/decoded by serializers as "PreDCC".
    /// </summary>
    [EnumMember(Value = "PDCC")]
    [IsoId("_qD6MgekUEemeDPHh-U9b6w")]
    [Description(@"Local amount before DCC (Dynamic Currency Conversion) was applied.")]
    PreDCC,
    
}


/// <summary>
/// Provides access to the metadata associated with a specific enum.
/// </summary>
public static class TypeOfAmount12CodeMetadataExtensions
{
    private static readonly TypeOfAmount12CodeDropdownSource _dropdownSource = new TypeOfAmount12CodeDropdownSource();

    /// <summary>
    /// Returns the metadata associated with this enum value.
    /// </summary>
    public static ITypeOfAmount12CodeDropdownRow GetMetadata(this TypeOfAmount12Code code)
    {
        return _dropdownSource.Lookup(code) ;
    }
}


