//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ATMSecurityConfiguration3.  ISO2002 ID# _nKkasYr7EeSvuOJS0mmL0g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Configuration of the encryption or digital envelope, if the security module is able to perform encryption.
/// </summary>
public partial record ATMSecurityConfiguration3
{
    #nullable enable
    
    /// <summary>
    /// True if the security module is able to perform encryption with an asymmetric key.
    /// </summary>
    public IsoTrueFalseIndicator? AsymmetricEncryption { get; init; } 
    /// <summary>
    /// True if the security module is able to identify an asymmetric key with certificate issuer X.500 name and certificate serial number. False if a proprietary asymmetric key identifier is required.
    /// </summary>
    public IsoTrueFalseIndicator? AsymmetricKeyStandardIdentification { get; init; } 
    /// <summary>
    /// Asymmetric encryption algorithm the security module is able to manage.
    /// </summary>
    public Algorithm7Code? AsymmetricEncryptionAlgorithm { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// True if the security module is able to manage a symmetric transport session key to protect cryptographic keys and data. False if only a previously exchanged symmetric key must be used; a proprietary symmetric key identifier is then used.
    /// </summary>
    public IsoTrueFalseIndicator? SymmetricTransportKey { get; init; } 
    /// <summary>
    /// Symmetric transport session key algorithm the security module is able to manage.
    /// </summary>
    public Algorithm13Code? SymmetricTransportKeyAlgorithm { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Symmetric encryption algorithm the security module is able to manage.
    /// </summary>
    public Algorithm15Code? SymmetricEncryptionAlgorithm { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Format of data before encryption, if the format is not plaintext or implicit.
    /// </summary>
    public EncryptionFormat1Code? EncryptionFormat { get; init;  } // Warning: Don't know multiplicity.
    
    #nullable disable
}
