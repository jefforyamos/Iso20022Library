//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ATMTransaction16.  ISO2002 ID# _0Rvq4a4HEeWL1uap3dNhCQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Response to the deposit request.
/// </summary>
public partial record ATMTransaction16
     : IIsoXmlSerilizable<ATMTransaction16>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the transaction assigned by the ATM.
    /// </summary>
    public required TransactionIdentifier1 TransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of the reconciliation period assigned by the ATM.
    /// </summary>
    public IsoMax35Text? ReconciliationIdentification { get; init; } 
    /// <summary>
    /// True if a completion advice has to be sent after the end of the transaction.
    /// </summary>
    public IsoTrueFalseIndicator? CompletionRequired { get; init; } 
    /// <summary>
    /// Unprotected account information.
    /// </summary>
    public CardAccount10? AccountData { get; init; } 
    /// <summary>
    /// Encryption of account information.
    /// </summary>
    public ContentInformationType10? ProtectedAccountData { get; init; } 
    /// <summary>
    /// Total authorised amount of the deposit transaction.
    /// </summary>
    public required AmountAndCurrency1 TotalAuthorisedAmount { get; init; } 
    /// <summary>
    /// Total requested amount.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? TotalRequestedAmount { get; init; } 
    /// <summary>
    /// Detail of the requested amounts for the deposit transaction.
    /// </summary>
    public DetailedAmount16? DetailedRequestedAmount { get; init; } 
    /// <summary>
    /// Additional charge (for instance tax or fee).
    /// </summary>
    public DetailedAmount13? AdditionalCharge { get; init; } 
    /// <summary>
    /// Outcome of the deposit authorisation.
    /// </summary>
    public AuthorisationResult13? AuthorisationResult { get; init; } 
    /// <summary>
    /// Sequence of one or more TLV data elements from the ATM application, in accordance with ISO 7816-6, not in a specific order. Present if the transaction is performed with an EMV chip card application.
    /// </summary>
    public IsoMax10000Binary? ICCRelatedData { get; init; } 
    /// <summary>
    /// Maintenance command to perform on the ATM.
    /// </summary>
    public ATMCommand7? Command { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ReconciliationIdentification is IsoMax35Text ReconciliationIdentificationValue)
        {
            writer.WriteStartElement(null, "RcncltnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ReconciliationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CompletionRequired is IsoTrueFalseIndicator CompletionRequiredValue)
        {
            writer.WriteStartElement(null, "CmpltnReqrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CompletionRequiredValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AccountData is CardAccount10 AccountDataValue)
        {
            writer.WriteStartElement(null, "AcctData", xmlNamespace );
            AccountDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProtectedAccountData is ContentInformationType10 ProtectedAccountDataValue)
        {
            writer.WriteStartElement(null, "PrtctdAcctData", xmlNamespace );
            ProtectedAccountDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TtlAuthrsdAmt", xmlNamespace );
        TotalAuthorisedAmount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TotalRequestedAmount is IsoImpliedCurrencyAndAmount TotalRequestedAmountValue)
        {
            writer.WriteStartElement(null, "TtlReqdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(TotalRequestedAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (DetailedRequestedAmount is DetailedAmount16 DetailedRequestedAmountValue)
        {
            writer.WriteStartElement(null, "DtldReqdAmt", xmlNamespace );
            DetailedRequestedAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalCharge is DetailedAmount13 AdditionalChargeValue)
        {
            writer.WriteStartElement(null, "AddtlChrg", xmlNamespace );
            AdditionalChargeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AuthorisationResult is AuthorisationResult13 AuthorisationResultValue)
        {
            writer.WriteStartElement(null, "AuthstnRslt", xmlNamespace );
            AuthorisationResultValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ICCRelatedData is IsoMax10000Binary ICCRelatedDataValue)
        {
            writer.WriteStartElement(null, "ICCRltdData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10000Binary(ICCRelatedDataValue)); // data type Max10000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (Command is ATMCommand7 CommandValue)
        {
            writer.WriteStartElement(null, "Cmd", xmlNamespace );
            CommandValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ATMTransaction16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
