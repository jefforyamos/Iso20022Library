//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ATMTransaction2.  ISO2002 ID# _xrLCMYp4EeS3NqNpgnMh2w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Response to the withdrawal transaction request.
/// </summary>
public partial record ATMTransaction2
     : IIsoXmlSerilizable<ATMTransaction2>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the transaction assigned by the ATM.
    /// </summary>
    public required TransactionIdentifier1 TransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of the reconciliation period assigned by the ATM.
    /// </summary>
    public IsoMax35Text? ReconciliationIdentification { get; init; } 
    /// <summary>
    /// True if a withdrawal completion advice has to be sent after the end of the transaction.
    /// </summary>
    public IsoTrueFalseIndicator? CompletionRequired { get; init; } 
    /// <summary>
    /// Unprotected account information.
    /// </summary>
    public CardAccount4? AccountData { get; init; } 
    /// <summary>
    /// Encryption of account information.
    /// </summary>
    public ContentInformationType10? ProtectedAccountData { get; init; } 
    /// <summary>
    /// Total authorised amount.
    /// </summary>
    public required AmountAndCurrency1 TotalAuthorisedAmount { get; init; } 
    /// <summary>
    /// Total requested amount.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? TotalRequestedAmount { get; init; } 
    /// <summary>
    /// Detail of the requested amounts for the withdrawal transaction.
    /// </summary>
    public DetailedAmount12? DetailedRequestedAmount { get; init; } 
    /// <summary>
    /// Currency conversion accepted by the customer, either to convert the amount to dispense in the base currency of the ATM, or to convert the total requested amount in the currency of the customer (so called dynamic currency conversion).
    /// </summary>
    public CurrencyConversion4? CurrencyConversion { get; init; } 
    /// <summary>
    /// Additional charge (for instance tax or fee).
    /// </summary>
    public DetailedAmount13? AdditionalCharge { get; init; } 
    /// <summary>
    /// Limit of amounts for the customer.
    /// </summary>
    public ATMTransactionAmounts2? Limits { get; init; } 
    /// <summary>
    /// Media mix algorithm requested by the ATM Host, the identification of the algorithm is an agreement between the ATM and the ATM manager.
    /// </summary>
    public IsoMax35Text? MixType { get; init; } 
    /// <summary>
    /// Media mix selected requested by the ATM Host.
    /// </summary>
    public ATMMediaMix1? Mix { get; init; } 
    /// <summary>
    /// Outcome of the withdrawal authorisation.
    /// </summary>
    public required AuthorisationResult9 AuthorisationResult { get; init; } 
    /// <summary>
    /// Sequence of one or more TLV data elements from the ATM application, in accordance with ISO 7816-6, not in a specific order. Present if the transaction is performed with an EMV chip card application.
    /// </summary>
    public IsoMax10000Binary? ICCRelatedData { get; init; } 
    /// <summary>
    /// Maintenance command to perform on the ATM.
    /// </summary>
    public ATMCommand1? Command { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ReconciliationIdentification is IsoMax35Text ReconciliationIdentificationValue)
        {
            writer.WriteStartElement(null, "RcncltnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ReconciliationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CompletionRequired is IsoTrueFalseIndicator CompletionRequiredValue)
        {
            writer.WriteStartElement(null, "CmpltnReqrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CompletionRequiredValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AccountData is CardAccount4 AccountDataValue)
        {
            writer.WriteStartElement(null, "AcctData", xmlNamespace );
            AccountDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProtectedAccountData is ContentInformationType10 ProtectedAccountDataValue)
        {
            writer.WriteStartElement(null, "PrtctdAcctData", xmlNamespace );
            ProtectedAccountDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TtlAuthrsdAmt", xmlNamespace );
        TotalAuthorisedAmount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TotalRequestedAmount is IsoImpliedCurrencyAndAmount TotalRequestedAmountValue)
        {
            writer.WriteStartElement(null, "TtlReqdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(TotalRequestedAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (DetailedRequestedAmount is DetailedAmount12 DetailedRequestedAmountValue)
        {
            writer.WriteStartElement(null, "DtldReqdAmt", xmlNamespace );
            DetailedRequestedAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrencyConversion is CurrencyConversion4 CurrencyConversionValue)
        {
            writer.WriteStartElement(null, "CcyConvs", xmlNamespace );
            CurrencyConversionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalCharge is DetailedAmount13 AdditionalChargeValue)
        {
            writer.WriteStartElement(null, "AddtlChrg", xmlNamespace );
            AdditionalChargeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Limits is ATMTransactionAmounts2 LimitsValue)
        {
            writer.WriteStartElement(null, "Lmts", xmlNamespace );
            LimitsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MixType is IsoMax35Text MixTypeValue)
        {
            writer.WriteStartElement(null, "MixTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MixTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Mix is ATMMediaMix1 MixValue)
        {
            writer.WriteStartElement(null, "Mix", xmlNamespace );
            MixValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AuthstnRslt", xmlNamespace );
        AuthorisationResult.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ICCRelatedData is IsoMax10000Binary ICCRelatedDataValue)
        {
            writer.WriteStartElement(null, "ICCRltdData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10000Binary(ICCRelatedDataValue)); // data type Max10000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (Command is ATMCommand1 CommandValue)
        {
            writer.WriteStartElement(null, "Cmd", xmlNamespace );
            CommandValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ATMTransaction2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
