//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ATMTransactionAmounts8.  ISO2002 ID# _ucGeUa-VEeWJvLRJ8PsD_w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Limit of amounts for the customer.
/// </summary>
public partial record ATMTransactionAmounts8
     : IIsoXmlSerilizable<ATMTransactionAmounts8>
{
    #nullable enable
    
    /// <summary>
    /// Default currency of the limits.
    /// </summary>
    public ActiveCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Maximum amount allowed for a transaction in the service.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? MaximumPossibleAmount { get; init; } 
    /// <summary>
    /// Minimum amount allowed for a transaction in the service.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? MinimumPossibleAmount { get; init; } 
    /// <summary>
    /// Additional amount that may be displayed to the customer, for instance the daily limit or the daily balance for the service.
    /// </summary>
    public ATMTransactionAmounts7? AdditionalAmount { get; init; } 
    /// <summary>
    /// Limit of deposited media for the customer.
    /// </summary>
    public ATMTransactionAmounts9? DepositLimits { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Currency is ActiveCurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (MaximumPossibleAmount is IsoImpliedCurrencyAndAmount MaximumPossibleAmountValue)
        {
            writer.WriteStartElement(null, "MaxPssblAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(MaximumPossibleAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (MinimumPossibleAmount is IsoImpliedCurrencyAndAmount MinimumPossibleAmountValue)
        {
            writer.WriteStartElement(null, "MinPssblAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(MinimumPossibleAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AdditionalAmount is ATMTransactionAmounts7 AdditionalAmountValue)
        {
            writer.WriteStartElement(null, "AddtlAmt", xmlNamespace );
            AdditionalAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositLimits is ATMTransactionAmounts9 DepositLimitsValue)
        {
            writer.WriteStartElement(null, "DpstLmts", xmlNamespace );
            DepositLimitsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ATMTransactionAmounts8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
