//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AcceptorConfigurationContent3.  ISO2002 ID# _k7tqETZ6EeOP_KvUKe29ng.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Content of the acceptor configuration.
/// </summary>
public partial record AcceptorConfigurationContent3
     : IIsoXmlSerilizable<AcceptorConfigurationContent3>
{
    #nullable enable
    
    /// <summary>
    /// Acceptor parameters dedicated to an acquirer protocol.
    /// </summary>
    public AcquirerProtocolParameters6? AcquirerProtocolParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to the merchant.
    /// </summary>
    public IsoMax10000Binary? MerchantParameters { get; init; } 
    /// <summary>
    /// Manufacturer configuration parameters of the point of interaction.
    /// </summary>
    public PaymentTerminalParameters1? TerminalParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to a payment application of the point of interaction.
    /// </summary>
    public ApplicationParameters3? ApplicationParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to the communication with an acquirer host.
    /// </summary>
    public HostCommunicationParameter2? HostCommunicationParameters { get; init; } 
    /// <summary>
    /// Point of interaction parameters related to the security of software application and application protocol.
    /// </summary>
    public SecurityParameters2? SecurityParameters { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AcquirerProtocolParameters is AcquirerProtocolParameters6 AcquirerProtocolParametersValue)
        {
            writer.WriteStartElement(null, "AcqrrPrtcolParams", xmlNamespace );
            AcquirerProtocolParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MerchantParameters is IsoMax10000Binary MerchantParametersValue)
        {
            writer.WriteStartElement(null, "MrchntParams", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10000Binary(MerchantParametersValue)); // data type Max10000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (TerminalParameters is PaymentTerminalParameters1 TerminalParametersValue)
        {
            writer.WriteStartElement(null, "TermnlParams", xmlNamespace );
            TerminalParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ApplicationParameters is ApplicationParameters3 ApplicationParametersValue)
        {
            writer.WriteStartElement(null, "ApplParams", xmlNamespace );
            ApplicationParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HostCommunicationParameters is HostCommunicationParameter2 HostCommunicationParametersValue)
        {
            writer.WriteStartElement(null, "HstComParams", xmlNamespace );
            HostCommunicationParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecurityParameters is SecurityParameters2 SecurityParametersValue)
        {
            writer.WriteStartElement(null, "SctyParams", xmlNamespace );
            SecurityParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AcceptorConfigurationContent3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
