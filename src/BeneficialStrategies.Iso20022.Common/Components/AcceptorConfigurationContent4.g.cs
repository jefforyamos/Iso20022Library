//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AcceptorConfigurationContent4.  ISO2002 ID# _ClzOYWpbEeS4r8z7dKyh1g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Content of the acceptor configuration.
/// </summary>
public partial record AcceptorConfigurationContent4
     : IIsoXmlSerilizable<AcceptorConfigurationContent4>
{
    #nullable enable
    
    /// <summary>
    /// Configuration parameters of the TMS protocol between a POI and a terminal manager.
    /// </summary>
    public TMSProtocolParameters1? TMSProtocolParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to an acquirer protocol.
    /// </summary>
    public AcquirerProtocolParameters7? AcquirerProtocolParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to the merchant.
    /// </summary>
    public MerchantConfigurationParameters1? MerchantParameters { get; init; } 
    /// <summary>
    /// Manufacturer configuration parameters of the point of interaction.
    /// </summary>
    public PaymentTerminalParameters2? TerminalParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to a payment application of the point of interaction.
    /// </summary>
    public ApplicationParameters4? ApplicationParameters { get; init; } 
    /// <summary>
    /// Acceptor parameters dedicated to the communication with an acquirer host or a terminal manager host.
    /// </summary>
    public HostCommunicationParameter3? HostCommunicationParameters { get; init; } 
    /// <summary>
    /// Point of interaction parameters related to the security of software application and application protocol.
    /// </summary>
    public SecurityParameters3? SecurityParameters { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TMSProtocolParameters is TMSProtocolParameters1 TMSProtocolParametersValue)
        {
            writer.WriteStartElement(null, "TMSPrtcolParams", xmlNamespace );
            TMSProtocolParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AcquirerProtocolParameters is AcquirerProtocolParameters7 AcquirerProtocolParametersValue)
        {
            writer.WriteStartElement(null, "AcqrrPrtcolParams", xmlNamespace );
            AcquirerProtocolParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MerchantParameters is MerchantConfigurationParameters1 MerchantParametersValue)
        {
            writer.WriteStartElement(null, "MrchntParams", xmlNamespace );
            MerchantParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TerminalParameters is PaymentTerminalParameters2 TerminalParametersValue)
        {
            writer.WriteStartElement(null, "TermnlParams", xmlNamespace );
            TerminalParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ApplicationParameters is ApplicationParameters4 ApplicationParametersValue)
        {
            writer.WriteStartElement(null, "ApplParams", xmlNamespace );
            ApplicationParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HostCommunicationParameters is HostCommunicationParameter3 HostCommunicationParametersValue)
        {
            writer.WriteStartElement(null, "HstComParams", xmlNamespace );
            HostCommunicationParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecurityParameters is SecurityParameters3 SecurityParametersValue)
        {
            writer.WriteStartElement(null, "SctyParams", xmlNamespace );
            SecurityParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AcceptorConfigurationContent4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
