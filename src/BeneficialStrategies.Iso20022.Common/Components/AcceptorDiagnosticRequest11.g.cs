//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AcceptorDiagnosticRequest11.  ISO2002 ID# _Jf9WkXJ-Ee299ZbWCkdR_w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Diagnostic request from an acceptor.
/// </summary>
public partial record AcceptorDiagnosticRequest11
     : IIsoXmlSerilizable<AcceptorDiagnosticRequest11>
{
    #nullable enable
    
    /// <summary>
    /// Environment of the transaction.
    /// </summary>
    public required CardPaymentEnvironment79 Environment { get; init; } 
    /// <summary>
    /// Indicates if the availability of the acquirer must be tested.
    /// </summary>
    public IsoTrueFalseIndicator? AcquirerAvailabilityRequested { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Envt", xmlNamespace );
        Environment.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AcquirerAvailabilityRequested is IsoTrueFalseIndicator AcquirerAvailabilityRequestedValue)
        {
            writer.WriteStartElement(null, "AcqrrAvlbtyReqd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AcquirerAvailabilityRequestedValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static AcceptorDiagnosticRequest11 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
