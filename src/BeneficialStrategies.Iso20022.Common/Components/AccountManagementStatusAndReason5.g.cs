//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AccountManagementStatusAndReason5.  ISO2002 ID# _8vNzgUQSEealVdmlTDXWkw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Status information.
/// </summary>
[DataContract]
[XmlType]
public partial record AccountManagementStatusAndReason5
{
    #nullable enable
    
    /// <summary>
    /// Status of the account management instruction that was previously received.
    /// </summary>
    [DataMember]
    public required Status25Choice_ Status { get; init; } 
    /// <summary>
    /// Reason for the status of the account management instruction.
    /// </summary>
    [DataMember]
    public ValueList<AcceptedStatusReason1Choice_> StatusReason { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Unique and unambiguous identifier of the account opening or modification instruction at application level.
    /// </summary>
    [DataMember]
    public IsoMax35Text? AccountApplicationIdentification { get; init; } 
    /// <summary>
    /// Account to which the account opening is related.
    /// </summary>
    [DataMember]
    public ValueList<Account23> ExistingAccountIdentification { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Unique and unambiguous identification for the account between the account owner and the account servicer.
    /// </summary>
    [DataMember]
    public IsoMax35Text? AccountIdentification { get; init; } 
    /// <summary>
    /// Status of the account.
    /// </summary>
    [DataMember]
    public AccountStatus2? AccountStatus { get; init; } 
    /// <summary>
    /// Specifies the account is blocked and other factors for the blocked account.
    /// </summary>
    [DataMember]
    public BlockedStatusReason2Choice_? BlockedStatus { get; init; } 
    /// <summary>
    /// Date provided by the account owner to inform the account servicer of the date on which the holdings must be reported before the account is subsequently closed.
    /// </summary>
    [DataMember]
    public IsoISODate? FATCAReportingDate { get; init; } 
    /// <summary>
    /// Date provided by the account owner to inform the account servicer of the date on which the holdings must be reported before the account is subsequently closed.
    /// </summary>
    [DataMember]
    public IsoISODate? CRSReportingDate { get; init; } 
    
    #nullable disable
}
