//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AccountParties11.  ISO2002 ID# _F9YDHQhDEeSUPbC7DbLJpQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about a party's account.
/// </summary>
public partial record AccountParties11
     : IIsoXmlSerilizable<AccountParties11>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the type of modification to be applied on a set of information.
    /// </summary>
    public required DataModification1Code ModificationScopeIndication { get; init; } 
    /// <summary>
    /// Main party associated with the account.
    /// </summary>
    public AccountParties6Choice_? PrincipalAccountParty { get; init; } 
    /// <summary>
    /// Entity that is not the primary owner when the ownership of the investment account is split among several owners.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? SecondaryOwner { get; init; } 
    /// <summary>
    /// Ultimate party that is entitled to either receive the benefits of the ownership of a financial instrument, or to be paid/credited as a result of a transfer.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? Beneficiary { get; init; } 
    /// <summary>
    /// Entity that was given the authority by another entity to act on its behalf.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? PowerOfAttorney { get; init; } 
    /// <summary>
    /// Entity that has been appointed by a legal authority to act on behalf of a person judged to be incapacitated.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? LegalGuardian { get; init; } 
    /// <summary>
    /// Deceased's estate, or successor, to whom the respective percentage of ownership will be transferred upon the death of one of the owners.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? SuccessorOnDeath { get; init; } 
    /// <summary>
    /// Entity that has been appointed by a legal authority to act on behalf of a person or organisation that has gone bankrupt.
    /// </summary>
    public InvestmentAccountOwnershipInformation11? Administrator { get; init; } 
    /// <summary>
    /// An other type of party.
    /// </summary>
    public ExtendedParty8? OtherParty { get; init; } 
    /// <summary>
    /// Granter role in the hedge funds industry.
    /// </summary>
    public ValueList<InvestmentAccountOwnershipInformation11> Granter { get; init; } = [];
    /// <summary>
    /// Entity that creates a trust or contributes assets to the trust.
    /// </summary>
    public ValueList<InvestmentAccountOwnershipInformation11> Settlor { get; init; } = [];
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ModScpIndctn", xmlNamespace );
        writer.WriteValue(ModificationScopeIndication.ToString()); // Enum value
        writer.WriteEndElement();
        if (PrincipalAccountParty is AccountParties6Choice_ PrincipalAccountPartyValue)
        {
            writer.WriteStartElement(null, "PrncplAcctPty", xmlNamespace );
            PrincipalAccountPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecondaryOwner is InvestmentAccountOwnershipInformation11 SecondaryOwnerValue)
        {
            writer.WriteStartElement(null, "ScndryOwnr", xmlNamespace );
            SecondaryOwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Beneficiary is InvestmentAccountOwnershipInformation11 BeneficiaryValue)
        {
            writer.WriteStartElement(null, "Bnfcry", xmlNamespace );
            BeneficiaryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PowerOfAttorney is InvestmentAccountOwnershipInformation11 PowerOfAttorneyValue)
        {
            writer.WriteStartElement(null, "PwrOfAttny", xmlNamespace );
            PowerOfAttorneyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LegalGuardian is InvestmentAccountOwnershipInformation11 LegalGuardianValue)
        {
            writer.WriteStartElement(null, "LglGuardn", xmlNamespace );
            LegalGuardianValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SuccessorOnDeath is InvestmentAccountOwnershipInformation11 SuccessorOnDeathValue)
        {
            writer.WriteStartElement(null, "SucssrOnDth", xmlNamespace );
            SuccessorOnDeathValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Administrator is InvestmentAccountOwnershipInformation11 AdministratorValue)
        {
            writer.WriteStartElement(null, "Admstr", xmlNamespace );
            AdministratorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherParty is ExtendedParty8 OtherPartyValue)
        {
            writer.WriteStartElement(null, "OthrPty", xmlNamespace );
            OtherPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Grntr", xmlNamespace );
        Granter.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sttlr", xmlNamespace );
        Settlor.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static AccountParties11 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
