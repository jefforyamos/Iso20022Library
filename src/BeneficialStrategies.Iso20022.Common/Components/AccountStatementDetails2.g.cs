//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AccountStatementDetails2.  ISO2002 ID# _lBqwQTaqEeyjpIf0r_Ojqw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Statement information of an account.
/// </summary>
public partial record AccountStatementDetails2
     : IIsoXmlSerilizable<AccountStatementDetails2>
{
    #nullable enable
    
    /// <summary>
    /// Date of the transaction.
    /// </summary>
    public required IsoISODate TransactionDate { get; init; } 
    /// <summary>
    /// True indicates transaction is pending. 
    /// False indicates transaction has already posted.
    /// No default value.
    /// </summary>
    public IsoTrueFalseIndicator? PendingIndicator { get; init; } 
    /// <summary>
    /// Posting date of the transaction.
    /// </summary>
    public IsoISODate? TransactionPostingDate { get; init; } 
    /// <summary>
    /// Amount of the transaction.
    /// </summary>
    public Amount7? TransactionAmount { get; init; } 
    /// <summary>
    /// Cardholder billing amount of the transaction.
    /// </summary>
    public Amount7? CardholderBillingAmount { get; init; } 
    /// <summary>
    /// A code to indicate the tax amount is credit or debit
    /// </summary>
    public CreditDebit3Code? CreditDebit { get; init; } 
    /// <summary>
    /// Currency of the amount.
    /// </summary>
    public IsoMax99Text? AcceptorNameAndLocation { get; init; } 
    /// <summary>
    /// Short transaction description to print or display.
    /// </summary>
    public IsoMax70Text? ShortTransactionDescription { get; init; } 
    /// <summary>
    /// Long transaction description to print or display.
    /// </summary>
    public IsoMax256Text? LongTransactionDescription { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(TransactionDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (PendingIndicator is IsoTrueFalseIndicator PendingIndicatorValue)
        {
            writer.WriteStartElement(null, "PdgInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(PendingIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (TransactionPostingDate is IsoISODate TransactionPostingDateValue)
        {
            writer.WriteStartElement(null, "TxPstngDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(TransactionPostingDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (TransactionAmount is Amount7 TransactionAmountValue)
        {
            writer.WriteStartElement(null, "TxAmt", xmlNamespace );
            TransactionAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CardholderBillingAmount is Amount7 CardholderBillingAmountValue)
        {
            writer.WriteStartElement(null, "CrdhldrBllgAmt", xmlNamespace );
            CardholderBillingAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditDebit is CreditDebit3Code CreditDebitValue)
        {
            writer.WriteStartElement(null, "CdtDbt", xmlNamespace );
            writer.WriteValue(CreditDebitValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AcceptorNameAndLocation is IsoMax99Text AcceptorNameAndLocationValue)
        {
            writer.WriteStartElement(null, "AccptrNmAndLctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax99Text(AcceptorNameAndLocationValue)); // data type Max99Text System.String
            writer.WriteEndElement();
        }
        if (ShortTransactionDescription is IsoMax70Text ShortTransactionDescriptionValue)
        {
            writer.WriteStartElement(null, "ShrtTxDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(ShortTransactionDescriptionValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (LongTransactionDescription is IsoMax256Text LongTransactionDescriptionValue)
        {
            writer.WriteStartElement(null, "LngTxDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(LongTransactionDescriptionValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
    }
    public static AccountStatementDetails2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
