//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AccountSubLevel20.  ISO2002 ID# _4i27UDqqEemL_ewJY9QP1g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides shareholdings information at account sub level.
/// </summary>
public partial record AccountSubLevel20
     : IIsoXmlSerilizable<AccountSubLevel20>
{
    #nullable enable
    
    /// <summary>
    /// Account where financial instruments are maintained. Account serviced by the responding intermediary for an account holder.
    /// </summary>
    public IsoMax35Text? SafekeepingAccount { get; init; } 
    /// <summary>
    /// Party that legally owns the account.
    /// </summary>
    public required PartyIdentification196Choice_ AccountHolder { get; init; } 
    /// <summary>
    /// Detailed shareholding balance information for an account.
    /// </summary>
    public ShareholdingBalance1? ShareholdingBalance { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _kwbvEDttEemIf7eyjCwinw
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SafekeepingAccount is IsoMax35Text SafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "SfkpgAcct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SafekeepingAccountValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AcctHldr", xmlNamespace );
        AccountHolder.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize ShareholdingBalance, multiplicity Unknown
    }
    public static AccountSubLevel20 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
