//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AccountSubLevel5.  ISO2002 ID# _KnXN94j3EeONZKAAW4pOaQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Account and holding of the next sub-level (Level 5).
/// </summary>
public partial record AccountSubLevel5
     : IIsoXmlSerilizable<AccountSubLevel5>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification for the sub-account between the account owner and the account servicer.
    /// </summary>
    public required SecuritiesAccount19 AccountIdentification { get; init; } 
    /// <summary>
    /// Party that legally owns the sub-account.
    /// </summary>
    public required PartyIdentification100 AccountOwner { get; init; } 
    /// <summary>
    /// Party that manages the sub-level account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    public required PartyIdentification100 AccountServicer { get; init; } 
    /// <summary>
    /// Individual or entity that is ultimately entitled to the benefit of income and rights in a financial instrument, as opposed to a nominal or legal owner.
    /// </summary>
    public BeneficialOwner2? BeneficialOwner { get; init; } 
    /// <summary>
    /// Report on the net position of a single financial instrument on the sub-level account, for a certain date.
    /// </summary>
    public AggregateHoldingBalance1? BalanceForAccount { get; init; } 
    /// <summary>
    /// Holdings of level 5.
    /// </summary>
    public AccountSubLevel6? AccountSubLevel6 { get; init; } 
    /// <summary>
    /// Difference in holdings between the safekeeping account and the sub-accounts of level 6.
    /// </summary>
    public AggregateHoldingBalance2? AccountSubLevel6Difference { get; init; } 
    /// <summary>
    /// Identification of a related party acting as an intermediary.
    /// </summary>
    public Intermediary29? AgentCode { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "AcctId", xmlNamespace );
        AccountIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AcctOwnr", xmlNamespace );
        AccountOwner.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AcctSvcr", xmlNamespace );
        AccountServicer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BeneficialOwner is BeneficialOwner2 BeneficialOwnerValue)
        {
            writer.WriteStartElement(null, "BnfclOwnr", xmlNamespace );
            BeneficialOwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceForAccount is AggregateHoldingBalance1 BalanceForAccountValue)
        {
            writer.WriteStartElement(null, "BalForAcct", xmlNamespace );
            BalanceForAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountSubLevel6 is AccountSubLevel6 AccountSubLevel6Value)
        {
            writer.WriteStartElement(null, "AcctSubLvl6", xmlNamespace );
            AccountSubLevel6Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountSubLevel6Difference is AggregateHoldingBalance2 AccountSubLevel6DifferenceValue)
        {
            writer.WriteStartElement(null, "AcctSubLvl6Diff", xmlNamespace );
            AccountSubLevel6DifferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AgentCode is Intermediary29 AgentCodeValue)
        {
            writer.WriteStartElement(null, "AgtCd", xmlNamespace );
            AgentCodeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AccountSubLevel5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
