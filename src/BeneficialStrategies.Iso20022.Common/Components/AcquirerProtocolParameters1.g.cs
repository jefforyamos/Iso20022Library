//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AcquirerProtocolParameters1.  ISO2002 ID# _KsqnwH1DEeCF8NjrBemJWQ_748699006.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Acceptor parameters dedicated to the acquirer protocol.
/// </summary>
public partial record AcquirerProtocolParameters1
     : IIsoXmlSerilizable<AcquirerProtocolParameters1>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the acquirer using this protocol.
    /// </summary>
    public GenericIdentification32? AcquirerIdentification { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _KsqnwX1DEeCF8NjrBemJWQ_-1297060321
    /// <summary>
    /// Identification of the payment application, user of the acquirer protocol.
    /// </summary>
    public IsoMax35Text? ApplicationIdentification { get; init; } 
    /// <summary>
    /// Acquirer host configuration.
    /// </summary>
    public AcquirerHostConfiguration1? Host { get; init; } 
    /// <summary>
    /// Acquirer protocol parameters of transactions performing an online authorisation.
    /// </summary>
    public AcquirerProtocolParameters2? OnLineTransaction { get; init; } 
    /// <summary>
    /// Acquirer protocol parameters of transactions performing an offline authorisation.
    /// </summary>
    public AcquirerProtocolParameters2? OffLineTransaction { get; init; } 
    /// <summary>
    /// Configuration parameters of reconciliation exchanges.
    /// </summary>
    public ExchangeConfiguration1? ReconciliationExchange { get; init; } 
    /// <summary>
    /// Indicates the reconciliation period is assigned by the acquirer instead of the acceptor.
    /// </summary>
    public IsoTrueFalseIndicator? ReconciliationByAcquirer { get; init; } 
    /// <summary>
    /// Indicates the reconciliation total amounts are computed per currency.
    /// </summary>
    public IsoTrueFalseIndicator? TotalsPerCurrency { get; init; } 
    /// <summary>
    /// Types of transaction to include in the batch.
    /// </summary>
    public BatchTransactionType1Code? BatchTransferContent { get; init; } 
    /// <summary>
    /// Configuration of a message item.
    /// </summary>
    public MessageItemCondition1? MessageItem { get; init; } 
    /// <summary>
    /// Indicator to require protection of sensitive card data in messages.
    /// </summary>
    public required IsoTrueFalseIndicator ProtectCardData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize AcquirerIdentification, multiplicity Unknown
        if (ApplicationIdentification is IsoMax35Text ApplicationIdentificationValue)
        {
            writer.WriteStartElement(null, "ApplId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ApplicationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Host is AcquirerHostConfiguration1 HostValue)
        {
            writer.WriteStartElement(null, "Hst", xmlNamespace );
            HostValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OnLineTransaction is AcquirerProtocolParameters2 OnLineTransactionValue)
        {
            writer.WriteStartElement(null, "OnLineTx", xmlNamespace );
            OnLineTransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OffLineTransaction is AcquirerProtocolParameters2 OffLineTransactionValue)
        {
            writer.WriteStartElement(null, "OffLineTx", xmlNamespace );
            OffLineTransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReconciliationExchange is ExchangeConfiguration1 ReconciliationExchangeValue)
        {
            writer.WriteStartElement(null, "RcncltnXchg", xmlNamespace );
            ReconciliationExchangeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReconciliationByAcquirer is IsoTrueFalseIndicator ReconciliationByAcquirerValue)
        {
            writer.WriteStartElement(null, "RcncltnByAcqrr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ReconciliationByAcquirerValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (TotalsPerCurrency is IsoTrueFalseIndicator TotalsPerCurrencyValue)
        {
            writer.WriteStartElement(null, "TtlsPerCcy", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(TotalsPerCurrencyValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (BatchTransferContent is BatchTransactionType1Code BatchTransferContentValue)
        {
            writer.WriteStartElement(null, "BtchTrfCntt", xmlNamespace );
            writer.WriteValue(BatchTransferContentValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (MessageItem is MessageItemCondition1 MessageItemValue)
        {
            writer.WriteStartElement(null, "MsgItm", xmlNamespace );
            MessageItemValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PrtctCardData", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ProtectCardData)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
    }
    public static AcquirerProtocolParameters1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
