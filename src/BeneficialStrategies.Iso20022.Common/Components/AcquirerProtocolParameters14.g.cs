//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AcquirerProtocolParameters14.  ISO2002 ID# _hO02USpUEeuUucRY0yCMTA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Acceptor parameters dedicated to the acquirer protocol.
/// </summary>
public partial record AcquirerProtocolParameters14
     : IIsoXmlSerilizable<AcquirerProtocolParameters14>
{
    #nullable enable
    
    /// <summary>
    /// Type of action for the configuration parameters.
    /// </summary>
    public required TerminalManagementAction3Code ActionType { get; init; } 
    /// <summary>
    /// Identification of the acquirer using this protocol.
    /// </summary>
    public GenericIdentification176? AcquirerIdentification { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _hgGMgypUEeuUucRY0yCMTA
    /// <summary>
    /// Version of the acquirer protocol parameters.
    /// </summary>
    public required IsoMax256Text Version { get; init; } 
    /// <summary>
    /// Identification of the payment application, user of the acquirer protocol.
    /// </summary>
    public IsoMax35Text? ApplicationIdentification { get; init; } 
    /// <summary>
    /// Acquirer host configuration.
    /// </summary>
    public AcquirerHostConfiguration8? Host { get; init; } 
    /// <summary>
    /// Acquirer protocol parameters of transactions performing an online authorisation.
    /// </summary>
    public AcquirerProtocolExchangeBehavior2? OnLineTransaction { get; init; } 
    /// <summary>
    /// Acquirer protocol parameters of transactions performing an offline authorisation.
    /// </summary>
    public AcquirerProtocolExchangeBehavior2? OffLineTransaction { get; init; } 
    /// <summary>
    /// Configuration parameters of reconciliation exchanges.
    /// </summary>
    public ExchangeConfiguration9? ReconciliationExchange { get; init; } 
    /// <summary>
    /// Indicates the reconciliation period is assigned by the acquirer instead of the acceptor.
    /// </summary>
    public IsoTrueFalseIndicator? ReconciliationByAcquirer { get; init; } 
    /// <summary>
    /// Indicates the reconciliation total amounts are computed per currency.
    /// </summary>
    public IsoTrueFalseIndicator? TotalsPerCurrency { get; init; } 
    /// <summary>
    /// Indicates that totals in reconciliation or batch must be split.
    /// </summary>
    public IsoTrueFalseIndicator? SplitTotals { get; init; } 
    /// <summary>
    /// List of criterion to use when totals in reconciliation or batch must be split.
    /// </summary>
    public ReconciliationCriteria1Code? SplitTotalCriteria { get; init; } 
    /// <summary>
    /// To notify that the acquirer expect to receive a completion advice after each update of reservation.
    /// </summary>
    public IsoTrueFalseIndicator? CompletionAdviceMandated { get; init; } 
    /// <summary>
    /// Identification of available amount qualifier for a reservation. 
    /// </summary>
    public TypeOfAmount8Code? AmountQualifierForReservation { get; init; } 
    /// <summary>
    /// After an error in a totals of the Reconciliation, the POI sends transactions in error in the BatchTransfer messages.
    /// </summary>
    public IsoTrueFalseIndicator? ReconciliationError { get; init; } 
    /// <summary>
    /// Indicates whether the POI must send card data (protected or plain card data) in the AcceptorCompletionAdvice message following an authorisation exchange.
    /// </summary>
    public IsoTrueFalseIndicator? CardDataVerification { get; init; } 
    /// <summary>
    /// Send a cancellation advice for offline transactions not yet captured.
    /// </summary>
    public IsoTrueFalseIndicator? NotifyOffLineCancellation { get; init; } 
    /// <summary>
    /// Types of transaction to include in the batch.
    /// </summary>
    public BatchTransactionType1Code? BatchTransferContent { get; init; } 
    /// <summary>
    /// BatchTransfer are exchanged per file transfer protocol rather than per message.
    /// </summary>
    public IsoTrueFalseIndicator? FileTransferBatch { get; init; } 
    /// <summary>
    /// BatchTransfer are authenticated by digital signature rather than a MAC (Message Authentication Code).
    /// </summary>
    public IsoTrueFalseIndicator? BatchDigitalSignature { get; init; } 
    /// <summary>
    /// Configuration of a message item.
    /// </summary>
    public MessageItemCondition1? MessageItem { get; init; } 
    /// <summary>
    /// Indicator to require protection of sensitive card data in messages.
    /// </summary>
    public required IsoTrueFalseIndicator ProtectCardData { get; init; } 
    /// <summary>
    /// Indicator to require a private protection of sensitive card data in messages.
    /// </summary>
    public IsoTrueFalseIndicator? PrivateCardData { get; init; } 
    /// <summary>
    /// A security trailer is mandatory in the messages.
    /// </summary>
    public IsoTrueFalseIndicator? MandatorySecurityTrailer { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ActnTp", xmlNamespace );
        writer.WriteValue(ActionType.ToString()); // Enum value
        writer.WriteEndElement();
        // Not sure how to serialize AcquirerIdentification, multiplicity Unknown
        writer.WriteStartElement(null, "Vrsn", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax256Text(Version)); // data type Max256Text System.String
        writer.WriteEndElement();
        if (ApplicationIdentification is IsoMax35Text ApplicationIdentificationValue)
        {
            writer.WriteStartElement(null, "ApplId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ApplicationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Host is AcquirerHostConfiguration8 HostValue)
        {
            writer.WriteStartElement(null, "Hst", xmlNamespace );
            HostValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OnLineTransaction is AcquirerProtocolExchangeBehavior2 OnLineTransactionValue)
        {
            writer.WriteStartElement(null, "OnLineTx", xmlNamespace );
            OnLineTransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OffLineTransaction is AcquirerProtocolExchangeBehavior2 OffLineTransactionValue)
        {
            writer.WriteStartElement(null, "OffLineTx", xmlNamespace );
            OffLineTransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReconciliationExchange is ExchangeConfiguration9 ReconciliationExchangeValue)
        {
            writer.WriteStartElement(null, "RcncltnXchg", xmlNamespace );
            ReconciliationExchangeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReconciliationByAcquirer is IsoTrueFalseIndicator ReconciliationByAcquirerValue)
        {
            writer.WriteStartElement(null, "RcncltnByAcqrr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ReconciliationByAcquirerValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (TotalsPerCurrency is IsoTrueFalseIndicator TotalsPerCurrencyValue)
        {
            writer.WriteStartElement(null, "TtlsPerCcy", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(TotalsPerCurrencyValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (SplitTotals is IsoTrueFalseIndicator SplitTotalsValue)
        {
            writer.WriteStartElement(null, "SpltTtls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(SplitTotalsValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (SplitTotalCriteria is ReconciliationCriteria1Code SplitTotalCriteriaValue)
        {
            writer.WriteStartElement(null, "SpltTtlCrit", xmlNamespace );
            writer.WriteValue(SplitTotalCriteriaValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CompletionAdviceMandated is IsoTrueFalseIndicator CompletionAdviceMandatedValue)
        {
            writer.WriteStartElement(null, "CmpltnAdvcMndtd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CompletionAdviceMandatedValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AmountQualifierForReservation is TypeOfAmount8Code AmountQualifierForReservationValue)
        {
            writer.WriteStartElement(null, "AmtQlfrForRsvatn", xmlNamespace );
            writer.WriteValue(AmountQualifierForReservationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ReconciliationError is IsoTrueFalseIndicator ReconciliationErrorValue)
        {
            writer.WriteStartElement(null, "RcncltnErr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ReconciliationErrorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CardDataVerification is IsoTrueFalseIndicator CardDataVerificationValue)
        {
            writer.WriteStartElement(null, "CardDataVrfctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CardDataVerificationValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (NotifyOffLineCancellation is IsoTrueFalseIndicator NotifyOffLineCancellationValue)
        {
            writer.WriteStartElement(null, "NtfyOffLineCxl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(NotifyOffLineCancellationValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (BatchTransferContent is BatchTransactionType1Code BatchTransferContentValue)
        {
            writer.WriteStartElement(null, "BtchTrfCntt", xmlNamespace );
            writer.WriteValue(BatchTransferContentValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (FileTransferBatch is IsoTrueFalseIndicator FileTransferBatchValue)
        {
            writer.WriteStartElement(null, "FileTrfBtch", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(FileTransferBatchValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (BatchDigitalSignature is IsoTrueFalseIndicator BatchDigitalSignatureValue)
        {
            writer.WriteStartElement(null, "BtchDgtlSgntr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(BatchDigitalSignatureValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (MessageItem is MessageItemCondition1 MessageItemValue)
        {
            writer.WriteStartElement(null, "MsgItm", xmlNamespace );
            MessageItemValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PrtctCardData", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ProtectCardData)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (PrivateCardData is IsoTrueFalseIndicator PrivateCardDataValue)
        {
            writer.WriteStartElement(null, "PrvtCardData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(PrivateCardDataValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (MandatorySecurityTrailer is IsoTrueFalseIndicator MandatorySecurityTrailerValue)
        {
            writer.WriteStartElement(null, "MndtrySctyTrlr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(MandatorySecurityTrailerValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static AcquirerProtocolParameters14 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
