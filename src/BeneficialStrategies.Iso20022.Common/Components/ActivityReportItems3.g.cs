//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ActivityReportItems3.  ISO2002 ID# _i1YO8efGEeKNfc-Rw_dPYg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Describes the events that occurred for one transaction.
/// </summary>
public partial record ActivityReportItems3
     : IIsoXmlSerilizable<ActivityReportItems3>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.
    /// </summary>
    public required IsoMax35Text TransactionIdentification { get; init; } 
    /// <summary>
    /// Reference to the transaction for each financial institution which is a party to the transaction.
    /// </summary>
    public ValueList<DocumentIdentification5> UserTransactionReference { get; init; } = [];
    /// <summary>
    /// Entity for which the activity is reported.
    /// </summary>
    public BICIdentification1? ReportedEntity { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _jT0edefGEeKNfc-Rw_dPYg
    /// <summary>
    /// Describes an activity that took place during a period.
    /// </summary>
    public ActivityDetails1? ReportedItem { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _jT1FgefGEeKNfc-Rw_dPYg
    /// <summary>
    /// Next processing step required.
    /// </summary>
    public PendingActivity2? PendingRequestForAction { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransactionIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "UsrTxRef", xmlNamespace );
        UserTransactionReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize ReportedEntity, multiplicity Unknown
        // Not sure how to serialize ReportedItem, multiplicity Unknown
        if (PendingRequestForAction is PendingActivity2 PendingRequestForActionValue)
        {
            writer.WriteStartElement(null, "PdgReqForActn", xmlNamespace );
            PendingRequestForActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ActivityReportItems3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
