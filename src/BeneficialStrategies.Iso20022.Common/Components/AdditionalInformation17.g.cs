//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AdditionalInformation17.  ISO2002 ID# _OMbHj_fXEeiNZp_PtLohLw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Additional specific modification criteria.
/// </summary>
public partial record AdditionalInformation17
     : IIsoXmlSerilizable<AdditionalInformation17>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the transaction as known by the account owner. Will be used in a unilateral split to provide the executing party with the account owner identification of each split transaction.
    /// </summary>
    public IsoRestrictedFINXMax16Text? AccountOwnerTransactionIdentification { get; init; } 
    /// <summary>
    /// Type of instrument involved in the transactions on which the modification request should apply.
    /// </summary>
    public ClassificationType33Choice_? ClassificationType { get; init; } 
    /// <summary>
    /// Account to or from which a securities entry is made.
    /// </summary>
    public SecuritiesAccount30? SafekeepingAccount { get; init; } 
    /// <summary>
    /// Identification of the financial instrument to which the modification request applied.
    /// </summary>
    public SecurityIdentification20? FinancialInstrumentIdentification { get; init; } 
    /// <summary>
    /// Quantity of financial instrument concerned by the settlement condition modification request.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? Quantity { get; init; } 
    /// <summary>
    /// Date/time when the request should take effect.
    /// </summary>
    public DateAndDateTime2Choice_? EffectiveDate { get; init; } 
    /// <summary>
    /// Date/time when the request should cease to be in effect.
    /// </summary>
    public DateAndDateTime2Choice_? ExpiryDate { get; init; } 
    /// <summary>
    /// Date/time of the release.
    /// </summary>
    public DateAndDateTime2Choice_? CutOffDate { get; init; } 
    /// <summary>
    /// Party, either an individual or organisation, whose assets are being invested.
    /// </summary>
    public PartyIdentification157? Investor { get; init; } 
    /// <summary>
    /// Party that, in a settlement chain, interacts with the depository.
    /// </summary>
    public PartyIdentificationAndAccount190? DeliveringParty1 { get; init; } 
    /// <summary>
    /// Party that, in a settlement chain, interacts with the depository.
    /// </summary>
    public PartyIdentificationAndAccount190? ReceivingParty1 { get; init; } 
    /// <summary>
    /// The transaction relates to a buy-in by the market following a delivery transaction failure.
    /// </summary>
    public IsoYesNoIndicator? TransactionSubjectToBuyIn { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AccountOwnerTransactionIdentification is IsoRestrictedFINXMax16Text AccountOwnerTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "AcctOwnrTxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINXMax16Text(AccountOwnerTransactionIdentificationValue)); // data type RestrictedFINXMax16Text System.String
            writer.WriteEndElement();
        }
        if (ClassificationType is ClassificationType33Choice_ ClassificationTypeValue)
        {
            writer.WriteStartElement(null, "ClssfctnTp", xmlNamespace );
            ClassificationTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SafekeepingAccount is SecuritiesAccount30 SafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "SfkpgAcct", xmlNamespace );
            SafekeepingAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinancialInstrumentIdentification is SecurityIdentification20 FinancialInstrumentIdentificationValue)
        {
            writer.WriteStartElement(null, "FinInstrmId", xmlNamespace );
            FinancialInstrumentIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Quantity is FinancialInstrumentQuantity15Choice_ QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            QuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EffectiveDate is DateAndDateTime2Choice_ EffectiveDateValue)
        {
            writer.WriteStartElement(null, "FctvDt", xmlNamespace );
            EffectiveDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExpiryDate is DateAndDateTime2Choice_ ExpiryDateValue)
        {
            writer.WriteStartElement(null, "XpryDt", xmlNamespace );
            ExpiryDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CutOffDate is DateAndDateTime2Choice_ CutOffDateValue)
        {
            writer.WriteStartElement(null, "CutOffDt", xmlNamespace );
            CutOffDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Investor is PartyIdentification157 InvestorValue)
        {
            writer.WriteStartElement(null, "Invstr", xmlNamespace );
            InvestorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeliveringParty1 is PartyIdentificationAndAccount190 DeliveringParty1Value)
        {
            writer.WriteStartElement(null, "DlvrgPty1", xmlNamespace );
            DeliveringParty1Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReceivingParty1 is PartyIdentificationAndAccount190 ReceivingParty1Value)
        {
            writer.WriteStartElement(null, "RcvgPty1", xmlNamespace );
            ReceivingParty1Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionSubjectToBuyIn is IsoYesNoIndicator TransactionSubjectToBuyInValue)
        {
            writer.WriteStartElement(null, "TxSbjtToBuyIn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(TransactionSubjectToBuyInValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static AdditionalInformation17 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
