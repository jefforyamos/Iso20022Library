//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AdditionalInformation21.  ISO2002 ID# _kIe6gVBBEeedyPuM0kK2EQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Additional information relevant to the destination.
/// </summary>
public partial record AdditionalInformation21
     : IIsoXmlSerilizable<AdditionalInformation21>
{
    #nullable enable
    
    /// <summary>
    /// Recipient of the additional information to display, print, send or store.
    /// </summary>
    public PartyType23Code? Recipient { get; init; } 
    /// <summary>
    /// Target of the additional information to print, display, send or store.
    /// </summary>
    public UserInterface7Code? Target { get; init; } 
    /// <summary>
    /// Format of the additional information.
    /// </summary>
    public OutputFormat4Code? Format { get; init; } 
    /// <summary>
    /// Content of or reference to the message.
    /// </summary>
    public required IsoMax20KText Value { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Recipient is PartyType23Code RecipientValue)
        {
            writer.WriteStartElement(null, "Rcpt", xmlNamespace );
            writer.WriteValue(RecipientValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Target is UserInterface7Code TargetValue)
        {
            writer.WriteStartElement(null, "Trgt", xmlNamespace );
            writer.WriteValue(TargetValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Format is OutputFormat4Code FormatValue)
        {
            writer.WriteStartElement(null, "Frmt", xmlNamespace );
            writer.WriteValue(FormatValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Val", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax20KText(Value)); // data type Max20KText System.String
        writer.WriteEndElement();
    }
    public static AdditionalInformation21 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
