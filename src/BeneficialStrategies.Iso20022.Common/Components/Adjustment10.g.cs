//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Adjustment10.  ISO2002 ID# _TMwPmPJ0EeiJn9rM2Znz2w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Describes each adjustment made to the original price.
/// </summary>
public partial record Adjustment10
     : IIsoXmlSerilizable<Adjustment10>
{
    #nullable enable
    
    /// <summary>
    /// Type of adjustment.
    /// </summary>
    public IsoMax35Text? Type { get; init; } 
    /// <summary>
    /// Additional information to specify the type of adjustment.
    /// </summary>
    public IsoMax35Text? AdditionalType { get; init; } 
    /// <summary>
    /// Description of the adjustment.
    /// </summary>
    public IsoMax70Text? Description { get; init; } 
    /// <summary>
    /// Reason for the adjustment.
    /// </summary>
    public IsoMax35Text? Reason { get; init; } 
    /// <summary>
    /// Identifies when the item is eligible or prohibited from a discount or adjustment.
    /// </summary>
    public IsoTrueFalseIndicator? PromotionEligibility { get; init; } 
    /// <summary>
    /// Promotion or adjustment code.
    /// </summary>
    public IsoMax35Text? PromotionCode { get; init; } 
    /// <summary>
    /// May contain coupon number, discount code, etc.
    /// </summary>
    public IsoMax35Text? PromotionCouponNumber { get; init; } 
    /// <summary>
    /// Identifies the quantity of the item that is adjusted (can be less than the total quantity of the item being purchased).
    /// </summary>
    public IsoDecimalNumber? Quantity { get; init; } 
    /// <summary>
    /// Contains the adjusted unit price (does not include tax).
    /// </summary>
    public IsoImpliedCurrencyAndAmount? UnitPrice { get; init; } 
    /// <summary>
    /// Contains the percentage value of the discount (when applicable).
    /// </summary>
    public IsoPercentageRate? Percentage { get; init; } 
    /// <summary>
    /// Contains amount of the adjustment, exclusive of tax.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? AdjustmentAmount { get; init; } 
    /// <summary>
    /// Indicates whether or not tax was calculated on the original amount of the transaction. 
    /// Note that false (or not present) indicates applicable taxes are based on adjusted amount.
    /// </summary>
    public IsoTrueFalseIndicator? TaxCalculatedOnOriginalAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Type is IsoMax35Text TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalType is IsoMax35Text AdditionalTypeValue)
        {
            writer.WriteStartElement(null, "AddtlTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AdditionalTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Description is IsoMax70Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(DescriptionValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (Reason is IsoMax35Text ReasonValue)
        {
            writer.WriteStartElement(null, "Rsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ReasonValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PromotionEligibility is IsoTrueFalseIndicator PromotionEligibilityValue)
        {
            writer.WriteStartElement(null, "PrmtnElgblty", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(PromotionEligibilityValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (PromotionCode is IsoMax35Text PromotionCodeValue)
        {
            writer.WriteStartElement(null, "PrmtnCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PromotionCodeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PromotionCouponNumber is IsoMax35Text PromotionCouponNumberValue)
        {
            writer.WriteStartElement(null, "PrmtnCpnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PromotionCouponNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Quantity is IsoDecimalNumber QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(QuantityValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (UnitPrice is IsoImpliedCurrencyAndAmount UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(UnitPriceValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (Percentage is IsoPercentageRate PercentageValue)
        {
            writer.WriteStartElement(null, "Pctg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PercentageValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (AdjustmentAmount is IsoImpliedCurrencyAndAmount AdjustmentAmountValue)
        {
            writer.WriteStartElement(null, "AdjstmntAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(AdjustmentAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TaxCalculatedOnOriginalAmount is IsoTrueFalseIndicator TaxCalculatedOnOriginalAmountValue)
        {
            writer.WriteStartElement(null, "TaxClctdOnOrgnlAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(TaxCalculatedOnOriginalAmountValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static Adjustment10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
