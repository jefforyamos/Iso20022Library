//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AggregateBalanceInformation44.  ISO2002 ID# _csVCTzi8Eeydid5dcNPKvg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Overall position, in a single security, held in a securities account at a specified place of safekeeping.
/// </summary>
public partial record AggregateBalanceInformation44
     : IIsoXmlSerilizable<AggregateBalanceInformation44>
{
    #nullable enable
    
    /// <summary>
    /// Financial instrument representing a sum of rights of the investor vis-a-vis the issuer.
    /// </summary>
    public required SecurityIdentification20 FinancialInstrumentIdentification { get; init; } 
    /// <summary>
    /// Elements characterising a financial instrument other than a investment funds.
    /// </summary>
    public FinancialInstrumentAttributes122? FinancialInstrumentAttributes { get; init; } 
    /// <summary>
    /// Elements characterising an investment funds financial instrument.
    /// </summary>
    public FinancialInstrument22? InvestmentFundsFinancialInstrumentAttributes { get; init; } 
    /// <summary>
    /// Elements used to calculate the valuation haircut.
    /// </summary>
    public BasicCollateralValuation1Details? ValuationHaircutDetails { get; init; } 
    /// <summary>
    /// Total quantity of financial instruments of the balance.
    /// </summary>
    public required Balance22 AggregateBalance { get; init; } 
    /// <summary>
    /// Total quantity of financial instruments of the balance that is available.
    /// </summary>
    public Balance25? AvailableBalance { get; init; } 
    /// <summary>
    /// Total quantity of financial instruments of the balance that is not available.
    /// </summary>
    public BalanceQuantity17Choice_? NotAvailableBalance { get; init; } 
    /// <summary>
    /// Place where the securities are safe-kept, physically or notionally. This place can be, for example, a local custodian, a Central Securities Depository (CSD) or an International Central Securities Depository (ICSD).
    /// </summary>
    public SafeKeepingPlace4? SafekeepingPlace { get; init; } 
    /// <summary>
    /// Specifies the corporate action options available to the account owner.
    /// </summary>
    public CorporateActionOption5Code? CorporateActionOptionType { get; init; } 
    /// <summary>
    /// Price of the financial instrument in one or more currencies.
    /// </summary>
    public PriceInformation22? PriceDetails { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// </summary>
    public ForeignExchangeTerms35? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Specifies the number of days used for calculating the accrued interest amount.
    /// </summary>
    public IsoNumber? DaysAccrued { get; init; } 
    /// <summary>
    /// Valuation amounts provided in the base currency of the account.
    /// </summary>
    public BalanceAmounts4? AccountBaseCurrencyAmounts { get; init; } 
    /// <summary>
    /// Valuation amounts provided in the currency of the financial instrument.
    /// </summary>
    public BalanceAmounts4? InstrumentCurrencyAmounts { get; init; } 
    /// <summary>
    /// Breakdown of the aggregate quantity reported into significant lots, for example, tax lots.
    /// </summary>
    public QuantityBreakdown71? QuantityBreakdown { get; init; } 
    /// <summary>
    /// Breakdown of the aggregate balance per meaningful sub-balances and availability.
    /// </summary>
    public SubBalanceInformation24? BalanceBreakdown { get; init; } 
    /// <summary>
    /// Provides additional instrument sub-balance information on all or parts of the reported financial instrument (unregistered, tax exempt, etc.).
    /// </summary>
    public AdditionalBalanceInformation24? AdditionalBalanceBreakdown { get; init; } 
    /// <summary>
    /// Breakdown of positions per place of safekeeping (and optionally per place of listing).
    /// </summary>
    public AggregateBalancePerSafekeepingPlace41? BalanceAtSafekeepingPlace { get; init; } 
    /// <summary>
    /// Provides additional information on the holding.
    /// </summary>
    public IsoRestrictedFINXMax350Text? HoldingAdditionalDetails { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "FinInstrmId", xmlNamespace );
        FinancialInstrumentIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (FinancialInstrumentAttributes is FinancialInstrumentAttributes122 FinancialInstrumentAttributesValue)
        {
            writer.WriteStartElement(null, "FinInstrmAttrbts", xmlNamespace );
            FinancialInstrumentAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InvestmentFundsFinancialInstrumentAttributes is FinancialInstrument22 InvestmentFundsFinancialInstrumentAttributesValue)
        {
            writer.WriteStartElement(null, "InvstmtFndsFinInstrmAttrbts", xmlNamespace );
            InvestmentFundsFinancialInstrumentAttributesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ValuationHaircutDetails is BasicCollateralValuation1Details ValuationHaircutDetailsValue)
        {
            writer.WriteStartElement(null, "ValtnHrcutDtls", xmlNamespace );
            ValuationHaircutDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AggtBal", xmlNamespace );
        AggregateBalance.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AvailableBalance is Balance25 AvailableBalanceValue)
        {
            writer.WriteStartElement(null, "AvlblBal", xmlNamespace );
            AvailableBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NotAvailableBalance is BalanceQuantity17Choice_ NotAvailableBalanceValue)
        {
            writer.WriteStartElement(null, "NotAvlblBal", xmlNamespace );
            NotAvailableBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SafekeepingPlace is SafeKeepingPlace4 SafekeepingPlaceValue)
        {
            writer.WriteStartElement(null, "SfkpgPlc", xmlNamespace );
            SafekeepingPlaceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CorporateActionOptionType is CorporateActionOption5Code CorporateActionOptionTypeValue)
        {
            writer.WriteStartElement(null, "CorpActnOptnTp", xmlNamespace );
            writer.WriteValue(CorporateActionOptionTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (PriceDetails is PriceInformation22 PriceDetailsValue)
        {
            writer.WriteStartElement(null, "PricDtls", xmlNamespace );
            PriceDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ForeignExchangeDetails is ForeignExchangeTerms35 ForeignExchangeDetailsValue)
        {
            writer.WriteStartElement(null, "FXDtls", xmlNamespace );
            ForeignExchangeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DaysAccrued is IsoNumber DaysAccruedValue)
        {
            writer.WriteStartElement(null, "DaysAcrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(DaysAccruedValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (AccountBaseCurrencyAmounts is BalanceAmounts4 AccountBaseCurrencyAmountsValue)
        {
            writer.WriteStartElement(null, "AcctBaseCcyAmts", xmlNamespace );
            AccountBaseCurrencyAmountsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstrumentCurrencyAmounts is BalanceAmounts4 InstrumentCurrencyAmountsValue)
        {
            writer.WriteStartElement(null, "InstrmCcyAmts", xmlNamespace );
            InstrumentCurrencyAmountsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (QuantityBreakdown is QuantityBreakdown71 QuantityBreakdownValue)
        {
            writer.WriteStartElement(null, "QtyBrkdwn", xmlNamespace );
            QuantityBreakdownValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceBreakdown is SubBalanceInformation24 BalanceBreakdownValue)
        {
            writer.WriteStartElement(null, "BalBrkdwn", xmlNamespace );
            BalanceBreakdownValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalBalanceBreakdown is AdditionalBalanceInformation24 AdditionalBalanceBreakdownValue)
        {
            writer.WriteStartElement(null, "AddtlBalBrkdwn", xmlNamespace );
            AdditionalBalanceBreakdownValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceAtSafekeepingPlace is AggregateBalancePerSafekeepingPlace41 BalanceAtSafekeepingPlaceValue)
        {
            writer.WriteStartElement(null, "BalAtSfkpgPlc", xmlNamespace );
            BalanceAtSafekeepingPlaceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HoldingAdditionalDetails is IsoRestrictedFINXMax350Text HoldingAdditionalDetailsValue)
        {
            writer.WriteStartElement(null, "HldgAddtlDtls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINXMax350Text(HoldingAdditionalDetailsValue)); // data type RestrictedFINXMax350Text System.String
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AggregateBalanceInformation44 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
