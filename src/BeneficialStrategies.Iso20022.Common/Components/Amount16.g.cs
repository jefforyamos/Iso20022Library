//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Amount16.  ISO2002 ID# _X3LzYZJQEeuuktRxxQZoNQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Signed amount in a given numeric currency
/// </summary>
public partial record Amount16
     : IIsoXmlSerilizable<Amount16>
{
    #nullable enable
    
    /// <summary>
    /// Amount value.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Sign of the amount.
    /// </summary>
    public CreditDebit3Code? CreditDebit { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(Amount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (CreditDebit is CreditDebit3Code CreditDebitValue)
        {
            writer.WriteStartElement(null, "CdtDbt", xmlNamespace );
            writer.WriteValue(CreditDebitValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static Amount16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
