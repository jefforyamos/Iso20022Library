//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AmountAndTrigger1.  ISO2002 ID# _-GTXZnltEeG7BsjMvd1mEw_-1985688302.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount and trigger information.
/// </summary>
public partial record AmountAndTrigger1
     : IIsoXmlSerilizable<AmountAndTrigger1>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the amount and trigger details.
    /// </summary>
    public required IsoMax35Text Identification { get; init; } 
    /// <summary>
    /// Choice between an amount and a percentage.
    /// </summary>
    public required AmountOrPercentage1Choice_ AmountDetailsChoice { get; init; } 
    /// <summary>
    /// Trigger that causes the variation to come into effect.
    /// </summary>
    public Trigger1? Trigger { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _-GdIYHltEeG7BsjMvd1mEw_-206552408
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(Identification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AmtDtlsChc", xmlNamespace );
        AmountDetailsChoice.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize Trigger, multiplicity Unknown
    }
    public static AmountAndTrigger1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
