//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for AuthorisationResult18.  ISO2002 ID# _SpVRMU7LEeyGi9JAv6wq7Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Outcome of the authorisation.
/// </summary>
public partial record AuthorisationResult18
     : IIsoXmlSerilizable<AuthorisationResult18>
{
    #nullable enable
    
    /// <summary>
    /// Type of party that has delivered or declined the card payment authorisation (the party is not identified).
    /// </summary>
    public GenericIdentification90? AuthorisationEntity { get; init; } 
    /// <summary>
    /// Response to an authorisation request.
    /// </summary>
    public required ResponseType10 ResponseToAuthorisation { get; init; } 
    /// <summary>
    /// Value assigned by the authorising party.
    /// </summary>
    public IsoMax8Text? AuthorisationCode { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AuthorisationEntity is GenericIdentification90 AuthorisationEntityValue)
        {
            writer.WriteStartElement(null, "AuthstnNtty", xmlNamespace );
            AuthorisationEntityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RspnToAuthstn", xmlNamespace );
        ResponseToAuthorisation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AuthorisationCode is IsoMax8Text AuthorisationCodeValue)
        {
            writer.WriteStartElement(null, "AuthstnCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax8Text(AuthorisationCodeValue)); // data type Max8Text System.String
            writer.WriteEndElement();
        }
    }
    public static AuthorisationResult18 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
