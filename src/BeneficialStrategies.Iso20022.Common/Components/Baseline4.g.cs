//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Baseline4.  ISO2002 ID# _Ym19EdM7EeK-v49t1oWkNA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the commercial details of the underlying transaction.
/// </summary>
public partial record Baseline4
     : IIsoXmlSerilizable<Baseline4>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the baseline provided by the submitter.
    /// </summary>
    public required DocumentIdentification1 SubmitterBaselineIdentification { get; init; } 
    /// <summary>
    /// Identifies the service requested by the submitter by means of a code.
    /// </summary>
    public required TradeFinanceService2Code ServiceCode { get; init; } 
    /// <summary>
    /// Reference to the purchase order of the underlying transaction.
    /// </summary>
    public required DocumentIdentification7 PurchaseOrderReference { get; init; } 
    /// <summary>
    /// Party that buys goods or services, or a financial instrument.
    /// </summary>
    public required PartyIdentification26 Buyer { get; init; } 
    /// <summary>
    /// Party that sells goods or services, or a financial instrument.
    /// </summary>
    public required PartyIdentification26 Seller { get; init; } 
    /// <summary>
    /// Financial institution of the buyer, uniquely identified by its BIC.
    /// </summary>
    public required BICIdentification1 BuyerBank { get; init; } 
    /// <summary>
    /// Financial institution of the seller, uniquely identified by its BIC.
    /// </summary>
    public required BICIdentification1 SellerBank { get; init; } 
    /// <summary>
    /// Financial institution on the buyer's side, uniquely identified by its BIC. As part of the transaction, it may submit data sets.
    /// </summary>
    public BICIdentification1? BuyerSideSubmittingBank { get; init; } 
    /// <summary>
    /// Financial institution on the seller's side, uniquely identified by its BIC. As part of the transaction, it may submit data sets.
    /// </summary>
    public BICIdentification1? SellerSideSubmittingBank { get; init; } 
    /// <summary>
    /// Party to be invoiced for the purchase.
    /// </summary>
    public PartyIdentification26? BillTo { get; init; } 
    /// <summary>
    /// Party to whom the goods must be delivered in the end.
    /// </summary>
    public PartyIdentification26? ShipTo { get; init; } 
    /// <summary>
    /// Party to whom the goods must be delivered.
    /// </summary>
    public PartyIdentification26? Consignee { get; init; } 
    /// <summary>
    /// Goods or services that are part of a commercial trade agreement.
    /// </summary>
    public required LineItem11 Goods { get; init; } 
    /// <summary>
    /// Specifies the payment terms by means of a code and a limit in time.
    /// </summary>
    public PaymentTerms5? PaymentTerms { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _ZDAUu9M7EeK-v49t1oWkNA
    /// <summary>
    /// Specifies how the underlying transaction should be settled.
    /// </summary>
    public SettlementTerms3? SettlementTerms { get; init; } 
    /// <summary>
    /// Specifies the details of the payment obligation between financial institutions in this transaction.
    /// </summary>
    public PaymentObligation2? PaymentObligation { get; init; } 
    /// <summary>
    /// Specifies the latest date on which a data set must be matched with a baseline.
    /// </summary>
    public IsoISODate? LatestMatchDate { get; init; } 
    /// <summary>
    /// Specifies that a commercial data set is required for each shipment part of the transaction.
    /// </summary>
    public required RequiredSubmission2 CommercialDataSetRequired { get; init; } 
    /// <summary>
    /// Specifies that a transport data set is required for each shipment part of the transaction.
    /// </summary>
    public RequiredSubmission2? TransportDataSetRequired { get; init; } 
    /// <summary>
    /// Specifies that an insurance data set is required for each shipment part of the transaction.
    /// </summary>
    public RequiredSubmission3? InsuranceDataSetRequired { get; init; } 
    /// <summary>
    /// Specifies that a certificate data set is required for each shipment part of the transaction.
    /// </summary>
    public RequiredSubmission4? CertificateDataSetRequired { get; init; } 
    /// <summary>
    /// Specifies that another type of certificate data set is required for each shipment part of the transaction.
    /// </summary>
    public RequiredSubmission5? OtherCertificateDataSetRequired { get; init; } 
    /// <summary>
    /// Specifies that IntentToPayNotice message(s) are expected as part of this transaction.
    /// </summary>
    public required IsoYesNoIndicator IntentToPayExpected { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "SubmitrBaselnId", xmlNamespace );
        SubmitterBaselineIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SvcCd", xmlNamespace );
        writer.WriteValue(ServiceCode.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PurchsOrdrRef", xmlNamespace );
        PurchaseOrderReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Buyr", xmlNamespace );
        Buyer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sellr", xmlNamespace );
        Seller.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BuyrBk", xmlNamespace );
        BuyerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SellrBk", xmlNamespace );
        SellerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BuyerSideSubmittingBank is BICIdentification1 BuyerSideSubmittingBankValue)
        {
            writer.WriteStartElement(null, "BuyrSdSubmitgBk", xmlNamespace );
            BuyerSideSubmittingBankValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SellerSideSubmittingBank is BICIdentification1 SellerSideSubmittingBankValue)
        {
            writer.WriteStartElement(null, "SellrSdSubmitgBk", xmlNamespace );
            SellerSideSubmittingBankValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BillTo is PartyIdentification26 BillToValue)
        {
            writer.WriteStartElement(null, "BllTo", xmlNamespace );
            BillToValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ShipTo is PartyIdentification26 ShipToValue)
        {
            writer.WriteStartElement(null, "ShipTo", xmlNamespace );
            ShipToValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Consignee is PartyIdentification26 ConsigneeValue)
        {
            writer.WriteStartElement(null, "Consgn", xmlNamespace );
            ConsigneeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Goods", xmlNamespace );
        Goods.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize PaymentTerms, multiplicity Unknown
        if (SettlementTerms is SettlementTerms3 SettlementTermsValue)
        {
            writer.WriteStartElement(null, "SttlmTerms", xmlNamespace );
            SettlementTermsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PaymentObligation is PaymentObligation2 PaymentObligationValue)
        {
            writer.WriteStartElement(null, "PmtOblgtn", xmlNamespace );
            PaymentObligationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LatestMatchDate is IsoISODate LatestMatchDateValue)
        {
            writer.WriteStartElement(null, "LatstMtchDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(LatestMatchDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ComrclDataSetReqrd", xmlNamespace );
        CommercialDataSetRequired.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TransportDataSetRequired is RequiredSubmission2 TransportDataSetRequiredValue)
        {
            writer.WriteStartElement(null, "TrnsprtDataSetReqrd", xmlNamespace );
            TransportDataSetRequiredValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InsuranceDataSetRequired is RequiredSubmission3 InsuranceDataSetRequiredValue)
        {
            writer.WriteStartElement(null, "InsrncDataSetReqrd", xmlNamespace );
            InsuranceDataSetRequiredValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificateDataSetRequired is RequiredSubmission4 CertificateDataSetRequiredValue)
        {
            writer.WriteStartElement(null, "CertDataSetReqrd", xmlNamespace );
            CertificateDataSetRequiredValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherCertificateDataSetRequired is RequiredSubmission5 OtherCertificateDataSetRequiredValue)
        {
            writer.WriteStartElement(null, "OthrCertDataSetReqrd", xmlNamespace );
            OtherCertificateDataSetRequiredValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InttToPayXpctd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(IntentToPayExpected)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static Baseline4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
