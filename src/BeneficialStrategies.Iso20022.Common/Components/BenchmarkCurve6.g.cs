//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for BenchmarkCurve6.  ISO2002 ID# _P1sQ4ZJKEeuAlLVx8pyt3w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identifies the benchmark against which the financial instrument is measured.
/// </summary>
public partial record BenchmarkCurve6
     : IIsoXmlSerilizable<BenchmarkCurve6>
{
    #nullable enable
    
    /// <summary>
    /// Either a swap spread or spread to benchmark depending upon order type. In case of a spread to benchmark, the price offset is expressed in terms of basis points relative to a benchmark - this can be a positive or a negative spread. In case of a swap spread, the price offset is a target spread for a swap.
    /// </summary>
    public IsoDecimalNumber? Spread { get; init; } 
    /// <summary>
    /// Identification of a security by an ISIN.
    /// </summary>
    public SecurityIdentification39? BenchmarkIdentification { get; init; } 
    /// <summary>
    /// Identifies the price of the benchmark security.
    /// </summary>
    public Price8? BenchmarkPrice { get; init; } 
    /// <summary>
    /// Identifies the currency used for the benchmark curve.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? BenchmarkCurveCurrency { get; init; } 
    /// <summary>
    /// Identifies the name of the benchmark curve.
    /// </summary>
    public BenchmarkCurveName7Choice_? BenchmarkCurveName { get; init; } 
    /// <summary>
    /// Identifies a point on a benchmark curve. The point can be stated via a combination of maturity month/year and coupon.
    /// </summary>
    public IsoMax256Text? BenchmarkCurvePoint { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Spread is IsoDecimalNumber SpreadValue)
        {
            writer.WriteStartElement(null, "Sprd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(SpreadValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (BenchmarkIdentification is SecurityIdentification39 BenchmarkIdentificationValue)
        {
            writer.WriteStartElement(null, "BchmkId", xmlNamespace );
            BenchmarkIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BenchmarkPrice is Price8 BenchmarkPriceValue)
        {
            writer.WriteStartElement(null, "BchmkPric", xmlNamespace );
            BenchmarkPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BenchmarkCurveCurrency is ActiveOrHistoricCurrencyCode BenchmarkCurveCurrencyValue)
        {
            writer.WriteStartElement(null, "BchmkCrvCcy", xmlNamespace );
            writer.WriteValue(BenchmarkCurveCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (BenchmarkCurveName is BenchmarkCurveName7Choice_ BenchmarkCurveNameValue)
        {
            writer.WriteStartElement(null, "BchmkCrvNm", xmlNamespace );
            BenchmarkCurveNameValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BenchmarkCurvePoint is IsoMax256Text BenchmarkCurvePointValue)
        {
            writer.WriteStartElement(null, "BchmkCrvPt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(BenchmarkCurvePointValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
    }
    public static BenchmarkCurve6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
