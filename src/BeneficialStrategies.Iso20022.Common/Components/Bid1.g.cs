//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Bid1.  ISO2002 ID# _S0Cy8Np-Ed-ak6NoX_4Aeg_34105770.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Attempt to buy or sell a large number of financial instruments contained in or comprising a portfolio.
/// </summary>
public partial record Bid1
     : IIsoXmlSerilizable<Bid1>
{
    #nullable enable
    
    /// <summary>
    /// Unique identifier for a Bid Request as assigned by institution. Uniqueness must be guaranteed within a single trading day.
    /// </summary>
    public required IsoMax35Text ClientBidIdentification { get; init; } 
    /// <summary>
    /// Provides the name of the order list.
    /// </summary>
    public IsoMax128Text? ListName { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification of the bid.
    /// </summary>
    public IsoMax35Text? BidIdentification { get; init; } 
    /// <summary>
    /// Total number of distinct financial instruments for which the bid is applicable.
    /// </summary>
    public required IsoNumber TotalNumberSecurities { get; init; } 
    /// <summary>
    /// Indicates whether or not to exchange for physical.
    /// </summary>
    public required IsoYesNoIndicator ExchangeForPhysicalIndicator { get; init; } 
    /// <summary>
    /// Indicates a request for a foreign exchange accommodation trade to be executed along with security transaction.
    /// </summary>
    public required IsoYesNoIndicator ForeignExchangeExecutionRequestedIndicator { get; init; } 
    /// <summary>
    /// Indicates the type of transaction of which the order is a component.
    /// </summary>
    public required TradeType2Code TradeType { get; init; } 
    /// <summary>
    /// Expected total number of tickets/allocations to be fully executed.
    /// </summary>
    public IsoNumber? TotalNumberTickets { get; init; } 
    /// <summary>
    /// Identifies the request to receive a report on the progress of the order or not.||A 'Yes' value means a request for regular status messages to be sent.|A 'No' value means no request to receive regular status messages.
    /// </summary>
    public IsoYesNoIndicator? ProgressReportIndicator { get; init; } 
    /// <summary>
    /// Identifies the interval period in minutes between each ListStatus you wish to receive.
    /// </summary>
    public IsoISOTime? ProgressPeriodInterval { get; init; } 
    /// <summary>
    /// Indicates the total number of bidders participating to a list trade.
    /// </summary>
    public IsoNumber? TotalNumberOfBidders { get; init; } 
    /// <summary>
    /// Specifies the date/time on which the trade was executed.
    /// </summary>
    public IsoISODateTime? TradeDate { get; init; } 
    /// <summary>
    /// Time at which current market prices are used to determine the value of a basket.
    /// </summary>
    public IsoISODateTime? StrikeTime { get; init; } 
    /// <summary>
    /// Represents the basis price type in a bid order (list trading).
    /// </summary>
    public required BasisPriceType1Choice_ BasisPriceType { get; init; } 
    /// <summary>
    /// General details about the liquidity of the financial instrument.
    /// </summary>
    public required LiquidityAndStatistics1 LiquidityAndStatistics { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ClntBidId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(ClientBidIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ListName is IsoMax128Text ListNameValue)
        {
            writer.WriteStartElement(null, "ListNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax128Text(ListNameValue)); // data type Max128Text System.String
            writer.WriteEndElement();
        }
        if (BidIdentification is IsoMax35Text BidIdentificationValue)
        {
            writer.WriteStartElement(null, "BidId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(BidIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TtlNbScties", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoNumber(TotalNumberSecurities)); // data type Number System.UInt64
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XchgForPhysInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExchangeForPhysicalIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FrgnXchgExctnReqdInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ForeignExchangeExecutionRequestedIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradTp", xmlNamespace );
        writer.WriteValue(TradeType.ToString()); // Enum value
        writer.WriteEndElement();
        if (TotalNumberTickets is IsoNumber TotalNumberTicketsValue)
        {
            writer.WriteStartElement(null, "TtlNbTckts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TotalNumberTicketsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (ProgressReportIndicator is IsoYesNoIndicator ProgressReportIndicatorValue)
        {
            writer.WriteStartElement(null, "PrgrsRptInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ProgressReportIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ProgressPeriodInterval is IsoISOTime ProgressPeriodIntervalValue)
        {
            writer.WriteStartElement(null, "PrgrsPrdIntrvl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(ProgressPeriodIntervalValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (TotalNumberOfBidders is IsoNumber TotalNumberOfBiddersValue)
        {
            writer.WriteStartElement(null, "TtlNbOfBddrs", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TotalNumberOfBiddersValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (TradeDate is IsoISODateTime TradeDateValue)
        {
            writer.WriteStartElement(null, "TradDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(TradeDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (StrikeTime is IsoISODateTime StrikeTimeValue)
        {
            writer.WriteStartElement(null, "StrkTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(StrikeTimeValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "BsisPricTp", xmlNamespace );
        BasisPriceType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "LqdtyAndSttstcs", xmlNamespace );
        LiquidityAndStatistics.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static Bid1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
