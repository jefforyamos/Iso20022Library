//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for BillingStatement2.  ISO2002 ID# _arIxfTq2EeWZFYSPlduMhw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the statement reporting the bank services billing.
/// </summary>
public partial record BillingStatement2
     : IIsoXmlSerilizable<BillingStatement2>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the customer billing statement.
    /// </summary>
    public required IsoMax35Text StatementIdentification { get; init; } 
    /// <summary>
    /// Date range between the start date and the end date for which the statement is issued.
    /// </summary>
    public required DatePeriod1 FromToDate { get; init; } 
    /// <summary>
    /// Date the statement message was created.
    /// </summary>
    public required IsoISODateTime CreationDateTime { get; init; } 
    /// <summary>
    /// Defines the status of the statement.
    /// </summary>
    public required BillingStatementStatus1Code Status { get; init; } 
    /// <summary>
    /// Specifies the details of the account characteristics.
    /// </summary>
    public required CashAccountCharacteristics2 AccountCharacteristics { get; init; } 
    /// <summary>
    /// Identifies the non tax per annum rate and factor values used within the statement along with any time dependent charge basis.
    /// </summary>
    public BillingRate1? RateData { get; init; } 
    /// <summary>
    /// Specifies details related to currency exchange data.
    /// </summary>
    public CurrencyExchange6? CurrencyExchange { get; init; } 
    /// <summary>
    /// Identifies the average value of balances held within the statement period.
    /// </summary>
    public BillingBalance1? Balance { get; init; } 
    /// <summary>
    /// Identifies the set of values and totals that are used to provide compensation information, service and tax totals.
    /// </summary>
    public BillingCompensation1? Compensation { get; init; } 
    /// <summary>
    /// Specifies the values used for every line item service in the statement.
    /// </summary>
    public BillingService2? Service { get; init; } 
    /// <summary>
    /// Tax region(s) that levy a tax on the services within this statement.
    /// </summary>
    public BillingTaxRegion1? TaxRegion { get; init; } 
    /// <summary>
    /// One or more sections that identify balance or float adjustments to the account. They can reflect either adjustments to the current statement or adjustments to statements from prior reporting periods.
    /// </summary>
    public BalanceAdjustment1? BalanceAdjustment { get; init; } 
    /// <summary>
    /// One or more sections that identify line item service adjustments to the account. They reflect adjustments to statements from prior reporting periods.
    /// </summary>
    public BillingServiceAdjustment1? ServiceAdjustment { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "StmtId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(StatementIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FrToDt", xmlNamespace );
        FromToDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CreDtTm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODateTime(CreationDateTime)); // data type ISODateTime System.DateTime
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sts", xmlNamespace );
        writer.WriteValue(Status.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AcctChrtcs", xmlNamespace );
        AccountCharacteristics.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RateData is BillingRate1 RateDataValue)
        {
            writer.WriteStartElement(null, "RateData", xmlNamespace );
            RateDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrencyExchange is CurrencyExchange6 CurrencyExchangeValue)
        {
            writer.WriteStartElement(null, "CcyXchg", xmlNamespace );
            CurrencyExchangeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Balance is BillingBalance1 BalanceValue)
        {
            writer.WriteStartElement(null, "Bal", xmlNamespace );
            BalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Compensation is BillingCompensation1 CompensationValue)
        {
            writer.WriteStartElement(null, "Compstn", xmlNamespace );
            CompensationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Service is BillingService2 ServiceValue)
        {
            writer.WriteStartElement(null, "Svc", xmlNamespace );
            ServiceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxRegion is BillingTaxRegion1 TaxRegionValue)
        {
            writer.WriteStartElement(null, "TaxRgn", xmlNamespace );
            TaxRegionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceAdjustment is BalanceAdjustment1 BalanceAdjustmentValue)
        {
            writer.WriteStartElement(null, "BalAdjstmnt", xmlNamespace );
            BalanceAdjustmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ServiceAdjustment is BillingServiceAdjustment1 ServiceAdjustmentValue)
        {
            writer.WriteStartElement(null, "SvcAdjstmnt", xmlNamespace );
            ServiceAdjustmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BillingStatement2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
