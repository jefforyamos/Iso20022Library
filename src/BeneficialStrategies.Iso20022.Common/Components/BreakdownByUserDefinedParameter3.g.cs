//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for BreakdownByUserDefinedParameter3.  ISO2002 ID# _KigjuQatEeS3lpTattq7hg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the cash-in and cash-out flows by a user defined parameter/s.
/// </summary>
public partial record BreakdownByUserDefinedParameter3
     : IIsoXmlSerilizable<BreakdownByUserDefinedParameter3>
{
    #nullable enable
    
    /// <summary>
    /// Party for which the cash flow is being reported.
    /// </summary>
    public InvestmentAccount42? Party { get; init; } 
    /// <summary>
    /// Country for which the cash flow is being reported.
    /// </summary>
    public CountryCode? Country { get; init; } 
    /// <summary>
    /// Currency for which the cash flow is being reported.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Parameter for which the cash flow is being reported.
    /// </summary>
    public DataFormat2Choice_? UserDefined { get; init; } 
    /// <summary>
    /// Cash movement into the fund as a result of transactions in shares in an investment fund, for example, subscriptions or switch-ins.
    /// </summary>
    public CashInForecast5? CashInForecast { get; init; } 
    /// <summary>
    /// Cash movement out of the fund as a result of transactions in shares in an investment fund, for example, redemptions or switch-outs.
    /// </summary>
    public CashOutForecast5? CashOutForecast { get; init; } 
    /// <summary>
    /// Net cash as a result of the cash-in and cash-out flows specified for the user defined parameter.
    /// </summary>
    public NetCashForecast4? NetCashForecast { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Party is InvestmentAccount42 PartyValue)
        {
            writer.WriteStartElement(null, "Pty", xmlNamespace );
            PartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Country is CountryCode CountryValue)
        {
            writer.WriteStartElement(null, "Ctry", xmlNamespace );
            writer.WriteValue(CountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Currency is ActiveOrHistoricCurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (UserDefined is DataFormat2Choice_ UserDefinedValue)
        {
            writer.WriteStartElement(null, "UsrDfnd", xmlNamespace );
            UserDefinedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashInForecast is CashInForecast5 CashInForecastValue)
        {
            writer.WriteStartElement(null, "CshInFcst", xmlNamespace );
            CashInForecastValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashOutForecast is CashOutForecast5 CashOutForecastValue)
        {
            writer.WriteStartElement(null, "CshOutFcst", xmlNamespace );
            CashOutForecastValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetCashForecast is NetCashForecast4 NetCashForecastValue)
        {
            writer.WriteStartElement(null, "NetCshFcst", xmlNamespace );
            NetCashForecastValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BreakdownByUserDefinedParameter3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
