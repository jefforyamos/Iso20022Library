//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for BusinessApplicationHeader7.  ISO2002 ID# _VujxkfmsEeuM-bZFEQa_yw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the Business Application Header of the Business Message.
/// Can be used when replying to a query; can also be used when canceling or amending.
/// </summary>
public partial record BusinessApplicationHeader7
     : IIsoXmlSerilizable<BusinessApplicationHeader7>
{
    #nullable enable
    
    /// <summary>
    /// Contains the character set of the text-based elements used in the Business Message.
    /// </summary>
    public UnicodeChartsCode? CharacterSet { get; init; } 
    /// <summary>
    /// The sending MessagingEndpoint that has created this Business Message for the receiving MessagingEndpoint that will process this Business Message.
    /// Note	the sending MessagingEndpoint might be different from the sending address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    public required Party44Choice_ From { get; init; } 
    /// <summary>
    /// The MessagingEndpoint designated by the sending MessagingEndpoint to be the recipient who will ultimately process this Business Message.
    /// Note the receiving MessagingEndpoint might be different from the receiving address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    public required Party44Choice_ To { get; init; } 
    /// <summary>
    /// Unambiguously identifies the Business Message to the MessagingEndpoint that has created the Business Message.
    /// </summary>
    public required IsoMax35Text BusinessMessageIdentifier { get; init; } 
    /// <summary>
    /// The Message Definition Identifier of the Business Message instance with which this Business Application Header instance is associated.
    /// </summary>
    public required IsoMax35Text MessageDefinitionIdentifier { get; init; } 
    /// <summary>
    /// Specifies the business service agreed between the two MessagingEndpoints under which rules this Business Message is exchanged.
    /// To be used when there is a choice of processing services or processing service levels.
    /// Example: 
    /// “marketx.hvps.01” and “marketx.xbdr.01” might be used to indicate that the associated messages are subject to different processing levels for domestic high value payments versus cross-border payments  within the same market practice.
    /// </summary>
    public IsoMax35Text? BusinessService { get; init; } 
    /// <summary>
    /// Specifies the market practice to which the message conforms. The market practices are a set of rules agreed between parties that restricts the usage of the messages in order to achieve better STP (Straight Through Processing) rates.
    /// A market practice specification may also extend the underlying message specification by using extensions or supplementary data of this underlying message.
    /// </summary>
    public ImplementationSpecification1? MarketPractice { get; init; } 
    /// <summary>
    /// Date and time when this Business Message (header) was created.
    /// Note Times must be normalized, using the "Z" annotation.
    /// </summary>
    public required IsoISODateTime CreationDate { get; init; } 
    /// <summary>
    /// Processing date and time indicated by the sender for the receiver of the business message. This date may be different from the date and time provided in the CreationDate.
    /// Usage: Market practice or bilateral agreement should specify how this element should be used.
    /// </summary>
    public IsoISODateTime? BusinessProcessingDate { get; init; } 
    /// <summary>
    /// Indicates whether the message is a Copy, a Duplicate or a copy of a duplicate of a previously sent ISO 20022 Message.
    /// </summary>
    public CopyDuplicate1Code? CopyDuplicate { get; init; } 
    /// <summary>
    /// Flag indicating if the Business Message exchanged between the MessagingEndpoints is possibly a duplicate. 
    /// If the receiving MessagingEndpoint did not receive the original, then this Business Message should be processed as if it were the original. 
    /// If the receiving MessagingEndpoint did receive the original, then it should perform necessary actions to avoid processing this Business Message again.
    /// This will guarantee business idempotent behaviour.
    /// NOTE: this is named "PossResend" in FIX - this is an application level resend not a network level retransmission.
    /// </summary>
    public IsoYesNoIndicator? PossibleDuplicate { get; init; } 
    /// <summary>
    /// Relative indication of the processing precedence of the message over a (set of) Business Messages with assigned priorities.
    /// </summary>
    public BusinessMessagePriorityCode? Priority { get; init; } 
    /// <summary>
    /// Contains the digital signature of the Business Entity authorised to sign this Business Message.
    /// </summary>
    public SignatureEnvelope? Signature { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CharacterSet is UnicodeChartsCode CharacterSetValue)
        {
            writer.WriteStartElement(null, "CharSet", xmlNamespace );
            writer.WriteValue(CharacterSetValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Fr", xmlNamespace );
        From.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "To", xmlNamespace );
        To.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BizMsgIdr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(BusinessMessageIdentifier)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "MsgDefIdr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(MessageDefinitionIdentifier)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (BusinessService is IsoMax35Text BusinessServiceValue)
        {
            writer.WriteStartElement(null, "BizSvc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(BusinessServiceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MarketPractice is ImplementationSpecification1 MarketPracticeValue)
        {
            writer.WriteStartElement(null, "MktPrctc", xmlNamespace );
            MarketPracticeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CreDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODateTime(CreationDate)); // data type ISODateTime System.DateTime
        writer.WriteEndElement();
        if (BusinessProcessingDate is IsoISODateTime BusinessProcessingDateValue)
        {
            writer.WriteStartElement(null, "BizPrcgDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(BusinessProcessingDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (CopyDuplicate is CopyDuplicate1Code CopyDuplicateValue)
        {
            writer.WriteStartElement(null, "CpyDplct", xmlNamespace );
            writer.WriteValue(CopyDuplicateValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (PossibleDuplicate is IsoYesNoIndicator PossibleDuplicateValue)
        {
            writer.WriteStartElement(null, "PssblDplct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PossibleDuplicateValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Priority is BusinessMessagePriorityCode PriorityValue)
        {
            writer.WriteStartElement(null, "Prty", xmlNamespace );
            writer.WriteValue(PriorityValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Signature is SignatureEnvelope SignatureValue)
        {
            writer.WriteStartElement(null, "Sgntr", xmlNamespace );
            SignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BusinessApplicationHeader7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
