//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for BusinessLetter1.  ISO2002 ID# _OTgzMTkz-AOSNFX-8224490.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines a business letter containing identifications of involved entities and their roles, references to documents, free form text and signatures.
/// The semantics of this information are defined by usual business practices for the exchange and tracing of business letters. The described references and party identifiers permit to establish a linked informal trace of sequences of letters.
/// This message component contains three types of elements that can be referenced using IDREF:
/// (1) - all elements defining qualified parties,
/// (2) - all elements defining qualified documents or references to them,
/// (3) - the LegalContext element.
/// </summary>
public partial record BusinessLetter1
     : IIsoXmlSerilizable<BusinessLetter1>
{
    #nullable enable
    
    /// <summary>
    /// Application context defined by users. This is typically the name of a product.
    /// </summary>
    public IsoMax35Text? ApplicationContext { get; init; } 
    /// <summary>
    /// Unambiguous identifier for this letter.
    /// </summary>
    public required QualifiedDocumentInformation1 LetterIdentifier { get; init; } 
    /// <summary>
    /// Purported creation date of the document.
    /// </summary>
    public required IsoISODate Date { get; init; } 
    /// <summary>
    /// Identifier of a related letter.
    /// </summary>
    public QualifiedDocumentInformation1? RelatedLetter { get; init; } 
    /// <summary>
    /// Identifier of a related message.
    /// </summary>
    public QualifiedDocumentInformation1? RelatedMessage { get; init; } 
    /// <summary>
    /// Cross references the lists that are associated to this letter inside a message. The identifiers are relative to the Originator.
    /// </summary>
    public IsoMax35Text? ContentIdentifier { get; init; } 
    /// <summary>
    /// Urgency or order of importance that the originator would like the recipient of the business letter to apply to the processing of the letter.
    /// </summary>
    public Priority3Code? InstructionPriority { get; init; } 
    /// <summary>
    /// Identification of the originating party of this letter.
    /// </summary>
    public required QualifiedPartyIdentification1 Originator { get; init; } 
    /// <summary>
    /// Primary recipient of the business letter. The exact meaning is given by the users.
    /// </summary>
    public QualifiedPartyIdentification1? PrimaryRecipient { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _OTgzMjE0-AOSNFX-8224491
    /// <summary>
    /// Sender of the business letter. The exact meaning is given by the users.
    /// </summary>
    public QualifiedPartyIdentification1? Sender { get; init; } 
    /// <summary>
    /// User who, either individually or in concert with others, authorises the origination of a message.
    /// </summary>
    public QualifiedPartyIdentification1? AuthorisationUser { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _OTgzMjE2-AOSNFX-8224492
    /// <summary>
    /// Party to receive a reply to this letter.
    /// </summary>
    public QualifiedPartyIdentification1? ResponseRecipient { get; init; } 
    /// <summary>
    /// Party to receive a copy of the message.
    /// </summary>
    public QualifiedPartyIdentification1? CopyRecipient { get; init; } 
    /// <summary>
    /// Other party involved. This element is usable as a target for IDREFs.
    /// </summary>
    public QualifiedPartyIdentification1? OtherParty { get; init; } 
    /// <summary>
    /// Associated free form document.
    /// </summary>
    public QualifiedDocumentInformation1? AssociatedDocument { get; init; } 
    /// <summary>
    /// Governing contract.
    /// </summary>
    public QualifiedDocumentInformation1? GoverningContract { get; init; } 
    /// <summary>
    /// Rules and laws governing the letter.
    /// </summary>
    public GovernanceRules2? LegalContext { get; init; } 
    /// <summary>
    /// Free form information about this message.
    /// </summary>
    public IsoMax2000Text? AdditionalInformation { get; init; } 
    /// <summary>
    /// Free form information unrelated to the message for example advertising or a service notice.
    /// </summary>
    public IsoMax350Text? Notice { get; init; } 
    /// <summary>
    /// Status of referenced messages or letters.
    /// </summary>
    public ValidationStatusInformation1? ValidationStatusInformation { get; init; } 
    /// <summary>
    /// Digital signatures and signing parties of this letter or parts of it.
    /// </summary>
    public QualifiedPartyAndXMLSignature1? DigitalSignature { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ApplicationContext is IsoMax35Text ApplicationContextValue)
        {
            writer.WriteStartElement(null, "ApplCntxt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ApplicationContextValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "LttrIdr", xmlNamespace );
        LetterIdentifier.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Dt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(Date)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (RelatedLetter is QualifiedDocumentInformation1 RelatedLetterValue)
        {
            writer.WriteStartElement(null, "RltdLttr", xmlNamespace );
            RelatedLetterValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RelatedMessage is QualifiedDocumentInformation1 RelatedMessageValue)
        {
            writer.WriteStartElement(null, "RltdMsg", xmlNamespace );
            RelatedMessageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ContentIdentifier is IsoMax35Text ContentIdentifierValue)
        {
            writer.WriteStartElement(null, "CnttIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ContentIdentifierValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (InstructionPriority is Priority3Code InstructionPriorityValue)
        {
            writer.WriteStartElement(null, "InstrPrty", xmlNamespace );
            writer.WriteValue(InstructionPriorityValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Orgtr", xmlNamespace );
        Originator.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize PrimaryRecipient, multiplicity Unknown
        if (Sender is QualifiedPartyIdentification1 SenderValue)
        {
            writer.WriteStartElement(null, "Sndr", xmlNamespace );
            SenderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        // Not sure how to serialize AuthorisationUser, multiplicity Unknown
        if (ResponseRecipient is QualifiedPartyIdentification1 ResponseRecipientValue)
        {
            writer.WriteStartElement(null, "RspnRcpt", xmlNamespace );
            ResponseRecipientValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CopyRecipient is QualifiedPartyIdentification1 CopyRecipientValue)
        {
            writer.WriteStartElement(null, "CpyRcpt", xmlNamespace );
            CopyRecipientValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherParty is QualifiedPartyIdentification1 OtherPartyValue)
        {
            writer.WriteStartElement(null, "OthrPty", xmlNamespace );
            OtherPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AssociatedDocument is QualifiedDocumentInformation1 AssociatedDocumentValue)
        {
            writer.WriteStartElement(null, "AssoctdDoc", xmlNamespace );
            AssociatedDocumentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GoverningContract is QualifiedDocumentInformation1 GoverningContractValue)
        {
            writer.WriteStartElement(null, "GovngCtrct", xmlNamespace );
            GoverningContractValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LegalContext is GovernanceRules2 LegalContextValue)
        {
            writer.WriteStartElement(null, "LglCntxt", xmlNamespace );
            LegalContextValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is IsoMax2000Text AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2000Text(AdditionalInformationValue)); // data type Max2000Text System.String
            writer.WriteEndElement();
        }
        if (Notice is IsoMax350Text NoticeValue)
        {
            writer.WriteStartElement(null, "Ntce", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NoticeValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ValidationStatusInformation is ValidationStatusInformation1 ValidationStatusInformationValue)
        {
            writer.WriteStartElement(null, "VldtnStsInf", xmlNamespace );
            ValidationStatusInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DigitalSignature is QualifiedPartyAndXMLSignature1 DigitalSignatureValue)
        {
            writer.WriteStartElement(null, "DgtlSgntr", xmlNamespace );
            DigitalSignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BusinessLetter1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
