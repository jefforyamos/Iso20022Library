//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CancellationStatusAndReason2.  ISO2002 ID# _SxzXTNp-Ed-ak6NoX_4Aeg_195934515.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Status of a transfer cancellation instruction and the reason for the status.
/// </summary>
public partial record CancellationStatusAndReason2
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for a group of individual transfers as assigned by the instructing party. This identifier links the individual transfers together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification of a transfer, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text TransferReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of a transfer. This reference can typically be used in a hub scenario to give the reference of the transfer as assigned by the underlying client.
    /// </summary>
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for a transfer cancellation, as assigned by the instructing party.
    /// </summary>
    public IsoMax35Text? CancellationReference { get; init; } 
    /// <summary>
    /// Status of the transfer cancellation is accepted or sent to next party.
    /// </summary>
    public required TransferCancellationStatus2 Status { get; init; } 
    /// <summary>
    /// Status of the transfer cancellation is rejected.
    /// </summary>
    public required TransferCancellationRejectedStatus1 Rejected { get; init; } 
    /// <summary>
    /// Status of the transfer cancellation is complete. The cancellation instruction has been accepted and processed, the cancellation is complete.
    /// </summary>
    public required TransferCancellationCompleteStatusAndReason1 Complete { get; init; } 
    /// <summary>
    /// Status of the transfer cancellation is pending.
    /// </summary>
    public required TransferCancellationPendingStatus1 Pending { get; init; } 
    /// <summary>
    /// Party that initiates the status.
    /// </summary>
    public IPartyIdentification2Choice? StatusInitiator { get; init; } 
    
    #nullable disable
}
