//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Capped1.  ISO2002 ID# _56qUIFNdEeijdq8ilaxyOA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about a capped drawdown.
/// </summary>
public partial record Capped1
     : IIsoXmlSerilizable<Capped1>
{
    #nullable enable
    
    /// <summary>
    /// Start date of current reference period
    /// </summary>
    public IsoISODate? StartDate { get; init; } 
    /// <summary>
    /// Income limit for the current period.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? IncomeLimitCurrentPeriod { get; init; } 
    /// <summary>
    /// Income taken in the current income year.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? IncomeCurrentPeriod { get; init; } 
    /// <summary>
    /// Income limit for the next income year.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? IncomeLimitNextPeriod { get; init; } 
    /// <summary>
    /// Additional information about the cap.
    /// </summary>
    public AdditionalInformation15? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (StartDate is IsoISODate StartDateValue)
        {
            writer.WriteStartElement(null, "StartDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(StartDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (IncomeLimitCurrentPeriod is IsoActiveCurrencyAnd13DecimalAmount IncomeLimitCurrentPeriodValue)
        {
            writer.WriteStartElement(null, "IncmLmtCurPrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(IncomeLimitCurrentPeriodValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (IncomeCurrentPeriod is IsoActiveCurrencyAnd13DecimalAmount IncomeCurrentPeriodValue)
        {
            writer.WriteStartElement(null, "IncmCurPrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(IncomeCurrentPeriodValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (IncomeLimitNextPeriod is IsoActiveCurrencyAnd13DecimalAmount IncomeLimitNextPeriodValue)
        {
            writer.WriteStartElement(null, "IncmLmtNxtPrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(IncomeLimitNextPeriodValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AdditionalInformation is AdditionalInformation15 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Capped1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
