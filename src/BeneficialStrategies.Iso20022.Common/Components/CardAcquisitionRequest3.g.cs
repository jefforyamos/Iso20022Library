//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardAcquisitionRequest3.  ISO2002 ID# _C7LjAU7bEeyGi9JAv6wq7Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data to request to card data acquisition.
/// </summary>
public partial record CardAcquisitionRequest3
     : IIsoXmlSerilizable<CardAcquisitionRequest3>
{
    #nullable enable
    
    /// <summary>
    /// Sale System identification of the transaction in an unambiguous way.
    /// </summary>
    public TransactionIdentifier1? SaleTransactionIdentification { get; init; } 
    /// <summary>
    /// Card payment brands allowed by the Sale System for the payment transaction.
    /// </summary>
    public IsoMax35Text? AllowedPaymentBrand { get; init; } 
    /// <summary>
    /// Loyalty brands or programs allowed by the Sale System for the loyalty transaction.
    /// </summary>
    public IsoMax35Text? AllowedLoyaltyBrand { get; init; } 
    /// <summary>
    /// Indicates if the Customer realises the selection of the card application.
    /// </summary>
    public IsoTrueFalseIndicator? ForceCustomerSelectionFlag { get; init; } 
    /// <summary>
    /// Amount of the transaction. It allows the processing of a contactless card.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? TotalAmount { get; init; } 
    /// <summary>
    /// Type of payment transaction.
    /// </summary>
    public CardPaymentServiceType13Code? PaymentType { get; init; } 
    /// <summary>
    /// Indicates if Cashback is allowed
    /// </summary>
    public IsoTrueFalseIndicator? CashBackFlag { get; init; } 
    /// <summary>
    /// The POI System receives this information.
    /// </summary>
    public IsoMax70Text? SaleToPOIData { get; init; } 
    /// <summary>
    /// Sale information intended for the Acquirer.
    /// </summary>
    public IsoMax70Text? SaleToAcquirerData { get; init; } 
    /// <summary>
    /// Sale information intended for the Issuer.
    /// </summary>
    public IsoMax70Text? SaleToIssuerData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SaleTransactionIdentification is TransactionIdentifier1 SaleTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleTxId", xmlNamespace );
            SaleTransactionIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AllowedPaymentBrand is IsoMax35Text AllowedPaymentBrandValue)
        {
            writer.WriteStartElement(null, "AllwdPmtBrnd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AllowedPaymentBrandValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AllowedLoyaltyBrand is IsoMax35Text AllowedLoyaltyBrandValue)
        {
            writer.WriteStartElement(null, "AllwdLltyBrnd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AllowedLoyaltyBrandValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ForceCustomerSelectionFlag is IsoTrueFalseIndicator ForceCustomerSelectionFlagValue)
        {
            writer.WriteStartElement(null, "ForceCstmrSelctnFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ForceCustomerSelectionFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (TotalAmount is IsoImpliedCurrencyAndAmount TotalAmountValue)
        {
            writer.WriteStartElement(null, "TtlAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(TotalAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PaymentType is CardPaymentServiceType13Code PaymentTypeValue)
        {
            writer.WriteStartElement(null, "PmtTp", xmlNamespace );
            writer.WriteValue(PaymentTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CashBackFlag is IsoTrueFalseIndicator CashBackFlagValue)
        {
            writer.WriteStartElement(null, "CshBckFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CashBackFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (SaleToPOIData is IsoMax70Text SaleToPOIDataValue)
        {
            writer.WriteStartElement(null, "SaleToPOIData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(SaleToPOIDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (SaleToAcquirerData is IsoMax70Text SaleToAcquirerDataValue)
        {
            writer.WriteStartElement(null, "SaleToAcqrrData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(SaleToAcquirerDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (SaleToIssuerData is IsoMax70Text SaleToIssuerDataValue)
        {
            writer.WriteStartElement(null, "SaleToIssrData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(SaleToIssuerDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static CardAcquisitionRequest3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
