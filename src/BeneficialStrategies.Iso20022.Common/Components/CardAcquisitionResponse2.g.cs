//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardAcquisitionResponse2.  ISO2002 ID# _MaApkQxtEeqdx6buGpCCQw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Content of the Card Acquisition Response message.
/// </summary>
public partial record CardAcquisitionResponse2
     : IIsoXmlSerilizable<CardAcquisitionResponse2>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification of a POI transaction.
    /// </summary>
    public required TransactionIdentifier1 POITransactionIdentification { get; init; } 
    /// <summary>
    /// Type of payment card.
    /// </summary>
    public IsoMax35Text? PaymentBrand { get; init; } 
    /// <summary>
    /// Language used to display messages to the customer.
    /// </summary>
    public LanguageCode? CustomerLanguage { get; init; } 
    /// <summary>
    /// Loyalty account information.
    /// </summary>
    public LoyaltyAccount2? LoyaltyAccount { get; init; } 
    /// <summary>
    /// Customer order attached to a customer, recorded in the POI system.
    /// </summary>
    public CustomerOrder1? CustomerOrder { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "POITxId", xmlNamespace );
        POITransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PaymentBrand is IsoMax35Text PaymentBrandValue)
        {
            writer.WriteStartElement(null, "PmtBrnd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PaymentBrandValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CustomerLanguage is LanguageCode CustomerLanguageValue)
        {
            writer.WriteStartElement(null, "CstmrLang", xmlNamespace );
            writer.WriteValue(CustomerLanguageValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (LoyaltyAccount is LoyaltyAccount2 LoyaltyAccountValue)
        {
            writer.WriteStartElement(null, "LltyAcct", xmlNamespace );
            LoyaltyAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustomerOrder is CustomerOrder1 CustomerOrderValue)
        {
            writer.WriteStartElement(null, "CstmrOrdr", xmlNamespace );
            CustomerOrderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CardAcquisitionResponse2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
