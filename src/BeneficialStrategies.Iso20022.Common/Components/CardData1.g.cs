//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardData1.  ISO2002 ID# _0VngAVTtEeeeIYOiLZFQGg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Non-protected sensitive data associated with the card or payment token performing the transaction.
/// </summary>
public partial record CardData1
     : IIsoXmlSerilizable<CardData1>
{
    #nullable enable
    
    /// <summary>
    /// Primary Account Number (PAN) of the card or a surrogate of the PAN such as a payment token.
    /// ISO 8583 bit 2
    /// </summary>
    public required IsoMax19NumericText PAN { get; init; } 
    /// <summary>
    /// To indicate whether the PAN is using ProtectedData for encryption or not.
    /// False: The PAN is used in plain text 
    /// True: The PAN is encrypted by using ProtectedData
    /// Default: False
    /// </summary>
    public IsoTrueFalseIndicator? ProtectedPANIndicator { get; init; } 
    /// <summary>
    /// Distinguishes between instances of the same payment card.
    /// ISO 8583 bit 23
    /// </summary>
    public IsoMin2Max3NumericText? CardSequenceNumber { get; init; } 
    /// <summary>
    /// Date as from which the card can be used, expressed in one of the following formats: YYYY-MM-DD, YYYY-MM, YY-MM-DD.
    /// ISO 8583:93 & ISO 8583:2003-1 bit 13
    /// </summary>
    public IsoMax10Text? EffectiveDate { get; init; } 
    /// <summary>
    /// Expiry date of the card or payment token.
    /// ISO 8583 bit 14.
    /// </summary>
    public IsoExact4NumericText? ExpiryDate { get; init; } 
    /// <summary>
    /// Service attached to the card as defined in ISO 7813.
    /// ISO 8583 bit 40.
    /// </summary>
    public IsoExact3NumericText? ServiceCode { get; init; } 
    /// <summary>
    /// ISO track 1 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format conforms to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// ISO 8583 bit 45
    /// </summary>
    public IsoMax76Text? Track1 { get; init; } 
    /// <summary>
    /// ISO track 2 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format  conforms to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// ISO 8583 bit 35
    /// </summary>
    public Track2Data1Choice_? Track2 { get; init; } 
    /// <summary>
    /// ISO track 3 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content conforms to ISO 4909, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// ISO 8583 bit 36
    /// </summary>
    public IsoMax104Text? Track3 { get; init; } 
    /// <summary>
    /// Unique non-financial reference assigned to a given PAN. May be used to link the transaction activity to that PAN.
    /// ISO 8583:87 bit 56 (TLV tag 01/dataset 71)
    /// ISO 8583:93 bit 112 (TLV tag 01/dataset 71)
    /// ISO 8583:2003 bit 51 (TLV tag 01/dataset 71)
    /// </summary>
    public IsoMax35Text? PaymentAccountReference { get; init; } 
    /// <summary>
    /// Country code assigned to the card by the card issuer.
    /// ISO 8583 bit 20
    /// </summary>
    public ISO3NumericCountryCode? CardCountryCode { get; init; } 
    /// <summary>
    /// Type of card product.
    /// </summary>
    public IsoMax35Text? CardProductType { get; init; } 
    /// <summary>
    /// Subtype of card product.
    /// </summary>
    public IsoMax35Text? CardProductSubType { get; init; } 
    /// <summary>
    /// Identifies the card portfolio. 
    /// </summary>
    public IsoMax35Text? CardPortfolioIdentifier { get; init; } 
    /// <summary>
    /// Additional card issuer specific data.
    /// </summary>
    public IsoMax70Text? AdditionalCardData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PAN", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax19NumericText(PAN)); // data type Max19NumericText System.String
        writer.WriteEndElement();
        if (ProtectedPANIndicator is IsoTrueFalseIndicator ProtectedPANIndicatorValue)
        {
            writer.WriteStartElement(null, "PrtctdPANInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ProtectedPANIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CardSequenceNumber is IsoMin2Max3NumericText CardSequenceNumberValue)
        {
            writer.WriteStartElement(null, "CardSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMin2Max3NumericText(CardSequenceNumberValue)); // data type Min2Max3NumericText System.String
            writer.WriteEndElement();
        }
        if (EffectiveDate is IsoMax10Text EffectiveDateValue)
        {
            writer.WriteStartElement(null, "FctvDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10Text(EffectiveDateValue)); // data type Max10Text System.String
            writer.WriteEndElement();
        }
        if (ExpiryDate is IsoExact4NumericText ExpiryDateValue)
        {
            writer.WriteStartElement(null, "XpryDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4NumericText(ExpiryDateValue)); // data type Exact4NumericText System.String
            writer.WriteEndElement();
        }
        if (ServiceCode is IsoExact3NumericText ServiceCodeValue)
        {
            writer.WriteStartElement(null, "SvcCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact3NumericText(ServiceCodeValue)); // data type Exact3NumericText System.String
            writer.WriteEndElement();
        }
        if (Track1 is IsoMax76Text Track1Value)
        {
            writer.WriteStartElement(null, "Trck1", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax76Text(Track1Value)); // data type Max76Text System.String
            writer.WriteEndElement();
        }
        if (Track2 is Track2Data1Choice_ Track2Value)
        {
            writer.WriteStartElement(null, "Trck2", xmlNamespace );
            Track2Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Track3 is IsoMax104Text Track3Value)
        {
            writer.WriteStartElement(null, "Trck3", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax104Text(Track3Value)); // data type Max104Text System.String
            writer.WriteEndElement();
        }
        if (PaymentAccountReference is IsoMax35Text PaymentAccountReferenceValue)
        {
            writer.WriteStartElement(null, "PmtAcctRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PaymentAccountReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CardCountryCode is ISO3NumericCountryCode CardCountryCodeValue)
        {
            writer.WriteStartElement(null, "CardCtryCd", xmlNamespace );
            writer.WriteValue(CardCountryCodeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CardProductType is IsoMax35Text CardProductTypeValue)
        {
            writer.WriteStartElement(null, "CardPdctTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CardProductTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CardProductSubType is IsoMax35Text CardProductSubTypeValue)
        {
            writer.WriteStartElement(null, "CardPdctSubTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CardProductSubTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CardPortfolioIdentifier is IsoMax35Text CardPortfolioIdentifierValue)
        {
            writer.WriteStartElement(null, "CardPrtflIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CardPortfolioIdentifierValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalCardData is IsoMax70Text AdditionalCardDataValue)
        {
            writer.WriteStartElement(null, "AddtlCardData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AdditionalCardDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static CardData1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
