//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardPaymentDataSet29.  ISO2002 ID# _tohNsU0ZEeybj420QgWBkA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Set of transactions to capture, sharing common characteristics.
/// </summary>
public partial record CardPaymentDataSet29
     : IIsoXmlSerilizable<CardPaymentDataSet29>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the data set.
    /// </summary>
    public required DataSetIdentification5 DataSetIdentification { get; init; } 
    /// <summary>
    /// Identification of partners involved in the data set building.
    /// </summary>
    public Traceability8? Traceability { get; init; } 
    /// <summary>
    /// Initiator of the data set.
    /// </summary>
    public GenericIdentification176? DataSetInitiator { get; init; } 
    /// <summary>
    /// Transaction totals of the data set.
    /// </summary>
    public TransactionTotals12? TransactionTotals { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _tu0qB00ZEeybj420QgWBkA
    /// <summary>
    /// Data common to all transactions of the data set.
    /// </summary>
    public CommonData11? CommonData { get; init; } 
    /// <summary>
    /// Set of transaction to Process.
    /// </summary>
    public CardPaymentDataSetTransaction10Choice_? Transaction { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _tu0qC00ZEeybj420QgWBkA
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "DataSetId", xmlNamespace );
        DataSetIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Traceability is Traceability8 TraceabilityValue)
        {
            writer.WriteStartElement(null, "Tracblt", xmlNamespace );
            TraceabilityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DataSetInitiator is GenericIdentification176 DataSetInitiatorValue)
        {
            writer.WriteStartElement(null, "DataSetInitr", xmlNamespace );
            DataSetInitiatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        // Not sure how to serialize TransactionTotals, multiplicity Unknown
        if (CommonData is CommonData11 CommonDataValue)
        {
            writer.WriteStartElement(null, "CmonData", xmlNamespace );
            CommonDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        // Not sure how to serialize Transaction, multiplicity Unknown
    }
    public static CardPaymentDataSet29 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
