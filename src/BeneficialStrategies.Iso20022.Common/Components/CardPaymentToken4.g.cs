//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardPaymentToken4.  ISO2002 ID# _OY-lIXr8EeSZrs_hiwNOWA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Payment token information.
/// </summary>
public partial record CardPaymentToken4
     : IIsoXmlSerilizable<CardPaymentToken4>
{
    #nullable enable
    
    /// <summary>
    /// Surrogate value for the PAN.
    /// </summary>
    public IsoMin8Max28NumericText? Token { get; init; } 
    /// <summary>
    /// Identify a payment token inside a set of cards with the same PAN.
    /// </summary>
    public IsoMin2Max3NumericText? CardSequenceNumber { get; init; } 
    /// <summary>
    /// Expiration date of the payment token that is generated by and maintained in the token vault.
    /// </summary>
    public IsoMax10Text? TokenExpiryDate { get; init; } 
    /// <summary>
    /// Additional payment token information.
    /// </summary>
    public IsoMax35Text? TokenCharacteristic { get; init; } 
    /// <summary>
    /// Identifier of a token provider requestor.
    /// </summary>
    public PaymentTokenIdentifiers1? TokenRequestor { get; init; } 
    /// <summary>
    /// Level of confidence resulting of the identification and authentication of the cardholder performed and the entity that performed it.
    /// </summary>
    public IsoNumber? TokenAssuranceLevel { get; init; } 
    /// <summary>
    /// Information about the identification and verification of the cardholder.
    /// </summary>
    public IsoMax500Binary? TokenAssuranceData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Token is IsoMin8Max28NumericText TokenValue)
        {
            writer.WriteStartElement(null, "Tkn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMin8Max28NumericText(TokenValue)); // data type Min8Max28NumericText System.String
            writer.WriteEndElement();
        }
        if (CardSequenceNumber is IsoMin2Max3NumericText CardSequenceNumberValue)
        {
            writer.WriteStartElement(null, "CardSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMin2Max3NumericText(CardSequenceNumberValue)); // data type Min2Max3NumericText System.String
            writer.WriteEndElement();
        }
        if (TokenExpiryDate is IsoMax10Text TokenExpiryDateValue)
        {
            writer.WriteStartElement(null, "TknXpryDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10Text(TokenExpiryDateValue)); // data type Max10Text System.String
            writer.WriteEndElement();
        }
        if (TokenCharacteristic is IsoMax35Text TokenCharacteristicValue)
        {
            writer.WriteStartElement(null, "TknChrtc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TokenCharacteristicValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TokenRequestor is PaymentTokenIdentifiers1 TokenRequestorValue)
        {
            writer.WriteStartElement(null, "TknRqstr", xmlNamespace );
            TokenRequestorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TokenAssuranceLevel is IsoNumber TokenAssuranceLevelValue)
        {
            writer.WriteStartElement(null, "TknAssrncLvl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TokenAssuranceLevelValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (TokenAssuranceData is IsoMax500Binary TokenAssuranceDataValue)
        {
            writer.WriteStartElement(null, "TknAssrncData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax500Binary(TokenAssuranceDataValue)); // data type Max500Binary System.Byte[]
            writer.WriteEndElement();
        }
    }
    public static CardPaymentToken4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
