//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CardPaymentTransaction84.  ISO2002 ID# _CRen0ds-Eee9e6xduATmQg.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Authorisation response from the acquirer.
/// </summary>
public partial record CardPaymentTransaction84
{
    #nullable enable
    
    /// <summary>
    /// Outcome of the authorisation, and actions to perform.
    /// </summary>
    public required AuthorisationResult10 AuthorisationResult { get; init; } 
    /// <summary>
    /// Result of the verifications performed by the issuer to deliver or decline the authorisation.
    /// </summary>
    public TransactionVerificationResult4? TransactionVerificationResult { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Product code which are allowed by the payment card.
    /// </summary>
    public Product4? AllowedProductCode { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Product code not allowed by the payment card.
    /// </summary>
    public Product4? NotAllowedProductCode { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Products that may be added to the purchase after the authorisation.
    /// </summary>
    public Product5? AdditionalAvailableProduct { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Balance and currency code of the account, related to the payment.
    /// </summary>
    public AmountAndDirection93? Balance { get; init; } 
    /// <summary>
    /// Encrypted balance of the account.
    /// </summary>
    public ContentInformationType17? ProtectedBalance { get; init; } 
    /// <summary>
    /// Set of actions to be performed by the POI (Point Of Interaction) system.
    /// </summary>
    public Action8? Action { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be proposed to the cardholder.
    /// </summary>
    public CurrencyConversion14? CurrencyConversionEligibility { get; init; } 
    
    #nullable disable
}
