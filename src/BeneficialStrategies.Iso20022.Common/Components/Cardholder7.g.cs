//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Cardholder7.  ISO2002 ID# _3Ts24WjMEeSHBr6v3XO0Mg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data related to the cardholder.
/// </summary>
public partial record Cardholder7
     : IIsoXmlSerilizable<Cardholder7>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the cardholder involved in a transaction.
    /// </summary>
    public PersonIdentification7? Identification { get; init; } 
    /// <summary>
    /// Cardholder name associated with the card.
    /// </summary>
    public IsoMax45Text? Name { get; init; } 
    /// <summary>
    /// Language selected for the cardholder interface during the transaction.
    /// Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3).
    /// </summary>
    public LanguageCode? Language { get; init; } 
    /// <summary>
    /// Postal address of the owner of the payment card.
    /// </summary>
    public PostalAddress13? BillingAddress { get; init; } 
    /// <summary>
    /// Postal address for delivery of goods or services.
    /// </summary>
    public PostalAddress13? ShippingAddress { get; init; } 
    /// <summary>
    /// Method and data intended to be used for this transaction to authenticate the cardholder.
    /// </summary>
    public CardholderAuthentication6? Authentication { get; init; } 
    /// <summary>
    /// Result of performed verifications for the transaction.
    /// </summary>
    public TransactionVerificationResult3? TransactionVerificationResult { get; init; } 
    /// <summary>
    /// Identifies personal data related to the cardholder.
    /// </summary>
    public IsoMax70Text? PersonalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Identification is PersonIdentification7 IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            IdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Name is IsoMax45Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax45Text(NameValue)); // data type Max45Text System.String
            writer.WriteEndElement();
        }
        if (Language is LanguageCode LanguageValue)
        {
            writer.WriteStartElement(null, "Lang", xmlNamespace );
            writer.WriteValue(LanguageValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (BillingAddress is PostalAddress13 BillingAddressValue)
        {
            writer.WriteStartElement(null, "BllgAdr", xmlNamespace );
            BillingAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ShippingAddress is PostalAddress13 ShippingAddressValue)
        {
            writer.WriteStartElement(null, "ShppgAdr", xmlNamespace );
            ShippingAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Authentication is CardholderAuthentication6 AuthenticationValue)
        {
            writer.WriteStartElement(null, "Authntcn", xmlNamespace );
            AuthenticationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionVerificationResult is TransactionVerificationResult3 TransactionVerificationResultValue)
        {
            writer.WriteStartElement(null, "TxVrfctnRslt", xmlNamespace );
            TransactionVerificationResultValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PersonalData is IsoMax70Text PersonalDataValue)
        {
            writer.WriteStartElement(null, "PrsnlData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(PersonalDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static Cardholder7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
