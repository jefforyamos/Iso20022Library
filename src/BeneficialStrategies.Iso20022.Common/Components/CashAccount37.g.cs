//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CashAccount37.  ISO2002 ID# _M2S65W49EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Account to or from which a cash entry is made.
/// </summary>
public partial record CashAccount37
     : IIsoXmlSerilizable<CashAccount37>
{
    #nullable enable
    
    /// <summary>
    /// Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner.
    /// </summary>
    public IsoMax70Text? Name { get; init; } 
    /// <summary>
    /// Specifies the nature, or use, of the cash account.
    /// </summary>
    public CashAccountType2Choice_? Type { get; init; } 
    /// <summary>
    /// Specifies the currency of the cash account.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Specifies an alternate assumed name for the identification of the account. 
    /// </summary>
    public ProxyAccountIdentification1? Proxy { get; init; } 
    /// <summary>
    /// Maximum amount value applied to or by a participant versus a set of counterparts. The multilateral system is taken into account by the transaction administrator to contain the risk in the system.|With the help of the multilateral limit, the direct participant restricts the use of liquidity when clearing payments with all other direct participants for whom no bilateral limit was set.
    /// </summary>
    public Limit5? CurrentMultilateralLimit { get; init; } 
    /// <summary>
    /// Owner of the account which is being queried.
    /// </summary>
    public PartyIdentification135? Owner { get; init; } 
    /// <summary>
    /// Servicer of the account which is being queried.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? Servicer { get; init; } 
    /// <summary>
    /// Balance is calculated with regard to many members in the system.
    /// </summary>
    public CashBalance13? MultilateralBalance { get; init; } 
    /// <summary>
    /// Limit fixed by a party A with regard to a specific counterparty B and corresponding to the maximum amount of traffic that party A may send to party B. The bilateral limit can be expressed as a debit limit or a credit limit. |With the help of a bilateral limit, the direct participant restricts the use of liquidity when clearing payments with another direct participant.
    /// </summary>
    public BilateralLimit3? CurrentBilateralLimit { get; init; } 
    /// <summary>
    /// Instruction given by a party that has explicit authority to instruct a debit on the account, that is either the debtor or originating party, to the debtor agent, to process liquidity transfers at specified intervals during an implicit or explicit period of time. A standing order is given once and is valid for an open or closed period of time.
    /// </summary>
    public StandingOrder6? StandingOrder { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax70Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(NameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (Type is CashAccountType2Choice_ TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Currency is ActiveOrHistoricCurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Proxy is ProxyAccountIdentification1 ProxyValue)
        {
            writer.WriteStartElement(null, "Prxy", xmlNamespace );
            ProxyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrentMultilateralLimit is Limit5 CurrentMultilateralLimitValue)
        {
            writer.WriteStartElement(null, "CurMulLmt", xmlNamespace );
            CurrentMultilateralLimitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Owner is PartyIdentification135 OwnerValue)
        {
            writer.WriteStartElement(null, "Ownr", xmlNamespace );
            OwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Servicer is BranchAndFinancialInstitutionIdentification6 ServicerValue)
        {
            writer.WriteStartElement(null, "Svcr", xmlNamespace );
            ServicerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MultilateralBalance is CashBalance13 MultilateralBalanceValue)
        {
            writer.WriteStartElement(null, "MulBal", xmlNamespace );
            MultilateralBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrentBilateralLimit is BilateralLimit3 CurrentBilateralLimitValue)
        {
            writer.WriteStartElement(null, "CurBilLmt", xmlNamespace );
            CurrentBilateralLimitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StandingOrder is StandingOrder6 StandingOrderValue)
        {
            writer.WriteStartElement(null, "StgOrdr", xmlNamespace );
            StandingOrderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CashAccount37 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
