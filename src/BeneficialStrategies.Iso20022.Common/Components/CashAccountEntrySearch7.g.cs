//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CashAccountEntrySearch7.  ISO2002 ID# _gZHGOdcZEeqRFcf2R4bPBw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the criteria used to search for a cash entry.
/// </summary>
public partial record CashAccountEntrySearch7
     : IIsoXmlSerilizable<CashAccountEntrySearch7>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification for the account between the account owner and the account servicer.
    /// </summary>
    public AccountIdentificationSearchCriteria2Choice_? AccountIdentification { get; init; } 
    /// <summary>
    /// Specifies the entry amount(s) on which the query is performed.
    /// </summary>
    public ActiveOrHistoricAmountRange2Choice_? EntryAmount { get; init; } 
    /// <summary>
    /// Currency of the entry amount.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? EntryAmountCurrency { get; init; } 
    /// <summary>
    /// Indicates whether an entry is a credit or a debit.
    /// </summary>
    public CreditDebitCode? CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Status of an entry on the books of the account servicer.
    /// </summary>
    public EntryStatus1Code? EntryStatus { get; init; } 
    /// <summary>
    /// Date and time at which an entry is posted to an account on the account servicer's books.
    /// </summary>
    public DateAndDateTimeSearch3Choice_? EntryDate { get; init; } 
    /// <summary>
    /// Party that legally owns the account.
    /// </summary>
    public PartyIdentification135? AccountOwner { get; init; } 
    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? AccountServicer { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AccountIdentification is AccountIdentificationSearchCriteria2Choice_ AccountIdentificationValue)
        {
            writer.WriteStartElement(null, "AcctId", xmlNamespace );
            AccountIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EntryAmount is ActiveOrHistoricAmountRange2Choice_ EntryAmountValue)
        {
            writer.WriteStartElement(null, "NtryAmt", xmlNamespace );
            EntryAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EntryAmountCurrency is ActiveOrHistoricCurrencyCode EntryAmountCurrencyValue)
        {
            writer.WriteStartElement(null, "NtryAmtCcy", xmlNamespace );
            writer.WriteValue(EntryAmountCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CreditDebitIndicator is CreditDebitCode CreditDebitIndicatorValue)
        {
            writer.WriteStartElement(null, "CdtDbtInd", xmlNamespace );
            writer.WriteValue(CreditDebitIndicatorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (EntryStatus is EntryStatus1Code EntryStatusValue)
        {
            writer.WriteStartElement(null, "NtrySts", xmlNamespace );
            writer.WriteValue(EntryStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (EntryDate is DateAndDateTimeSearch3Choice_ EntryDateValue)
        {
            writer.WriteStartElement(null, "NtryDt", xmlNamespace );
            EntryDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountOwner is PartyIdentification135 AccountOwnerValue)
        {
            writer.WriteStartElement(null, "AcctOwnr", xmlNamespace );
            AccountOwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountServicer is BranchAndFinancialInstitutionIdentification6 AccountServicerValue)
        {
            writer.WriteStartElement(null, "AcctSvcr", xmlNamespace );
            AccountServicerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CashAccountEntrySearch7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
