//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CashBalance1.  ISO2002 ID# _SYLWU9p-Ed-ak6NoX_4Aeg_-1921961120.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Set of elements defining the balance details.
/// </summary>
public partial record CashBalance1
     : IIsoXmlSerilizable<CashBalance1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the nature of a balance, eg, opening booked balance.
    /// </summary>
    public required BalanceType1Choice_ Type { get; init; } 
    /// <summary>
    /// Provides further details on the credit line information.
    /// </summary>
    public CreditLine1? CreditLine { get; init; } 
    /// <summary>
    /// Currency and amount of money of the cash balance.
    /// </summary>
    public required IsoCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Indicates whether the balance is a credit or a debit balance. A zero balance is considered to be a credit balance.
    /// </summary>
    public required CreditDebitCode CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Specifies the date (and time) of the balance.
    /// </summary>
    public required DateAndDateTimeChoice_ Date { get; init; } 
    /// <summary>
    /// Set of elements used to indicate when the booked amount of money will become available, ie can be accessed and start generating interest. ||Usage: this type of info is eg used in US, and is linked to particular instruments, such as cheques.|Example: When a cheque is deposited, it will be booked on the deposit day, but the funds will only be accessible as of the indicated availability day (according to national banking regulations).
    /// </summary>
    public CashBalanceAvailability1? Availability { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CreditLine is CreditLine1 CreditLineValue)
        {
            writer.WriteStartElement(null, "CdtLine", xmlNamespace );
            CreditLineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(Amount)); // data type CurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CdtDbtInd", xmlNamespace );
        writer.WriteValue(CreditDebitIndicator.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Dt", xmlNamespace );
        Date.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Availability is CashBalanceAvailability1 AvailabilityValue)
        {
            writer.WriteStartElement(null, "Avlbty", xmlNamespace );
            AvailabilityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CashBalance1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
