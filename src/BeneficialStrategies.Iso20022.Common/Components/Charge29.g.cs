//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Charge29.  ISO2002 ID# _YSR7ESSBEeWWV-wpfEW00A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money associated with a service.
/// </summary>
public partial record Charge29
     : IIsoXmlSerilizable<Charge29>
{
    #nullable enable
    
    /// <summary>
    /// Type of charge.
    /// </summary>
    public required ChargeType4Choice_ Type { get; init; } 
    /// <summary>
    /// Amount of money asked or paid for the charge.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Method used to calculate the charge.
    /// </summary>
    public ChargeBasisType1Choice_? ChargeBasis { get; init; } 
    /// <summary>
    /// Specifies the party that will bear the charges associated with a transfer.
    /// </summary>
    public ChargeBearer1Code? ChargeBearer { get; init; } 
    /// <summary>
    /// Party entitled to the amount of money resulting from a charge.
    /// </summary>
    public PartyIdentification70Choice_? RecipientIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(Amount)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (ChargeBasis is ChargeBasisType1Choice_ ChargeBasisValue)
        {
            writer.WriteStartElement(null, "ChrgBsis", xmlNamespace );
            ChargeBasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargeBearer is ChargeBearer1Code ChargeBearerValue)
        {
            writer.WriteStartElement(null, "ChrgBr", xmlNamespace );
            writer.WriteValue(ChargeBearerValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RecipientIdentification is PartyIdentification70Choice_ RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Charge29 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
