//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ChargesRecord5.  ISO2002 ID# _n3siQbt7Eeq_cfXrH83Rcw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides further individual record details on the charges related to the payment transaction.
/// </summary>
public partial record ChargesRecord5
     : IIsoXmlSerilizable<ChargesRecord5>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of the charges record for reconciliation purpose.
    /// Usage: this identification shall be used as the end-to-end identification in the resulting message for the payment of the charges, to allow for automated reconciliation. 
    /// </summary>
    public IsoMax35Text? ChargesRecordIdentification { get; init; } 
    /// <summary>
    /// Identifies the underlying transaction(s) to which the charges apply.
    /// </summary>
    public TransactionReferences7? UnderlyingTransaction { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _YDA8oCkYEeuBrrgCSpsocg
    /// <summary>
    /// Amount of transaction charges to be paid by the charge bearer.
    /// </summary>
    public required IsoActiveCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Indicates whether the charges amount is a credit or a debit amount. |Usage: A zero amount is considered to be a credit.
    /// </summary>
    public CreditDebitCode? CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Date and time at which the charges are or will be available.
    /// </summary>
    public DateAndDateTime2Choice_? ValueDate { get; init; } 
    /// <summary>
    /// Specifies the debtor agent of the initial transaction, if different from the charges account owner.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? DebtorAgent { get; init; } 
    /// <summary>
    /// Specifies the account of the debtor agent of the initial transaction, when instructing agent is different from the charges account owner.
    /// </summary>
    public CashAccount40? DebtorAgentAccount { get; init; } 
    /// <summary>
    /// Agent that services the charges account.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? ChargesAccountAgent { get; init; } 
    /// <summary>
    /// Account of the agent that services the charges account.
    /// </summary>
    public CashAccount40? ChargesAccountAgentAccount { get; init; } 
    /// <summary>
    /// Specifies the type of charge.
    /// </summary>
    public ChargeType3Choice_? Type { get; init; } 
    /// <summary>
    /// Further information related to the processing of the payment adjustment instruction that may need to be acted upon by the next agent. 
    /// </summary>
    public InstructionForInstructedAgent1? InstructionForInstructedAgent { get; init; } 
    /// <summary>
    /// Further details on the cancellation request reason.
    /// </summary>
    public IsoMax140Text? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ChargesRecordIdentification is IsoMax35Text ChargesRecordIdentificationValue)
        {
            writer.WriteStartElement(null, "ChrgsRcrdId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ChargesRecordIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        // Not sure how to serialize UnderlyingTransaction, multiplicity Unknown
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(Amount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (CreditDebitIndicator is CreditDebitCode CreditDebitIndicatorValue)
        {
            writer.WriteStartElement(null, "CdtDbtInd", xmlNamespace );
            writer.WriteValue(CreditDebitIndicatorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ValueDate is DateAndDateTime2Choice_ ValueDateValue)
        {
            writer.WriteStartElement(null, "ValDt", xmlNamespace );
            ValueDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DebtorAgent is BranchAndFinancialInstitutionIdentification6 DebtorAgentValue)
        {
            writer.WriteStartElement(null, "DbtrAgt", xmlNamespace );
            DebtorAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DebtorAgentAccount is CashAccount40 DebtorAgentAccountValue)
        {
            writer.WriteStartElement(null, "DbtrAgtAcct", xmlNamespace );
            DebtorAgentAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargesAccountAgent is BranchAndFinancialInstitutionIdentification6 ChargesAccountAgentValue)
        {
            writer.WriteStartElement(null, "ChrgsAcctAgt", xmlNamespace );
            ChargesAccountAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargesAccountAgentAccount is CashAccount40 ChargesAccountAgentAccountValue)
        {
            writer.WriteStartElement(null, "ChrgsAcctAgtAcct", xmlNamespace );
            ChargesAccountAgentAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Type is ChargeType3Choice_ TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstructionForInstructedAgent is InstructionForInstructedAgent1 InstructionForInstructedAgentValue)
        {
            writer.WriteStartElement(null, "InstrForInstdAgt", xmlNamespace );
            InstructionForInstructedAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is IsoMax140Text AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(AdditionalInformationValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
    }
    public static ChargesRecord5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
