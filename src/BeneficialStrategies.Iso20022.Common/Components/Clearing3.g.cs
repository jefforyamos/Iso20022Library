//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Clearing3.  ISO2002 ID# _A3gsQNokEeC60axPepSq7g_556617430.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides the clearing details.
/// </summary>
public partial record Clearing3
     : IIsoXmlSerilizable<Clearing3>
{
    #nullable enable
    
    /// <summary>
    /// Provides details about the clearing member identification and account.
    /// </summary>
    public PartyIdentificationAndAccount78? ClearingMember { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _A3qdQNokEeC60axPepSq7g_428053950
    /// <summary>
    /// Clearing organisation that will clear the trade.
    /// Note: This field allows Clearing Member Firm to segregate flows coming from clearing counterparty's clearing system. Indeed, Clearing Member Firms receive messages from the same system (same sender) and this field allows them to know if the message is related to equities or derivatives.
    /// </summary>
    public PartyIdentification35Choice_? ClearingSegment { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize ClearingMember, multiplicity Unknown
        if (ClearingSegment is PartyIdentification35Choice_ ClearingSegmentValue)
        {
            writer.WriteStartElement(null, "ClrSgmt", xmlNamespace );
            ClearingSegmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Clearing3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
