//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CollateralAmount17.  ISO2002 ID# _Spl8ARInEeyZaPkaPAzTvQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides details on the collateral valuation.
/// </summary>
public partial record CollateralAmount17
     : IIsoXmlSerilizable<CollateralAmount17>
{
    #nullable enable
    
    /// <summary>
    /// Total value of posted collateral (post-haircut) expressed in the reporting currency.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAndAmount ValueOfCollateralHeld { get; init; } 
    /// <summary>
    /// Total exposure amount between the giver and taker expressed in the reporting currency. It includes the transaction amount and the accrued interests minus any  unsettled amount.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAndAmount TotalExposure { get; init; } 
    /// <summary>
    /// Transaction Amount as instructed by the client. 
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TransactionAmount { get; init; } 
    /// <summary>
    /// Breakdown of transaction amount (required value for the exposure)  into market value lots based on  the term for the underlying trades.
    /// </summary>
    public CollateralTransactionAmountBreakdown2? TransactionAmountBreakdown { get; init; } 
    /// <summary>
    /// The difference between the total collateral value and the total collateral required.
    /// </summary>
    public AmountAndDirection53? Margin { get; init; } 
    /// <summary>
    /// Total amount of money accrued interest computed in the case of interest bearing financial instruments.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalAccruedInterest { get; init; } 
    /// <summary>
    /// Collateral is required to cover interest that accrues on the exposure. Margin amount would thus be the difference between collateral required and collateral value (that is COVA).
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalCollateralRequired { get; init; } 
    /// <summary>
    /// Total value of own collateral in the reporting currency.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalValueOfOwnCollateral { get; init; } 
    /// <summary>
    /// Total value of reused/rehypotheticated collateral in the reporting currency.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalValueOfReusedCollateral { get; init; } 
    /// <summary>
    /// Value of incoming collateral, to be settled in the reporting currency.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalPendingCollateralIn { get; init; } 
    /// <summary>
    /// Value of outgoing collateral, to be settled in the reporting currency.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalPendingCollateralOut { get; init; } 
    /// <summary>
    /// Total of principals in the reporting currency.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalOfPrincipals { get; init; } 
    /// <summary>
    /// Termination Transaction Amount 
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TerminationTransactionAmount { get; init; } 
    /// <summary>
    /// Total value of undelivered intended transaction cash amount.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalCashFailed { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ValOfCollHeld", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(ValueOfCollateralHeld)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TtlXpsr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalExposure)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (TransactionAmount is IsoActiveOrHistoricCurrencyAndAmount TransactionAmountValue)
        {
            writer.WriteStartElement(null, "TxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TransactionAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TransactionAmountBreakdown is CollateralTransactionAmountBreakdown2 TransactionAmountBreakdownValue)
        {
            writer.WriteStartElement(null, "TxAmtBrkdwn", xmlNamespace );
            TransactionAmountBreakdownValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Margin is AmountAndDirection53 MarginValue)
        {
            writer.WriteStartElement(null, "Mrgn", xmlNamespace );
            MarginValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalAccruedInterest is IsoActiveOrHistoricCurrencyAndAmount TotalAccruedInterestValue)
        {
            writer.WriteStartElement(null, "TtlAcrdIntrst", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalAccruedInterestValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalCollateralRequired is IsoActiveOrHistoricCurrencyAndAmount TotalCollateralRequiredValue)
        {
            writer.WriteStartElement(null, "TtlCollReqrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalCollateralRequiredValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalValueOfOwnCollateral is IsoActiveOrHistoricCurrencyAndAmount TotalValueOfOwnCollateralValue)
        {
            writer.WriteStartElement(null, "TtlValOfOwnColl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalValueOfOwnCollateralValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalValueOfReusedCollateral is IsoActiveOrHistoricCurrencyAndAmount TotalValueOfReusedCollateralValue)
        {
            writer.WriteStartElement(null, "TtlValOfReusdColl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalValueOfReusedCollateralValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalPendingCollateralIn is IsoActiveOrHistoricCurrencyAndAmount TotalPendingCollateralInValue)
        {
            writer.WriteStartElement(null, "TtlPdgCollIn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalPendingCollateralInValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalPendingCollateralOut is IsoActiveOrHistoricCurrencyAndAmount TotalPendingCollateralOutValue)
        {
            writer.WriteStartElement(null, "TtlPdgCollOut", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalPendingCollateralOutValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalOfPrincipals is IsoActiveOrHistoricCurrencyAndAmount TotalOfPrincipalsValue)
        {
            writer.WriteStartElement(null, "TtlOfPrncpls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalOfPrincipalsValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TerminationTransactionAmount is IsoActiveOrHistoricCurrencyAndAmount TerminationTransactionAmountValue)
        {
            writer.WriteStartElement(null, "TermntnTxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TerminationTransactionAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalCashFailed is IsoActiveOrHistoricCurrencyAndAmount TotalCashFailedValue)
        {
            writer.WriteStartElement(null, "TtlCshFaild", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalCashFailedValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static CollateralAmount17 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
