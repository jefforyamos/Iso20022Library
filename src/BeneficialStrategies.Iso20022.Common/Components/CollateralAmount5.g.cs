//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CollateralAmount5.  ISO2002 ID# __fRWYOCuEei2UYJ62ws-Fw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Collateral and settlement related amounts.
/// </summary>
public partial record CollateralAmount5
     : IIsoXmlSerilizable<CollateralAmount5>
{
    #nullable enable
    
    /// <summary>
    /// Margin amount needed when the instruction reported creates an exposure.
    /// </summary>
    public AmountAndDirection44? RequiredMargin { get; init; } 
    /// <summary>
    /// Amount which is collateralised.
    /// Feedback 
    /// </summary>
    public AmountAndDirection44? Collateralised { get; init; } 
    /// <summary>
    /// Outstanding amount to be covered, collateralised.
    /// </summary>
    public AmountAndDirection44? RemainingCollateralised { get; init; } 
    /// <summary>
    /// Amount effectively settled and which will be credited to/debited from the account owner's position.
    /// </summary>
    public AmountAndDirection44? Settled { get; init; } 
    /// <summary>
    /// Amount due to be settled.    
    /// </summary>
    public AmountAndDirection44? RemainingSettlement { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (RequiredMargin is AmountAndDirection44 RequiredMarginValue)
        {
            writer.WriteStartElement(null, "ReqrdMrgn", xmlNamespace );
            RequiredMarginValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Collateralised is AmountAndDirection44 CollateralisedValue)
        {
            writer.WriteStartElement(null, "Collsd", xmlNamespace );
            CollateralisedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RemainingCollateralised is AmountAndDirection44 RemainingCollateralisedValue)
        {
            writer.WriteStartElement(null, "RmngCollsd", xmlNamespace );
            RemainingCollateralisedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Settled is AmountAndDirection44 SettledValue)
        {
            writer.WriteStartElement(null, "Sttld", xmlNamespace );
            SettledValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RemainingSettlement is AmountAndDirection44 RemainingSettlementValue)
        {
            writer.WriteStartElement(null, "RmngSttlm", xmlNamespace );
            RemainingSettlementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CollateralAmount5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
