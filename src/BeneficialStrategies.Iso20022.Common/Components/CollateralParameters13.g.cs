//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CollateralParameters13.  ISO2002 ID# _MOvFUSs9EeySlt9bF77XfA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parameters which explicitly state the conditions that must be fulfilled before a particular triparty collateral instruction/transaction  can be confirmed. These parameters are defined by the instructing party in compliance with triparty collateral rules in the market the instruction/transaction will take place.
/// </summary>
public partial record CollateralParameters13
     : IIsoXmlSerilizable<CollateralParameters13>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the type of collateral instruction.
    /// </summary>
    public required CollateralTransactionType1Choice_ CollateralInstructionType { get; init; } 
    /// <summary>
    /// Specifies the underlying business area/type of trade causing the exposure.
    /// </summary>
    public required ExposureType23Choice_ ExposureType { get; init; } 
    /// <summary>
    /// Specifies whether the client is the collateral taker or giver.
    /// </summary>
    public required CollateralRole1Code CollateralSide { get; init; } 
    /// <summary>
    /// Specifies the priority with which the instruction needs to be executed.
    /// </summary>
    public GenericIdentification30? Priority { get; init; } 
    /// <summary>
    /// Specifies whether the allocation of the collateral is manual or automatic.
    /// </summary>
    public IsoYesNoIndicator? AutomaticAllocation { get; init; } 
    /// <summary>
    /// Indicates whether the proposed collateral movements can be accepted.
    /// </summary>
    public IsoYesNoIndicator? CollateralApproved { get; init; } 
    /// <summary>
    /// Indicates whether the proposed collateral movements have settled or not.
    /// </summary>
    public IsoYesNoIndicator? SettlementApproved { get; init; } 
    /// <summary>
    /// Specifies the amount of the collateral.
    /// </summary>
    public CollateralAmount5? CollateralAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "CollInstrTp", xmlNamespace );
        CollateralInstructionType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XpsrTp", xmlNamespace );
        ExposureType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CollSd", xmlNamespace );
        writer.WriteValue(CollateralSide.ToString()); // Enum value
        writer.WriteEndElement();
        if (Priority is GenericIdentification30 PriorityValue)
        {
            writer.WriteStartElement(null, "Prty", xmlNamespace );
            PriorityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AutomaticAllocation is IsoYesNoIndicator AutomaticAllocationValue)
        {
            writer.WriteStartElement(null, "AutomtcAllcn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(AutomaticAllocationValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CollateralApproved is IsoYesNoIndicator CollateralApprovedValue)
        {
            writer.WriteStartElement(null, "CollApprvd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CollateralApprovedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (SettlementApproved is IsoYesNoIndicator SettlementApprovedValue)
        {
            writer.WriteStartElement(null, "SttlmApprvd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(SettlementApprovedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CollateralAmount is CollateralAmount5 CollateralAmountValue)
        {
            writer.WriteStartElement(null, "CollAmt", xmlNamespace );
            CollateralAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CollateralParameters13 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
