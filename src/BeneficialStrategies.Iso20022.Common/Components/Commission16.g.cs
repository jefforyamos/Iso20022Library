//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Commission16.  ISO2002 ID# _AhmtsNokEeC60axPepSq7g_141814684.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money due to a party as compensation for a service.
/// </summary>
public partial record Commission16
     : IIsoXmlSerilizable<Commission16>
{
    #nullable enable
    
    /// <summary>
    /// Specification of the commission type.
    /// </summary>
    public required CommissionType2Choice_ Type { get; init; } 
    /// <summary>
    /// Amount of money due to a party as compensation for a service.
    /// </summary>
    public required AmountOrRate2Choice_ Commission { get; init; } 
    /// <summary>
    /// Information related to an identification, eg, party identification or account identification.
    /// </summary>
    public PartyIdentification54? RecipientIdentification { get; init; } 
    /// <summary>
    /// Date at which an operation is triggered to calculate, for instance, a commission, fee, asset values, etc.
    /// </summary>
    public IsoISODate? CalculationDate { get; init; } 
    /// <summary>
    /// Total value of the commissions for a specific trade.
    /// </summary>
    public AmountAndDirection29? TotalCommission { get; init; } 
    /// <summary>
    /// Amount that results of the calculation of VAT on net fees, according to the transaction current tariffs.
    /// </summary>
    public IsoActiveCurrencyAndAmount? TotalVATAmount { get; init; } 
    /// <summary>
    /// Specifies the VAT rate.
    /// </summary>
    public IsoBaseOneRate? VATRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Comssn", xmlNamespace );
        Commission.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RecipientIdentification is PartyIdentification54 RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CalculationDate is IsoISODate CalculationDateValue)
        {
            writer.WriteStartElement(null, "ClctnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CalculationDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (TotalCommission is AmountAndDirection29 TotalCommissionValue)
        {
            writer.WriteStartElement(null, "TtlComssn", xmlNamespace );
            TotalCommissionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalVATAmount is IsoActiveCurrencyAndAmount TotalVATAmountValue)
        {
            writer.WriteStartElement(null, "TtlVATAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(TotalVATAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (VATRate is IsoBaseOneRate VATRateValue)
        {
            writer.WriteStartElement(null, "VATRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOneRate(VATRateValue)); // data type BaseOneRate System.Decimal
            writer.WriteEndElement();
        }
    }
    public static Commission16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
