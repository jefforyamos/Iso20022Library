//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Commodity43.  ISO2002 ID# _X74TEcg7EeuWwaMSwXJLEA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data specific to commodities and related informations used as a collateral.
/// </summary>
public partial record Commodity43
     : IIsoXmlSerilizable<Commodity43>
{
    #nullable enable
    
    /// <summary>
    /// Details on commodities assignments to sectors.
    /// </summary>
    public AssetClassCommodity5Choice_? Classification { get; init; } 
    /// <summary>
    /// Quantity of the commodity.
    /// </summary>
    public Quantity17? Quantity { get; init; } 
    /// <summary>
    /// Price of unit of asset or collateral component, including accrued interest for interest-bearing securities, used to value the commodity .
    /// </summary>
    public SecuritiesTransactionPrice19Choice_? UnitPrice { get; init; } 
    /// <summary>
    /// Market value of asset or collateral component.
    /// </summary>
    public AmountAndDirection53? MarketValue { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Classification is AssetClassCommodity5Choice_ ClassificationValue)
        {
            writer.WriteStartElement(null, "Clssfctn", xmlNamespace );
            ClassificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Quantity is Quantity17 QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            QuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnitPrice is SecuritiesTransactionPrice19Choice_ UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            UnitPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketValue is AmountAndDirection53 MarketValueValue)
        {
            writer.WriteStartElement(null, "MktVal", xmlNamespace );
            MarketValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Commodity43 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
