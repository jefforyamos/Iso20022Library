//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CommunicationAddress6.  ISO2002 ID# _IHGxISCBEeWhHbfCMWc1cw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Communication device number or electronic address used for communication.
/// </summary>
public partial record CommunicationAddress6
     : IIsoXmlSerilizable<CommunicationAddress6>
{
    #nullable enable
    
    /// <summary>
    /// Type of communication address.
    /// </summary>
    public AddressType1Choice_? AddressType { get; init; } 
    /// <summary>
    /// Address for electronic mail (e-mail).
    /// </summary>
    public IsoMax256Text? Email { get; init; } 
    /// <summary>
    /// Collection of information that identifies a phone number, as defined by telecom services.
    /// </summary>
    public IsoPhoneNumber? Phone { get; init; } 
    /// <summary>
    /// Collection of information that identifies a mobile phone number, as defined by telecom services.
    /// </summary>
    public IsoPhoneNumber? Mobile { get; init; } 
    /// <summary>
    /// Collection of information that identifies a FAX number, as defined by telecom services.
    /// </summary>
    public IsoPhoneNumber? FaxNumber { get; init; } 
    /// <summary>
    /// Address for a telex machine.
    /// </summary>
    public IsoMax35Text? TelexAddress { get; init; } 
    /// <summary>
    /// Address for the Universal Resource Locator (URL), for example, used over the www (HTTP) service.
    /// </summary>
    public IsoMax256Text? URLAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AddressType is AddressType1Choice_ AddressTypeValue)
        {
            writer.WriteStartElement(null, "AdrTp", xmlNamespace );
            AddressTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Email is IsoMax256Text EmailValue)
        {
            writer.WriteStartElement(null, "Email", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(EmailValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (Phone is IsoPhoneNumber PhoneValue)
        {
            writer.WriteStartElement(null, "Phne", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(PhoneValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (Mobile is IsoPhoneNumber MobileValue)
        {
            writer.WriteStartElement(null, "Mob", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(MobileValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (FaxNumber is IsoPhoneNumber FaxNumberValue)
        {
            writer.WriteStartElement(null, "FaxNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(FaxNumberValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (TelexAddress is IsoMax35Text TelexAddressValue)
        {
            writer.WriteStartElement(null, "TlxAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TelexAddressValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (URLAddress is IsoMax256Text URLAddressValue)
        {
            writer.WriteStartElement(null, "URLAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(URLAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
    }
    public static CommunicationAddress6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
