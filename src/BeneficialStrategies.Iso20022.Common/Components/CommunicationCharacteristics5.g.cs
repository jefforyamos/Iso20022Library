//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CommunicationCharacteristics5.  ISO2002 ID# _FsXroQ0XEeqUVL7sB4m7NA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Low level communication of the hardware or software component toward another component or an external entity.
/// </summary>
public partial record CommunicationCharacteristics5
     : IIsoXmlSerilizable<CommunicationCharacteristics5>
{
    #nullable enable
    
    /// <summary>
    /// Type of low level communication.
    /// </summary>
    public required POICommunicationType2Code CommunicationType { get; init; } 
    /// <summary>
    /// Entity that communicate with the current component, using this communication device.
    /// </summary>
    public PartyType7Code? RemoteParty { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _F3D4sw0XEeqUVL7sB4m7NA
    /// <summary>
    /// Communication hardware is activated.
    /// </summary>
    public required IsoTrueFalseIndicator Active { get; init; } 
    /// <summary>
    /// Network parameters of the communication link.
    /// </summary>
    public NetworkParameters7? Parameters { get; init; } 
    /// <summary>
    /// Physical Interface used by the communication link.
    /// </summary>
    public PhysicalInterfaceParameter1? PhysicalInterface { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ComTp", xmlNamespace );
        writer.WriteValue(CommunicationType.ToString()); // Enum value
        writer.WriteEndElement();
        // Not sure how to serialize RemoteParty, multiplicity Unknown
        writer.WriteStartElement(null, "Actv", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(Active)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (Parameters is NetworkParameters7 ParametersValue)
        {
            writer.WriteStartElement(null, "Params", xmlNamespace );
            ParametersValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PhysicalInterface is PhysicalInterfaceParameter1 PhysicalInterfaceValue)
        {
            writer.WriteStartElement(null, "PhysIntrfc", xmlNamespace );
            PhysicalInterfaceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CommunicationCharacteristics5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
