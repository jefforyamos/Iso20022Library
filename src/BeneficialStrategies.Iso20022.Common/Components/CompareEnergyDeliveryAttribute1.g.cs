//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CompareEnergyDeliveryAttribute1.  ISO2002 ID# _YR3eIVo0Ee23K4GXSpBSeg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies two values to compare related energy derivatives attributes.
/// </summary>
public partial record CompareEnergyDeliveryAttribute1
     : IIsoXmlSerilizable<CompareEnergyDeliveryAttribute1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether the information on the delivery intervals are matching or not.
    /// </summary>
    public CompareTimePeriod2? EnergyDeliveryInterval { get; init; } 
    /// <summary>
    /// Specifies whether the information on the delivery start date and end date are matching or not.
    /// </summary>
    public CompareDatePeriod2? EnergyDate { get; init; } 
    /// <summary>
    /// Specifies whether the information on the energy durations are matching or not.
    /// </summary>
    public CompareDurationType1? EnergyDuration { get; init; } 
    /// <summary>
    /// Specifies whether the information on the week days are matching or not.
    /// </summary>
    public CompareWeekDay1? EnergyWeekDay { get; init; } 
    /// <summary>
    /// Specifies whether the information on the delivery capacity are matching or not.
    /// </summary>
    public CompareLongFraction19DecimalNumber1? EnergyDeliveryCapacity { get; init; } 
    /// <summary>
    /// Specifies whether the information on the energy quantity units are matching or not.
    /// </summary>
    public CompareEnergyQuantityUnit1? EnergyQuantityUnit { get; init; } 
    /// <summary>
    /// Specifies whether the information on the price time interval quantity are matching or not.
    /// </summary>
    public CompareAmountAndDirection3? EnergyPriceTimeIntervalQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (EnergyDeliveryInterval is CompareTimePeriod2 EnergyDeliveryIntervalValue)
        {
            writer.WriteStartElement(null, "NrgyDlvryIntrvl", xmlNamespace );
            EnergyDeliveryIntervalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyDate is CompareDatePeriod2 EnergyDateValue)
        {
            writer.WriteStartElement(null, "NrgyDt", xmlNamespace );
            EnergyDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyDuration is CompareDurationType1 EnergyDurationValue)
        {
            writer.WriteStartElement(null, "NrgyDrtn", xmlNamespace );
            EnergyDurationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyWeekDay is CompareWeekDay1 EnergyWeekDayValue)
        {
            writer.WriteStartElement(null, "NrgyWkDay", xmlNamespace );
            EnergyWeekDayValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyDeliveryCapacity is CompareLongFraction19DecimalNumber1 EnergyDeliveryCapacityValue)
        {
            writer.WriteStartElement(null, "NrgyDlvryCpcty", xmlNamespace );
            EnergyDeliveryCapacityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyQuantityUnit is CompareEnergyQuantityUnit1 EnergyQuantityUnitValue)
        {
            writer.WriteStartElement(null, "NrgyQtyUnit", xmlNamespace );
            EnergyQuantityUnitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnergyPriceTimeIntervalQuantity is CompareAmountAndDirection3 EnergyPriceTimeIntervalQuantityValue)
        {
            writer.WriteStartElement(null, "NrgyPricTmIntrvlQty", xmlNamespace );
            EnergyPriceTimeIntervalQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CompareEnergyDeliveryAttribute1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
