//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ConfirmationParties4.  ISO2002 ID# _AeLmRNokEeC60axPepSq7g_-324873963.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parties used for acting parties that apply either to the whole message or to individual sides.
/// </summary>
public partial record ConfirmationParties4
     : IIsoXmlSerilizable<ConfirmationParties4>
{
    #nullable enable
    
    /// <summary>
    /// Party that identifies the underlying investor.
    /// </summary>
    public PartyIdentificationAndAccount79? Investor { get; init; } 
    /// <summary>
    /// Party that buys goods or services, or a financial instrument.
    /// </summary>
    public ConfirmationPartyDetails2? Buyer { get; init; } 
    /// <summary>
    /// Party that has applied, met specific requirements, and received a monetary or securities loan from a lender. The party initiating the request signs a promissory note agreeing to pay the lien holder back during a specified timeframe for the entire loan amount plus any additional fees. The borrower is legally responsible for repayment of the loan and is subject to any penalties for not repaying the loan back based on the lending terms agreed upon.
    /// </summary>
    public ConfirmationPartyDetails2? Borrower { get; init; } 
    /// <summary>
    /// Party that sells goods or services, or a financial instrument.
    /// </summary>
    public ConfirmationPartyDetails2? Seller { get; init; } 
    /// <summary>
    /// A private, public or institutional entity which makes funds available to others to borrow.
    /// </summary>
    public ConfirmationPartyDetails2? Lender { get; init; } 
    /// <summary>
    /// Brokerage firm which is the commissioned broker in a multi-broker trade.
    /// </summary>
    public ConfirmationPartyDetails3? BrokerOfCredit { get; init; } 
    /// <summary>
    /// Broker or other intermediary with the closest association with the investor.
    /// </summary>
    public ConfirmationPartyDetails3? IntroducingFirm { get; init; } 
    /// <summary>
    /// Brokerage firm assigned to take credit on the trade from the step-out brokerage firm.
    /// </summary>
    public ConfirmationPartyDetails1? StepInFirm { get; init; } 
    /// <summary>
    /// Brokerage firm that executes an order, but gives other firms credit and some of the commission for the trade.
    /// </summary>
    public ConfirmationPartyDetails1? StepOutFirm { get; init; } 
    /// <summary>
    /// Party, also know as take up broker, that settles security transactions from another broker for a fee.
    /// </summary>
    public ConfirmationPartyDetails6? ClearingFirm { get; init; } 
    /// <summary>
    /// Party responsible for executing an order (for example, an executing or give-up broker). Usually a commission is charged to the client for executing an order.
    /// </summary>
    public ConfirmationPartyDetails6? ExecutingBroker { get; init; } 
    /// <summary>
    /// Party (buyer or seller) that positively affirms the details of a previously agreed security trade confirmation.
    /// </summary>
    public ConfirmationPartyDetails3? AffirmingParty { get; init; } 
    /// <summary>
    /// Party involved in a legal proceeding, agreement, or other transaction.
    /// </summary>
    public ConfirmationPartyDetails3? TradeBeneficiaryParty { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Investor is PartyIdentificationAndAccount79 InvestorValue)
        {
            writer.WriteStartElement(null, "Invstr", xmlNamespace );
            InvestorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Buyer is ConfirmationPartyDetails2 BuyerValue)
        {
            writer.WriteStartElement(null, "Buyr", xmlNamespace );
            BuyerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Borrower is ConfirmationPartyDetails2 BorrowerValue)
        {
            writer.WriteStartElement(null, "Brrwr", xmlNamespace );
            BorrowerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Seller is ConfirmationPartyDetails2 SellerValue)
        {
            writer.WriteStartElement(null, "Sellr", xmlNamespace );
            SellerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Lender is ConfirmationPartyDetails2 LenderValue)
        {
            writer.WriteStartElement(null, "Lndr", xmlNamespace );
            LenderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BrokerOfCredit is ConfirmationPartyDetails3 BrokerOfCreditValue)
        {
            writer.WriteStartElement(null, "BrkrOfCdt", xmlNamespace );
            BrokerOfCreditValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IntroducingFirm is ConfirmationPartyDetails3 IntroducingFirmValue)
        {
            writer.WriteStartElement(null, "IntrdcgFirm", xmlNamespace );
            IntroducingFirmValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StepInFirm is ConfirmationPartyDetails1 StepInFirmValue)
        {
            writer.WriteStartElement(null, "StepInFirm", xmlNamespace );
            StepInFirmValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StepOutFirm is ConfirmationPartyDetails1 StepOutFirmValue)
        {
            writer.WriteStartElement(null, "StepOutFirm", xmlNamespace );
            StepOutFirmValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClearingFirm is ConfirmationPartyDetails6 ClearingFirmValue)
        {
            writer.WriteStartElement(null, "ClrFirm", xmlNamespace );
            ClearingFirmValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExecutingBroker is ConfirmationPartyDetails6 ExecutingBrokerValue)
        {
            writer.WriteStartElement(null, "ExctgBrkr", xmlNamespace );
            ExecutingBrokerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AffirmingParty is ConfirmationPartyDetails3 AffirmingPartyValue)
        {
            writer.WriteStartElement(null, "AffrmgPty", xmlNamespace );
            AffirmingPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradeBeneficiaryParty is ConfirmationPartyDetails3 TradeBeneficiaryPartyValue)
        {
            writer.WriteStartElement(null, "TradBnfcryPty", xmlNamespace );
            TradeBeneficiaryPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ConfirmationParties4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
