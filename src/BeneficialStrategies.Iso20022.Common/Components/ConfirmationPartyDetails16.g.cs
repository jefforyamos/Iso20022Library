//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ConfirmationPartyDetails16.  ISO2002 ID# _YfhWrQasEe2phaVG0lYKTw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parties used for acting parties that apply either to the whole message or to individual sides.
/// </summary>
public partial record ConfirmationPartyDetails16
     : IIsoXmlSerilizable<ConfirmationPartyDetails16>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for an organisation that is allocated by an institution, eg, Dun & Bradstreet Identification.
    /// </summary>
    public required PartyIdentification240Choice_ Identification { get; init; } 
    /// <summary>
    /// Account to or from which a securities entry is made.
    /// </summary>
    public SecuritiesAccount35? SafekeepingAccount { get; init; } 
    /// <summary>
    /// Business relationship between two entities; one entity is the account owner, the other entity is the account servicer.
    /// </summary>
    public AccountIdentification55Choice_? CashDetails { get; init; } 
    /// <summary>
    /// Alternate identification for a party.
    /// </summary>
    public AlternatePartyIdentification8? AlternateIdentification { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transaction for the party identified.
    /// </summary>
    public IsoMax35Text? ProcessingIdentification { get; init; } 
    /// <summary>
    /// Provides additional information to a party identification.
    /// </summary>
    public PartyTextInformation5? AdditionalInformation { get; init; } 
    /// <summary>
    /// Capacity of customer placing the order. Primarily used by futures exchanges to indicate the CTI code (customer type indicator) as required by the US CFTC (Commodity Futures Trading Commission).
    /// </summary>
    public TradingPartyCapacity3Choice_? PartyCapacity { get; init; } 
    /// <summary>
    /// Indicates whether the confirmation party is a member of the investor protection association required, eg, as per regulation.
    /// </summary>
    public IsoYesNoIndicator? InvestorProtectionAssociationMembership { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SafekeepingAccount is SecuritiesAccount35 SafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "SfkpgAcct", xmlNamespace );
            SafekeepingAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashDetails is AccountIdentification55Choice_ CashDetailsValue)
        {
            writer.WriteStartElement(null, "CshDtls", xmlNamespace );
            CashDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AlternateIdentification is AlternatePartyIdentification8 AlternateIdentificationValue)
        {
            writer.WriteStartElement(null, "AltrnId", xmlNamespace );
            AlternateIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProcessingIdentification is IsoMax35Text ProcessingIdentificationValue)
        {
            writer.WriteStartElement(null, "PrcgId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ProcessingIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalInformation is PartyTextInformation5 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PartyCapacity is TradingPartyCapacity3Choice_ PartyCapacityValue)
        {
            writer.WriteStartElement(null, "PtyCpcty", xmlNamespace );
            PartyCapacityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InvestorProtectionAssociationMembership is IsoYesNoIndicator InvestorProtectionAssociationMembershipValue)
        {
            writer.WriteStartElement(null, "InvstrPrtcnAssoctnMmbsh", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(InvestorProtectionAssociationMembershipValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static ConfirmationPartyDetails16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
