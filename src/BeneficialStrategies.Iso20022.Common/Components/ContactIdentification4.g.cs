//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContactIdentification4.  ISO2002 ID# _QDdht9p-Ed-ak6NoX_4Aeg_-1442959327.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information needed to contact a physical person.
/// </summary>
public partial record ContactIdentification4
     : IIsoXmlSerilizable<ContactIdentification4>
{
    #nullable enable
    
    /// <summary>
    /// Name by which a party is known and which is usually used to identify that party.
    /// </summary>
    public required IsoMax350Text Name { get; init; } 
    /// <summary>
    /// Specifies the terms used to formally address a person, eg, Ms.
    /// </summary>
    public NamePrefix1Code? NamePrefix { get; init; } 
    /// <summary>
    /// First name of a person.
    /// </summary>
    public IsoMax350Text? GivenName { get; init; } 
    /// <summary>
    /// Role of the party in the activity.
    /// </summary>
    public IsoMax35Text? Role { get; init; } 
    /// <summary>
    /// Collection of information that identifies a phone number, as defined by telecom services.
    /// </summary>
    public IsoPhoneNumber? PhoneNumber { get; init; } 
    /// <summary>
    /// Collection of information that identifies a FAX number, as defined by telecom services.
    /// </summary>
    public IsoPhoneNumber? FaxNumber { get; init; } 
    /// <summary>
    /// Address for electronic mail (e-mail).
    /// </summary>
    public IsoMax256Text? EmailAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Nm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(Name)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (NamePrefix is NamePrefix1Code NamePrefixValue)
        {
            writer.WriteStartElement(null, "NmPrfx", xmlNamespace );
            writer.WriteValue(NamePrefixValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (GivenName is IsoMax350Text GivenNameValue)
        {
            writer.WriteStartElement(null, "GvnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(GivenNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (Role is IsoMax35Text RoleValue)
        {
            writer.WriteStartElement(null, "Role", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(RoleValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PhoneNumber is IsoPhoneNumber PhoneNumberValue)
        {
            writer.WriteStartElement(null, "PhneNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(PhoneNumberValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (FaxNumber is IsoPhoneNumber FaxNumberValue)
        {
            writer.WriteStartElement(null, "FaxNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(FaxNumberValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (EmailAddress is IsoMax256Text EmailAddressValue)
        {
            writer.WriteStartElement(null, "EmailAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(EmailAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
    }
    public static ContactIdentification4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
