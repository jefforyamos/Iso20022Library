//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContactIdentificationAndAddress1.  ISO2002 ID# _jNHLL5lCEee-Zps0fZQaFQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person').
/// </summary>
public partial record ContactIdentificationAndAddress1
     : IIsoXmlSerilizable<ContactIdentificationAndAddress1>
{
    #nullable enable
    
    /// <summary>
    /// Name by which a party is known and which is usually used to identify that party.
    /// </summary>
    public IsoMax35Text? Name { get; init; } 
    /// <summary>
    /// Role of the party in the activity.
    /// </summary>
    public required PaymentRole1Code Role { get; init; } 
    /// <summary>
    /// Number, or virtual address, used for communication.
    /// </summary>
    public required CommunicationAddress8 CommunicationAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax35Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Role", xmlNamespace );
        writer.WriteValue(Role.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ComAdr", xmlNamespace );
        CommunicationAddress.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static ContactIdentificationAndAddress1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
