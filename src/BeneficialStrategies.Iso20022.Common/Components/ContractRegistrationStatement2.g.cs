//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContractRegistrationStatement2.  ISO2002 ID# _TYk8IW49EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Statement of the journal entries for all activities related to the registered currency control contract.
/// </summary>
public partial record ContractRegistrationStatement2
     : IIsoXmlSerilizable<ContractRegistrationStatement2>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification, as assigned by the account servicer, to unambiguously identify the contract registration statement.
    /// </summary>
    public IsoMax35Text? StatementIdentification { get; init; } 
    /// <summary>
    /// Party registering the currency control contract.
    /// </summary>
    public required TradeParty5 ReportingParty { get; init; } 
    /// <summary>
    /// Agent which registers the currency control contract.
    /// </summary>
    public required BranchAndFinancialInstitutionIdentification6 RegistrationAgent { get; init; } 
    /// <summary>
    /// Specifies the period for which the statement is provided.
    /// </summary>
    public required ReportingPeriod4 ReportingPeriod { get; init; } 
    /// <summary>
    /// Registered currency control contract.
    /// </summary>
    public required RegisteredContract8 RegisteredContract { get; init; } 
    /// <summary>
    /// Journal of the transactions recorded under the registered currency control contract.
    /// </summary>
    public TransactionCertificate3? TransactionJournal { get; init; } 
    /// <summary>
    /// Journal of the supporting documents recorded under the registered currency control contract.
    /// </summary>
    public SupportingDocument2? SupportingDocumentJournal { get; init; } 
    /// <summary>
    /// Journal of additional supporting documents recorded under the registered currency control contract.
    /// </summary>
    public SupportingDocument2? AdditionalSupportingDocumentJournal { get; init; } 
    /// <summary>
    /// Details on the currency control rule against which has been violated.
    /// </summary>
    public GenericValidationRuleIdentification1? RegulatoryRuleValidation { get; init; } 
    /// <summary>
    /// Total turn over amount recorded under the currency control contract for the amount of all.
    /// </summary>
    public required IsoActiveCurrencyAndAmount TotalContractTurnoverSum { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (StatementIdentification is IsoMax35Text StatementIdentificationValue)
        {
            writer.WriteStartElement(null, "StmtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(StatementIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RptgPty", xmlNamespace );
        ReportingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RegnAgt", xmlNamespace );
        RegistrationAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptgPrd", xmlNamespace );
        ReportingPeriod.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RegdCtrct", xmlNamespace );
        RegisteredContract.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TransactionJournal is TransactionCertificate3 TransactionJournalValue)
        {
            writer.WriteStartElement(null, "TxJrnl", xmlNamespace );
            TransactionJournalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupportingDocumentJournal is SupportingDocument2 SupportingDocumentJournalValue)
        {
            writer.WriteStartElement(null, "SpprtgDocJrnl", xmlNamespace );
            SupportingDocumentJournalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalSupportingDocumentJournal is SupportingDocument2 AdditionalSupportingDocumentJournalValue)
        {
            writer.WriteStartElement(null, "AddtlSpprtgDocJrnl", xmlNamespace );
            AdditionalSupportingDocumentJournalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RegulatoryRuleValidation is GenericValidationRuleIdentification1 RegulatoryRuleValidationValue)
        {
            writer.WriteStartElement(null, "RgltryRuleVldtn", xmlNamespace );
            RegulatoryRuleValidationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TtlCtrctTrnvrSum", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(TotalContractTurnoverSum)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ContractRegistrationStatement2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
