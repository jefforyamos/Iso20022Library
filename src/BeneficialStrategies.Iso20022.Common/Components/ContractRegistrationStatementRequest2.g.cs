//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContractRegistrationStatementRequest2.  ISO2002 ID# _Nl-rYW49EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details on the statement requested elements.
/// </summary>
public partial record ContractRegistrationStatementRequest2
     : IIsoXmlSerilizable<ContractRegistrationStatementRequest2>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of the contract registration statement request.
    /// </summary>
    public required IsoMax35Text StatementRequestIdentification { get; init; } 
    /// <summary>
    /// Specifies the period for which the statement is requested.
    /// </summary>
    public required ReportingPeriod4 ReportingPeriod { get; init; } 
    /// <summary>
    /// Party registering the currency control contract.
    /// </summary>
    public required TradeParty5 ReportingParty { get; init; } 
    /// <summary>
    /// Agent which registers the currency control contract.
    /// </summary>
    public required BranchAndFinancialInstitutionIdentification6 RegistrationAgent { get; init; } 
    /// <summary>
    /// Identifies the requested registered contract.
    /// </summary>
    public required IsoMax35Text RegisteredContractIdentification { get; init; } 
    /// <summary>
    /// Defines the criteria to be returned in the statement in response to the request.
    /// </summary>
    public ContractRegistrationStatementCriteria1? ReturnCriteria { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "StmtReqId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(StatementRequestIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptgPrd", xmlNamespace );
        ReportingPeriod.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptgPty", xmlNamespace );
        ReportingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RegnAgt", xmlNamespace );
        RegistrationAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RegdCtrctId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(RegisteredContractIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ReturnCriteria is ContractRegistrationStatementCriteria1 ReturnCriteriaValue)
        {
            writer.WriteStartElement(null, "RtrCrit", xmlNamespace );
            ReturnCriteriaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ContractRegistrationStatementRequest2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
