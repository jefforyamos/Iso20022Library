//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContractType10.  ISO2002 ID# _qmrCNXhCEeu3kecHd7QKUQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to contract attributes.
/// </summary>
public partial record ContractType10
     : IIsoXmlSerilizable<ContractType10>
{
    #nullable enable
    
    /// <summary>
    /// Classification of information according to contract type.
    /// </summary>
    public FinancialInstrumentContractType2Code? ContractType { get; init; } 
    /// <summary>
    /// Specifies the classification according to the asset class of the contract.
    /// </summary>
    public ProductType4Code? AssetClass { get; init; } 
    /// <summary>
    /// Specifies the classification of the derivative product.
    /// </summary>
    public IsoCFIOct2015Identifier? ProductClassification { get; init; } 
    /// <summary>
    /// Specifies the identification of the derivative product.
    /// </summary>
    public SecurityIdentification22? ProductIdentification { get; init; } 
    /// <summary>
    /// Unique identification to identify the direct underlying instrument based on its type.
    /// </summary>
    public SecurityIdentification36Choice_? UnderlyingInstrument { get; init; } 
    /// <summary>
    /// Currency of the notional amount. 
    /// Usage: In the case of an interest rate or currency derivative contract, this will be the notional currency of first leg.
    /// </summary>
    public LegCurrency2? NotionalCurrency { get; init; } 
    /// <summary>
    /// Specifies the currency to be used for cash settlement of the transaction. For multicurrency transactions that do not net, specify the currency to be delivered for each leg.
    /// </summary>
    public LegCurrency2? SettlementCurrency { get; init; } 
    /// <summary>
    /// Specifies the place where settlement of the transaction occurs as stipulated in the contract.
    /// </summary>
    public CountryCode? PlaceOfSettlement { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ContractType is FinancialInstrumentContractType2Code ContractTypeValue)
        {
            writer.WriteStartElement(null, "CtrctTp", xmlNamespace );
            writer.WriteValue(ContractTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AssetClass is ProductType4Code AssetClassValue)
        {
            writer.WriteStartElement(null, "AsstClss", xmlNamespace );
            writer.WriteValue(AssetClassValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ProductClassification is IsoCFIOct2015Identifier ProductClassificationValue)
        {
            writer.WriteStartElement(null, "PdctClssfctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCFIOct2015Identifier(ProductClassificationValue)); // data type CFIOct2015Identifier System.String
            writer.WriteEndElement();
        }
        if (ProductIdentification is SecurityIdentification22 ProductIdentificationValue)
        {
            writer.WriteStartElement(null, "PdctId", xmlNamespace );
            ProductIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnderlyingInstrument is SecurityIdentification36Choice_ UnderlyingInstrumentValue)
        {
            writer.WriteStartElement(null, "UndrlygInstrm", xmlNamespace );
            UnderlyingInstrumentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NotionalCurrency is LegCurrency2 NotionalCurrencyValue)
        {
            writer.WriteStartElement(null, "NtnlCcy", xmlNamespace );
            NotionalCurrencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementCurrency is LegCurrency2 SettlementCurrencyValue)
        {
            writer.WriteStartElement(null, "SttlmCcy", xmlNamespace );
            SettlementCurrencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PlaceOfSettlement is CountryCode PlaceOfSettlementValue)
        {
            writer.WriteStartElement(null, "PlcOfSttlm", xmlNamespace );
            writer.WriteValue(PlaceOfSettlementValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static ContractType10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
