//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ContractValuationData6.  ISO2002 ID# _KdqEsVfnEeqfKIw9ojIoIw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to contract valuation.
/// </summary>
public partial record ContractValuationData6
     : IIsoXmlSerilizable<ContractValuationData6>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the current value of the outstanding contract.
    /// </summary>
    public AmountAndDirection106? ContractValue { get; init; } 
    /// <summary>
    /// Indicates the date and time of the last valuation marked to market provided by the central counterparty (CCP) or calculated using the current or last available market price of the inputs.
    /// </summary>
    public IsoISODateTime? TimeStamp { get; init; } 
    /// <summary>
    /// Indicates the source and method used for the valuation of the transaction by the reporting counterparty.
    /// Usage:
    /// If at least one valuation input is used that is classified as mark-to-model, the whole valuation is classified as mark-to-model.
    /// If only inputs are used that are classified as mark-to-market; the whole valuation is classified as mark-to-market.|
    /// </summary>
    public ValuationType1Code? Type { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ContractValue is AmountAndDirection106 ContractValueValue)
        {
            writer.WriteStartElement(null, "CtrctVal", xmlNamespace );
            ContractValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TimeStamp is IsoISODateTime TimeStampValue)
        {
            writer.WriteStartElement(null, "TmStmp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(TimeStampValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (Type is ValuationType1Code TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            writer.WriteValue(TypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static ContractValuationData6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
