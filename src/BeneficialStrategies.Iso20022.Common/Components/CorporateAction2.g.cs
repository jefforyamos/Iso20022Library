//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateAction2.  ISO2002 ID# _TdKoc9p-Ed-ak6NoX_4Aeg_281523718.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the CA event.
/// </summary>
public partial record CorporateAction2
     : IIsoXmlSerilizable<CorporateAction2>
{
    #nullable enable
    
    /// <summary>
    /// Stage in the corporate action event life cycle.
    /// </summary>
    public CorporateActionEventStage1FormatChoice_? EventStage { get; init; } 
    /// <summary>
    /// Identifies the option that will be selected by default if no instruction is provided by account owner.
    /// </summary>
    public CorporateActionOption1FormatChoice_? DefaultOptionType { get; init; } 
    /// <summary>
    /// Identifies the option number that will be selected by default if no instruction is provided by account owner.
    /// </summary>
    public IsoExact3NumericText? DefaultOptionNumber { get; init; } 
    /// <summary>
    /// The method of calculation of drawings and partial redemptions.
    /// </summary>
    public CorporateActionCalculationMethod1FormatChoice_? CalculationMethod { get; init; } 
    /// <summary>
    /// Represents the presence of a back end odd lot provision and the quantity of equity required after proration to be eligible for this privilege.
    /// </summary>
    public UnitOrFaceAmountOrCode1Choice_? BackEndOddLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Specifies that if an order is prorated holders of odd lots who tender their full position will not have tendered position prorated but rather accepted in full.
    /// </summary>
    public UnitOrFaceAmountOrCode1Choice_? FrontEndOddLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Minimum quantity of financial instrument or lot of rights/warrants that must be exercised.
    /// </summary>
    public UnitOrFaceAmount1Choice_? MinimumExercisableSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Minimum multiple quantity of financial instrument or lot of rights/warrants that must be exercised.
    /// </summary>
    public UnitOrFaceAmount1Choice_? MinimumExercisableMultipleSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Amount used when the called amount is not met by running the lottery with the base denomination.
    /// </summary>
    public UnitOrFaceAmount1Choice_? IncrementalDenomination { get; init; } 
    /// <summary>
    /// New Denomination of the equity following, eg, an increase or decrease in nominal value.
    /// </summary>
    public UnitOrFaceAmount1Choice_? NewDenominationSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Quantity of equity that makes up the new board lot.
    /// </summary>
    public UnitOrFaceAmount1Choice_? NewBoardLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Quantity of securities the offeror/issuer will purchase or redeem under the terms of the event. This can be a number or the term "any and all".
    /// </summary>
    public UnitOrFaceAmountOrCode1Choice_? SecuritiesQuantitySought { get; init; } 
    /// <summary>
    /// The minimum integral amount of securities that each account owner must have remaining after the called amounts are applied.
    /// </summary>
    public UnitOrFaceAmount1Choice_? BaseDenomination { get; init; } 
    /// <summary>
    /// Specifies the type of change announced.
    /// </summary>
    public CorporateActionChangeType1FormatChoice_? ChangeType { get; init; } 
    /// <summary>
    /// Specifies the conditions that apply to the offer.
    /// </summary>
    public OfferType1FormatChoice_? OfferType { get; init; } 
    /// <summary>
    /// Indicates whether there is restrictions apply to the CA event or not.||Yes = There is restrictions.|No = There is no restrictions.
    /// </summary>
    public IsoYesNoIndicator? RestrictionIndicator { get; init; } 
    /// <summary>
    /// Specifies if the issuer will allow the agent to accept partial elections. It is to allow split voting over options. It allows the client to elect more than one option to be selected per designated holding.
    /// </summary>
    public IsoYesNoIndicator? PartialElectionIndicator { get; init; } 
    /// <summary>
    /// Specifies the effect on the holdings of electing a Corporate Action option.
    /// </summary>
    public ElectionMovementType1FormatChoice_? ElectionType { get; init; } 
    /// <summary>
    /// Specifies the type of lottery announced.
    /// </summary>
    public LotteryType1FormatChoice_? LotteryType { get; init; } 
    /// <summary>
    /// Specifies the type of income.|The lists of income type codes to be used, are available on the SMPG website at www.smpg.info.
    /// </summary>
    public GenericIdentification13? IncomeType { get; init; } 
    /// <summary>
    /// Specifies the conditions in which a dividend is paid.
    /// </summary>
    public CorporateActionFrequencyType1FormatChoice_? DividendType { get; init; } 
    /// <summary>
    /// Type of intermediates securities distribution, eg, stock dividend, reverse right.
    /// </summary>
    public IntermediateSecurityDistributionType1FormatChoice_? IntermediateSecuritiesDistributionType { get; init; } 
    /// <summary>
    /// Number of the coupon attached/associated with a security.
    /// </summary>
    public IsoMax3NumericText? CouponNumber { get; init; } 
    /// <summary>
    /// Number of days used for calculating the accrued interest amount.
    /// </summary>
    public IsoNumber? InterestAccruedNumberOfDays { get; init; } 
    /// <summary>
    /// New denomination currency of the inancial instrument.
    /// </summary>
    public ActiveCurrencyCode? NewDenominationCurrency { get; init; } 
    /// <summary>
    /// Provides information about the dates related to a CA event.
    /// </summary>
    public CorporateActionDate2? DateDetails { get; init; } 
    /// <summary>
    /// Provides information about the prices related to a CA event.
    /// </summary>
    public CorporateActionPrice2? PriceDetails { get; init; } 
    /// <summary>
    /// Provides information about the periods related to a CA event.
    /// </summary>
    public CorporateActionPeriod1? PeriodDetails { get; init; } 
    /// <summary>
    /// Provides information about rates and amounts related to a CA event.
    /// </summary>
    public CorporateActionRate1? RateAndAmountDetails { get; init; } 
    /// <summary>
    /// Provides additional information.
    /// </summary>
    public CorporateActionNarrative1? CorporateActionAdditionalInformation { get; init; } 
    /// <summary>
    /// Indicates whether certification is required from the account owner.
    /// </summary>
    public IsoYesNoIndicator? CertificationRequiredIndicator { get; init; } 
    /// <summary>
    /// Type of certification which is required.
    /// </summary>
    public BeneficiaryCertificationType1FormatChoice_? CertificationType { get; init; } 
    /// <summary>
    /// Specifies whether the capital gain is in the scope of the EU Savings directive for the income realised upon the sale, refund or redemption of shares and units (.) (Article 6(1d)).
    /// </summary>
    public EUCapitalGain2Code? CapitalGain { get; init; } 
    /// <summary>
    /// Specifies whether the financial instrument calculates the taxable income per dividend/taxable income per share.
    /// </summary>
    public TaxableIncomePerShareCalculated2Code? TaxableIncomePerShareCalculated { get; init; } 
    /// <summary>
    /// New companys place of incorporation.
    /// </summary>
    public IsoMax70Text? NewPlaceOfIncorporation { get; init; } 
    /// <summary>
    /// Specifies whether terms of the event allow resale of the rights.
    /// </summary>
    public RenounceableStatus1FormatChoice_? RenounceableEntitlementStatusType { get; init; } 
    /// <summary>
    /// Specifies the conversion type of an instrument.
    /// </summary>
    public ConversionType1FormatChoice_? ConversionType { get; init; } 
    /// <summary>
    /// Indicates whether redemption charges apply.
    /// </summary>
    public IsoYesNoIndicator? RedemptionChargesAppliedIndicator { get; init; } 
    /// <summary>
    /// Specifies whether the proceeds of the event will be distributed on a rolling basis rather than on a specific date.
    /// </summary>
    public DistributionType1FormatChoice_? DistributionType { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (EventStage is CorporateActionEventStage1FormatChoice_ EventStageValue)
        {
            writer.WriteStartElement(null, "EvtStag", xmlNamespace );
            EventStageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DefaultOptionType is CorporateActionOption1FormatChoice_ DefaultOptionTypeValue)
        {
            writer.WriteStartElement(null, "DfltOptnTp", xmlNamespace );
            DefaultOptionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DefaultOptionNumber is IsoExact3NumericText DefaultOptionNumberValue)
        {
            writer.WriteStartElement(null, "DfltOptnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact3NumericText(DefaultOptionNumberValue)); // data type Exact3NumericText System.String
            writer.WriteEndElement();
        }
        if (CalculationMethod is CorporateActionCalculationMethod1FormatChoice_ CalculationMethodValue)
        {
            writer.WriteStartElement(null, "ClctnMtd", xmlNamespace );
            CalculationMethodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BackEndOddLotSecuritiesQuantity is UnitOrFaceAmountOrCode1Choice_ BackEndOddLotSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "BckEndOddLotSctiesQty", xmlNamespace );
            BackEndOddLotSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FrontEndOddLotSecuritiesQuantity is UnitOrFaceAmountOrCode1Choice_ FrontEndOddLotSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "FrntEndOddLotSctiesQty", xmlNamespace );
            FrontEndOddLotSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumExercisableSecuritiesQuantity is UnitOrFaceAmount1Choice_ MinimumExercisableSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "MinExrcblSctiesQty", xmlNamespace );
            MinimumExercisableSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumExercisableMultipleSecuritiesQuantity is UnitOrFaceAmount1Choice_ MinimumExercisableMultipleSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "MinExrcblMltplSctiesQty", xmlNamespace );
            MinimumExercisableMultipleSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IncrementalDenomination is UnitOrFaceAmount1Choice_ IncrementalDenominationValue)
        {
            writer.WriteStartElement(null, "IncrmtlDnmtn", xmlNamespace );
            IncrementalDenominationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewDenominationSecuritiesQuantity is UnitOrFaceAmount1Choice_ NewDenominationSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "NewDnmtnSctiesQty", xmlNamespace );
            NewDenominationSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewBoardLotSecuritiesQuantity is UnitOrFaceAmount1Choice_ NewBoardLotSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "NewBrdLotSctiesQty", xmlNamespace );
            NewBoardLotSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecuritiesQuantitySought is UnitOrFaceAmountOrCode1Choice_ SecuritiesQuantitySoughtValue)
        {
            writer.WriteStartElement(null, "SctiesQtySght", xmlNamespace );
            SecuritiesQuantitySoughtValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BaseDenomination is UnitOrFaceAmount1Choice_ BaseDenominationValue)
        {
            writer.WriteStartElement(null, "BaseDnmtn", xmlNamespace );
            BaseDenominationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChangeType is CorporateActionChangeType1FormatChoice_ ChangeTypeValue)
        {
            writer.WriteStartElement(null, "ChngTp", xmlNamespace );
            ChangeTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OfferType is OfferType1FormatChoice_ OfferTypeValue)
        {
            writer.WriteStartElement(null, "OfferTp", xmlNamespace );
            OfferTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RestrictionIndicator is IsoYesNoIndicator RestrictionIndicatorValue)
        {
            writer.WriteStartElement(null, "RstrctnInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(RestrictionIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (PartialElectionIndicator is IsoYesNoIndicator PartialElectionIndicatorValue)
        {
            writer.WriteStartElement(null, "PrtlElctnInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PartialElectionIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ElectionType is ElectionMovementType1FormatChoice_ ElectionTypeValue)
        {
            writer.WriteStartElement(null, "ElctnTp", xmlNamespace );
            ElectionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LotteryType is LotteryType1FormatChoice_ LotteryTypeValue)
        {
            writer.WriteStartElement(null, "LtryTp", xmlNamespace );
            LotteryTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IncomeType is GenericIdentification13 IncomeTypeValue)
        {
            writer.WriteStartElement(null, "IncmTp", xmlNamespace );
            IncomeTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DividendType is CorporateActionFrequencyType1FormatChoice_ DividendTypeValue)
        {
            writer.WriteStartElement(null, "DvddTp", xmlNamespace );
            DividendTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IntermediateSecuritiesDistributionType is IntermediateSecurityDistributionType1FormatChoice_ IntermediateSecuritiesDistributionTypeValue)
        {
            writer.WriteStartElement(null, "IntrmdtSctiesDstrbtnTp", xmlNamespace );
            IntermediateSecuritiesDistributionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CouponNumber is IsoMax3NumericText CouponNumberValue)
        {
            writer.WriteStartElement(null, "CpnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3NumericText(CouponNumberValue)); // data type Max3NumericText System.String
            writer.WriteEndElement();
        }
        if (InterestAccruedNumberOfDays is IsoNumber InterestAccruedNumberOfDaysValue)
        {
            writer.WriteStartElement(null, "IntrstAcrdNbOfDays", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(InterestAccruedNumberOfDaysValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (NewDenominationCurrency is ActiveCurrencyCode NewDenominationCurrencyValue)
        {
            writer.WriteStartElement(null, "NewDnmtnCcy", xmlNamespace );
            writer.WriteValue(NewDenominationCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DateDetails is CorporateActionDate2 DateDetailsValue)
        {
            writer.WriteStartElement(null, "DtDtls", xmlNamespace );
            DateDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceDetails is CorporateActionPrice2 PriceDetailsValue)
        {
            writer.WriteStartElement(null, "PricDtls", xmlNamespace );
            PriceDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PeriodDetails is CorporateActionPeriod1 PeriodDetailsValue)
        {
            writer.WriteStartElement(null, "PrdDtls", xmlNamespace );
            PeriodDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RateAndAmountDetails is CorporateActionRate1 RateAndAmountDetailsValue)
        {
            writer.WriteStartElement(null, "RateAndAmtDtls", xmlNamespace );
            RateAndAmountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CorporateActionAdditionalInformation is CorporateActionNarrative1 CorporateActionAdditionalInformationValue)
        {
            writer.WriteStartElement(null, "CorpActnAddtlInf", xmlNamespace );
            CorporateActionAdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificationRequiredIndicator is IsoYesNoIndicator CertificationRequiredIndicatorValue)
        {
            writer.WriteStartElement(null, "CertfctnReqrdInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CertificationRequiredIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CertificationType is BeneficiaryCertificationType1FormatChoice_ CertificationTypeValue)
        {
            writer.WriteStartElement(null, "CertfctnTp", xmlNamespace );
            CertificationTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CapitalGain is EUCapitalGain2Code CapitalGainValue)
        {
            writer.WriteStartElement(null, "CptlGn", xmlNamespace );
            writer.WriteValue(CapitalGainValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TaxableIncomePerShareCalculated is TaxableIncomePerShareCalculated2Code TaxableIncomePerShareCalculatedValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerShrClctd", xmlNamespace );
            writer.WriteValue(TaxableIncomePerShareCalculatedValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NewPlaceOfIncorporation is IsoMax70Text NewPlaceOfIncorporationValue)
        {
            writer.WriteStartElement(null, "NewPlcOfIncorprtn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(NewPlaceOfIncorporationValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (RenounceableEntitlementStatusType is RenounceableStatus1FormatChoice_ RenounceableEntitlementStatusTypeValue)
        {
            writer.WriteStartElement(null, "RnncblEntitlmntStsTp", xmlNamespace );
            RenounceableEntitlementStatusTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConversionType is ConversionType1FormatChoice_ ConversionTypeValue)
        {
            writer.WriteStartElement(null, "ConvsTp", xmlNamespace );
            ConversionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RedemptionChargesAppliedIndicator is IsoYesNoIndicator RedemptionChargesAppliedIndicatorValue)
        {
            writer.WriteStartElement(null, "RedChrgsApldInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(RedemptionChargesAppliedIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (DistributionType is DistributionType1FormatChoice_ DistributionTypeValue)
        {
            writer.WriteStartElement(null, "DstrbtnTp", xmlNamespace );
            DistributionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateAction2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
