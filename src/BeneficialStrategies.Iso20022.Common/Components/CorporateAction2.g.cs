//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateAction2.  ISO2002 ID# _TdKoc9p-Ed-ak6NoX_4Aeg_281523718.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the CA event.
/// </summary>
public partial record CorporateAction2
{
    #nullable enable
    
    /// <summary>
    /// Stage in the corporate action event life cycle.
    /// </summary>
    public ICorporateActionEventStage1FormatChoice? EventStage { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the option that will be selected by default if no instruction is provided by account owner.
    /// </summary>
    public ICorporateActionOption1FormatChoice? DefaultOptionType { get; init; } 
    /// <summary>
    /// Identifies the option number that will be selected by default if no instruction is provided by account owner.
    /// </summary>
    public IsoExact3NumericText? DefaultOptionNumber { get; init; } 
    /// <summary>
    /// The method of calculation of drawings and partial redemptions.
    /// </summary>
    public ICorporateActionCalculationMethod1FormatChoice? CalculationMethod { get; init; } 
    /// <summary>
    /// Represents the presence of a back end odd lot provision and the quantity of equity required after proration to be eligible for this privilege.
    /// </summary>
    public IUnitOrFaceAmountOrCode1Choice? BackEndOddLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Specifies that if an order is prorated holders of odd lots who tender their full position will not have tendered position prorated but rather accepted in full.
    /// </summary>
    public IUnitOrFaceAmountOrCode1Choice? FrontEndOddLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Minimum quantity of financial instrument or lot of rights/warrants that must be exercised.
    /// </summary>
    public IUnitOrFaceAmount1Choice? MinimumExercisableSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Minimum multiple quantity of financial instrument or lot of rights/warrants that must be exercised.
    /// </summary>
    public IUnitOrFaceAmount1Choice? MinimumExercisableMultipleSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Amount used when the called amount is not met by running the lottery with the base denomination.
    /// </summary>
    public IUnitOrFaceAmount1Choice? IncrementalDenomination { get; init; } 
    /// <summary>
    /// New Denomination of the equity following, eg, an increase or decrease in nominal value.
    /// </summary>
    public IUnitOrFaceAmount1Choice? NewDenominationSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Quantity of equity that makes up the new board lot.
    /// </summary>
    public IUnitOrFaceAmount1Choice? NewBoardLotSecuritiesQuantity { get; init; } 
    /// <summary>
    /// Quantity of securities the offeror/issuer will purchase or redeem under the terms of the event. This can be a number or the term "any and all".
    /// </summary>
    public IUnitOrFaceAmountOrCode1Choice? SecuritiesQuantitySought { get; init; } 
    /// <summary>
    /// The minimum integral amount of securities that each account owner must have remaining after the called amounts are applied.
    /// </summary>
    public IUnitOrFaceAmount1Choice? BaseDenomination { get; init; } 
    /// <summary>
    /// Specifies the type of change announced.
    /// </summary>
    public ICorporateActionChangeType1FormatChoice? ChangeType { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies the conditions that apply to the offer.
    /// </summary>
    public IOfferType1FormatChoice? OfferType { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Indicates whether there is restrictions apply to the CA event or not.||Yes = There is restrictions.|No = There is no restrictions.
    /// </summary>
    public IsoYesNoIndicator? RestrictionIndicator { get; init; } 
    /// <summary>
    /// Specifies if the issuer will allow the agent to accept partial elections. It is to allow split voting over options. It allows the client to elect more than one option to be selected per designated holding.
    /// </summary>
    public IsoYesNoIndicator? PartialElectionIndicator { get; init; } 
    /// <summary>
    /// Specifies the effect on the holdings of electing a Corporate Action option.
    /// </summary>
    public IElectionMovementType1FormatChoice? ElectionType { get; init; } 
    /// <summary>
    /// Specifies the type of lottery announced.
    /// </summary>
    public ILotteryType1FormatChoice? LotteryType { get; init; } 
    /// <summary>
    /// Specifies the type of income.|The lists of income type codes to be used, are available on the SMPG website at www.smpg.info.
    /// </summary>
    public GenericIdentification13? IncomeType { get; init; } 
    /// <summary>
    /// Specifies the conditions in which a dividend is paid.
    /// </summary>
    public ICorporateActionFrequencyType1FormatChoice? DividendType { get; init; } 
    /// <summary>
    /// Type of intermediates securities distribution, eg, stock dividend, reverse right.
    /// </summary>
    public IIntermediateSecurityDistributionType1FormatChoice? IntermediateSecuritiesDistributionType { get; init; } 
    /// <summary>
    /// Number of the coupon attached/associated with a security.
    /// </summary>
    public IsoMax3NumericText? CouponNumber { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Number of days used for calculating the accrued interest amount.
    /// </summary>
    public IsoNumber? InterestAccruedNumberOfDays { get; init; } 
    /// <summary>
    /// New denomination currency of the inancial instrument.
    /// </summary>
    public ActiveCurrencyCode? NewDenominationCurrency { get; init; } 
    /// <summary>
    /// Provides information about the dates related to a CA event.
    /// </summary>
    public CorporateActionDate2? DateDetails { get; init; } 
    /// <summary>
    /// Provides information about the prices related to a CA event.
    /// </summary>
    public CorporateActionPrice2? PriceDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Provides information about the periods related to a CA event.
    /// </summary>
    public CorporateActionPeriod1? PeriodDetails { get; init; } 
    /// <summary>
    /// Provides information about rates and amounts related to a CA event.
    /// </summary>
    public CorporateActionRate1? RateAndAmountDetails { get; init; } 
    /// <summary>
    /// Provides additional information.
    /// </summary>
    public CorporateActionNarrative1? CorporateActionAdditionalInformation { get; init; } 
    /// <summary>
    /// Indicates whether certification is required from the account owner.
    /// </summary>
    public IsoYesNoIndicator? CertificationRequiredIndicator { get; init; } 
    /// <summary>
    /// Type of certification which is required.
    /// </summary>
    public IBeneficiaryCertificationType1FormatChoice? CertificationType { get; init; } 
    /// <summary>
    /// Specifies whether the capital gain is in the scope of the EU Savings directive for the income realised upon the sale, refund or redemption of shares and units (.) (Article 6(1d)).
    /// </summary>
    public EUCapitalGain2Code? CapitalGain { get; init; } 
    /// <summary>
    /// Specifies whether the financial instrument calculates the taxable income per dividend/taxable income per share.
    /// </summary>
    public TaxableIncomePerShareCalculated2Code? TaxableIncomePerShareCalculated { get; init; } 
    /// <summary>
    /// New companys place of incorporation.
    /// </summary>
    public IsoMax70Text? NewPlaceOfIncorporation { get; init; } 
    /// <summary>
    /// Specifies whether terms of the event allow resale of the rights.
    /// </summary>
    public IRenounceableStatus1FormatChoice? RenounceableEntitlementStatusType { get; init; } 
    /// <summary>
    /// Specifies the conversion type of an instrument.
    /// </summary>
    public IConversionType1FormatChoice? ConversionType { get; init; } 
    /// <summary>
    /// Indicates whether redemption charges apply.
    /// </summary>
    public IsoYesNoIndicator? RedemptionChargesAppliedIndicator { get; init; } 
    /// <summary>
    /// Specifies whether the proceeds of the event will be distributed on a rolling basis rather than on a specific date.
    /// </summary>
    public IDistributionType1FormatChoice? DistributionType { get; init; } 
    
    #nullable disable
}
