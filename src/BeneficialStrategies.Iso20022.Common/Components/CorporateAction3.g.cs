//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateAction3.  ISO2002 ID# _TaVW6dp-Ed-ak6NoX_4Aeg_-812699506.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the corporate action event.
/// </summary>
public partial record CorporateAction3
     : IIsoXmlSerilizable<CorporateAction3>
{
    #nullable enable
    
    /// <summary>
    /// Provides information about the dates related to a corporate action event.
    /// </summary>
    public CorporateActionDate1? DateDetails { get; init; } 
    /// <summary>
    /// Provides information about the periods related to a corporate action event.
    /// </summary>
    public CorporateActionPeriod3? PeriodDetails { get; init; } 
    /// <summary>
    /// Provides information about rates and amounts related to a corporate action event.
    /// </summary>
    public CorporateActionRate3? RateAndAmountDetails { get; init; } 
    /// <summary>
    /// Provides information about the prices related to a corporate action event.
    /// </summary>
    public CorporateActionPrice3? PriceDetails { get; init; } 
    /// <summary>
    /// Provides information about securities quantity linked to a corporate action.
    /// </summary>
    public CorporateActionQuantity1? SecuritiesQuantity { get; init; } 
    /// <summary>
    /// Number of days used for calculating the accrued interest amount.
    /// </summary>
    public IsoMax3Number? InterestAccruedNumberOfDays { get; init; } 
    /// <summary>
    /// Number of the coupon attached/associated with a security.
    /// </summary>
    public IdentificationFormat1Choice_? CouponNumber { get; init; } 
    /// <summary>
    /// Indicates whether certification is required from the account owner. |Yes = certification required.|No = no certification required.
    /// </summary>
    public IsoYesNoIndicator? CertificationRequiredIndicator { get; init; } 
    /// <summary>
    /// Indicates whether charges apply to the holder, for instance redemption charges.
    /// </summary>
    public IsoYesNoIndicator? ChargesAppliedIndicator { get; init; } 
    /// <summary>
    /// Indicates whether there is restrictions apply to the corporate action event or not.|Yes = There is restrictions.|No = There is no restrictions.
    /// </summary>
    public IsoYesNoIndicator? RestrictionIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the holder is entitled to accrued interest.
    /// </summary>
    public IsoYesNoIndicator? AccruedInterestIndicator { get; init; } 
    /// <summary>
    /// Specifies the conditions in which a dividend is paid.
    /// </summary>
    public DividendTypeFormat1Choice_? DividendType { get; init; } 
    /// <summary>
    /// Specifies the conversion type of an instrument.
    /// </summary>
    public ConversionTypeFormat1Choice_? ConversionType { get; init; } 
    /// <summary>
    /// Specifies whether the proceeds of the event will be distributed on a rolling basis rather than on a specific date.
    /// </summary>
    public DistributionTypeFormat1Choice_? DistributionType { get; init; } 
    /// <summary>
    /// Specifies the conditions that apply to the offer.
    /// </summary>
    public OfferTypeFormat1Choice_? OfferType { get; init; } 
    /// <summary>
    /// Specifies whether terms of the event allow resale of the rights.
    /// </summary>
    public RenounceableEntitlementStatusTypeFormat1Choice_? RenounceableEntitlementStatusType { get; init; } 
    /// <summary>
    /// Stage in the corporate action event life cycle.
    /// </summary>
    public CorporateActionEventStageFormat1Choice_? EventStage { get; init; } 
    /// <summary>
    /// Specifies the type of the additional business process linked to a corporate action event such as a claim compensation or tax refund.
    /// </summary>
    public AdditionalBusinessProcessFormat1Choice_? AdditionalBusinessProcessIndicator { get; init; } 
    /// <summary>
    /// Specifies the type of change announced.
    /// </summary>
    public CorporateActionChangeTypeFormat1Choice_? ChangeType { get; init; } 
    /// <summary>
    /// Type of intermediates securities distribution.
    /// </summary>
    public IntermediateSecuritiesDistributionTypeFormat1Choice_? IntermediateSecuritiesDistributionType { get; init; } 
    /// <summary>
    /// Specifies whether the capital gain is in the scope of the EU Savings directive for the income realised upon the sale, refund or redemption of shares and units (.) (Article 6(1d)).
    /// </summary>
    public CapitalGainFormat1Choice_? CapitalGainInOutIndicator { get; init; } 
    /// <summary>
    /// Specifies whether the financial instrument calculates the taxable income per dividend/taxable income per share.
    /// </summary>
    public TaxableIncomePerShareCalculatedFormat1Choice_? TaxableIncomePerShareCalculated { get; init; } 
    /// <summary>
    /// Specifies the effect on the holdings of electing a corporate action option.
    /// </summary>
    public ElectionTypeFormat1Choice_? ElectionType { get; init; } 
    /// <summary>
    /// Specifies the type of lottery announced.
    /// </summary>
    public LotteryTypeFormat1Choice_? LotteryType { get; init; } 
    /// <summary>
    /// Specifies the certification format required, ie, physical or electronic format.
    /// </summary>
    public CertificationTypeFormat1Choice_? CertificationType { get; init; } 
    /// <summary>
    /// New company's place of incorporation.
    /// </summary>
    public IsoMax70Text? NewPlaceOfIncorporation { get; init; } 
    /// <summary>
    /// Provides additional information. This field may only be used when the information to be transmitted, cannot be coded.
    /// </summary>
    public CorporateActionNarrative3? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (DateDetails is CorporateActionDate1 DateDetailsValue)
        {
            writer.WriteStartElement(null, "DtDtls", xmlNamespace );
            DateDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PeriodDetails is CorporateActionPeriod3 PeriodDetailsValue)
        {
            writer.WriteStartElement(null, "PrdDtls", xmlNamespace );
            PeriodDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RateAndAmountDetails is CorporateActionRate3 RateAndAmountDetailsValue)
        {
            writer.WriteStartElement(null, "RateAndAmtDtls", xmlNamespace );
            RateAndAmountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceDetails is CorporateActionPrice3 PriceDetailsValue)
        {
            writer.WriteStartElement(null, "PricDtls", xmlNamespace );
            PriceDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecuritiesQuantity is CorporateActionQuantity1 SecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "SctiesQty", xmlNamespace );
            SecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InterestAccruedNumberOfDays is IsoMax3Number InterestAccruedNumberOfDaysValue)
        {
            writer.WriteStartElement(null, "IntrstAcrdNbOfDays", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3Number(InterestAccruedNumberOfDaysValue)); // data type Max3Number System.UInt64
            writer.WriteEndElement();
        }
        if (CouponNumber is IdentificationFormat1Choice_ CouponNumberValue)
        {
            writer.WriteStartElement(null, "CpnNb", xmlNamespace );
            CouponNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificationRequiredIndicator is IsoYesNoIndicator CertificationRequiredIndicatorValue)
        {
            writer.WriteStartElement(null, "CertfctnReqrdInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CertificationRequiredIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ChargesAppliedIndicator is IsoYesNoIndicator ChargesAppliedIndicatorValue)
        {
            writer.WriteStartElement(null, "ChrgsApldInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ChargesAppliedIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (RestrictionIndicator is IsoYesNoIndicator RestrictionIndicatorValue)
        {
            writer.WriteStartElement(null, "RstrctnInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(RestrictionIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (AccruedInterestIndicator is IsoYesNoIndicator AccruedInterestIndicatorValue)
        {
            writer.WriteStartElement(null, "AcrdIntrstInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(AccruedInterestIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (DividendType is DividendTypeFormat1Choice_ DividendTypeValue)
        {
            writer.WriteStartElement(null, "DvddTp", xmlNamespace );
            DividendTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConversionType is ConversionTypeFormat1Choice_ ConversionTypeValue)
        {
            writer.WriteStartElement(null, "ConvsTp", xmlNamespace );
            ConversionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DistributionType is DistributionTypeFormat1Choice_ DistributionTypeValue)
        {
            writer.WriteStartElement(null, "DstrbtnTp", xmlNamespace );
            DistributionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OfferType is OfferTypeFormat1Choice_ OfferTypeValue)
        {
            writer.WriteStartElement(null, "OfferTp", xmlNamespace );
            OfferTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RenounceableEntitlementStatusType is RenounceableEntitlementStatusTypeFormat1Choice_ RenounceableEntitlementStatusTypeValue)
        {
            writer.WriteStartElement(null, "RnncblEntitlmntStsTp", xmlNamespace );
            RenounceableEntitlementStatusTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EventStage is CorporateActionEventStageFormat1Choice_ EventStageValue)
        {
            writer.WriteStartElement(null, "EvtStag", xmlNamespace );
            EventStageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalBusinessProcessIndicator is AdditionalBusinessProcessFormat1Choice_ AdditionalBusinessProcessIndicatorValue)
        {
            writer.WriteStartElement(null, "AddtlBizPrcInd", xmlNamespace );
            AdditionalBusinessProcessIndicatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChangeType is CorporateActionChangeTypeFormat1Choice_ ChangeTypeValue)
        {
            writer.WriteStartElement(null, "ChngTp", xmlNamespace );
            ChangeTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IntermediateSecuritiesDistributionType is IntermediateSecuritiesDistributionTypeFormat1Choice_ IntermediateSecuritiesDistributionTypeValue)
        {
            writer.WriteStartElement(null, "IntrmdtSctiesDstrbtnTp", xmlNamespace );
            IntermediateSecuritiesDistributionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CapitalGainInOutIndicator is CapitalGainFormat1Choice_ CapitalGainInOutIndicatorValue)
        {
            writer.WriteStartElement(null, "CptlGnInOutInd", xmlNamespace );
            CapitalGainInOutIndicatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxableIncomePerShareCalculated is TaxableIncomePerShareCalculatedFormat1Choice_ TaxableIncomePerShareCalculatedValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerShrClctd", xmlNamespace );
            TaxableIncomePerShareCalculatedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ElectionType is ElectionTypeFormat1Choice_ ElectionTypeValue)
        {
            writer.WriteStartElement(null, "ElctnTp", xmlNamespace );
            ElectionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LotteryType is LotteryTypeFormat1Choice_ LotteryTypeValue)
        {
            writer.WriteStartElement(null, "LtryTp", xmlNamespace );
            LotteryTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificationType is CertificationTypeFormat1Choice_ CertificationTypeValue)
        {
            writer.WriteStartElement(null, "CertfctnTp", xmlNamespace );
            CertificationTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewPlaceOfIncorporation is IsoMax70Text NewPlaceOfIncorporationValue)
        {
            writer.WriteStartElement(null, "NewPlcOfIncorprtn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(NewPlaceOfIncorporationValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalInformation is CorporateActionNarrative3 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateAction3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
