//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionBalanceDetails1.  ISO2002 ID# _R-ZkYNp-Ed-ak6NoX_4Aeg_934462706.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Eligible and not eligible balance of securities for a corporate action event.
/// </summary>
public partial record CorporateActionBalanceDetails1
     : IIsoXmlSerilizable<CorporateActionBalanceDetails1>
{
    #nullable enable
    
    /// <summary>
    /// Total quantity of financial instruments of the balance.
    /// </summary>
    public Quantity3Choice_? TotalEligibleBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that are blocked.
    /// </summary>
    public BalanceFormat1Choice_? BlockedBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? BorrowedBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? CollateralInBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? CollateralOutBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? OnLoanBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? PendingDeliveryBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? PendingReceiptBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? OutForRegistrationBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? SettlementPositionBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? StreetPositionBalance { get; init; } 
    /// <summary>
    /// Balance of securities based on trade date, for example, includes all pending transactions in addition to the balance of settled transactions.
    /// </summary>
    public BalanceFormat1Choice_? TradeDatePositionBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? InTransshipmentBalance { get; init; } 
    /// <summary>
    /// Quantity of securities in the sub-balance.
    /// </summary>
    public BalanceFormat1Choice_? RegisteredBalance { get; init; } 
    /// <summary>
    /// Position that account holders should return to the account servicer to participate in the event or to fulfil their obligation for the event to be complete, for example, return of securities for late announced drawing.
    /// </summary>
    public BalanceFormat1Choice_? ObligatedBalance { get; init; } 
    /// <summary>
    /// Balance of uninstructed position.
    /// </summary>
    public BalanceFormat1Choice_? UninstructedBalance { get; init; } 
    /// <summary>
    /// Balance of instructed position.
    /// </summary>
    public BalanceFormat1Choice_? InstructedBalance { get; init; } 
    /// <summary>
    /// Balance that has been affected by the process run through the event.
    /// </summary>
    public BalanceFormat1Choice_? AffectedBalance { get; init; } 
    /// <summary>
    /// Balance that has not been affected by the process run through the event.
    /// </summary>
    public BalanceFormat1Choice_? UnaffectedBalance { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TotalEligibleBalance is Quantity3Choice_ TotalEligibleBalanceValue)
        {
            writer.WriteStartElement(null, "TtlElgblBal", xmlNamespace );
            TotalEligibleBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BlockedBalance is BalanceFormat1Choice_ BlockedBalanceValue)
        {
            writer.WriteStartElement(null, "BlckdBal", xmlNamespace );
            BlockedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BorrowedBalance is BalanceFormat1Choice_ BorrowedBalanceValue)
        {
            writer.WriteStartElement(null, "BrrwdBal", xmlNamespace );
            BorrowedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralInBalance is BalanceFormat1Choice_ CollateralInBalanceValue)
        {
            writer.WriteStartElement(null, "CollInBal", xmlNamespace );
            CollateralInBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralOutBalance is BalanceFormat1Choice_ CollateralOutBalanceValue)
        {
            writer.WriteStartElement(null, "CollOutBal", xmlNamespace );
            CollateralOutBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OnLoanBalance is BalanceFormat1Choice_ OnLoanBalanceValue)
        {
            writer.WriteStartElement(null, "OnLnBal", xmlNamespace );
            OnLoanBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PendingDeliveryBalance is BalanceFormat1Choice_ PendingDeliveryBalanceValue)
        {
            writer.WriteStartElement(null, "PdgDlvryBal", xmlNamespace );
            PendingDeliveryBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PendingReceiptBalance is BalanceFormat1Choice_ PendingReceiptBalanceValue)
        {
            writer.WriteStartElement(null, "PdgRctBal", xmlNamespace );
            PendingReceiptBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OutForRegistrationBalance is BalanceFormat1Choice_ OutForRegistrationBalanceValue)
        {
            writer.WriteStartElement(null, "OutForRegnBal", xmlNamespace );
            OutForRegistrationBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementPositionBalance is BalanceFormat1Choice_ SettlementPositionBalanceValue)
        {
            writer.WriteStartElement(null, "SttlmPosBal", xmlNamespace );
            SettlementPositionBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StreetPositionBalance is BalanceFormat1Choice_ StreetPositionBalanceValue)
        {
            writer.WriteStartElement(null, "StrtPosBal", xmlNamespace );
            StreetPositionBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradeDatePositionBalance is BalanceFormat1Choice_ TradeDatePositionBalanceValue)
        {
            writer.WriteStartElement(null, "TradDtPosBal", xmlNamespace );
            TradeDatePositionBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InTransshipmentBalance is BalanceFormat1Choice_ InTransshipmentBalanceValue)
        {
            writer.WriteStartElement(null, "InTrnsShipmntBal", xmlNamespace );
            InTransshipmentBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RegisteredBalance is BalanceFormat1Choice_ RegisteredBalanceValue)
        {
            writer.WriteStartElement(null, "RegdBal", xmlNamespace );
            RegisteredBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ObligatedBalance is BalanceFormat1Choice_ ObligatedBalanceValue)
        {
            writer.WriteStartElement(null, "OblgtdBal", xmlNamespace );
            ObligatedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UninstructedBalance is BalanceFormat1Choice_ UninstructedBalanceValue)
        {
            writer.WriteStartElement(null, "UinstdBal", xmlNamespace );
            UninstructedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstructedBalance is BalanceFormat1Choice_ InstructedBalanceValue)
        {
            writer.WriteStartElement(null, "InstdBal", xmlNamespace );
            InstructedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AffectedBalance is BalanceFormat1Choice_ AffectedBalanceValue)
        {
            writer.WriteStartElement(null, "AfctdBal", xmlNamespace );
            AffectedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnaffectedBalance is BalanceFormat1Choice_ UnaffectedBalanceValue)
        {
            writer.WriteStartElement(null, "UafctdBal", xmlNamespace );
            UnaffectedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionBalanceDetails1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
