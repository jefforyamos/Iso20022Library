//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionBalanceDetails45.  ISO2002 ID# _plLaMTi7Eeydid5dcNPKvg.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Eligible and not eligible balance of securities for a corporate action event.
/// </summary>
public partial record CorporateActionBalanceDetails45
{
    #nullable enable
    
    /// <summary>
    /// Balance to which the payment applies (less or equal to the total eligible balance).
    /// </summary>
    public required IBalanceFormat14Choice ConfirmedBalance { get; init; } 
    /// <summary>
    /// Total balance of securities eligible for this corporate action event. The entitlement calculation is based on this balance.
    /// </summary>
    public TotalEligibleBalanceFormat11? TotalEligibleBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that are blocked.
    /// </summary>
    public IBalanceFormat14Choice? BlockedBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that have been borrowed from another party.
    /// </summary>
    public IBalanceFormat14Choice? BorrowedBalance { get; init; } 
    /// <summary>
    /// Balance of securities that belong to a third party and that are held for the purpose of collateralisation.
    /// </summary>
    public IBalanceFormat14Choice? CollateralInBalance { get; init; } 
    /// <summary>
    /// Balance of securities that belong to the safekeeping account indicated within this message, and are deposited with a third party for the purpose of collateralisation.
    /// </summary>
    public IBalanceFormat14Choice? CollateralOutBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that have been loaned to a third party.
    /// </summary>
    public IBalanceFormat14Choice? OnLoanBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that are pending delivery.
    /// </summary>
    public IBalanceFormat16Choice? PendingDeliveryBalance { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Balance of financial instruments that are pending receipt.
    /// </summary>
    public IBalanceFormat16Choice? PendingReceiptBalance { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Balance of financial instruments currently being processed by the institution responsible for registering the new beneficial owner (or nominee).
    /// </summary>
    public IBalanceFormat14Choice? OutForRegistrationBalance { get; init; } 
    /// <summary>
    /// Balance of securities representing only settled transactions; pending transactions not included.
    /// </summary>
    public IBalanceFormat16Choice? SettlementPositionBalance { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Balance of financial instruments that remain registered in the name of the prior beneficial owner.
    /// </summary>
    public IBalanceFormat14Choice? StreetPositionBalance { get; init; } 
    /// <summary>
    /// Balance of securities based on trade date, for example, includes all pending transactions in addition to the balance of settled transactions.
    /// </summary>
    public IBalanceFormat14Choice? TradeDatePositionBalance { get; init; } 
    /// <summary>
    /// Balance of physical securities that are in the process of being transferred from one depository/agent to another.
    /// </summary>
    public IBalanceFormat14Choice? InTransshipmentBalance { get; init; } 
    /// <summary>
    /// Balance of financial instruments that are registered (in the name of a nominee name or of the beneficial owner).
    /// </summary>
    public IBalanceFormat14Choice? RegisteredBalance { get; init; } 
    /// <summary>
    /// Balance that has been affected by the process run through the event.
    /// </summary>
    public IBalanceFormat14Choice? AffectedBalance { get; init; } 
    /// <summary>
    /// Balance that has not been affected by the process run through the event.
    /// </summary>
    public IBalanceFormat14Choice? UnaffectedBalance { get; init; } 
    
    #nullable disable
}
