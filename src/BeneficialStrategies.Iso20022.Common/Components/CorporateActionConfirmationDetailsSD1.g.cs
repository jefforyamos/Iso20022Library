//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionConfirmationDetailsSD1.  ISO2002 ID# _K5o5ppFEEeanIpS4qvJ1tw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action confirmation details.
/// </summary>
public partial record CorporateActionConfirmationDetailsSD1
     : IIsoXmlSerilizable<CorporateActionConfirmationDetailsSD1>
{
    #nullable enable
    
    /// <summary>
    /// xPath to the element that is being extended.
    /// </summary>
    public required IsoMax350Text PlaceAndName { get; init; } 
    /// <summary>
    /// Indicates how fractional positions will be handled for events with prorated options.
    /// </summary>
    public FractionDispositionType12Code? ProrationRoundingIndicator { get; init; } 
    /// <summary>
    /// Decimal above which numbers are rounded for prorated options. (e.g., if the rounding factor is 0.5, numbers of 0.5 and above will be rounded up).
    /// </summary>
    public IsoDecimalNumber? ProrationFraction { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndName)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (ProrationRoundingIndicator is FractionDispositionType12Code ProrationRoundingIndicatorValue)
        {
            writer.WriteStartElement(null, "PrratnRndgInd", xmlNamespace );
            writer.WriteValue(ProrationRoundingIndicatorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ProrationFraction is IsoDecimalNumber ProrationFractionValue)
        {
            writer.WriteStartElement(null, "PrratnFrctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(ProrationFractionValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
    }
    public static CorporateActionConfirmationDetailsSD1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
