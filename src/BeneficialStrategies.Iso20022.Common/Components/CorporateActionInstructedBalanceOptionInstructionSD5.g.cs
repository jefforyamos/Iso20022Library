//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionInstructedBalanceOptionInstructionSD5.  ISO2002 ID# _F90zIVB9Ee2KGNXAcFL5RA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action instructed balance details at option level.
/// </summary>
public partial record CorporateActionInstructedBalanceOptionInstructionSD5
     : IIsoXmlSerilizable<CorporateActionInstructedBalanceOptionInstructionSD5>
{
    #nullable enable
    
    /// <summary>
    /// Xpath to the element that is being extended.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Number identifying the available corporate action options.
    /// </summary>
    public required OptionNumber1Choice_ OptionNumber { get; init; } 
    /// <summary>
    /// Instruction reference number assigned by DTC to the uncovered protect instruction.
    /// </summary>
    public IsoMax15Text? ProtectIdentification { get; init; } 
    /// <summary>
    /// Contra CUSIP Identification of the option instruction.
    /// </summary>
    public OtherIdentification2? TransactionContraCUSIP { get; init; } 
    /// <summary>
    /// Quantity relating only to the oversubscription.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? TransactionIdentificationOversubscriptionQuantity { get; init; } 
    /// <summary>
    /// Status of the instruction.
    /// </summary>
    public required DTCInstructionStatus2Code TransactionIdentificationStatus { get; init; } 
    /// <summary>
    /// Tax category number assigned on the announcement to provide a breakdown at a category level on the inbound instruction to determine tax treatment as required by issuers, their agents, or tax authorities.
    /// </summary>
    public ValueList<TaxCategory2> TaxCategory { get; init; } = [];
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OptnNb", xmlNamespace );
        OptionNumber.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ProtectIdentification is IsoMax15Text ProtectIdentificationValue)
        {
            writer.WriteStartElement(null, "PrtctId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15Text(ProtectIdentificationValue)); // data type Max15Text System.String
            writer.WriteEndElement();
        }
        if (TransactionContraCUSIP is OtherIdentification2 TransactionContraCUSIPValue)
        {
            writer.WriteStartElement(null, "TxContraCUSIP", xmlNamespace );
            TransactionContraCUSIPValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionIdentificationOversubscriptionQuantity is FinancialInstrumentQuantity15Choice_ TransactionIdentificationOversubscriptionQuantityValue)
        {
            writer.WriteStartElement(null, "TxIdOvrsbcptQty", xmlNamespace );
            TransactionIdentificationOversubscriptionQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxIdSts", xmlNamespace );
        writer.WriteValue(TransactionIdentificationStatus.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TaxCtgy", xmlNamespace );
        TaxCategory.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static CorporateActionInstructedBalanceOptionInstructionSD5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
