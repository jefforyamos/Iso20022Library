//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionInstructedBalanceOptionProtectInstructionSD3.  ISO2002 ID# _lycUYegYEei5aPS232E3Mw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action instructed balance details at option protect level.
/// </summary>
public partial record CorporateActionInstructedBalanceOptionProtectInstructionSD3
     : IIsoXmlSerilizable<CorporateActionInstructedBalanceOptionProtectInstructionSD3>
{
    #nullable enable
    
    /// <summary>
    /// Xpath to the element that is being extended.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Option number of the protect instruction.
    /// </summary>
    public required OptionNumber1Choice_ OptionNumber { get; init; } 
    /// <summary>
    /// For cover protect instructions whereby one safekeeping account is covering on behalf of another safekeeping account. The protect safekeeping account will be the account which submitted the original protect instruction.
    /// </summary>
    public IsoRestrictedFINMax35Text? ProtectSafekeepingAccount { get; init; } 
    /// <summary>
    /// Quantity of the protect instruction which has not been covered.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? ProtectIdentificationUncoveredQuantity { get; init; } 
    /// <summary>
    /// Protect oversubscription quantity.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? ProtectIdentificationOversubscriptionQuantity { get; init; } 
    /// <summary>
    /// Status of the protect instruction.
    /// </summary>
    public DTCProtectInstructionStatus1Code? ProtectIdentificationStatus { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OptnNb", xmlNamespace );
        OptionNumber.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ProtectSafekeepingAccount is IsoRestrictedFINMax35Text ProtectSafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "PrtctSfkpgAcct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINMax35Text(ProtectSafekeepingAccountValue)); // data type RestrictedFINMax35Text System.String
            writer.WriteEndElement();
        }
        if (ProtectIdentificationUncoveredQuantity is FinancialInstrumentQuantity15Choice_ ProtectIdentificationUncoveredQuantityValue)
        {
            writer.WriteStartElement(null, "PrtctIdUcvrdQty", xmlNamespace );
            ProtectIdentificationUncoveredQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProtectIdentificationOversubscriptionQuantity is FinancialInstrumentQuantity15Choice_ ProtectIdentificationOversubscriptionQuantityValue)
        {
            writer.WriteStartElement(null, "PrtctIdOvrsbcptQty", xmlNamespace );
            ProtectIdentificationOversubscriptionQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProtectIdentificationStatus is DTCProtectInstructionStatus1Code ProtectIdentificationStatusValue)
        {
            writer.WriteStartElement(null, "PrtctIdSts", xmlNamespace );
            writer.WriteValue(ProtectIdentificationStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static CorporateActionInstructedBalanceOptionProtectInstructionSD3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
