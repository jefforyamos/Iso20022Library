//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionMovement1.  ISO2002 ID# _UIh5p9p-Ed-ak6NoX_4Aeg_378115287.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the movement instruction.
/// </summary>
public partial record CorporateActionMovement1
     : IIsoXmlSerilizable<CorporateActionMovement1>
{
    #nullable enable
    
    /// <summary>
    /// Type of movement instruction.
    /// </summary>
    public required DistributionInstructionType1Code OrderType { get; init; } 
    /// <summary>
    /// Indicates whether the movement is a high priority or not.|Meaning when true: High priority|Meaning when false: Standard.
    /// </summary>
    public required IsoYesNoIndicator HighPriorityIndicator { get; init; } 
    /// <summary>
    /// Number identifying the available corporate action options.
    /// </summary>
    public IsoExact3NumericText? OptionNumber { get; init; } 
    /// <summary>
    /// Specifies the corporate action options available to the account owner.
    /// </summary>
    public CorporateActionOption1FormatChoice_? OptionType { get; init; } 
    /// <summary>
    /// Date at which the distribution movement must be executed.
    /// </summary>
    public required IsoISODate RequestedExecutionDate { get; init; } 
    /// <summary>
    /// Identification of the party that owns the account.
    /// </summary>
    public PartyIdentification2Choice_? AccountOwnerIdentification { get; init; } 
    /// <summary>
    /// Identification of the account.
    /// </summary>
    public IsoMax35Text? AccountIdentification { get; init; } 
    /// <summary>
    /// Quantity of securities in the confirmed balance, ie, the balance to which the credit of the outturned resources applies.
    /// </summary>
    public UnitOrFaceAmount1Choice_? ConfirmedBalanceSecuritiesQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "OrdrTp", xmlNamespace );
        writer.WriteValue(OrderType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "HghPrtyInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(HighPriorityIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (OptionNumber is IsoExact3NumericText OptionNumberValue)
        {
            writer.WriteStartElement(null, "OptnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact3NumericText(OptionNumberValue)); // data type Exact3NumericText System.String
            writer.WriteEndElement();
        }
        if (OptionType is CorporateActionOption1FormatChoice_ OptionTypeValue)
        {
            writer.WriteStartElement(null, "OptnTp", xmlNamespace );
            OptionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ReqdExctnDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(RequestedExecutionDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (AccountOwnerIdentification is PartyIdentification2Choice_ AccountOwnerIdentificationValue)
        {
            writer.WriteStartElement(null, "AcctOwnrId", xmlNamespace );
            AccountOwnerIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountIdentification is IsoMax35Text AccountIdentificationValue)
        {
            writer.WriteStartElement(null, "AcctId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AccountIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ConfirmedBalanceSecuritiesQuantity is UnitOrFaceAmount1Choice_ ConfirmedBalanceSecuritiesQuantityValue)
        {
            writer.WriteStartElement(null, "ConfdBalSctiesQty", xmlNamespace );
            ConfirmedBalanceSecuritiesQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionMovement1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
