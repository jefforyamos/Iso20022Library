//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionMovementCashMovementDetailsSD5.  ISO2002 ID# _0_1QUb5ZEeexmbB7KsjCwA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action movement details.
/// </summary>
public partial record CorporateActionMovementCashMovementDetailsSD5
     : IIsoXmlSerilizable<CorporateActionMovementCashMovementDetailsSD5>
{
    #nullable enable
    
    /// <summary>
    /// Xpath to the element that is being extended.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Indicates whether the value is a debit or a credit.
    /// </summary>
    public required CreditDebitCode CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Specifies the type of payout associated with the event (for example: principal, long term capital gain).
    /// </summary>
    public required DTCCPayoutType5Code PayoutType { get; init; } 
    /// <summary>
    /// Resulting cash amount concerned in this transaction.
    /// </summary>
    public IsoRestrictedFINActiveCurrencyAndAmount? TransactionAmount { get; init; } 
    /// <summary>
    /// Transaction reason.
    /// </summary>
    public DTCAdjustmentPaymentType4Code? ReasonCode { get; init; } 
    /// <summary>
    /// Transaction sub reason.
    /// </summary>
    public DTCAdjustmentPaymentSubReason2Code? SubReasonCode { get; init; } 
    /// <summary>
    /// Transaction contra participant identification when shares are distributed / delivered to / from another participant.
    /// </summary>
    public IsoMax8Text? ContraParticipantNumber { get; init; } 
    /// <summary>
    /// Date/Time on which the posting / draft of cash is scheduled to take place for a transaction.
    /// </summary>
    public DateFormat48Choice_? EarliestPaymentDate { get; init; } 
    /// <summary>
    /// Unique DTCC legacy reference used for matching and reconciling legacy CCF records. The element will be populated to all levels of the message (event details, options, movements) where applicable to indicate how values are sourced from CCF legacy files. For example: event has 2 related activity types 74, and 54. If event details and cash option are sourced from the activity type 74, then activity type 74 will be in RDP reference number in event details, and also on the cash option. The activity type 54 will be "on" the security option. Also, usage rules will specify the different layouts of the RDP reference number based on DTCC event group (reorganization, distribution, or redemption).
    /// </summary>
    public IsoExact32AlphaNumericText? RDPReferenceNumber { get; init; } 
    /// <summary>
    /// Set of the DTC legacy sub reason codes representing tax rate. Used with reason codes ‘TJXD’ ‘TJXF’ ‘TJXI’ ‘TJXL’ ‘TJXR’ ‘TJXT’ ‘TJXU’ to identify the correct tax rate.
    /// </summary>
    public IsoPercentageRate? TaxAdjustmentRate { get; init; } 
    /// <summary>
    /// Quantity used on adjustment transactions which when summed across all extension movements equals the relevant balance in the core message. For example, a summation of loan and borrow movements when summed which is negative will show the net total in the borrow balance in the core message. While a summation of loan and borrow movements which is positive will show in the loan balance.
    /// </summary>
    public FinancialInstrumentQuantity15Choice_? TransactionQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CdtDbtInd", xmlNamespace );
        writer.WriteValue(CreditDebitIndicator.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PyoutTp", xmlNamespace );
        writer.WriteValue(PayoutType.ToString()); // Enum value
        writer.WriteEndElement();
        if (TransactionAmount is IsoRestrictedFINActiveCurrencyAndAmount TransactionAmountValue)
        {
            writer.WriteStartElement(null, "TxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINActiveCurrencyAndAmount(TransactionAmountValue)); // data type RestrictedFINActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ReasonCode is DTCAdjustmentPaymentType4Code ReasonCodeValue)
        {
            writer.WriteStartElement(null, "RsnCd", xmlNamespace );
            writer.WriteValue(ReasonCodeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SubReasonCode is DTCAdjustmentPaymentSubReason2Code SubReasonCodeValue)
        {
            writer.WriteStartElement(null, "SubRsnCd", xmlNamespace );
            writer.WriteValue(SubReasonCodeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ContraParticipantNumber is IsoMax8Text ContraParticipantNumberValue)
        {
            writer.WriteStartElement(null, "ContraPtcptNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax8Text(ContraParticipantNumberValue)); // data type Max8Text System.String
            writer.WriteEndElement();
        }
        if (EarliestPaymentDate is DateFormat48Choice_ EarliestPaymentDateValue)
        {
            writer.WriteStartElement(null, "EarlstPmtDt", xmlNamespace );
            EarliestPaymentDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RDPReferenceNumber is IsoExact32AlphaNumericText RDPReferenceNumberValue)
        {
            writer.WriteStartElement(null, "RDPRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact32AlphaNumericText(RDPReferenceNumberValue)); // data type Exact32AlphaNumericText System.String
            writer.WriteEndElement();
        }
        if (TaxAdjustmentRate is IsoPercentageRate TaxAdjustmentRateValue)
        {
            writer.WriteStartElement(null, "TaxAdjstmntRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TaxAdjustmentRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TransactionQuantity is FinancialInstrumentQuantity15Choice_ TransactionQuantityValue)
        {
            writer.WriteStartElement(null, "TxQty", xmlNamespace );
            TransactionQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionMovementCashMovementDetailsSD5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
