//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionNarrative1.  ISO2002 ID# _UMQjFNp-Ed-ak6NoX_4Aeg_1627158994.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides addtional information such as the taxation conditions.
/// </summary>
public partial record CorporateActionNarrative1
     : IIsoXmlSerilizable<CorporateActionNarrative1>
{
    #nullable enable
    
    /// <summary>
    /// Provides conditional information related to the event, eg, an offer is subject to 50% acceptance, the offeror allows the securities holder to set some conditions.
    /// </summary>
    public IsoMax350Text? InformationConditions { get; init; } 
    /// <summary>
    /// Provides information conditions to the account owner that are to be complied with, eg, not open to US/Canadian residents, QIB or SIL to be provided.
    /// </summary>
    public IsoMax350Text? InformationToComplyWith { get; init; } 
    /// <summary>
    /// Provides taxation conditions that cannot be included within the structured fields of this message.
    /// </summary>
    public IsoMax350Text? TaxationConditions { get; init; } 
    /// <summary>
    /// Provide the new name of a company following a name change.
    /// </summary>
    public IsoMax350Text? NewCompanyName { get; init; } 
    /// <summary>
    /// Provides the entity making the offer and is different from the issuing company.
    /// </summary>
    public PartyIdentification2Choice_? Offeror { get; init; } 
    /// <summary>
    /// Provides the web address published for the event, ie the address for the Universal Resource Locator (URL), eg, used over the www (HTTP) service.
    /// </summary>
    public IsoMax256Text? URLAddress { get; init; } 
    /// <summary>
    /// Provides additional information or specifies in more detail the content of a|message.
    /// </summary>
    public IsoMax350Text? AdditionalText { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (InformationConditions is IsoMax350Text InformationConditionsValue)
        {
            writer.WriteStartElement(null, "InfConds", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(InformationConditionsValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (InformationToComplyWith is IsoMax350Text InformationToComplyWithValue)
        {
            writer.WriteStartElement(null, "InfToCmplyWth", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(InformationToComplyWithValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (TaxationConditions is IsoMax350Text TaxationConditionsValue)
        {
            writer.WriteStartElement(null, "TaxtnConds", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(TaxationConditionsValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (NewCompanyName is IsoMax350Text NewCompanyNameValue)
        {
            writer.WriteStartElement(null, "NewCpnyNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NewCompanyNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (Offeror is PartyIdentification2Choice_ OfferorValue)
        {
            writer.WriteStartElement(null, "Offerr", xmlNamespace );
            OfferorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (URLAddress is IsoMax256Text URLAddressValue)
        {
            writer.WriteStartElement(null, "URLAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(URLAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalText is IsoMax350Text AdditionalTextValue)
        {
            writer.WriteStartElement(null, "AddtlTxt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(AdditionalTextValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
    }
    public static CorporateActionNarrative1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
