//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionOption196.  ISO2002 ID# _13syoRn1EeyroI8qKgB7Mg.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the corporate action option.
/// </summary>
public partial record CorporateActionOption196
{
    #nullable enable
    
    /// <summary>
    /// Number identifying the available corporate action options.
    /// </summary>
    public required IOptionNumber1Choice OptionNumber { get; init; } 
    /// <summary>
    /// Specifies the corporate action options available to the account owner.
    /// </summary>
    public required ICorporateActionOption41Choice OptionType { get; init; } 
    /// <summary>
    /// Specifies the features that may apply to a corporate action option.
    /// </summary>
    public IOptionFeaturesFormat25Choice? OptionFeatures { get; init; } 
    /// <summary>
    /// Party that owns the account.
    /// </summary>
    public IPartyIdentification127Choice? AccountOwner { get; init; } 
    /// <summary>
    /// Account where financial instruments are maintained.
    /// </summary>
    public IsoMax35Text? SafekeepingAccount { get; init; } 
    /// <summary>
    /// Blockchain address or wallet where digital assets are maintained. This is the equivalent of safekeeping account for digital assets.
    /// </summary>
    public IsoMax140Text? BlockChainAddressOrWallet { get; init; } 
    /// <summary>
    /// Account on which a securities entry is made.
    /// </summary>
    public ICashAccountIdentification5Choice? CashAccount { get; init; } 
    /// <summary>
    /// Location where the financial instruments are/will be safekept.
    /// </summary>
    public ISafekeepingPlaceFormat28Choice? SafekeepingPlace { get; init; } 
    /// <summary>
    /// Identifies the financial instrument.
    /// </summary>
    public SecurityIdentification19? FinancialInstrumentIdentification { get; init; } 
    /// <summary>
    /// Total balance of securities eligible for this corporate action event. The entitlement calculation is based on this balance.
    /// </summary>
    public SignedQuantityFormat11? TotalEligibleBalance { get; init; } 
    /// <summary>
    /// Balance of instructed position.
    /// </summary>
    public SignedQuantityFormat11? InstructedBalance { get; init; } 
    /// <summary>
    /// Balance of uninstructed position.
    /// </summary>
    public SignedQuantityFormat11? UninstructedBalance { get; init; } 
    /// <summary>
    /// Balance of securities which are in protect status in a CSD operating a protect cover service.
    /// </summary>
    public SignedQuantityFormat11? ProtectBalance { get; init; } 
    /// <summary>
    /// Quantity of securities that has been assigned the status indicated.
    /// </summary>
    public IQuantity51Choice? StatusQuantity { get; init; } 
    /// <summary>
    /// Amount of cash subscribed that has been assigned the status indicated.
    /// </summary>
    public IsoActiveCurrencyAndAmount? StatusCashAmount { get; init; } 
    /// <summary>
    /// Indicates whether there is a solicitation fee on the event. This fee is paid by the soliciting dealer.
    /// </summary>
    public IsoYesNoIndicator? SolicitationDealerFeeIndicator { get; init; } 
    
    #nullable disable
}
