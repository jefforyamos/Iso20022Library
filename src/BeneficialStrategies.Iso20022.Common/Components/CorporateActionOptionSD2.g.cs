//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionOptionSD2.  ISO2002 ID# _1j6KcTL3EeKU9IrkkToqcw_408382309.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action option details.
/// </summary>
public partial record CorporateActionOptionSD2
     : IIsoXmlSerilizable<CorporateActionOptionSD2>
{
    #nullable enable
    
    /// <summary>
    /// xPath to the element that is being extended.
    /// </summary>
    public required IsoMax350Text PlaceAndName { get; init; } 
    /// <summary>
    /// Used for options that have particular proprietary feature that cannot be represented in standard ISO message.
    /// </summary>
    public ExtendedOptionFeature1Code? ExtendedOptionFeatures { get; init; } 
    /// <summary>
    /// Identifies whether the option is declared as default by the issuer / offeror, and will be treated as default by the issuer / offeror if no elections is made.
    /// </summary>
    public required IsoYesNoIndicator DefaultOptionFlag { get; init; } 
    /// <summary>
    /// Certain tax authorities provide control numbers to investors to instruct on Foreign Tax Relief service at DTC (The Depository Trust Corporation). This flag notes which events have these requirements and requires the DTC participant to input the control numbers.
    /// </summary>
    public IsoYesNoIndicator? DTCTaxControlNumberRequiredFlag { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndName)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (ExtendedOptionFeatures is ExtendedOptionFeature1Code ExtendedOptionFeaturesValue)
        {
            writer.WriteStartElement(null, "XtndedOptnFeatrs", xmlNamespace );
            writer.WriteValue(ExtendedOptionFeaturesValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "DfltOptnFlg", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DefaultOptionFlag)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (DTCTaxControlNumberRequiredFlag is IsoYesNoIndicator DTCTaxControlNumberRequiredFlagValue)
        {
            writer.WriteStartElement(null, "DTCTaxCtrlNbReqrdFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DTCTaxControlNumberRequiredFlagValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static CorporateActionOptionSD2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
