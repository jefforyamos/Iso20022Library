//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionPeriod10.  ISO2002 ID# _Akm9sSUtEeOTjI2ZSjVqSQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies periods of a corporate action.
/// </summary>
public partial record CorporateActionPeriod10
     : IIsoXmlSerilizable<CorporateActionPeriod10>
{
    #nullable enable
    
    /// <summary>
    /// Period during which the price of a security is determined.
    /// </summary>
    public Period3Choice_? PriceCalculationPeriod { get; init; } 
    /// <summary>
    /// Period during which the interest rate has been applied.
    /// </summary>
    public Period3Choice_? InterestPeriod { get; init; } 
    /// <summary>
    /// Period during a take-over where any outstanding equity must be purchased by the take-over company.
    /// </summary>
    public Period3Choice_? CompulsoryPurchasePeriod { get; init; } 
    /// <summary>
    /// Period during which the security is blocked.
    /// </summary>
    public Period3Choice_? BlockingPeriod { get; init; } 
    /// <summary>
    /// Period assigned by the court in a class action. It determines the client's eligible transactions that will be included in the class action and used to determine the resulting entitlement.
    /// </summary>
    public Period3Choice_? ClaimPeriod { get; init; } 
    /// <summary>
    /// Period defining the last date for which book entry transfers will be accepted and the date on which the suspension will be released and book entry transfer processing will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForBookEntryTransfer { get; init; } 
    /// <summary>
    /// Period defining the last date for which deposits, into nominee name, at the agent will be accepted and the date on which the suspension will be released and deposits at agent will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForDepositAtAgent { get; init; } 
    /// <summary>
    /// Period defining the last date for which deposits will be accepted and the date on which the suspension will be released and deposits will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForDeposit { get; init; } 
    /// <summary>
    /// Period defining the last date for which pledges will be accepted and the date on which the suspension will be released and pledge processing will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForPledge { get; init; } 
    /// <summary>
    /// Period defining the last date for which intra-position balances can be segregated and the date on which the suspension will be released and the ability to segregate intra-position balances will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForSegregation { get; init; } 
    /// <summary>
    /// Period defining the last date for which withdrawals, from nominee name at the agent will be accepted and the date on which the suspension will be released and withdrawals at agent processing will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForWithdrawalAtAgent { get; init; } 
    /// <summary>
    /// Period defining the last date for which physical withdrawals in the nominee's name will be accepted and the date on which the suspension will be released and physical withdrawals in the nominee's name will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForWithdrawalInNomineeName { get; init; } 
    /// <summary>
    /// Period defining the last date on which withdrawal requests in street name's will be accepted on the event security and the date on which the suspension will be released and withdrawal in street name's processing on the event security will resume.
    /// </summary>
    public Period3Choice_? DepositorySuspensionPeriodForWithdrawalInStreetName { get; init; } 
    /// <summary>
    /// Period defining the last date on which shareholder registration will be accepted by the issuer and the date on which shareholder registration will resume.
    /// </summary>
    public Period3Choice_? BookClosurePeriod { get; init; } 
    /// <summary>
    /// Period during which the settlement activities at the co-depositories are suspended in order to stabilise the holdings at the CSD.
    /// </summary>
    public Period3Choice_? CoDepositoriesSuspensionPeriod { get; init; } 
    /// <summary>
    /// Period during which a physical certificate can be split.
    /// </summary>
    public Period3Choice_? SplitPeriod { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PriceCalculationPeriod is Period3Choice_ PriceCalculationPeriodValue)
        {
            writer.WriteStartElement(null, "PricClctnPrd", xmlNamespace );
            PriceCalculationPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InterestPeriod is Period3Choice_ InterestPeriodValue)
        {
            writer.WriteStartElement(null, "IntrstPrd", xmlNamespace );
            InterestPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CompulsoryPurchasePeriod is Period3Choice_ CompulsoryPurchasePeriodValue)
        {
            writer.WriteStartElement(null, "CmplsryPurchsPrd", xmlNamespace );
            CompulsoryPurchasePeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BlockingPeriod is Period3Choice_ BlockingPeriodValue)
        {
            writer.WriteStartElement(null, "BlckgPrd", xmlNamespace );
            BlockingPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClaimPeriod is Period3Choice_ ClaimPeriodValue)
        {
            writer.WriteStartElement(null, "ClmPrd", xmlNamespace );
            ClaimPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForBookEntryTransfer is Period3Choice_ DepositorySuspensionPeriodForBookEntryTransferValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForBookNtryTrf", xmlNamespace );
            DepositorySuspensionPeriodForBookEntryTransferValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForDepositAtAgent is Period3Choice_ DepositorySuspensionPeriodForDepositAtAgentValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForDpstAtAgt", xmlNamespace );
            DepositorySuspensionPeriodForDepositAtAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForDeposit is Period3Choice_ DepositorySuspensionPeriodForDepositValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForDpst", xmlNamespace );
            DepositorySuspensionPeriodForDepositValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForPledge is Period3Choice_ DepositorySuspensionPeriodForPledgeValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForPldg", xmlNamespace );
            DepositorySuspensionPeriodForPledgeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForSegregation is Period3Choice_ DepositorySuspensionPeriodForSegregationValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForSgrtn", xmlNamespace );
            DepositorySuspensionPeriodForSegregationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForWithdrawalAtAgent is Period3Choice_ DepositorySuspensionPeriodForWithdrawalAtAgentValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForWdrwlAtAgt", xmlNamespace );
            DepositorySuspensionPeriodForWithdrawalAtAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForWithdrawalInNomineeName is Period3Choice_ DepositorySuspensionPeriodForWithdrawalInNomineeNameValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForWdrwlInNmneeNm", xmlNamespace );
            DepositorySuspensionPeriodForWithdrawalInNomineeNameValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositorySuspensionPeriodForWithdrawalInStreetName is Period3Choice_ DepositorySuspensionPeriodForWithdrawalInStreetNameValue)
        {
            writer.WriteStartElement(null, "DpstrySspnsnPrdForWdrwlInStrtNm", xmlNamespace );
            DepositorySuspensionPeriodForWithdrawalInStreetNameValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BookClosurePeriod is Period3Choice_ BookClosurePeriodValue)
        {
            writer.WriteStartElement(null, "BookClsrPrd", xmlNamespace );
            BookClosurePeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CoDepositoriesSuspensionPeriod is Period3Choice_ CoDepositoriesSuspensionPeriodValue)
        {
            writer.WriteStartElement(null, "CoDpstriesSspnsnPrd", xmlNamespace );
            CoDepositoriesSuspensionPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SplitPeriod is Period3Choice_ SplitPeriodValue)
        {
            writer.WriteStartElement(null, "SpltPrd", xmlNamespace );
            SplitPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionPeriod10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
