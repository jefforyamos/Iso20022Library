//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionPeriod9.  ISO2002 ID# _1ncZMfZFEd-2Jsl2KtUQCw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies periods.
/// </summary>
public partial record CorporateActionPeriod9
     : IIsoXmlSerilizable<CorporateActionPeriod9>
{
    #nullable enable
    
    /// <summary>
    /// Period during which the price of a security is determined.
    /// </summary>
    public Period5? PriceCalculationPeriod { get; init; } 
    /// <summary>
    /// Period during which the specified option, or all options of the event, remains valid, for example, offer period.
    /// </summary>
    public Period5? ActionPeriod { get; init; } 
    /// <summary>
    /// Period during which both old and new equity may be traded simultaneously, for example, consolidation of equity or splitting of equity.
    /// </summary>
    public Period5? ParallelTradingPeriod { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PriceCalculationPeriod is Period5 PriceCalculationPeriodValue)
        {
            writer.WriteStartElement(null, "PricClctnPrd", xmlNamespace );
            PriceCalculationPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ActionPeriod is Period5 ActionPeriodValue)
        {
            writer.WriteStartElement(null, "ActnPrd", xmlNamespace );
            ActionPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ParallelTradingPeriod is Period5 ParallelTradingPeriodValue)
        {
            writer.WriteStartElement(null, "ParllTradgPrd", xmlNamespace );
            ParallelTradingPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionPeriod9 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
