//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionPrice6.  ISO2002 ID# _TYZdMNp-Ed-ak6NoX_4Aeg_506587885.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies prices related to a corporate action option.
/// </summary>
public partial record CorporateActionPrice6
     : IIsoXmlSerilizable<CorporateActionPrice6>
{
    #nullable enable
    
    /// <summary>
    /// Cash disbursement in lieu of equities; usually in lieu of fractional quantity.
    /// </summary>
    public PriceFormat11Choice_? CashInLieuOfSharePrice { get; init; } 
    /// <summary>
    /// 1. Price at which security will be purchased/sold if warrant is exercised, either as an actual amount or a percentage.|2. Price at which a bond is converted to underlying security either as an actual amount or a percentage.|3. Strike price of an option, represented either as an actual amount, a percentage or a number of points above an index.
    /// </summary>
    public PriceFormat8Choice_? ExercisePrice { get; init; } 
    /// <summary>
    /// Generic cash price received per product by the underlying security holder either as a percentage or an amount, for example, redemption price.
    /// </summary>
    public PriceFormat9Choice_? GenericCashPriceReceivedPerProduct { get; init; } 
    /// <summary>
    /// Amount of money required per over-subscribed equity as defined by the issuer.
    /// </summary>
    public PriceFormat11Choice_? OverSubscriptionDepositPrice { get; init; } 
    /// <summary>
    /// Generic cash price paid per product by the underlying security holder either as a percentage or an amount, for example, reinvestment price.
    /// </summary>
    public PriceFormat11Choice_? GenericCashPricePaidPerProduct { get; init; } 
    /// <summary>
    /// Amount included in the dividend/NAV that is identified as gains directly or indirectly derived from interest payments within the scope of the EU Savings directive.
    /// </summary>
    public AmountPrice3? TaxableIncomePerDividendShare { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CashInLieuOfSharePrice is PriceFormat11Choice_ CashInLieuOfSharePriceValue)
        {
            writer.WriteStartElement(null, "CshInLieuOfShrPric", xmlNamespace );
            CashInLieuOfSharePriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExercisePrice is PriceFormat8Choice_ ExercisePriceValue)
        {
            writer.WriteStartElement(null, "ExrcPric", xmlNamespace );
            ExercisePriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GenericCashPriceReceivedPerProduct is PriceFormat9Choice_ GenericCashPriceReceivedPerProductValue)
        {
            writer.WriteStartElement(null, "GncCshPricRcvdPerPdct", xmlNamespace );
            GenericCashPriceReceivedPerProductValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OverSubscriptionDepositPrice is PriceFormat11Choice_ OverSubscriptionDepositPriceValue)
        {
            writer.WriteStartElement(null, "OverSbcptDpstPric", xmlNamespace );
            OverSubscriptionDepositPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GenericCashPricePaidPerProduct is PriceFormat11Choice_ GenericCashPricePaidPerProductValue)
        {
            writer.WriteStartElement(null, "GncCshPricPdPerPdct", xmlNamespace );
            GenericCashPricePaidPerProductValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxableIncomePerDividendShare is AmountPrice3 TaxableIncomePerDividendShareValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerDvddShr", xmlNamespace );
            TaxableIncomePerDividendShareValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionPrice6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
