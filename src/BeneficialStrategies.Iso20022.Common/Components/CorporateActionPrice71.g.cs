//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionPrice71.  ISO2002 ID# _x_J20R9REeuFz_FaCzCLgQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies prices related to a corporate action option.
/// </summary>
public partial record CorporateActionPrice71
     : IIsoXmlSerilizable<CorporateActionPrice71>
{
    #nullable enable
    
    /// <summary>
    /// Cash disbursement in lieu of equities; usually in lieu of fractional quantity.
    /// </summary>
    public PriceFormat57Choice_? CashInLieuOfSharePrice { get; init; } 
    /// <summary>
    /// Amount of money required per over-subscribed equity as defined by the issuer.
    /// </summary>
    public PriceFormat57Choice_? OverSubscriptionDepositPrice { get; init; } 
    /// <summary>
    /// Maximum cash amount that may be instructed.
    /// </summary>
    public PriceFormat62Choice_? MaximumCashToInstruct { get; init; } 
    /// <summary>
    /// Minimum cash amount that may be instructed.
    /// </summary>
    public PriceFormat62Choice_? MinimumCashToInstruct { get; init; } 
    /// <summary>
    /// Minimum multiple of a cash amount that may be instructed.
    /// </summary>
    public PriceFormat62Choice_? MinimumMultipleCashToInstruct { get; init; } 
    /// <summary>
    /// Maximum or cap price at which a holder can bid, for example, on a Dutch auction offer.
    /// </summary>
    public PriceFormat44Choice_? MaximumPrice { get; init; } 
    /// <summary>
    /// Minimum or floor price at which a holder can bid, for example, on a Dutch auction offer.
    /// </summary>
    public PriceFormat44Choice_? MinimumPrice { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CashInLieuOfSharePrice is PriceFormat57Choice_ CashInLieuOfSharePriceValue)
        {
            writer.WriteStartElement(null, "CshInLieuOfShrPric", xmlNamespace );
            CashInLieuOfSharePriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OverSubscriptionDepositPrice is PriceFormat57Choice_ OverSubscriptionDepositPriceValue)
        {
            writer.WriteStartElement(null, "OverSbcptDpstPric", xmlNamespace );
            OverSubscriptionDepositPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MaximumCashToInstruct is PriceFormat62Choice_ MaximumCashToInstructValue)
        {
            writer.WriteStartElement(null, "MaxCshToInst", xmlNamespace );
            MaximumCashToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumCashToInstruct is PriceFormat62Choice_ MinimumCashToInstructValue)
        {
            writer.WriteStartElement(null, "MinCshToInst", xmlNamespace );
            MinimumCashToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumMultipleCashToInstruct is PriceFormat62Choice_ MinimumMultipleCashToInstructValue)
        {
            writer.WriteStartElement(null, "MinMltplCshToInst", xmlNamespace );
            MinimumMultipleCashToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MaximumPrice is PriceFormat44Choice_ MaximumPriceValue)
        {
            writer.WriteStartElement(null, "MaxPric", xmlNamespace );
            MaximumPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumPrice is PriceFormat44Choice_ MinimumPriceValue)
        {
            writer.WriteStartElement(null, "MinPric", xmlNamespace );
            MinimumPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionPrice71 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
