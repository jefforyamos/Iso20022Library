//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionRate16.  ISO2002 ID# _oME3YeGYEd-1Ktb5rVaajw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies rates of a corporate action.
/// </summary>
public partial record CorporateActionRate16
     : IIsoXmlSerilizable<CorporateActionRate16>
{
    #nullable enable
    
    /// <summary>
    /// Annual rate of a financial instrument.
    /// </summary>
    public RateAndAmountFormat14Choice_? Interest { get; init; } 
    /// <summary>
    /// Percentage of securities the offeror/issuer will purchase or redeem under the terms of the event. This can be a number or the term "any and all".
    /// </summary>
    public RateFormat5Choice_? PercentageSought { get; init; } 
    /// <summary>
    /// Index rate related to the interest rate of the forthcoming interest payment.
    /// </summary>
    public RateFormat6Choice_? RelatedIndex { get; init; } 
    /// <summary>
    /// Margin allowed over or under a given rate.
    /// </summary>
    public RateFormat6Choice_? Spread { get; init; } 
    /// <summary>
    /// Acceptable price increment used for submitting a bid.
    /// </summary>
    public RateAndAmountFormat14Choice_? BidInterval { get; init; } 
    /// <summary>
    /// Factor used to calculate the value of the outstanding principal of the financial instrument (for factored securities) until the next redemption (factor) date.
    /// </summary>
    public RateFormat3Choice_? PreviousFactor { get; init; } 
    /// <summary>
    /// Factor used to calculate the value of the outstanding principal of the financial instrument (for factored securities) that will applicable after the redemption (factor) date.
    /// </summary>
    public RateFormat3Choice_? NextFactor { get; init; } 
    /// <summary>
    /// Rate of discount for securities purchased through a reinvestment scheme as compared to the current market price of security.
    /// </summary>
    public RateFormat6Choice_? ReinvestmentDiscountRateToMarket { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Interest is RateAndAmountFormat14Choice_ InterestValue)
        {
            writer.WriteStartElement(null, "Intrst", xmlNamespace );
            InterestValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PercentageSought is RateFormat5Choice_ PercentageSoughtValue)
        {
            writer.WriteStartElement(null, "PctgSght", xmlNamespace );
            PercentageSoughtValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RelatedIndex is RateFormat6Choice_ RelatedIndexValue)
        {
            writer.WriteStartElement(null, "RltdIndx", xmlNamespace );
            RelatedIndexValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Spread is RateFormat6Choice_ SpreadValue)
        {
            writer.WriteStartElement(null, "Sprd", xmlNamespace );
            SpreadValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BidInterval is RateAndAmountFormat14Choice_ BidIntervalValue)
        {
            writer.WriteStartElement(null, "BidIntrvl", xmlNamespace );
            BidIntervalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreviousFactor is RateFormat3Choice_ PreviousFactorValue)
        {
            writer.WriteStartElement(null, "PrvsFctr", xmlNamespace );
            PreviousFactorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NextFactor is RateFormat3Choice_ NextFactorValue)
        {
            writer.WriteStartElement(null, "NxtFctr", xmlNamespace );
            NextFactorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReinvestmentDiscountRateToMarket is RateFormat6Choice_ ReinvestmentDiscountRateToMarketValue)
        {
            writer.WriteStartElement(null, "RinvstmtDscntRateToMkt", xmlNamespace );
            ReinvestmentDiscountRateToMarketValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionRate16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
