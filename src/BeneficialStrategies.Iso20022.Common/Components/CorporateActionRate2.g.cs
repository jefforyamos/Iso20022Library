//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionRate2.  ISO2002 ID# _Tf_6BNp-Ed-ak6NoX_4Aeg_-532082484.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies rates.
/// </summary>
public partial record CorporateActionRate2
     : IIsoXmlSerilizable<CorporateActionRate2>
{
    #nullable enable
    
    /// <summary>
    /// Percentage of a cash distribution that will be withheld by a tax authority.
    /// </summary>
    public RateFormat1Choice_? WithholdingTax { get; init; } 
    /// <summary>
    /// Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.
    /// </summary>
    public RateAndAmountFormat1Choice_? WithholdingOfForeignTax { get; init; } 
    /// <summary>
    /// Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.
    /// </summary>
    public RateAndAmountFormat1Choice_? WithholdingOfLocalTax { get; init; } 
    /// <summary>
    /// Local tax (ZAS Anrechnungsbetrag) subject to interest down payment tax (proportion of interest liable for interest down payment tax/interim profit that is not covered by the tax exempt amount).
    /// </summary>
    public RateAndAmountFormat1Choice_? GermanLocalTax1 { get; init; } 
    /// <summary>
    /// Local tax (ZAS Pflichtige Zinsen) interest liable for interest down payment tax (proportion of gross interest per unit/interim profits that is not covered by the credit in the interest pool).
    /// </summary>
    public RateAndAmountFormat1Choice_? GermanLocalTax2 { get; init; } 
    /// <summary>
    /// Local tax (Zinstopf) offset interest per unit against tax exempt amount (variation to offset interest per unit in relation to tax exempt amount).
    /// </summary>
    public RateAndAmountFormat1Choice_? GermanLocalTax3 { get; init; } 
    /// <summary>
    /// Local tax (Ertrag Besitzanteilig) yield liable for interest down payment tax.
    /// </summary>
    public RateAndAmountFormat1Choice_? GermanLocalTax4 { get; init; } 
    /// <summary>
    /// Taxation applied on an amount clearly identified as an income.
    /// </summary>
    public RateFormat1Choice_? TaxOnIncome { get; init; } 
    /// <summary>
    /// Taxation applied on an amount clearly identified as capital profits, capital gains.
    /// </summary>
    public RateFormat1Choice_? TaxOnProfit { get; init; } 
    /// <summary>
    /// Percentage of cash that was paid in excess of actual tax obligation and was reclaimed.
    /// </summary>
    public RateFormat1Choice_? TaxReclaim { get; init; } 
    /// <summary>
    /// Percentage of fiscal tax to apply.
    /// </summary>
    public RateFormat1Choice_? FiscalStamp { get; init; } 
    /// <summary>
    /// Proportionate allocation used for the offer.
    /// </summary>
    public RateFormat1Choice_? Proration { get; init; } 
    /// <summary>
    /// Quantity of new securities for a given quantity of underlying securities, where the underlying securities will be exchanged or debited, eg, 2 for 1: 2 new equities credited for every 1 underlying equity debited = 2 resulting equities.
    /// </summary>
    public RatioFormat2Choice_? NewToOld { get; init; } 
    /// <summary>
    /// Quantity of new equities that will be derived by the exercise of a given quantity of intermediate securities.
    /// </summary>
    public RatioFormat2Choice_? NewSecuritiesToUnderlyingSecurities { get; init; } 
    /// <summary>
    /// Quantity of additional securities for a given quantity of underlying securities where underlying securities are not exchanged or debited, eg, 1 for 1: 1 new|equity credited for every 1 underlying equity = 2 resulting equities.
    /// </summary>
    public RatioFormat1Choice_? AdditionalQuantityForExistingSecurities { get; init; } 
    /// <summary>
    /// Quantity of additional intermediate securities/new equities awarded for a given quantity of securities derived from subscription.
    /// </summary>
    public RatioFormat1Choice_? AdditionalQuantityForSubscribedResultantSecurities { get; init; } 
    /// <summary>
    /// Percentage of the gross dividend rate on which tax must be paid.
    /// </summary>
    public RelatedTaxType1? RelatedTax { get; init; } 
    /// <summary>
    /// Rate per share to which a non-resident is entitled.
    /// </summary>
    public RateAndAmountFormat1Choice_? NonResidentRate { get; init; } 
    /// <summary>
    /// Rate used to calculate the amount of the charges/fees that cannot be categorised.
    /// </summary>
    public RateAndAmountFormat1Choice_? Charges { get; init; } 
    /// <summary>
    /// The actual interest rate used for the payment of the interest for the specified interest period.
    /// </summary>
    public RateAndAmountFormat1Choice_? InterestForUsedPayment { get; init; } 
    /// <summary>
    /// Public index rate applied to the amount paid to adjust it to inflation.
    /// </summary>
    public RateAndAmountFormat1Choice_? IndexFactor { get; init; } 
    /// <summary>
    /// Rate resulting from a fully franked dividend paid by a company; rate includes tax credit for companies that have made sufficient tax payments during fiscal period.
    /// </summary>
    public RateAndAmountFormat1Choice_? FullyFranked { get; init; } 
    /// <summary>
    /// Cash dividend amount per equity before deductions or allowances have been made.
    /// </summary>
    public GrossDividendRate1Choice_? GrossDividend { get; init; } 
    /// <summary>
    /// Cash dividend amount per equity after deductions or allowances have been made.
    /// </summary>
    public NetDividendRate1Choice_? NetDividend { get; init; } 
    /// <summary>
    /// Dividend is final.
    /// </summary>
    public AmountAndRateFormat2Choice_? FinalDividend { get; init; } 
    /// <summary>
    /// Dividend is provisional.
    /// </summary>
    public AmountAndRateFormat2Choice_? ProvisionalDividend { get; init; } 
    /// <summary>
    /// Rate of the cash premium made available if the securities holder consents or participates to an event, e.g. consent fees.
    /// </summary>
    public RateFormat1Choice_? CashIncentive { get; init; } 
    /// <summary>
    /// Cash rate made available in an offer in order to encourage participation in the offer.
    /// </summary>
    public RateFormat1Choice_? SolicitationFee { get; init; } 
    /// <summary>
    /// A maximum percentage of shares available through the over subscription privilege, usually a percentage of the basic subscription shares, eg, an account owner subscribing to 100 shares may over subscribe to a maximum of 50 additional shares when the over subscription maximum is 50%.
    /// </summary>
    public RateFormat1Choice_? MaximumAllowedOversubscription { get; init; } 
    /// <summary>
    /// Rate used for additional tax that cannot be categorised.
    /// </summary>
    public RateAndAmountFormat1Choice_? AdditionalTax { get; init; } 
    /// <summary>
    /// Amount in its original currency when conversion from/into another currency has occurred.
    /// </summary>
    public IsoActiveCurrencyAndAmount? OriginalAmount { get; init; } 
    /// <summary>
    /// Provides information about a foreign exchange.
    /// </summary>
    public ForeignExchangeTerms8? ExchangeRate { get; init; } 
    /// <summary>
    /// Rate applicable to the event announced, eg, redemption rate for a redemption event.
    /// </summary>
    public RateFormat1Choice_? ApplicableRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (WithholdingTax is RateFormat1Choice_ WithholdingTaxValue)
        {
            writer.WriteStartElement(null, "WhldgTax", xmlNamespace );
            WithholdingTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingOfForeignTax is RateAndAmountFormat1Choice_ WithholdingOfForeignTaxValue)
        {
            writer.WriteStartElement(null, "WhldgOfFrgnTax", xmlNamespace );
            WithholdingOfForeignTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingOfLocalTax is RateAndAmountFormat1Choice_ WithholdingOfLocalTaxValue)
        {
            writer.WriteStartElement(null, "WhldgOfLclTax", xmlNamespace );
            WithholdingOfLocalTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GermanLocalTax1 is RateAndAmountFormat1Choice_ GermanLocalTax1Value)
        {
            writer.WriteStartElement(null, "GrmnLclTax1", xmlNamespace );
            GermanLocalTax1Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GermanLocalTax2 is RateAndAmountFormat1Choice_ GermanLocalTax2Value)
        {
            writer.WriteStartElement(null, "GrmnLclTax2", xmlNamespace );
            GermanLocalTax2Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GermanLocalTax3 is RateAndAmountFormat1Choice_ GermanLocalTax3Value)
        {
            writer.WriteStartElement(null, "GrmnLclTax3", xmlNamespace );
            GermanLocalTax3Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GermanLocalTax4 is RateAndAmountFormat1Choice_ GermanLocalTax4Value)
        {
            writer.WriteStartElement(null, "GrmnLclTax4", xmlNamespace );
            GermanLocalTax4Value.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxOnIncome is RateFormat1Choice_ TaxOnIncomeValue)
        {
            writer.WriteStartElement(null, "TaxOnIncm", xmlNamespace );
            TaxOnIncomeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxOnProfit is RateFormat1Choice_ TaxOnProfitValue)
        {
            writer.WriteStartElement(null, "TaxOnPrft", xmlNamespace );
            TaxOnProfitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxReclaim is RateFormat1Choice_ TaxReclaimValue)
        {
            writer.WriteStartElement(null, "TaxRclm", xmlNamespace );
            TaxReclaimValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FiscalStamp is RateFormat1Choice_ FiscalStampValue)
        {
            writer.WriteStartElement(null, "FsclStmp", xmlNamespace );
            FiscalStampValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Proration is RateFormat1Choice_ ProrationValue)
        {
            writer.WriteStartElement(null, "Prratn", xmlNamespace );
            ProrationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewToOld is RatioFormat2Choice_ NewToOldValue)
        {
            writer.WriteStartElement(null, "NewToOd", xmlNamespace );
            NewToOldValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewSecuritiesToUnderlyingSecurities is RatioFormat2Choice_ NewSecuritiesToUnderlyingSecuritiesValue)
        {
            writer.WriteStartElement(null, "NewSctiesToUndrlygScties", xmlNamespace );
            NewSecuritiesToUnderlyingSecuritiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalQuantityForExistingSecurities is RatioFormat1Choice_ AdditionalQuantityForExistingSecuritiesValue)
        {
            writer.WriteStartElement(null, "AddtlQtyForExstgScties", xmlNamespace );
            AdditionalQuantityForExistingSecuritiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalQuantityForSubscribedResultantSecurities is RatioFormat1Choice_ AdditionalQuantityForSubscribedResultantSecuritiesValue)
        {
            writer.WriteStartElement(null, "AddtlQtyForSbcbdRsltntScties", xmlNamespace );
            AdditionalQuantityForSubscribedResultantSecuritiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RelatedTax is RelatedTaxType1 RelatedTaxValue)
        {
            writer.WriteStartElement(null, "RltdTax", xmlNamespace );
            RelatedTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NonResidentRate is RateAndAmountFormat1Choice_ NonResidentRateValue)
        {
            writer.WriteStartElement(null, "NonResdtRate", xmlNamespace );
            NonResidentRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Charges is RateAndAmountFormat1Choice_ ChargesValue)
        {
            writer.WriteStartElement(null, "Chrgs", xmlNamespace );
            ChargesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InterestForUsedPayment is RateAndAmountFormat1Choice_ InterestForUsedPaymentValue)
        {
            writer.WriteStartElement(null, "IntrstForUsdPmt", xmlNamespace );
            InterestForUsedPaymentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IndexFactor is RateAndAmountFormat1Choice_ IndexFactorValue)
        {
            writer.WriteStartElement(null, "IndxFctr", xmlNamespace );
            IndexFactorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FullyFranked is RateAndAmountFormat1Choice_ FullyFrankedValue)
        {
            writer.WriteStartElement(null, "FullyFrnkd", xmlNamespace );
            FullyFrankedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GrossDividend is GrossDividendRate1Choice_ GrossDividendValue)
        {
            writer.WriteStartElement(null, "GrssDvdd", xmlNamespace );
            GrossDividendValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetDividend is NetDividendRate1Choice_ NetDividendValue)
        {
            writer.WriteStartElement(null, "NetDvdd", xmlNamespace );
            NetDividendValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinalDividend is AmountAndRateFormat2Choice_ FinalDividendValue)
        {
            writer.WriteStartElement(null, "FnlDvdd", xmlNamespace );
            FinalDividendValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProvisionalDividend is AmountAndRateFormat2Choice_ ProvisionalDividendValue)
        {
            writer.WriteStartElement(null, "PrvsnlDvdd", xmlNamespace );
            ProvisionalDividendValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashIncentive is RateFormat1Choice_ CashIncentiveValue)
        {
            writer.WriteStartElement(null, "CshIncntiv", xmlNamespace );
            CashIncentiveValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SolicitationFee is RateFormat1Choice_ SolicitationFeeValue)
        {
            writer.WriteStartElement(null, "SlctnFee", xmlNamespace );
            SolicitationFeeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MaximumAllowedOversubscription is RateFormat1Choice_ MaximumAllowedOversubscriptionValue)
        {
            writer.WriteStartElement(null, "MaxAllwdOvrsbcpt", xmlNamespace );
            MaximumAllowedOversubscriptionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalTax is RateAndAmountFormat1Choice_ AdditionalTaxValue)
        {
            writer.WriteStartElement(null, "AddtlTax", xmlNamespace );
            AdditionalTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginalAmount is IsoActiveCurrencyAndAmount OriginalAmountValue)
        {
            writer.WriteStartElement(null, "OrgnlAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(OriginalAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ExchangeRate is ForeignExchangeTerms8 ExchangeRateValue)
        {
            writer.WriteStartElement(null, "XchgRate", xmlNamespace );
            ExchangeRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ApplicableRate is RateFormat1Choice_ ApplicableRateValue)
        {
            writer.WriteStartElement(null, "AplblRate", xmlNamespace );
            ApplicableRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionRate2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
