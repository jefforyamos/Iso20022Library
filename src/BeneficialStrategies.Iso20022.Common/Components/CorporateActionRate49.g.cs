//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionRate49.  ISO2002 ID# _z-RvISnpEeOFFarFEDwxng.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies rate details.
/// </summary>
public partial record CorporateActionRate49
     : IIsoXmlSerilizable<CorporateActionRate49>
{
    #nullable enable
    
    /// <summary>
    /// Quantity of additional intermediate securities/new equities awarded for a given quantity of securities derived from subscription.
    /// </summary>
    public RatioFormat3Choice_? AdditionalQuantityForSubscribedResultantSecurities { get; init; } 
    /// <summary>
    /// Quantity of additional securities for a given quantity of underlying securities where underlying securities are not exchanged or debited, for example, 1 for 1: 1 new equity credited for every 1 underlying equity = 2 resulting equities.
    /// </summary>
    public RatioFormat3Choice_? AdditionalQuantityForExistingSecurities { get; init; } 
    /// <summary>
    /// Quantity of new securities for a given quantity of underlying securities, where the underlying securities will be exchanged or debited, for example, 2 for 1: 2 new equities credited for every 1 underlying equity debited = 2 resulting equities.
    /// </summary>
    public RatioFormat15Choice_? NewToOld { get; init; } 
    /// <summary>
    /// Rate used to calculate the amount of the charges/fees that cannot be categorised.
    /// </summary>
    public RateAndAmountFormat5Choice_? ChargesFees { get; init; } 
    /// <summary>
    /// Percentage of fiscal tax to apply.
    /// </summary>
    public IsoPercentageRate? FiscalStamp { get; init; } 
    /// <summary>
    /// Rate applicable to the event announced, for example, redemption rate for a redemption event.
    /// </summary>
    public IsoPercentageRate? ApplicableRate { get; init; } 
    /// <summary>
    /// Amount of money per equity allocated as the result of a tax credit.
    /// </summary>
    public TaxCreditRateFormat2Choice_? TaxCreditRate { get; init; } 
    /// <summary>
    /// Rate of financial transaction tax.
    /// </summary>
    public IsoPercentageRate? FinancialTransactionTaxRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AdditionalQuantityForSubscribedResultantSecurities is RatioFormat3Choice_ AdditionalQuantityForSubscribedResultantSecuritiesValue)
        {
            writer.WriteStartElement(null, "AddtlQtyForSbcbdRsltntScties", xmlNamespace );
            AdditionalQuantityForSubscribedResultantSecuritiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalQuantityForExistingSecurities is RatioFormat3Choice_ AdditionalQuantityForExistingSecuritiesValue)
        {
            writer.WriteStartElement(null, "AddtlQtyForExstgScties", xmlNamespace );
            AdditionalQuantityForExistingSecuritiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewToOld is RatioFormat15Choice_ NewToOldValue)
        {
            writer.WriteStartElement(null, "NewToOd", xmlNamespace );
            NewToOldValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargesFees is RateAndAmountFormat5Choice_ ChargesFeesValue)
        {
            writer.WriteStartElement(null, "ChrgsFees", xmlNamespace );
            ChargesFeesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FiscalStamp is IsoPercentageRate FiscalStampValue)
        {
            writer.WriteStartElement(null, "FsclStmp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(FiscalStampValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (ApplicableRate is IsoPercentageRate ApplicableRateValue)
        {
            writer.WriteStartElement(null, "AplblRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(ApplicableRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TaxCreditRate is TaxCreditRateFormat2Choice_ TaxCreditRateValue)
        {
            writer.WriteStartElement(null, "TaxCdtRate", xmlNamespace );
            TaxCreditRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinancialTransactionTaxRate is IsoPercentageRate FinancialTransactionTaxRateValue)
        {
            writer.WriteStartElement(null, "FinTxTaxRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(FinancialTransactionTaxRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
    }
    public static CorporateActionRate49 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
