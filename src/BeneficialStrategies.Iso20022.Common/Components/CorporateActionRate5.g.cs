//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionRate5.  ISO2002 ID# _TYZdOtp-Ed-ak6NoX_4Aeg_-1791515077.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies rates related to a corporate action option.
/// </summary>
public partial record CorporateActionRate5
     : IIsoXmlSerilizable<CorporateActionRate5>
{
    #nullable enable
    
    /// <summary>
    /// Rate used for additional tax that cannot be categorised.
    /// </summary>
    public RateAndAmountFormat3Choice_? AdditionalTax { get; init; } 
    /// <summary>
    /// Rate used to calculate the amount of the charges/fees that cannot be categorised.
    /// </summary>
    public RateAndAmountFormat3Choice_? ChargesFees { get; init; } 
    /// <summary>
    /// Dividend is final.
    /// </summary>
    public RateAndAmountFormat4Choice_? FinalDividendRate { get; init; } 
    /// <summary>
    /// Percentage of fiscal tax to apply.
    /// </summary>
    public RateFormat2Choice_? FiscalStamp { get; init; } 
    /// <summary>
    /// Rate resulting from a fully franked dividend paid by a company; rate includes tax credit for companies that have made sufficient tax payments during fiscal period.
    /// </summary>
    public RateAndAmountFormat3Choice_? FullyFrankedRate { get; init; } 
    /// <summary>
    /// Cash dividend amount per equity before deductions or allowances have been made.
    /// </summary>
    public GrossDividendRateFormat1Choice_? GrossDividendRate { get; init; } 
    /// <summary>
    /// Rate of the cash premium made available if the securities holder consents or participates to an event, for example, consent fees.
    /// </summary>
    public RateFormat2Choice_? CashIncentiveRate { get; init; } 
    /// <summary>
    /// Public index rate applied to the amount paid to adjust it to inflation.
    /// </summary>
    public RateAndAmountFormat3Choice_? IndexFactor { get; init; } 
    /// <summary>
    /// The actual interest rate used for the payment of the interest for the specified interest period. |Usage guideline: It is used to provide the applicable rate for the current payment, after all calculations have been performed, that is, application of period and method of interest computation.
    /// </summary>
    public InterestRateUsedForPaymentFormat1Choice_? InterestRateUsedForPayment { get; init; } 
    /// <summary>
    /// Cash dividend amount per equity after deductions or allowances have been made.
    /// </summary>
    public NetDividendRateFormat1Choice_? NetDividendRate { get; init; } 
    /// <summary>
    /// Rate per share to which a non-resident is entitled.
    /// </summary>
    public RateAndAmountFormat3Choice_? NonResidentRate { get; init; } 
    /// <summary>
    /// Maximum percentage of shares available through the over subscription privilege, usually a percentage of the basic subscription shares, for example, an account owner subscribing to 100 shares may over subscribe to a maximum of 50 additional shares when the over subscription maximum is 50 percent.
    /// </summary>
    public RateFormat2Choice_? MaximumAllowedOversubscriptionRate { get; init; } 
    /// <summary>
    /// Dividend is provisional.
    /// </summary>
    public RateAndAmountFormat4Choice_? ProvisionalDividendRate { get; init; } 
    /// <summary>
    /// Amount of money per equity allocated as the result of a tax credit.
    /// </summary>
    public TaxCreditRateFormat1Choice_? TaxCreditRate { get; init; } 
    /// <summary>
    /// Proportionate allocation used for the offer.
    /// </summary>
    public RateFormat2Choice_? ProrationRate { get; init; } 
    /// <summary>
    /// Cash rate made available in an offer in order to encourage participation in the offer.
    /// </summary>
    public SolicitationFeeRateFormat1Choice_? SolicitationFeeRate { get; init; } 
    /// <summary>
    /// Cash rate made available, as an incentive, in addition to the solicitation fee, in order to encourage early participation in an offer.
    /// </summary>
    public SolicitationFeeRateFormat1Choice_? EarlySolicitationFeeRate { get; init; } 
    /// <summary>
    /// Percentage of a cash distribution that will be withheld by a tax authority.
    /// </summary>
    public RateFormat2Choice_? WithholdingTaxRate { get; init; } 
    /// <summary>
    /// Taxation applied on an amount clearly identified as an income.
    /// </summary>
    public RateFormat2Choice_? TaxOnIncome { get; init; } 
    /// <summary>
    /// Taxation applied on an amount clearly identified as capital profits, capital gains.
    /// </summary>
    public RateFormat2Choice_? TaxOnProfits { get; init; } 
    /// <summary>
    /// Percentage of cash that was paid in excess of actual tax obligation and was reclaimed.
    /// </summary>
    public RateFormat2Choice_? TaxReclaimRate { get; init; } 
    /// <summary>
    /// Rate at which the income will be withheld by the jurisdiction in which the income was originally paid, for which relief at source and/or reclaim may be possible.
    /// </summary>
    public RateAndAmountFormat3Choice_? WithholdingOfForeignTax { get; init; } 
    /// <summary>
    /// Rate at which the income will be withheld by the jurisdiction in which the account owner is located, for which relief at source and/or reclaim may be possible.
    /// </summary>
    public RateAndAmountFormat3Choice_? WithholdingOfLocalTax { get; init; } 
    /// <summary>
    /// Percentage of the gross dividend rate on which tax must be paid.
    /// </summary>
    public RateTypeAndAmountAndStatus6? TaxRelatedRate { get; init; } 
    /// <summary>
    /// Rate applicable to the event announced, for example, redemption rate for a redemption event.
    /// </summary>
    public RateFormat2Choice_? ApplicableRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AdditionalTax is RateAndAmountFormat3Choice_ AdditionalTaxValue)
        {
            writer.WriteStartElement(null, "AddtlTax", xmlNamespace );
            AdditionalTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargesFees is RateAndAmountFormat3Choice_ ChargesFeesValue)
        {
            writer.WriteStartElement(null, "ChrgsFees", xmlNamespace );
            ChargesFeesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinalDividendRate is RateAndAmountFormat4Choice_ FinalDividendRateValue)
        {
            writer.WriteStartElement(null, "FnlDvddRate", xmlNamespace );
            FinalDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FiscalStamp is RateFormat2Choice_ FiscalStampValue)
        {
            writer.WriteStartElement(null, "FsclStmp", xmlNamespace );
            FiscalStampValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FullyFrankedRate is RateAndAmountFormat3Choice_ FullyFrankedRateValue)
        {
            writer.WriteStartElement(null, "FullyFrnkdRate", xmlNamespace );
            FullyFrankedRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GrossDividendRate is GrossDividendRateFormat1Choice_ GrossDividendRateValue)
        {
            writer.WriteStartElement(null, "GrssDvddRate", xmlNamespace );
            GrossDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashIncentiveRate is RateFormat2Choice_ CashIncentiveRateValue)
        {
            writer.WriteStartElement(null, "CshIncntivRate", xmlNamespace );
            CashIncentiveRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IndexFactor is RateAndAmountFormat3Choice_ IndexFactorValue)
        {
            writer.WriteStartElement(null, "IndxFctr", xmlNamespace );
            IndexFactorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InterestRateUsedForPayment is InterestRateUsedForPaymentFormat1Choice_ InterestRateUsedForPaymentValue)
        {
            writer.WriteStartElement(null, "IntrstRateUsdForPmt", xmlNamespace );
            InterestRateUsedForPaymentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetDividendRate is NetDividendRateFormat1Choice_ NetDividendRateValue)
        {
            writer.WriteStartElement(null, "NetDvddRate", xmlNamespace );
            NetDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NonResidentRate is RateAndAmountFormat3Choice_ NonResidentRateValue)
        {
            writer.WriteStartElement(null, "NonResdtRate", xmlNamespace );
            NonResidentRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MaximumAllowedOversubscriptionRate is RateFormat2Choice_ MaximumAllowedOversubscriptionRateValue)
        {
            writer.WriteStartElement(null, "MaxAllwdOvrsbcptRate", xmlNamespace );
            MaximumAllowedOversubscriptionRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProvisionalDividendRate is RateAndAmountFormat4Choice_ ProvisionalDividendRateValue)
        {
            writer.WriteStartElement(null, "PrvsnlDvddRate", xmlNamespace );
            ProvisionalDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxCreditRate is TaxCreditRateFormat1Choice_ TaxCreditRateValue)
        {
            writer.WriteStartElement(null, "TaxCdtRate", xmlNamespace );
            TaxCreditRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProrationRate is RateFormat2Choice_ ProrationRateValue)
        {
            writer.WriteStartElement(null, "PrratnRate", xmlNamespace );
            ProrationRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SolicitationFeeRate is SolicitationFeeRateFormat1Choice_ SolicitationFeeRateValue)
        {
            writer.WriteStartElement(null, "SlctnFeeRate", xmlNamespace );
            SolicitationFeeRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EarlySolicitationFeeRate is SolicitationFeeRateFormat1Choice_ EarlySolicitationFeeRateValue)
        {
            writer.WriteStartElement(null, "EarlySlctnFeeRate", xmlNamespace );
            EarlySolicitationFeeRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingTaxRate is RateFormat2Choice_ WithholdingTaxRateValue)
        {
            writer.WriteStartElement(null, "WhldgTaxRate", xmlNamespace );
            WithholdingTaxRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxOnIncome is RateFormat2Choice_ TaxOnIncomeValue)
        {
            writer.WriteStartElement(null, "TaxOnIncm", xmlNamespace );
            TaxOnIncomeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxOnProfits is RateFormat2Choice_ TaxOnProfitsValue)
        {
            writer.WriteStartElement(null, "TaxOnPrfts", xmlNamespace );
            TaxOnProfitsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxReclaimRate is RateFormat2Choice_ TaxReclaimRateValue)
        {
            writer.WriteStartElement(null, "TaxRclmRate", xmlNamespace );
            TaxReclaimRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingOfForeignTax is RateAndAmountFormat3Choice_ WithholdingOfForeignTaxValue)
        {
            writer.WriteStartElement(null, "WhldgOfFrgnTax", xmlNamespace );
            WithholdingOfForeignTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingOfLocalTax is RateAndAmountFormat3Choice_ WithholdingOfLocalTaxValue)
        {
            writer.WriteStartElement(null, "WhldgOfLclTax", xmlNamespace );
            WithholdingOfLocalTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxRelatedRate is RateTypeAndAmountAndStatus6 TaxRelatedRateValue)
        {
            writer.WriteStartElement(null, "TaxRltdRate", xmlNamespace );
            TaxRelatedRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ApplicableRate is RateFormat2Choice_ ApplicableRateValue)
        {
            writer.WriteStartElement(null, "AplblRate", xmlNamespace );
            ApplicableRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionRate5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
