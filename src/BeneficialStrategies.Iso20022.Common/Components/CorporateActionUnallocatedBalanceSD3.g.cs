//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CorporateActionUnallocatedBalanceSD3.  ISO2002 ID# _QvgRnb-8Eeeb2ZBoAlSG1Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Balance types related to an unallocated redemption payment.
/// </summary>
public partial record CorporateActionUnallocatedBalanceSD3
     : IIsoXmlSerilizable<CorporateActionUnallocatedBalanceSD3>
{
    #nullable enable
    
    /// <summary>
    /// Total quantity of financial instruments of the balance.
    /// </summary>
    public SignedQuantityFormat9? TotalEligibleBalance { get; init; } 
    /// <summary>
    /// The quantity that has been determined to be redeemed if the participant had
    /// position in a redemption security.
    /// </summary>
    public SignedQuantityFormat9? AffectedBalance { get; init; } 
    /// <summary>
    /// Positions balance remaining after lottery is run.
    /// </summary>
    public SignedQuantityFormat9? UnaffectedBalance { get; init; } 
    /// <summary>
    /// Position that account holders should return to the account servicer to participate in the event or to fulfil their obligation for the event to be complete, for example, return of securities for late announced drawing.
    /// </summary>
    public SignedQuantityFormat9? ObligatedBalance { get; init; } 
    /// <summary>
    /// Position held in a security as of the day prior to publication date. This position is subject to a redemption lottery call when this is the first lottery. This balance will not be adjusted for the supplemental or concurrent lotteries and will remain constant to report the original position.
    /// </summary>
    public SignedQuantityFormat9? OriginalBalance { get; init; } 
    /// <summary>
    /// Portion of the original balance position held in DTC general free account as of day prior to publication date. Position held in this account is subject to redemption lottery call.
    /// </summary>
    public SignedQuantityFormat9? PledgedBalance { get; init; } 
    /// <summary>
    /// Portion of the original balance position held in DTC general free account as of day prior to publication date. Position held in this account is subject to redemption lottery call.
    /// </summary>
    public SignedQuantityFormat9? UnpledgedBalance { get; init; } 
    /// <summary>
    /// Portion of the original balance position held in DTC investment account as of day prior to publication date. Position held in this account is subject to redemption lottery call and must be released to allow allocation.
    /// </summary>
    public SignedQuantityFormat9? InvestmentPledgedBalance { get; init; } 
    /// <summary>
    /// Portion of the original balance position held in DTC segregated account as of day prior to publication date. Position held in this account is subject to redemption lottery call and must be released to allow allocation.
    /// </summary>
    public SignedQuantityFormat9? InvestmentUnpledgedBalance { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TotalEligibleBalance is SignedQuantityFormat9 TotalEligibleBalanceValue)
        {
            writer.WriteStartElement(null, "TtlElgblBal", xmlNamespace );
            TotalEligibleBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AffectedBalance is SignedQuantityFormat9 AffectedBalanceValue)
        {
            writer.WriteStartElement(null, "AfctdBal", xmlNamespace );
            AffectedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnaffectedBalance is SignedQuantityFormat9 UnaffectedBalanceValue)
        {
            writer.WriteStartElement(null, "UafctdBal", xmlNamespace );
            UnaffectedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ObligatedBalance is SignedQuantityFormat9 ObligatedBalanceValue)
        {
            writer.WriteStartElement(null, "OblgtdBal", xmlNamespace );
            ObligatedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginalBalance is SignedQuantityFormat9 OriginalBalanceValue)
        {
            writer.WriteStartElement(null, "OrgnlBal", xmlNamespace );
            OriginalBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PledgedBalance is SignedQuantityFormat9 PledgedBalanceValue)
        {
            writer.WriteStartElement(null, "PldgdBal", xmlNamespace );
            PledgedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnpledgedBalance is SignedQuantityFormat9 UnpledgedBalanceValue)
        {
            writer.WriteStartElement(null, "UpldgdBal", xmlNamespace );
            UnpledgedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InvestmentPledgedBalance is SignedQuantityFormat9 InvestmentPledgedBalanceValue)
        {
            writer.WriteStartElement(null, "InvstmtPldgdBal", xmlNamespace );
            InvestmentPledgedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InvestmentUnpledgedBalance is SignedQuantityFormat9 InvestmentUnpledgedBalanceValue)
        {
            writer.WriteStartElement(null, "InvstmtUpldgdBal", xmlNamespace );
            InvestmentUnpledgedBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CorporateActionUnallocatedBalanceSD3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
