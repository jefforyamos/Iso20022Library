//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CounterpartyData77.  ISO2002 ID# _4j8ct7HYEemRPNDOvJwndA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data related specifically to counterparty.
/// </summary>
public partial record CounterpartyData77
     : IIsoXmlSerilizable<CounterpartyData77>
{
    #nullable enable
    
    /// <summary>
    /// Information describing the reporting counterparty.
    /// </summary>
    public required CounterpartyIdentification4 ReportingCounterparty { get; init; } 
    /// <summary>
    /// Data specific to other counterparties and related fields.
    /// </summary>
    public required CounterpartyIdentification2 OtherCounterparty { get; init; } 
    /// <summary>
    /// In the case where a financial counterparty is responsible for reporting on behalf of the other counterparty, the unique code identifying that counterparty. In the case where a management company is responsible for reporting on behalf of an Undertaking for Collective Investment in Transferable Securities (UCITS), the unique code identifying that management company. In the case where an Alternative Investment Fund Manager (AIFM) is responsible for reporting on behalf of an Alternative Investment Fund (AIF), the unique code identifying that AIFM.
    /// </summary>
    public OrganisationIdentification9Choice_? EntityResponsibleForReport { get; init; } 
    /// <summary>
    /// Information on the other parties.
    /// </summary>
    public TransactionCounterpartyData8? OtherPartyData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptgCtrPty", xmlNamespace );
        ReportingCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OthrCtrPty", xmlNamespace );
        OtherCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EntityResponsibleForReport is OrganisationIdentification9Choice_ EntityResponsibleForReportValue)
        {
            writer.WriteStartElement(null, "NttyRspnsblForRpt", xmlNamespace );
            EntityResponsibleForReportValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherPartyData is TransactionCounterpartyData8 OtherPartyDataValue)
        {
            writer.WriteStartElement(null, "OthrPtyData", xmlNamespace );
            OtherPartyDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CounterpartyData77 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
