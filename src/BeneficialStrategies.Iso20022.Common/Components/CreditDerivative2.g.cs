//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CreditDerivative2.  ISO2002 ID# _yvKMUbyOEeaUov4jN5X9Qw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related specifically to credit derivatives attributes.
/// </summary>
public partial record CreditDerivative2
{
    #nullable enable
    
    /// <summary>
    /// Classification of seniority in case of contract on index or on a single name entity.
    /// </summary>
    public DebtInstrumentSeniorityType2Code? Seniority { get; init; } 
    /// <summary>
    /// Designation of the underlying reference obligation.
    /// </summary>
    public IDerivativePartyIdentification1Choice? ReferenceParty { get; init; } 
    /// <summary>
    /// Frequency of payment of the interest rate or coupon.
    /// </summary>
    public Frequency8Code? PaymentFrequency { get; init; } 
    /// <summary>
    /// Calculation basis of the interest rate, such as Act/360.
    /// </summary>
    public IsoMax35Text? CalculationBasis { get; init; } 
    /// <summary>
    /// Indicates the series number of the composition of the index if applicable.
    /// </summary>
    public IsoNumber? Series { get; init; } 
    /// <summary>
    /// New version of a series is issued if one of the constituents defaults and the index has to be re-weighted to account for the new number of total constituents within the index.
    /// </summary>
    public IsoNumber? Version { get; init; } 
    /// <summary>
    /// Factor to apply to the actual notional to adjust it to all the previous credit events in the index series. 
    /// Usage: The figure varies between 0 and 100.
    /// </summary>
    public IsoPercentageRate? IndexFactor { get; init; } 
    /// <summary>
    /// Indicates whether the derivative contract is tranched or not.
    /// </summary>
    public ITrancheIndicator2Choice? Tranche { get; init; } 
    
    #nullable disable
}
