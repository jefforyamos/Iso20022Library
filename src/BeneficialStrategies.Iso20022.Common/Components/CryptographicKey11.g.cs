//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CryptographicKey11.  ISO2002 ID# _Dfc_ILTkEeeQy4o2AayYHg.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Cryptographic Key component.
/// </summary>
public partial record CryptographicKey11
{
    #nullable enable
    
    /// <summary>
    /// Name or label of the key.
    /// </summary>
    public IsoMax140Text? Name { get; init; } 
    /// <summary>
    /// Name of the cryptographic key.
    /// </summary>
    public IsoMax140Text? Identification { get; init; } 
    /// <summary>
    /// Identification of the security domain.
    /// </summary>
    public IsoMax35Text? SecurityDomainIdentification { get; init; } 
    /// <summary>
    /// Additional identification of the key, for instance to derive the key.
    /// </summary>
    public IsoMax35Binary? AdditionalIdentification { get; init; } 
    /// <summary>
    /// Version of the cryptographic key.
    /// </summary>
    public IsoMax256Text? Version { get; init; } 
    /// <summary>
    /// Sequence counter of the cryptographic key.
    /// </summary>
    public IsoNumber? SequenceCounter { get; init; } 
    /// <summary>
    /// Type of algorithm used by the cryptographic key.
    /// </summary>
    public required CryptographicKeyType3Code Type { get; init; } 
    /// <summary>
    /// Allowed usage of the key.
    /// </summary>
    public KeyUsage1Code? Function { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Date and time on which the key must be activated.
    /// </summary>
    public IsoISODateTime? ActivationDate { get; init; } 
    /// <summary>
    /// Date and time on which the key must be deactivated.
    /// </summary>
    public IsoISODateTime? DeactivationDate { get; init; } 
    /// <summary>
    /// Value for checking a cryptographic key.
    /// </summary>
    public IsoMax35Binary? KeyCheckValue { get; init; } 
    /// <summary>
    /// Current status of the key.
    /// </summary>
    public required ATMStatus3Code CurrentStatus { get; init; } 
    /// <summary>
    /// Reason for which the key has been stopped.
    /// </summary>
    public FailureReason6Code? FailureReason { get; init; } 
    
    #nullable disable
}
