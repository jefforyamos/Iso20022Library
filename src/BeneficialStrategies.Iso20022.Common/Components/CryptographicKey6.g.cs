//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CryptographicKey6.  ISO2002 ID# _t5utsXvOEeSCJdwgzb6SFw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Cryptographic Key.
/// </summary>
public partial record CryptographicKey6
     : IIsoXmlSerilizable<CryptographicKey6>
{
    #nullable enable
    
    /// <summary>
    /// Name or label of the key.
    /// </summary>
    public IsoMax140Text? Name { get; init; } 
    /// <summary>
    /// Name of the cryptographic key.
    /// </summary>
    public required IsoMax140Text Identification { get; init; } 
    /// <summary>
    /// Version of the cryptographic key.
    /// </summary>
    public IsoMax256Text? Version { get; init; } 
    /// <summary>
    /// Type of algorithm used by the cryptographic key.
    /// </summary>
    public required CryptographicKeyType3Code Type { get; init; } 
    /// <summary>
    /// Allowed usage of the key.
    /// </summary>
    public KeyUsage1Code? Function { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _uGPfuXvOEeSCJdwgzb6SFw
    /// <summary>
    /// Date and time on which the key must be activated.
    /// </summary>
    public IsoISODateTime? ActivationDate { get; init; } 
    /// <summary>
    /// Date and time on which the key must be deactivated.
    /// </summary>
    public IsoISODateTime? DeactivationDate { get; init; } 
    /// <summary>
    /// Encrypted value of the key present as CMS structure EnvelopedData.
    /// </summary>
    public ContentInformationType10? EncryptedKeyValue { get; init; } 
    /// <summary>
    /// Certificate to protect the key.
    /// </summary>
    public IsoMax5000Binary? Certificate { get; init; } 
    /// <summary>
    /// Chip card protection of the key.
    /// </summary>
    public IsoMax5000Binary? ICCRelatedData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax140Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(NameValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax140Text(Identification)); // data type Max140Text System.String
        writer.WriteEndElement();
        if (Version is IsoMax256Text VersionValue)
        {
            writer.WriteStartElement(null, "Vrsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(VersionValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        // Not sure how to serialize Function, multiplicity Unknown
        if (ActivationDate is IsoISODateTime ActivationDateValue)
        {
            writer.WriteStartElement(null, "ActvtnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(ActivationDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (DeactivationDate is IsoISODateTime DeactivationDateValue)
        {
            writer.WriteStartElement(null, "DeactvtnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(DeactivationDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (EncryptedKeyValue is ContentInformationType10 EncryptedKeyValueValue)
        {
            writer.WriteStartElement(null, "NcrptdKeyVal", xmlNamespace );
            EncryptedKeyValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Certificate is IsoMax5000Binary CertificateValue)
        {
            writer.WriteStartElement(null, "Cert", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5000Binary(CertificateValue)); // data type Max5000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (ICCRelatedData is IsoMax5000Binary ICCRelatedDataValue)
        {
            writer.WriteStartElement(null, "ICCRltdData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5000Binary(ICCRelatedDataValue)); // data type Max5000Binary System.Byte[]
            writer.WriteEndElement();
        }
    }
    public static CryptographicKey6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
