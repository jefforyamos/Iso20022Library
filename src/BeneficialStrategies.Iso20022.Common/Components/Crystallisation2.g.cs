//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Crystallisation2.  ISO2002 ID# _18oYYTOOEeqjy7_SkdcoGg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Number of crystallised units.
/// </summary>
public partial record Crystallisation2
     : IIsoXmlSerilizable<Crystallisation2>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the tranche.
    /// </summary>
    public required IsoMax35Text TrancheIdentification { get; init; } 
    /// <summary>
    /// Number of units crystallised.
    /// </summary>
    public IsoDecimalNumber? CrystallisedUnitsNumber { get; init; } 
    /// <summary>
    /// Number of units uncrystallised.
    /// </summary>
    public IsoDecimalNumber? UncrystallisedUnitsNumber { get; init; } 
    /// <summary>
    /// Sum representing the crystallised amount.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? CrystallisedAmount { get; init; } 
    /// <summary>
    /// Sum representing the uncrystallised amount.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? UncrystallisedAmount { get; init; } 
    /// <summary>
    /// Additional information about the crystallisation.
    /// </summary>
    public AdditionalInformation15? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TrchId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TrancheIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (CrystallisedUnitsNumber is IsoDecimalNumber CrystallisedUnitsNumberValue)
        {
            writer.WriteStartElement(null, "CrstllsdUnitsNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(CrystallisedUnitsNumberValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (UncrystallisedUnitsNumber is IsoDecimalNumber UncrystallisedUnitsNumberValue)
        {
            writer.WriteStartElement(null, "UcrstllsdUnitsNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(UncrystallisedUnitsNumberValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (CrystallisedAmount is IsoActiveCurrencyAnd13DecimalAmount CrystallisedAmountValue)
        {
            writer.WriteStartElement(null, "CrstllsdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(CrystallisedAmountValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (UncrystallisedAmount is IsoActiveCurrencyAnd13DecimalAmount UncrystallisedAmountValue)
        {
            writer.WriteStartElement(null, "UcrstllsdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(UncrystallisedAmountValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AdditionalInformation is AdditionalInformation15 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Crystallisation2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
