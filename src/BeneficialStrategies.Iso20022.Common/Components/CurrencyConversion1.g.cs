//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CurrencyConversion1.  ISO2002 ID# _WaxKUEerEeODR7vDcYOqmg.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Conversion between the currency of a card acceptor and the currency of a card issuer, provided by a dedicated service provider. The currency conversion has to be accepted by the cardholder.
/// </summary>
public partial record CurrencyConversion1
{
    #nullable enable
    
    /// <summary>
    /// Identification of the currency conversion operation for the service provider.
    /// </summary>
    public IsoMax35Text? CurrencyConversionIdentification { get; init; } 
    /// <summary>
    /// Result of a requested currency conversion.
    /// </summary>
    public required CurrencyConversionResponse1Code Result { get; init; } 
    /// <summary>
    /// Plain text explaining the result of the currency conversion request.
    /// </summary>
    public IsoMax35Text? ResponseReason { get; init; } 
    /// <summary>
    /// Currency into which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    public required CurrencyCode TargetCurrency { get; init; } 
    /// <summary>
    /// Currency into which the amount is converted (ISO 4217, 3 numeric characters).
    /// </summary>
    public required IsoExact3NumericText TargetCurrencyNumeric { get; init; } 
    /// <summary>
    /// Maximal number of digits after the decimal separator for target currency.
    /// </summary>
    public required IsoNumber TargetCurrencyDecimal { get; init; } 
    /// <summary>
    /// Full name of the target currency.
    /// </summary>
    public IsoMax35Text? TargetCurrencyName { get; init; } 
    /// <summary>
    /// Amount converted in the target currency, including additional charges.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount ResultingAmount { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the original amount into the resulting amount.
    /// </summary>
    public required IsoPercentageRate ExchangeRate { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the resulting amount into the original amount.
    /// </summary>
    public IsoPercentageRate? InvertedExchangeRate { get; init; } 
    /// <summary>
    /// Date and time at which the exchange rate has been quoted.
    /// </summary>
    public IsoISODateTime? QuotationDate { get; init; } 
    /// <summary>
    /// Validity limit of the exchange rate.
    /// </summary>
    public IsoISODateTime? ValidUntil { get; init; } 
    /// <summary>
    /// Currency from which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    public required CurrencyCode SourceCurrency { get; init; } 
    /// <summary>
    /// Currency from which the amount is converted (ISO 4217, 3 numeric characters).
    /// </summary>
    public CurrencyCode? SourceCurrencyNumeric { get; init; } 
    /// <summary>
    /// Maximal number of digits after the decimal separator for source currency.
    /// </summary>
    public required IsoNumber SourceCurrencyDecimal { get; init; } 
    /// <summary>
    /// Full name of the source currency.
    /// </summary>
    public IsoMax35Text? SourceCurrencyName { get; init; } 
    /// <summary>
    /// Original amount in the source currency.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount OriginalAmount { get; init; } 
    /// <summary>
    /// Commission or additional charges made as part of a currency conversion.
    /// </summary>
    public Commission19? CommissionDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Markup made as part of a currency conversion.
    /// </summary>
    public Commission18? MarkUpDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Card scheme declaration (disclaimer) to present to the cardholder.
    /// </summary>
    public IsoMax2048Text? DeclarationDetails { get; init; } 
    
    #nullable disable
}
