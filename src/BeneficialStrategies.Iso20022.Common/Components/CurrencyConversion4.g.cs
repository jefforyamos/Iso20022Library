//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CurrencyConversion4.  ISO2002 ID# _Exik0YomEeSaAcF2oE2GNQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Currency conversion accepted by the customer, either to convert the amount to dispense in the base currency of the ATM, or to convert the total requested amount in the currency of the customer (so called dynamic currency conversion).
/// </summary>
[DataContract]
[XmlType]
public partial record CurrencyConversion4
{
    #nullable enable
    
    /// <summary>
    /// Identification of the currency conversion operation.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CurrencyConversionIdentification { get; init; } 
    /// <summary>
    /// Currency into which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    [DataMember]
    public required CurrencyDetails2 TargetCurrency { get; init; } 
    /// <summary>
    /// Amount converted in the target currency, including commission and mark-up.
    /// </summary>
    [DataMember]
    public required IsoImpliedCurrencyAndAmount ResultingAmount { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the original amount into the resulting amount.
    /// </summary>
    [DataMember]
    public required IsoPercentageRate ExchangeRate { get; init; } 
    /// <summary>
    /// Exchange rate expressed as a decimal, for example 0.7 is 7/10 and 70%.
    /// </summary>
    [DataMember]
    public IsoBaseOneRate? ExchangeRateDecimal { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the resulting amount into the original amount.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? InvertedExchangeRate { get; init; } 
    /// <summary>
    /// Date and time at which the exchange rate has been quoted.
    /// </summary>
    [DataMember]
    public IsoISODateTime? QuotationDate { get; init; } 
    /// <summary>
    /// Validity limit of the exchange rate.
    /// </summary>
    [DataMember]
    public IsoISODateTime? ValidUntil { get; init; } 
    /// <summary>
    /// Currency from which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    [DataMember]
    public required CurrencyDetails2 SourceCurrency { get; init; } 
    /// <summary>
    /// Original amount in the source currency.
    /// </summary>
    [DataMember]
    public required IsoImpliedCurrencyAndAmount OriginalAmount { get; init; } 
    /// <summary>
    /// Commission or additional charges made as part of a currency conversion.
    /// </summary>
    [DataMember]
    public ValueList<Commission19> CommissionDetails { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Mark-up made as part of a currency conversion.
    /// </summary>
    [DataMember]
    public ValueList<Commission18> MarkUpDetails { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Card scheme declaration (disclaimer) to present to the cardholder.
    /// </summary>
    [DataMember]
    public IsoMax2048Text? DeclarationDetails { get; init; } 
    
    #nullable disable
}
