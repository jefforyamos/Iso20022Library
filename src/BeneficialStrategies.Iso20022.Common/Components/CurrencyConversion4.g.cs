//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CurrencyConversion4.  ISO2002 ID# _Exik0YomEeSaAcF2oE2GNQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Currency conversion accepted by the customer, either to convert the amount to dispense in the base currency of the ATM, or to convert the total requested amount in the currency of the customer (so called dynamic currency conversion).
/// </summary>
public partial record CurrencyConversion4
     : IIsoXmlSerilizable<CurrencyConversion4>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the currency conversion operation.
    /// </summary>
    public IsoMax35Text? CurrencyConversionIdentification { get; init; } 
    /// <summary>
    /// Currency into which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    public required CurrencyDetails2 TargetCurrency { get; init; } 
    /// <summary>
    /// Amount converted in the target currency, including commission and mark-up.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount ResultingAmount { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the original amount into the resulting amount.
    /// </summary>
    public required IsoPercentageRate ExchangeRate { get; init; } 
    /// <summary>
    /// Exchange rate expressed as a decimal, for example 0.7 is 7/10 and 70%.
    /// </summary>
    public IsoBaseOneRate? ExchangeRateDecimal { get; init; } 
    /// <summary>
    /// Exchange rate, expressed as a percentage, applied to convert the resulting amount into the original amount.
    /// </summary>
    public IsoPercentageRate? InvertedExchangeRate { get; init; } 
    /// <summary>
    /// Date and time at which the exchange rate has been quoted.
    /// </summary>
    public IsoISODateTime? QuotationDate { get; init; } 
    /// <summary>
    /// Validity limit of the exchange rate.
    /// </summary>
    public IsoISODateTime? ValidUntil { get; init; } 
    /// <summary>
    /// Currency from which the amount is converted (ISO 4217, 3 alphanumeric characters).
    /// </summary>
    public required CurrencyDetails2 SourceCurrency { get; init; } 
    /// <summary>
    /// Original amount in the source currency.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount OriginalAmount { get; init; } 
    /// <summary>
    /// Commission or additional charges made as part of a currency conversion.
    /// </summary>
    public Commission19? CommissionDetails { get; init; } 
    /// <summary>
    /// Mark-up made as part of a currency conversion.
    /// </summary>
    public Commission18? MarkUpDetails { get; init; } 
    /// <summary>
    /// Card scheme declaration (disclaimer) to present to the cardholder.
    /// </summary>
    public IsoMax2048Text? DeclarationDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CurrencyConversionIdentification is IsoMax35Text CurrencyConversionIdentificationValue)
        {
            writer.WriteStartElement(null, "CcyConvsId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CurrencyConversionIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TrgtCcy", xmlNamespace );
        TargetCurrency.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RsltgAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(ResultingAmount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XchgRate", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoPercentageRate(ExchangeRate)); // data type PercentageRate System.Decimal
        writer.WriteEndElement();
        if (ExchangeRateDecimal is IsoBaseOneRate ExchangeRateDecimalValue)
        {
            writer.WriteStartElement(null, "XchgRateDcml", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOneRate(ExchangeRateDecimalValue)); // data type BaseOneRate System.Decimal
            writer.WriteEndElement();
        }
        if (InvertedExchangeRate is IsoPercentageRate InvertedExchangeRateValue)
        {
            writer.WriteStartElement(null, "NvrtdXchgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(InvertedExchangeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (QuotationDate is IsoISODateTime QuotationDateValue)
        {
            writer.WriteStartElement(null, "QtnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(QuotationDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (ValidUntil is IsoISODateTime ValidUntilValue)
        {
            writer.WriteStartElement(null, "VldUntil", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(ValidUntilValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "SrcCcy", xmlNamespace );
        SourceCurrency.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OrgnlAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(OriginalAmount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (CommissionDetails is Commission19 CommissionDetailsValue)
        {
            writer.WriteStartElement(null, "ComssnDtls", xmlNamespace );
            CommissionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarkUpDetails is Commission18 MarkUpDetailsValue)
        {
            writer.WriteStartElement(null, "MrkUpDtls", xmlNamespace );
            MarkUpDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeclarationDetails is IsoMax2048Text DeclarationDetailsValue)
        {
            writer.WriteStartElement(null, "DclrtnDtls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2048Text(DeclarationDetailsValue)); // data type Max2048Text System.String
            writer.WriteEndElement();
        }
    }
    public static CurrencyConversion4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
