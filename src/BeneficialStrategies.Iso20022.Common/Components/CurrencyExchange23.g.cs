//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CurrencyExchange23.  ISO2002 ID# _23CooCrJEe2_XNkEScEJ5w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Describes the details of the currency exchange.
/// </summary>
public partial record CurrencyExchange23
     : IIsoXmlSerilizable<CurrencyExchange23>
{
    #nullable enable
    
    /// <summary>
    /// Indicates the currency.
    /// </summary>
    public required ActiveOrHistoricCurrencyCode Currency { get; init; } 
    /// <summary>
    /// Indicates the exchange rate between the two currencies specified in the derivative transaction agreed by the counterparties at the inception of the transaction, expressed as the rate of exchange from converting the unit currency into the quoted currency.
    /// </summary>
    public IsoBaseOne18Rate? ExchangeRate { get; init; } 
    /// <summary>
    /// Forward exchange rate as agreed between the counterparties in the contractual agreement, expressed as a price of base currency in the quoted currency.
    /// </summary>
    public IsoBaseOne18Rate? ForwardExchangeRate { get; init; } 
    /// <summary>
    /// Indicates, for equity options, commodity options and similar products, the currency in which the strike price is denominated.  In case of foreign exchange options, indicates the currency pair and order in which the strike price is expressed as unit currency and quoted currency.
    /// </summary>
    public ExchangeRateBasis1Choice_? ExchangeRateBasis { get; init; } 
    /// <summary>
    /// Specifies the date when a derivative will fix against an interest rate or an exchange rate that will be used to compute the cash settlement.
    /// </summary>
    public IsoISODateTime? FixingDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Ccy", xmlNamespace );
        writer.WriteValue(Currency.ToString()); // Enum value
        writer.WriteEndElement();
        if (ExchangeRate is IsoBaseOne18Rate ExchangeRateValue)
        {
            writer.WriteStartElement(null, "XchgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOne18Rate(ExchangeRateValue)); // data type BaseOne18Rate System.Decimal
            writer.WriteEndElement();
        }
        if (ForwardExchangeRate is IsoBaseOne18Rate ForwardExchangeRateValue)
        {
            writer.WriteStartElement(null, "FwdXchgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOne18Rate(ForwardExchangeRateValue)); // data type BaseOne18Rate System.Decimal
            writer.WriteEndElement();
        }
        if (ExchangeRateBasis is ExchangeRateBasis1Choice_ ExchangeRateBasisValue)
        {
            writer.WriteStartElement(null, "XchgRateBsis", xmlNamespace );
            ExchangeRateBasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FixingDate is IsoISODateTime FixingDateValue)
        {
            writer.WriteStartElement(null, "FxgDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(FixingDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
    }
    public static CurrencyExchange23 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
