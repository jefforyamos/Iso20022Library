//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CurrencyExchangeCriteria2.  ISO2002 ID# _H5cuNZlZEeeE1Ya-LgRsuQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the criteria used to search for currency exchange information. A name may be given to the new query.
/// </summary>
public partial record CurrencyExchangeCriteria2
     : IIsoXmlSerilizable<CurrencyExchangeCriteria2>
{
    #nullable enable
    
    /// <summary>
    /// Name of the query defined by the search criteria and return criteria.
    /// </summary>
    public IsoMax35Text? NewQueryName { get; init; } 
    /// <summary>
    /// Defines the criteria based on which the information is extracted.
    /// </summary>
    public CurrencyExchangeSearchCriteria1? SearchCriteria { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _IB7705lZEeeE1Ya-LgRsuQ
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (NewQueryName is IsoMax35Text NewQueryNameValue)
        {
            writer.WriteStartElement(null, "NewQryNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NewQueryNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        // Not sure how to serialize SearchCriteria, multiplicity Unknown
    }
    public static CurrencyExchangeCriteria2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
