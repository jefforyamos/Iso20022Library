//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CustodyStatementOfHoldings2.  ISO2002 ID# _RPKf0tp-Ed-ak6NoX_4Aeg_1115213683.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about a custody statement of holdings.
/// </summary>
public partial record CustodyStatementOfHoldings2
     : IIsoXmlSerilizable<CustodyStatementOfHoldings2>
{
    #nullable enable
    
    /// <summary>
    /// General information related to the custody statement of holdings that is being cancelled.
    /// </summary>
    public Statement7? StatementGeneralDetails { get; init; } 
    /// <summary>
    /// Safekeeping or investment account of the statement that is being cancelled.
    /// </summary>
    public SafekeepingAccount2? AccountDetails { get; init; } 
    /// <summary>
    /// Net position of a segregated holding, in a single security, within the overall position held in a securities account.
    /// </summary>
    public AggregateBalanceInformation4? BalanceForAccount { get; init; } 
    /// <summary>
    /// Sub-account of the safekeeping or investment account.
    /// </summary>
    public SubAccountIdentification5? SubAccountDetails { get; init; } 
    /// <summary>
    /// Value of total holdings reported.
    /// </summary>
    public TotalValueInPageAndStatement? TotalValues { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public Extension1? Extension { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (StatementGeneralDetails is Statement7 StatementGeneralDetailsValue)
        {
            writer.WriteStartElement(null, "StmtGnlDtls", xmlNamespace );
            StatementGeneralDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountDetails is SafekeepingAccount2 AccountDetailsValue)
        {
            writer.WriteStartElement(null, "AcctDtls", xmlNamespace );
            AccountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceForAccount is AggregateBalanceInformation4 BalanceForAccountValue)
        {
            writer.WriteStartElement(null, "BalForAcct", xmlNamespace );
            BalanceForAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SubAccountDetails is SubAccountIdentification5 SubAccountDetailsValue)
        {
            writer.WriteStartElement(null, "SubAcctDtls", xmlNamespace );
            SubAccountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalValues is TotalValueInPageAndStatement TotalValuesValue)
        {
            writer.WriteStartElement(null, "TtlVals", xmlNamespace );
            TotalValuesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Extension is Extension1 ExtensionValue)
        {
            writer.WriteStartElement(null, "Xtnsn", xmlNamespace );
            ExtensionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CustodyStatementOfHoldings2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
