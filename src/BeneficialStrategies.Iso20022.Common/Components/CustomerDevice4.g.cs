//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for CustomerDevice4.  ISO2002 ID# _Uy_usYKvEeu4svNQ5N-l6w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the customer device.
/// </summary>
public partial record CustomerDevice4
     : IIsoXmlSerilizable<CustomerDevice4>
{
    #nullable enable
    
    /// <summary>
    /// Information about the customer device.
    /// </summary>
    public Device2? Device { get; init; } 
    /// <summary>
    /// Identification of the device.
    /// </summary>
    public DeviceIdentification1? DeviceIdentification { get; init; } 
    /// <summary>
    /// Device operating system information.
    /// </summary>
    public DeviceOperatingSystem1? OperatingSystem { get; init; } 
    /// <summary>
    /// Provider of the customer device.
    /// </summary>
    public IsoMax35Text? Provider { get; init; } 
    /// <summary>
    /// Additional customer device data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Device is Device2 DeviceValue)
        {
            writer.WriteStartElement(null, "Dvc", xmlNamespace );
            DeviceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeviceIdentification is DeviceIdentification1 DeviceIdentificationValue)
        {
            writer.WriteStartElement(null, "DvcId", xmlNamespace );
            DeviceIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OperatingSystem is DeviceOperatingSystem1 OperatingSystemValue)
        {
            writer.WriteStartElement(null, "OprgSys", xmlNamespace );
            OperatingSystemValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Provider is IsoMax35Text ProviderValue)
        {
            writer.WriteStartElement(null, "Prvdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ProviderValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CustomerDevice4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
