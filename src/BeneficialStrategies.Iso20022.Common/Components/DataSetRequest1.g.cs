//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DataSetRequest1.  ISO2002 ID# _QLwe0A0bEeqUVL7sB4m7NA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identification of requested data set.
/// </summary>
public partial record DataSetRequest1
     : IIsoXmlSerilizable<DataSetRequest1>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the required data set.
    /// </summary>
    public required DataSetIdentification8 Identification { get; init; } 
    /// <summary>
    /// Point of interaction challenge for cryptographic key injection.
    /// </summary>
    public IsoMax140Binary? POIChallenge { get; init; } 
    /// <summary>
    /// Terminal manager challenge for cryptographic key injection.
    /// </summary>
    public IsoMax140Binary? TMChallenge { get; init; } 
    /// <summary>
    /// Temporary encryption key that the host will use for protecting keys to download.
    /// </summary>
    public CryptographicKey14? SessionKey { get; init; } 
    /// <summary>
    /// Proof of delegation to be validated by the terminal manager receiving a status report from a new POI.
    /// </summary>
    public IsoMax5000Binary? DelegationProof { get; init; } 
    /// <summary>
    /// Protected proof of delegation.
    /// </summary>
    public ContentInformationType23? ProtectedDelegationProof { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (POIChallenge is IsoMax140Binary POIChallengeValue)
        {
            writer.WriteStartElement(null, "POIChllng", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Binary(POIChallengeValue)); // data type Max140Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (TMChallenge is IsoMax140Binary TMChallengeValue)
        {
            writer.WriteStartElement(null, "TMChllng", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Binary(TMChallengeValue)); // data type Max140Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (SessionKey is CryptographicKey14 SessionKeyValue)
        {
            writer.WriteStartElement(null, "SsnKey", xmlNamespace );
            SessionKeyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DelegationProof is IsoMax5000Binary DelegationProofValue)
        {
            writer.WriteStartElement(null, "DlgtnProof", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5000Binary(DelegationProofValue)); // data type Max5000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (ProtectedDelegationProof is ContentInformationType23 ProtectedDelegationProofValue)
        {
            writer.WriteStartElement(null, "PrtctdDlgtnProof", xmlNamespace );
            ProtectedDelegationProofValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DataSetRequest1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
