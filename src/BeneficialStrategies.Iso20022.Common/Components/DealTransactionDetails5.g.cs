//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DealTransactionDetails5.  ISO2002 ID# _udySIRIbEeyLzJfz3xPQNA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the triparty collateral transaction deal.
/// </summary>
public partial record DealTransactionDetails5
     : IIsoXmlSerilizable<DealTransactionDetails5>
{
    #nullable enable
    
    /// <summary>
    /// Place at which the instrument was traded.
    /// </summary>
    public PlaceOfTradeIdentification1? PlaceOfTrade { get; init; } 
    /// <summary>
    /// Indicates whether a concentration limit applies to the transaction; if no limit applies, there is no constraint on how much of the collateral basket can be made up of one security.
    /// </summary>
    public IsoYesNoIndicator? ConcentrationLimit { get; init; } 
    /// <summary>
    /// Identifies the number of days in which the cash investor and dealer can agree to revisit the terms of an agreement.
    /// </summary>
    public IsoExact3NumericText? MinimumNoticePeriod { get; init; } 
    /// <summary>
    /// Closing date/time or maturity date/time of the transaction.
    /// </summary>
    public required ClosingDate4Choice_ ClosingDate { get; init; } 
    /// <summary>
    /// Specifies the details for the deal amounts.
    /// </summary>
    public CollateralAmount18? DealDetailsAmount { get; init; } 
    /// <summary>
    /// Interest rate to be paid on the transaction amount as agreed between the counterparties and the tenor of the interest rate index.
    /// </summary>
    public RateOrName4Choice_? PricingRateAndIndex { get; init; } 
    /// <summary>
    /// Indicates for a floating rate transaction if an overnight frequency  rate fixing should be applied.  If not present, a periodic fixing frequency will be applied (default is N).
    /// </summary>
    public FrequencyRateFixing1Choice_? OvernightFrequencyRateFixing { get; init; } 
    /// <summary>
    /// Premium or discount applied on a given rate.
    /// </summary>
    public IsoPercentageRate? Spread { get; init; } 
    /// <summary>
    /// Specifies the computation method of (accrued) interest of the financial instrument.
    /// </summary>
    public InterestComputationMethodFormat4Choice_? DayCountBasis { get; init; } 
    /// <summary>
    /// Specifies whether the instruction is free or against payment.
    /// </summary>
    public DeliveryReceiptType2Code? Payment { get; init; } 
    /// <summary>
    /// Specifies whether it is a call option (right to purchase a specific underlying asset) or a put option (right to sell a specific underlying asset).
    /// </summary>
    public OptionType6Choice_? OptionType { get; init; } 
    /// <summary>
    /// Indication whether the counterparties to the transaction have agreed to an evergreen or extendable repo.
    /// </summary>
    public RepoTerminationOption1Code? TerminationOption { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceOfTrade is PlaceOfTradeIdentification1 PlaceOfTradeValue)
        {
            writer.WriteStartElement(null, "PlcOfTrad", xmlNamespace );
            PlaceOfTradeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConcentrationLimit is IsoYesNoIndicator ConcentrationLimitValue)
        {
            writer.WriteStartElement(null, "CncntrtnLmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ConcentrationLimitValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (MinimumNoticePeriod is IsoExact3NumericText MinimumNoticePeriodValue)
        {
            writer.WriteStartElement(null, "MinNtcePrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact3NumericText(MinimumNoticePeriodValue)); // data type Exact3NumericText System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ClsgDt", xmlNamespace );
        ClosingDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DealDetailsAmount is CollateralAmount18 DealDetailsAmountValue)
        {
            writer.WriteStartElement(null, "DealDtlsAmt", xmlNamespace );
            DealDetailsAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PricingRateAndIndex is RateOrName4Choice_ PricingRateAndIndexValue)
        {
            writer.WriteStartElement(null, "PricgRateAndIndx", xmlNamespace );
            PricingRateAndIndexValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OvernightFrequencyRateFixing is FrequencyRateFixing1Choice_ OvernightFrequencyRateFixingValue)
        {
            writer.WriteStartElement(null, "OvrnghtFrqcyRateFxg", xmlNamespace );
            OvernightFrequencyRateFixingValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Spread is IsoPercentageRate SpreadValue)
        {
            writer.WriteStartElement(null, "Sprd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(SpreadValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (DayCountBasis is InterestComputationMethodFormat4Choice_ DayCountBasisValue)
        {
            writer.WriteStartElement(null, "DayCntBsis", xmlNamespace );
            DayCountBasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Payment is DeliveryReceiptType2Code PaymentValue)
        {
            writer.WriteStartElement(null, "Pmt", xmlNamespace );
            writer.WriteValue(PaymentValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OptionType is OptionType6Choice_ OptionTypeValue)
        {
            writer.WriteStartElement(null, "OptnTp", xmlNamespace );
            OptionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TerminationOption is RepoTerminationOption1Code TerminationOptionValue)
        {
            writer.WriteStartElement(null, "TermntnOptn", xmlNamespace );
            writer.WriteValue(TerminationOptionValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static DealTransactionDetails5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
