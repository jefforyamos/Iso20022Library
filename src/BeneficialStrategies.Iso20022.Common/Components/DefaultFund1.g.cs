//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DefaultFund1.  ISO2002 ID# _UqpvS9p-Ed-ak6NoX_4Aeg_1890910429.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information such as the default fund account identification or the default fund amount.
/// </summary>
public partial record DefaultFund1
     : IIsoXmlSerilizable<DefaultFund1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the account identification of the clearing member at the ICSD (International Central Securities Depository) or at the central bank.
    /// </summary>
    public required AccountIdentification4Choice_ DefaultFundAccount { get; init; } 
    /// <summary>
    /// Total amount required by the clearing member to participate to the default fund.
    /// </summary>
    public required IsoActiveCurrencyAndAmount TotalDefaultFundAmount { get; init; } 
    /// <summary>
    /// Provides details about the contribution to the default fund by trading venues/products.
    /// </summary>
    public Contribution1? Contribution { get; init; } 
    /// <summary>
    /// Additional amount that the clearing member will have to provide to cover a risk increase. This results from a risk management decision depending on central counterparty specific criteria.
    /// </summary>
    public IsoActiveCurrencyAndAmount? IncreaseCoverageAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "DfltFndAcct", xmlNamespace );
        DefaultFundAccount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TtlDfltFndAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(TotalDefaultFundAmount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (Contribution is Contribution1 ContributionValue)
        {
            writer.WriteStartElement(null, "Cntrbtn", xmlNamespace );
            ContributionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IncreaseCoverageAmount is IsoActiveCurrencyAndAmount IncreaseCoverageAmountValue)
        {
            writer.WriteStartElement(null, "IncrCvrgAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(IncreaseCoverageAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static DefaultFund1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
