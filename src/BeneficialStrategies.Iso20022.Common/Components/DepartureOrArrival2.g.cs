//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DepartureOrArrival2.  ISO2002 ID# _Hqx1RfcWEeiW-auGnDPZIw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains departure or arrival information.
/// </summary>
public partial record DepartureOrArrival2
     : IIsoXmlSerilizable<DepartureOrArrival2>
{
    #nullable enable
    
    /// <summary>
    /// Code indicating the name of the passenger transport carrier (for example, United Airlines, Lufthansa, JetBlue, etc.) 
    /// </summary>
    public IsoMax35Text? CarrierCode { get; init; } 
    /// <summary>
    /// Route number (for example, flight number, bus number, train route or number, etc.)
    /// </summary>
    public IsoMax35NumericText? RouteNumber { get; init; } 
    /// <summary>
    /// Departure or arrival date.
    /// </summary>
    public IsoISODate? Date { get; init; } 
    /// <summary>
    /// Departure or arrival time. 
    /// </summary>
    public IsoISOTime? Time { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CarrierCode is IsoMax35Text CarrierCodeValue)
        {
            writer.WriteStartElement(null, "CrrierCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CarrierCodeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RouteNumber is IsoMax35NumericText RouteNumberValue)
        {
            writer.WriteStartElement(null, "RouteNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(RouteNumberValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (Date is IsoISODate DateValue)
        {
            writer.WriteStartElement(null, "Dt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Time is IsoISOTime TimeValue)
        {
            writer.WriteStartElement(null, "Tm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(TimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
    }
    public static DepartureOrArrival2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
