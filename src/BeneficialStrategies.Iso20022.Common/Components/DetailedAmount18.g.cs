//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DetailedAmount18.  ISO2002 ID# _67OOka4uEeWLdt0vLARX2Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Withdrawal fees, accepted by the customer.
/// </summary>
public partial record DetailedAmount18
     : IIsoXmlSerilizable<DetailedAmount18>
{
    #nullable enable
    
    /// <summary>
    /// Amount value.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Currency of the amount.
    /// </summary>
    public ActiveCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// True if amount charged to the source account.
    /// </summary>
    public IsoTrueFalseIndicator? ChargeAccountTo { get; init; } 
    /// <summary>
    /// Short description of the amount to display or print.
    /// </summary>
    public IsoMax70Text? Label { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(Amount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (Currency is ActiveCurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ChargeAccountTo is IsoTrueFalseIndicator ChargeAccountToValue)
        {
            writer.WriteStartElement(null, "ChrgAcctTo", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ChargeAccountToValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (Label is IsoMax70Text LabelValue)
        {
            writer.WriteStartElement(null, "Labl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(LabelValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static DetailedAmount18 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
