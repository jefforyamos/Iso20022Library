//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DetailedInstructionStatus13.  ISO2002 ID# _h8hoca-qEemJ1NnLPsTFaw.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about a meeting instruction vote.
/// </summary>
public partial record DetailedInstructionStatus13
{
    #nullable enable
    
    /// <summary>
    /// Identification of the specific individual instruction from the original meeting instruction message for which the confirmation is provided.
    /// </summary>
    public required IsoMax35Text SingleInstructionIdentification { get; init; } 
    /// <summary>
    /// Identification of the safekeeping account.
    /// </summary>
    public IsoMax35Text? AccountIdentification { get; init; } 
    /// <summary>
    /// Party that legally owns the account.
    /// </summary>
    public IPartyIdentification228Choice? AccountOwner { get; init; } 
    /// <summary>
    /// Identification of the subaccount within the safekeeping account.
    /// </summary>
    public IsoMax35Text? SubAccountIdentification { get; init; } 
    /// <summary>
    /// Owner of the voting rights.
    /// </summary>
    // public IReadOnlyCollection<IPartyIdentification227Choice> RightsHolder { get; init; }
    /// <summary>
    /// Identification of the person appointed by the security holder as the proxy.
    /// </summary>
    public IPartyIdentification223Choice? Proxy { get; init; } 
    /// <summary>
    /// Indicates whether standing instructions have been applied or not.
    /// </summary>
    public IsoYesNoIndicator? StandingInstruction { get; init; } 
    /// <summary>
    /// Modality through which the votes that have been recorded and counted were received by the issuer, including whether this is ahead of the meeting or at the meeting.
    /// </summary>
    public required IModalityOfCounting1Choice ModalityOfCounting { get; init; } 
    /// <summary>
    /// Date or date and time at which the votes that have been recorded and counted were received.
    /// </summary>
    public IDateAndDateTime1Choice? VoteReceiptDateTime { get; init; } 
    /// <summary>
    /// Details of the vote.
    /// </summary>
    // public IReadOnlyCollection<Vote13> VotePerResolution { get; init; }
    
    #nullable disable
}
