//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DeviceInitialisationCardReaderRequest3.  ISO2002 ID# _92ymMS8_Eeu125Ip9zFcsQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Content of the Device Initialisation Card Reader Request message.
/// </summary>
public partial record DeviceInitialisationCardReaderRequest3
     : IIsoXmlSerilizable<DeviceInitialisationCardReaderRequest3>
{
    #nullable enable
    
    /// <summary>
    /// Flag to request a warm reset on a chip.
    /// </summary>
    public IsoTrueFalseIndicator? WarmResetFlag { get; init; } 
    /// <summary>
    /// Payment instrument entry mode requested by the Sale System.
    /// </summary>
    public CardDataReading8Code? ForceEntryMode { get; init; } 
    /// <summary>
    /// Flag to indicate the POI System to keep the card in the reader for a smart card.
    /// </summary>
    public IsoTrueFalseIndicator? LeaveCardFlag { get; init; } 
    /// <summary>
    /// Maximum time in seconds that the POI has to wait for a card response.
    /// </summary>
    public IsoNumber? MaximumWaitingTime { get; init; } 
    /// <summary>
    /// Information to display.
    /// </summary>
    public ActionMessage8? DisplayOutput { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (WarmResetFlag is IsoTrueFalseIndicator WarmResetFlagValue)
        {
            writer.WriteStartElement(null, "WarmRstFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(WarmResetFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ForceEntryMode is CardDataReading8Code ForceEntryModeValue)
        {
            writer.WriteStartElement(null, "ForceNtryMd", xmlNamespace );
            writer.WriteValue(ForceEntryModeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (LeaveCardFlag is IsoTrueFalseIndicator LeaveCardFlagValue)
        {
            writer.WriteStartElement(null, "LeavCardFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(LeaveCardFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (MaximumWaitingTime is IsoNumber MaximumWaitingTimeValue)
        {
            writer.WriteStartElement(null, "MaxWtgTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(MaximumWaitingTimeValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (DisplayOutput is ActionMessage8 DisplayOutputValue)
        {
            writer.WriteStartElement(null, "DispOutpt", xmlNamespace );
            DisplayOutputValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DeviceInitialisationCardReaderRequest3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
