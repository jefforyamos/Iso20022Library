//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DeviceSecureInputRequest5.  ISO2002 ID# _GLMrAXGeEe2TbaNWBpRZpQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Request a secure input for a PIN.
/// </summary>
public partial record DeviceSecureInputRequest5
     : IIsoXmlSerilizable<DeviceSecureInputRequest5>
{
    #nullable enable
    
    /// <summary>
    /// Type of PIN Service.
    /// </summary>
    public required PINRequestType1Code PINRequestType { get; init; } 
    /// <summary>
    /// Identify the PIN verification method and keys.
    /// </summary>
    public IsoMax35Text? PINVerificationMethod { get; init; } 
    /// <summary>
    /// Maximum time to wait for the request processing in seconds.
    /// </summary>
    public IsoNumber? MaximumWaitingTime { get; init; } 
    /// <summary>
    /// Indicates, when the user press a key, if a beep has to be generated.
    /// </summary>
    public IsoTrueFalseIndicator? BeepKeyFlag { get; init; } 
    /// <summary>
    /// Enciphered PIN and related information.
    /// </summary>
    public OnLinePIN10? CardholderPIN { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PINReqTp", xmlNamespace );
        writer.WriteValue(PINRequestType.ToString()); // Enum value
        writer.WriteEndElement();
        if (PINVerificationMethod is IsoMax35Text PINVerificationMethodValue)
        {
            writer.WriteStartElement(null, "PINVrfctnMtd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PINVerificationMethodValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MaximumWaitingTime is IsoNumber MaximumWaitingTimeValue)
        {
            writer.WriteStartElement(null, "MaxWtgTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(MaximumWaitingTimeValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (BeepKeyFlag is IsoTrueFalseIndicator BeepKeyFlagValue)
        {
            writer.WriteStartElement(null, "BeepKeyFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(BeepKeyFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CardholderPIN is OnLinePIN10 CardholderPINValue)
        {
            writer.WriteStartElement(null, "CrdhldrPIN", xmlNamespace );
            CardholderPINValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DeviceSecureInputRequest5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
