//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DiagnosisResponse1.  ISO2002 ID# __oeZQN6LEeiwsev40qZGEQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Content of the Diagnosis Response message.
/// </summary>
public partial record DiagnosisResponse1
     : IIsoXmlSerilizable<DiagnosisResponse1>
{
    #nullable enable
    
    /// <summary>
    /// Sale Terminal logged to.
    /// </summary>
    public IsoMax35Text? LoggedSaleIdentification { get; init; } 
    /// <summary>
    /// Status of the POI.
    /// </summary>
    public StatusReportContent8? POIStatus { get; init; } 
    /// <summary>
    /// State of a Host.
    /// </summary>
    public HostStatus1? HostStatus { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (LoggedSaleIdentification is IsoMax35Text LoggedSaleIdentificationValue)
        {
            writer.WriteStartElement(null, "LggdSaleId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(LoggedSaleIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (POIStatus is StatusReportContent8 POIStatusValue)
        {
            writer.WriteStartElement(null, "POISts", xmlNamespace );
            POIStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HostStatus is HostStatus1 HostStatusValue)
        {
            writer.WriteStartElement(null, "HstSts", xmlNamespace );
            HostStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DiagnosisResponse1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
