//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DirectDebitMandate5.  ISO2002 ID# _DUsGASC4EeWJd9HF2tO7BA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Direct debit mandate parties and accounts.
/// </summary>
public partial record DirectDebitMandate5
     : IIsoXmlSerilizable<DirectDebitMandate5>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
    /// </summary>
    public required AccountIdentificationAndName5 DebtorAccount { get; init; } 
    /// <summary>
    /// Party that owes the cash to the creditor/final party. The debtor is also the debit account owner.
    /// </summary>
    public PartyIdentification70Choice_? Debtor { get; init; } 
    /// <summary>
    /// Number assigned by a tax authority to an entity.
    /// </summary>
    public IsoMax35Text? DebtorTaxIdentificationNumber { get; init; } 
    /// <summary>
    /// Number assigned by a national registration authority to an entity.
    /// </summary>
    public IsoMax35Text? DebtorNationalRegistrationNumber { get; init; } 
    /// <summary>
    /// Party that receives an amount of money from the debtor. In the context of the payment model, the creditor is also the credit account owner.
    /// </summary>
    public PartyIdentification70Choice_? Creditor { get; init; } 
    /// <summary>
    /// Financial institution that receives the direct debit instruction from the creditor or other authorised party.
    /// </summary>
    public required FinancialInstitutionIdentification7Choice_ DebtorAgent { get; init; } 
    /// <summary>
    /// Information identifying a specific branch of a financial institution.||Usage: this component should be used in case the identification information in the financial institution component does not provide identification up to branch level.
    /// </summary>
    public BranchData? DebtorAgentBranch { get; init; } 
    /// <summary>
    /// Financial institution that receives the payment transaction on behalf of the creditor, or other nominated party, and credits the account.
    /// </summary>
    public FinancialInstitutionIdentification7Choice_? CreditorAgent { get; init; } 
    /// <summary>
    /// Information identifying a specific branch of a financial institution.||Usage: this component should be used in case the identification information in the financial institution component does not provide identification up to branch level.
    /// </summary>
    public BranchData? CreditorAgentBranch { get; init; } 
    /// <summary>
    /// Reference assigned to a creditor by its financial institution, or relevant authority, authorising the creditor to take part in a direct debit scheme.
    /// </summary>
    public IsoMax35Text? RegistrationIdentification { get; init; } 
    /// <summary>
    /// Reference of the direct debit mandate that has been agreed upon by the debtor and creditor.
    /// </summary>
    public IsoMax35Text? MandateIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "DbtrAcct", xmlNamespace );
        DebtorAccount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Debtor is PartyIdentification70Choice_ DebtorValue)
        {
            writer.WriteStartElement(null, "Dbtr", xmlNamespace );
            DebtorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DebtorTaxIdentificationNumber is IsoMax35Text DebtorTaxIdentificationNumberValue)
        {
            writer.WriteStartElement(null, "DbtrTaxIdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DebtorTaxIdentificationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DebtorNationalRegistrationNumber is IsoMax35Text DebtorNationalRegistrationNumberValue)
        {
            writer.WriteStartElement(null, "DbtrNtlRegnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DebtorNationalRegistrationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Creditor is PartyIdentification70Choice_ CreditorValue)
        {
            writer.WriteStartElement(null, "Cdtr", xmlNamespace );
            CreditorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "DbtrAgt", xmlNamespace );
        DebtorAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DebtorAgentBranch is BranchData DebtorAgentBranchValue)
        {
            writer.WriteStartElement(null, "DbtrAgtBrnch", xmlNamespace );
            DebtorAgentBranchValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditorAgent is FinancialInstitutionIdentification7Choice_ CreditorAgentValue)
        {
            writer.WriteStartElement(null, "CdtrAgt", xmlNamespace );
            CreditorAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditorAgentBranch is BranchData CreditorAgentBranchValue)
        {
            writer.WriteStartElement(null, "CdtrAgtBrnch", xmlNamespace );
            CreditorAgentBranchValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RegistrationIdentification is IsoMax35Text RegistrationIdentificationValue)
        {
            writer.WriteStartElement(null, "RegnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(RegistrationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MandateIdentification is IsoMax35Text MandateIdentificationValue)
        {
            writer.WriteStartElement(null, "MndtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MandateIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
    }
    public static DirectDebitMandate5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
