//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DisplayCapabilities5.  ISO2002 ID# _zcb18a13EeWMg5rOByfExw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Capabilities of the display components performing the transaction.
/// </summary>
public partial record DisplayCapabilities5
     : IIsoXmlSerilizable<DisplayCapabilities5>
{
    #nullable enable
    
    /// <summary>
    /// Destination of the message to present.
    /// </summary>
    public UserInterface5Code? Destination { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _zof8Aa13EeWMg5rOByfExw
    /// <summary>
    /// Available message format.
    /// </summary>
    public OutputFormat1Code? AvailableFormat { get; init; } 
    /// <summary>
    /// Number of lines of the display.
    /// </summary>
    public IsoNumber? NumberOfLines { get; init; } 
    /// <summary>
    /// Number of columns of the display or printer.
    /// </summary>
    public IsoNumber? LineWidth { get; init; } 
    /// <summary>
    /// Available language for the message. Reference ISO 639-1 (alpha-2) et ISO 639-2 (alpha-3).
    /// </summary>
    public LanguageCode? AvailableLanguage { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize Destination, multiplicity Unknown
        if (AvailableFormat is OutputFormat1Code AvailableFormatValue)
        {
            writer.WriteStartElement(null, "AvlblFrmt", xmlNamespace );
            writer.WriteValue(AvailableFormatValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NumberOfLines is IsoNumber NumberOfLinesValue)
        {
            writer.WriteStartElement(null, "NbOfLines", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(NumberOfLinesValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (LineWidth is IsoNumber LineWidthValue)
        {
            writer.WriteStartElement(null, "LineWidth", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(LineWidthValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (AvailableLanguage is LanguageCode AvailableLanguageValue)
        {
            writer.WriteStartElement(null, "AvlblLang", xmlNamespace );
            writer.WriteValue(AvailableLanguageValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static DisplayCapabilities5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
