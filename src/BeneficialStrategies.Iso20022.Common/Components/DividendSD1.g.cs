//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DividendSD1.  ISO2002 ID# _LsY4IzLZEeGkgP4mOiMAHQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Extension to specify rates of a corporate action.
/// </summary>
public partial record DividendSD1
     : IIsoXmlSerilizable<DividendSD1>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous reference to the location where the supplementary data must be inserted in the message instance. 
    /// In the case of XML, this is expressed by a valid XPath.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Provides the total annual dividend rate as announced by the Issuer.
    /// </summary>
    public RateAndAmountFormat16Choice_? TotalAnnualDividendRate { get; init; } 
    /// <summary>
    /// Provides the maximum annual total dividend rate as announced by the Issuer.
    /// </summary>
    public RateAndAmountFormat16Choice_? MaximumAnnualTotalDividendRate { get; init; } 
    /// <summary>
    /// Provides the minimum annual total dividend rate as announced by the Issuer.
    /// </summary>
    public RateAndAmountFormat16Choice_? MinimumAnnualTotalDividendRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (TotalAnnualDividendRate is RateAndAmountFormat16Choice_ TotalAnnualDividendRateValue)
        {
            writer.WriteStartElement(null, "TtlAnlDvddRate", xmlNamespace );
            TotalAnnualDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MaximumAnnualTotalDividendRate is RateAndAmountFormat16Choice_ MaximumAnnualTotalDividendRateValue)
        {
            writer.WriteStartElement(null, "MaxAnlTtlDvddRate", xmlNamespace );
            MaximumAnnualTotalDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumAnnualTotalDividendRate is RateAndAmountFormat16Choice_ MinimumAnnualTotalDividendRateValue)
        {
            writer.WriteStartElement(null, "MinAnlTtlDvddRate", xmlNamespace );
            MinimumAnnualTotalDividendRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DividendSD1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
