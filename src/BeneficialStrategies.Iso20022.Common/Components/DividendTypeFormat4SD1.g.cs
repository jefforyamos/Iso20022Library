//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DividendTypeFormat4SD1.  ISO2002 ID# _hZyZszLOEeGkgP4mOiMAHQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Extension to specify additional information related to the type of dividend.
/// </summary>
public partial record DividendTypeFormat4SD1
     : IIsoXmlSerilizable<DividendTypeFormat4SD1>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous reference to the location where the supplementary data must be inserted in the message instance. 
    /// In the case of XML, this is expressed by a valid XPath.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Specifies whether the dividend is provisional 予想区分.
    /// If the value is No, then the dividend is actual.
    /// ProvisionalDividendFlag can only be used with corporate action event type code DVCA.
    /// </summary>
    public required IsoYesNoIndicator ProvisionalDividendFlag { get; init; } 
    /// <summary>
    /// Specifies whether the dividend includes commemorative dividend. 記念配当区分
    /// CommemorativeDividendFlag can only be used with corporate action event type code DVCA.
    /// </summary>
    public required IsoYesNoIndicator CommemorativeDividendFlag { get; init; } 
    /// <summary>
    /// Specifies whether the dividend includes special dividend.
    /// 特別配当区分
    /// SpecialDividendFlag can only be used with corporate action event type code DVCA.
    /// </summary>
    public required IsoYesNoIndicator SpecialDividendFlag { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PrvsnlDvddFlg", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ProvisionalDividendFlag)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CommrtvDvddFlg", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CommemorativeDividendFlag)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SpclDvddFlg", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(SpecialDividendFlag)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static DividendTypeFormat4SD1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
