//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for DocumentGeneralInformation5.  ISO2002 ID# _zKVRka9GEeuGTL0TUx_YlA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// General information that unambiguously identifies a document, such as identification number and issue date time.
/// </summary>
public partial record DocumentGeneralInformation5
     : IIsoXmlSerilizable<DocumentGeneralInformation5>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the type of the document, for example commercial invoice.
    /// </summary>
    public required ExternalDocumentType1Code DocumentType { get; init; } 
    /// <summary>
    /// Unique identifier of the document.
    /// </summary>
    public required IsoMax35Text DocumentNumber { get; init; } 
    /// <summary>
    /// Name of the document
    /// </summary>
    public IsoMax140Text? DocumentName { get; init; } 
    /// <summary>
    /// Specifies the identification sequence number for a specific couple sender/receiver.
    /// </summary>
    public IsoMax140Text? SenderReceiverSequenceIdentification { get; init; } 
    /// <summary>
    /// Issue date of the document.
    /// </summary>
    public IsoISODate? IssueDate { get; init; } 
    /// <summary>
    /// URL (Uniform Resource Locator) where the document can be found.
    /// </summary>
    public IsoMax256Text? URL { get; init; } 
    /// <summary>
    /// Full Signature Structure without Signature itself:
    /// Hash + Certificate.
    /// </summary>
    public SignatureEnvelopeReference? LinkFileHash { get; init; } 
    /// <summary>
    /// Attached binary file for this document.
    /// </summary>
    public required BinaryFile1 AttachedBinaryFile { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "DocTp", xmlNamespace );
        writer.WriteValue(DocumentType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DocNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(DocumentNumber)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (DocumentName is IsoMax140Text DocumentNameValue)
        {
            writer.WriteStartElement(null, "DocNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(DocumentNameValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (SenderReceiverSequenceIdentification is IsoMax140Text SenderReceiverSequenceIdentificationValue)
        {
            writer.WriteStartElement(null, "SndrRcvrSeqId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(SenderReceiverSequenceIdentificationValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (IssueDate is IsoISODate IssueDateValue)
        {
            writer.WriteStartElement(null, "IsseDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(IssueDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (URL is IsoMax256Text URLValue)
        {
            writer.WriteStartElement(null, "URL", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(URLValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (LinkFileHash is SignatureEnvelopeReference LinkFileHashValue)
        {
            writer.WriteStartElement(null, "LkFileHash", xmlNamespace );
            LinkFileHashValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AttchdBinryFile", xmlNamespace );
        AttachedBinaryFile.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static DocumentGeneralInformation5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
