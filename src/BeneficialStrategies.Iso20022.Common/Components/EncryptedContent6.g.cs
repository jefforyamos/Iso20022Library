//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EncryptedContent6.  ISO2002 ID# _kPJ2gQ0tEeqUVL7sB4m7NA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Encrypted data with an encryption key.
/// </summary>
public partial record EncryptedContent6
     : IIsoXmlSerilizable<EncryptedContent6>
{
    #nullable enable
    
    /// <summary>
    /// Type of data which have been encrypted.
    /// </summary>
    public required ContentType2Code ContentType { get; init; } 
    /// <summary>
    /// Algorithm used to encrypt the data.
    /// </summary>
    public AlgorithmIdentification29? ContentEncryptionAlgorithm { get; init; } 
    /// <summary>
    /// Encrypted data, result of the content encryption.
    /// </summary>
    public required IsoMax100KBinary EncryptedData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "CnttTp", xmlNamespace );
        writer.WriteValue(ContentType.ToString()); // Enum value
        writer.WriteEndElement();
        if (ContentEncryptionAlgorithm is AlgorithmIdentification29 ContentEncryptionAlgorithmValue)
        {
            writer.WriteStartElement(null, "CnttNcrptnAlgo", xmlNamespace );
            ContentEncryptionAlgorithmValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "NcrptdData", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax100KBinary(EncryptedData)); // data type Max100KBinary System.Byte[]
        writer.WriteEndElement();
    }
    public static EncryptedContent6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
