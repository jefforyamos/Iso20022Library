//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EncryptedData1.  ISO2002 ID# _JP9iYD6UEeq_lLaSkIVjTQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains encrypted data and the attributes used to encrypt the data using the ISO 13492 methods for data encryption.  The encryption key is not included in the message with this method.
/// </summary>
[DataContract]
[XmlType]
public partial record EncryptedData1
{
    #nullable enable
    
    /// <summary>
    /// Identifies the key management scheme and associated control field format.
    /// See ISO 13492 Control field for values.
    /// </summary>
    [DataMember]
    public IsoExact1HexBinaryText? Control { get; init; } 
    /// <summary>
    /// Number that uniquely identifies a key or a group of related keys that are all different but have certain characteristics in common.
    /// See ISO 13492 Key-set identifier for usage.
    /// </summary>
    [DataMember]
    public IsoMax8NumericText? KeySetIdentifier { get; init; } 
    /// <summary>
    /// Contains Derived Info or Device ID and Transaction Counter.
    /// See ISO 13492 Derived information or Device ID and Transaction Counter for more information.
    /// </summary>
    [DataMember]
    public IsoMax32HexBinaryText? DerivedInformation { get; init; } 
    /// <summary>
    /// Defines the algorithm used for encryption.
    /// See ISO 13492 Algorithm field for values.
    /// </summary>
    [DataMember]
    public IsoMax2NumericText? Algorithm { get; init; } 
    /// <summary>
    /// Specifies the length of the encryption key.
    /// See ISO 13492 Key length field for value to use.
    /// </summary>
    [DataMember]
    public IsoMax4NumericText? KeyLength { get; init; } 
    /// <summary>
    /// Mechanism used to provide key confidentiality and integrity. Identifies encryption attribute used for the data encryption operation.
    /// See ISO 13492 Key protection field for values.
    /// </summary>
    [DataMember]
    public IsoMax2NumericText? KeyProtection { get; init; } 
    /// <summary>
    /// Identifies a unique key within a key set when multiple keys exist with the same key set identifier.
    /// See ISO 13492 Key index for more information.
    /// </summary>
    [DataMember]
    public IsoMax5NumericText? KeyIndex { get; init; } 
    /// <summary>
    /// Identifies the padding method used prior to encipherment of the data.
    /// See ISO 13492 Padding method field for values.
    /// </summary>
    [DataMember]
    public IsoMax2NumericText? PaddingMethod { get; init; } 
    /// <summary>
    /// Identifies the format of the structured data when the encrypted data block contains more than one data element.
    /// See ISO 13492 Encrypted data format field for values.
    /// </summary>
    [DataMember]
    public IsoMax2NumericText? EncryptedDataFormat { get; init; } 
    /// <summary>
    /// Encrypted data element information.
    /// </summary>
    [DataMember]
    public ValueList<EncryptedDataElement1> EncryptedDataElement { get; init; } = []; // Warning: Don't know multiplicity.
    
    #nullable disable
}
