//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EncryptedData1.  ISO2002 ID# _JP9iYD6UEeq_lLaSkIVjTQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains encrypted data and the attributes used to encrypt the data using the ISO 13492 methods for data encryption.  The encryption key is not included in the message with this method.
/// </summary>
public partial record EncryptedData1
     : IIsoXmlSerilizable<EncryptedData1>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the key management scheme and associated control field format.
    /// See ISO 13492 Control field for values.
    /// </summary>
    public IsoExact1HexBinaryText? Control { get; init; } 
    /// <summary>
    /// Number that uniquely identifies a key or a group of related keys that are all different but have certain characteristics in common.
    /// See ISO 13492 Key-set identifier for usage.
    /// </summary>
    public IsoMax8NumericText? KeySetIdentifier { get; init; } 
    /// <summary>
    /// Contains Derived Info or Device ID and Transaction Counter.
    /// See ISO 13492 Derived information or Device ID and Transaction Counter for more information.
    /// </summary>
    public IsoMax32HexBinaryText? DerivedInformation { get; init; } 
    /// <summary>
    /// Defines the algorithm used for encryption.
    /// See ISO 13492 Algorithm field for values.
    /// </summary>
    public IsoMax2NumericText? Algorithm { get; init; } 
    /// <summary>
    /// Specifies the length of the encryption key.
    /// See ISO 13492 Key length field for value to use.
    /// </summary>
    public IsoMax4NumericText? KeyLength { get; init; } 
    /// <summary>
    /// Mechanism used to provide key confidentiality and integrity. Identifies encryption attribute used for the data encryption operation.
    /// See ISO 13492 Key protection field for values.
    /// </summary>
    public IsoMax2NumericText? KeyProtection { get; init; } 
    /// <summary>
    /// Identifies a unique key within a key set when multiple keys exist with the same key set identifier.
    /// See ISO 13492 Key index for more information.
    /// </summary>
    public IsoMax5NumericText? KeyIndex { get; init; } 
    /// <summary>
    /// Identifies the padding method used prior to encipherment of the data.
    /// See ISO 13492 Padding method field for values.
    /// </summary>
    public IsoMax2NumericText? PaddingMethod { get; init; } 
    /// <summary>
    /// Identifies the format of the structured data when the encrypted data block contains more than one data element.
    /// See ISO 13492 Encrypted data format field for values.
    /// </summary>
    public IsoMax2NumericText? EncryptedDataFormat { get; init; } 
    /// <summary>
    /// Encrypted data element information.
    /// </summary>
    public EncryptedDataElement1? EncryptedDataElement { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _r673MD6VEeq_lLaSkIVjTQ
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Control is IsoExact1HexBinaryText ControlValue)
        {
            writer.WriteStartElement(null, "Ctrl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact1HexBinaryText(ControlValue)); // data type Exact1HexBinaryText System.String
            writer.WriteEndElement();
        }
        if (KeySetIdentifier is IsoMax8NumericText KeySetIdentifierValue)
        {
            writer.WriteStartElement(null, "KeySetIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax8NumericText(KeySetIdentifierValue)); // data type Max8NumericText System.String
            writer.WriteEndElement();
        }
        if (DerivedInformation is IsoMax32HexBinaryText DerivedInformationValue)
        {
            writer.WriteStartElement(null, "DrvdInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax32HexBinaryText(DerivedInformationValue)); // data type Max32HexBinaryText System.String
            writer.WriteEndElement();
        }
        if (Algorithm is IsoMax2NumericText AlgorithmValue)
        {
            writer.WriteStartElement(null, "Algo", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2NumericText(AlgorithmValue)); // data type Max2NumericText System.String
            writer.WriteEndElement();
        }
        if (KeyLength is IsoMax4NumericText KeyLengthValue)
        {
            writer.WriteStartElement(null, "KeyLngth", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4NumericText(KeyLengthValue)); // data type Max4NumericText System.String
            writer.WriteEndElement();
        }
        if (KeyProtection is IsoMax2NumericText KeyProtectionValue)
        {
            writer.WriteStartElement(null, "KeyPrtcn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2NumericText(KeyProtectionValue)); // data type Max2NumericText System.String
            writer.WriteEndElement();
        }
        if (KeyIndex is IsoMax5NumericText KeyIndexValue)
        {
            writer.WriteStartElement(null, "KeyIndx", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5NumericText(KeyIndexValue)); // data type Max5NumericText System.String
            writer.WriteEndElement();
        }
        if (PaddingMethod is IsoMax2NumericText PaddingMethodValue)
        {
            writer.WriteStartElement(null, "PddgMtd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2NumericText(PaddingMethodValue)); // data type Max2NumericText System.String
            writer.WriteEndElement();
        }
        if (EncryptedDataFormat is IsoMax2NumericText EncryptedDataFormatValue)
        {
            writer.WriteStartElement(null, "NcrptdDataFrmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2NumericText(EncryptedDataFormatValue)); // data type Max2NumericText System.String
            writer.WriteEndElement();
        }
        // Not sure how to serialize EncryptedDataElement, multiplicity Unknown
    }
    public static EncryptedData1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
