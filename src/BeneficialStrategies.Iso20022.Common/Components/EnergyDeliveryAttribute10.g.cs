//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EnergyDeliveryAttribute10.  ISO2002 ID# _iIa_kQzwEe2YoLD-1vFj0g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to energy derivatives attributes.
/// </summary>
public partial record EnergyDeliveryAttribute10
     : IIsoXmlSerilizable<EnergyDeliveryAttribute10>
{
    #nullable enable
    
    /// <summary>
    /// Time interval for each block or shape.
    /// </summary>
    public TimePeriodDetails1? DeliveryInterval { get; init; } 
    /// <summary>
    /// Definition of delivery start date and end date.
    /// </summary>
    public DatePeriod1? DeliveryDate { get; init; } 
    /// <summary>
    /// Duration of the delivery period.
    /// </summary>
    public DurationType1Code? Duration { get; init; } 
    /// <summary>
    /// Days of the week of the delivery.
    /// </summary>
    public WeekDay3Code? WeekDay { get; init; } 
    /// <summary>
    /// Delivery capacity for each delivery interval specified.
    /// </summary>
    public Quantity47Choice_? DeliveryCapacity { get; init; } 
    /// <summary>
    /// Daily or hourly quantity in MWh or kWh/d which corresponds to the underlying commodity.
    /// </summary>
    public EnergyQuantityUnit2Choice_? QuantityUnit { get; init; } 
    /// <summary>
    /// Indicates if applicable the price per quantity per delivery time interval.
    /// </summary>
    public AmountAndDirection106? PriceTimeIntervalQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (DeliveryInterval is TimePeriodDetails1 DeliveryIntervalValue)
        {
            writer.WriteStartElement(null, "DlvryIntrvl", xmlNamespace );
            DeliveryIntervalValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeliveryDate is DatePeriod1 DeliveryDateValue)
        {
            writer.WriteStartElement(null, "DlvryDt", xmlNamespace );
            DeliveryDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Duration is DurationType1Code DurationValue)
        {
            writer.WriteStartElement(null, "Drtn", xmlNamespace );
            writer.WriteValue(DurationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (WeekDay is WeekDay3Code WeekDayValue)
        {
            writer.WriteStartElement(null, "WkDay", xmlNamespace );
            writer.WriteValue(WeekDayValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DeliveryCapacity is Quantity47Choice_ DeliveryCapacityValue)
        {
            writer.WriteStartElement(null, "DlvryCpcty", xmlNamespace );
            DeliveryCapacityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (QuantityUnit is EnergyQuantityUnit2Choice_ QuantityUnitValue)
        {
            writer.WriteStartElement(null, "QtyUnit", xmlNamespace );
            QuantityUnitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceTimeIntervalQuantity is AmountAndDirection106 PriceTimeIntervalQuantityValue)
        {
            writer.WriteStartElement(null, "PricTmIntrvlQty", xmlNamespace );
            PriceTimeIntervalQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static EnergyDeliveryAttribute10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
