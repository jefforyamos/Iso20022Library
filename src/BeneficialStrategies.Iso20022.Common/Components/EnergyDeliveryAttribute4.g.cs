//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EnergyDeliveryAttribute4.  ISO2002 ID# _HJBv0YeIEei3PYANOK_QWA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to energy derivatives attributes.
/// </summary>
public partial record EnergyDeliveryAttribute4
     : IIsoXmlSerilizable<EnergyDeliveryAttribute4>
{
    #nullable enable
    
    /// <summary>
    /// Time interval for each block or shape.
    /// </summary>
    public IsoISOTime? DeliveryInterval { get; init; } 
    /// <summary>
    /// Definition of delivery start datetime and end datetime.
    /// </summary>
    public DateTimePeriod1? DeliveryPeriod { get; init; } 
    /// <summary>
    /// Start time and end time for each block or shape.
    /// </summary>
    public TimePeriodDetails1? DeliveryTime { get; init; } 
    /// <summary>
    /// Duration of the delivery period.
    /// </summary>
    public DurationType1Code? Duration { get; init; } 
    /// <summary>
    /// Days of the week of the delivery.
    /// </summary>
    public WeekDay3Code? WeekDay { get; init; } 
    /// <summary>
    /// Delivery capacity for each delivery interval specified.
    /// </summary>
    public Quantity46Choice_? DeliveryCapacity { get; init; } 
    /// <summary>
    /// Daily or hourly quantity in MWh or kWh/d which corresponds to the underlying commodity.
    /// </summary>
    public EnergyQuantityUnit1Choice_? QuantityUnit { get; init; } 
    /// <summary>
    /// Indicates if applicable the price per quantity per delivery time interval.
    /// </summary>
    public IsoLongFraction21DecimalNumber? PriceTimeIntervalQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (DeliveryInterval is IsoISOTime DeliveryIntervalValue)
        {
            writer.WriteStartElement(null, "DlvryIntrvl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(DeliveryIntervalValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (DeliveryPeriod is DateTimePeriod1 DeliveryPeriodValue)
        {
            writer.WriteStartElement(null, "DlvryPrd", xmlNamespace );
            DeliveryPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeliveryTime is TimePeriodDetails1 DeliveryTimeValue)
        {
            writer.WriteStartElement(null, "DlvryTm", xmlNamespace );
            DeliveryTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Duration is DurationType1Code DurationValue)
        {
            writer.WriteStartElement(null, "Drtn", xmlNamespace );
            writer.WriteValue(DurationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (WeekDay is WeekDay3Code WeekDayValue)
        {
            writer.WriteStartElement(null, "WkDay", xmlNamespace );
            writer.WriteValue(WeekDayValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DeliveryCapacity is Quantity46Choice_ DeliveryCapacityValue)
        {
            writer.WriteStartElement(null, "DlvryCpcty", xmlNamespace );
            DeliveryCapacityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (QuantityUnit is EnergyQuantityUnit1Choice_ QuantityUnitValue)
        {
            writer.WriteStartElement(null, "QtyUnit", xmlNamespace );
            QuantityUnitValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceTimeIntervalQuantity is IsoLongFraction21DecimalNumber PriceTimeIntervalQuantityValue)
        {
            writer.WriteStartElement(null, "PricTmIntrvlQty", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLongFraction21DecimalNumber(PriceTimeIntervalQuantityValue)); // data type LongFraction21DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
    }
    public static EnergyDeliveryAttribute4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
