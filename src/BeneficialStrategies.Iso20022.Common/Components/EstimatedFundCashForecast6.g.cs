//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for EstimatedFundCashForecast6.  ISO2002 ID# _7dIg4QdlEeSPHJIdUs1USg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Cash movements from or to a fund as a result of investment funds transactions, eg, subscriptions or redemptions.
/// </summary>
public partial record EstimatedFundCashForecast6
     : IIsoXmlSerilizable<EstimatedFundCashForecast6>
{
    #nullable enable
    
    /// <summary>
    /// Unique technical identifier for an instance of a fund cash forecast within a fund cash forecast report as assigned by the issuer of the report.
    /// </summary>
    public required IsoMax35Text Identification { get; init; } 
    /// <summary>
    /// Date and, if required, the time, at which the price will be applied.
    /// </summary>
    public required DateAndDateTimeChoice_ TradeDateTime { get; init; } 
    /// <summary>
    /// Previous date and time at which the price was applied.
    /// </summary>
    public DateAndDateTimeChoice_? PreviousTradeDateTime { get; init; } 
    /// <summary>
    /// Investment fund class to which the cash flow is related.
    /// </summary>
    public required FinancialInstrument9 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Estimated total value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? EstimatedTotalNAV { get; init; } 
    /// <summary>
    /// Previous value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? PreviousTotalNAV { get; init; } 
    /// <summary>
    /// Estimated total number of investment fund class units that have been issued.
    /// </summary>
    public FinancialInstrumentQuantity1? EstimatedTotalUnitsNumber { get; init; } 
    /// <summary>
    /// Previous value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public FinancialInstrumentQuantity1? PreviousTotalUnitsNumber { get; init; } 
    /// <summary>
    /// Rate of change of the net asset value.
    /// </summary>
    public IsoPercentageRate? EstimatedTotalNAVChangeRate { get; init; } 
    /// <summary>
    /// Currency of the investment fund class.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? InvestmentCurrency { get; init; } 
    /// <summary>
    /// Information about the designation of the share class currency, that is, whether it is for onshore or offshore purposes and other information that may be required. This is typically only required for CNY funds.
    /// </summary>
    public CurrencyDesignation1? CurrencyStatus { get; init; } 
    /// <summary>
    /// Indicates whether the estimated net cash flow is exceptional.
    /// </summary>
    public required IsoYesNoIndicator ExceptionalNetCashFlowIndicator { get; init; } 
    /// <summary>
    /// Price per unit of the previous trade date.
    /// </summary>
    public UnitPrice19? Price { get; init; } 
    /// <summary>
    /// Foreign exchange rate.
    /// </summary>
    public ForeignExchangeTerms19? ForeignExchangeRate { get; init; } 
    /// <summary>
    /// Estimated net cash flow expressed as a percentage of the previous total NAV for the share class.
    /// </summary>
    public IsoPercentageRate? EstimatedPercentageOfShareClassTotalNAV { get; init; } 
    /// <summary>
    /// Estimated cash movements into the fund as a result of transactions in shares in an investment fund, for example, subscriptions or switch-ins.
    /// </summary>
    public CashInForecast6? EstimatedCashInForecastDetails { get; init; } 
    /// <summary>
    /// Estimated cash movements out of the fund as a result of transactions in shares in an investment fund, for example, redemptions or switch-outs.
    /// </summary>
    public CashOutForecast6? EstimatedCashOutForecastDetails { get; init; } 
    /// <summary>
    /// Net cash as a result of the cash-in and cash-out flows.
    /// </summary>
    public NetCashForecast4? EstimatedNetCashForecastDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(Identification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDtTm", xmlNamespace );
        TradeDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PreviousTradeDateTime is DateAndDateTimeChoice_ PreviousTradeDateTimeValue)
        {
            writer.WriteStartElement(null, "PrvsTradDtTm", xmlNamespace );
            PreviousTradeDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FinInstrmDtls", xmlNamespace );
        FinancialInstrumentDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EstimatedTotalNAV is IsoActiveOrHistoricCurrencyAndAmount EstimatedTotalNAVValue)
        {
            writer.WriteStartElement(null, "EstmtdTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(EstimatedTotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PreviousTotalNAV is IsoActiveOrHistoricCurrencyAndAmount PreviousTotalNAVValue)
        {
            writer.WriteStartElement(null, "PrvsTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(PreviousTotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (EstimatedTotalUnitsNumber is FinancialInstrumentQuantity1 EstimatedTotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "EstmtdTtlUnitsNb", xmlNamespace );
            EstimatedTotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreviousTotalUnitsNumber is FinancialInstrumentQuantity1 PreviousTotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "PrvsTtlUnitsNb", xmlNamespace );
            PreviousTotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstimatedTotalNAVChangeRate is IsoPercentageRate EstimatedTotalNAVChangeRateValue)
        {
            writer.WriteStartElement(null, "EstmtdTtlNAVChngRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(EstimatedTotalNAVChangeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (InvestmentCurrency is ActiveOrHistoricCurrencyCode InvestmentCurrencyValue)
        {
            writer.WriteStartElement(null, "InvstmtCcy", xmlNamespace );
            writer.WriteValue(InvestmentCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CurrencyStatus is CurrencyDesignation1 CurrencyStatusValue)
        {
            writer.WriteStartElement(null, "CcySts", xmlNamespace );
            CurrencyStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XcptnlNetCshFlowInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExceptionalNetCashFlowIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (Price is UnitPrice19 PriceValue)
        {
            writer.WriteStartElement(null, "Pric", xmlNamespace );
            PriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ForeignExchangeRate is ForeignExchangeTerms19 ForeignExchangeRateValue)
        {
            writer.WriteStartElement(null, "FXRate", xmlNamespace );
            ForeignExchangeRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstimatedPercentageOfShareClassTotalNAV is IsoPercentageRate EstimatedPercentageOfShareClassTotalNAVValue)
        {
            writer.WriteStartElement(null, "EstmtdPctgOfShrClssTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(EstimatedPercentageOfShareClassTotalNAVValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (EstimatedCashInForecastDetails is CashInForecast6 EstimatedCashInForecastDetailsValue)
        {
            writer.WriteStartElement(null, "EstmtdCshInFcstDtls", xmlNamespace );
            EstimatedCashInForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstimatedCashOutForecastDetails is CashOutForecast6 EstimatedCashOutForecastDetailsValue)
        {
            writer.WriteStartElement(null, "EstmtdCshOutFcstDtls", xmlNamespace );
            EstimatedCashOutForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstimatedNetCashForecastDetails is NetCashForecast4 EstimatedNetCashForecastDetailsValue)
        {
            writer.WriteStartElement(null, "EstmtdNetCshFcstDtls", xmlNamespace );
            EstimatedNetCashForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static EstimatedFundCashForecast6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
