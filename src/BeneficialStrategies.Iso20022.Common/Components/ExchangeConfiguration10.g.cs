//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ExchangeConfiguration10.  ISO2002 ID# _ZTaVgTATEeugIJ3Gvoevmg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Configuration parameters of data exchanges.
/// </summary>
public partial record ExchangeConfiguration10
     : IIsoXmlSerilizable<ExchangeConfiguration10>
{
    #nullable enable
    
    /// <summary>
    /// Exchange policy between parties.
    /// </summary>
    public ExchangePolicy2Code? ExchangePolicy { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _ZfXG0TATEeugIJ3Gvoevmg
    /// <summary>
    /// Maximum number of transactions without exchange.
    /// </summary>
    public IsoNumber? MaximumNumber { get; init; } 
    /// <summary>
    /// Maximum cumulative amount of the transactions without exchange.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? MaximumAmount { get; init; } 
    /// <summary>
    /// Definition of retry process if activation of an action fails.
    /// </summary>
    public ProcessRetry3? ReTry { get; init; } 
    /// <summary>
    /// Timing condition for periodic exchanges.
    /// </summary>
    public ProcessTiming6? TimeCondition { get; init; } 
    /// <summary>
    /// Failed transaction must be exchanged.
    /// </summary>
    public IsoTrueFalseIndicator? ExchangeFailed { get; init; } 
    /// <summary>
    /// Indicates that declined transaction must be exchanged.
    /// </summary>
    public IsoTrueFalseIndicator? ExchangeDeclined { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize ExchangePolicy, multiplicity Unknown
        if (MaximumNumber is IsoNumber MaximumNumberValue)
        {
            writer.WriteStartElement(null, "MaxNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(MaximumNumberValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (MaximumAmount is IsoImpliedCurrencyAndAmount MaximumAmountValue)
        {
            writer.WriteStartElement(null, "MaxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(MaximumAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ReTry is ProcessRetry3 ReTryValue)
        {
            writer.WriteStartElement(null, "ReTry", xmlNamespace );
            ReTryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TimeCondition is ProcessTiming6 TimeConditionValue)
        {
            writer.WriteStartElement(null, "TmCond", xmlNamespace );
            TimeConditionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExchangeFailed is IsoTrueFalseIndicator ExchangeFailedValue)
        {
            writer.WriteStartElement(null, "XchgFaild", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ExchangeFailedValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ExchangeDeclined is IsoTrueFalseIndicator ExchangeDeclinedValue)
        {
            writer.WriteStartElement(null, "XchgDclnd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ExchangeDeclinedValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static ExchangeConfiguration10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
