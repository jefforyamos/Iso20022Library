//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ExpectedExecutionDetails4.  ISO2002 ID# _6azDQUgXEea9YuSvQGoi-w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Expected trade date and expected settlement date of the order execution.
/// </summary>
public partial record ExpectedExecutionDetails4
     : IIsoXmlSerilizable<ExpectedExecutionDetails4>
{
    #nullable enable
    
    /// <summary>
    /// Expected date or expected date and time at which a price will be applied according to the terms of the prospectus.
    /// </summary>
    public DateAndDateTimeChoice_? ExpectedTradeDateTime { get; init; } 
    /// <summary>
    /// Date of a payment, for example, a prepayment date.
    /// </summary>
    public IsoISODate? ExpectedCashSettlementDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ExpectedTradeDateTime is DateAndDateTimeChoice_ ExpectedTradeDateTimeValue)
        {
            writer.WriteStartElement(null, "XpctdTradDtTm", xmlNamespace );
            ExpectedTradeDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExpectedCashSettlementDate is IsoISODate ExpectedCashSettlementDateValue)
        {
            writer.WriteStartElement(null, "XpctdCshSttlmDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(ExpectedCashSettlementDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
    }
    public static ExpectedExecutionDetails4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
