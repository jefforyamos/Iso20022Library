//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Fee1.  ISO2002 ID# _OIXCoDh4EeamLZQeccJa7w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money associated with a service.
/// </summary>
public partial record Fee1
     : IIsoXmlSerilizable<Fee1>
{
    #nullable enable
    
    /// <summary>
    /// Type of fee (charge/commission).
    /// </summary>
    public required ChargeType5Choice_ Type { get; init; } 
    /// <summary>
    /// Method used to calculate the fee (charge/commission).
    /// </summary>
    public ChargeBasis2Choice_? Basis { get; init; } 
    /// <summary>
    /// Standard fee (charge/commission) amount as specified in the fund prospectus or agreed for the account.
    /// </summary>
    public IsoActiveCurrencyAndAmount? StandardAmount { get; init; } 
    /// <summary>
    /// Standard fee (charge/commission) rate used to calculate the amount of the charge or fee, as specified in the fund prospectus or agreed for the account.
    /// </summary>
    public IsoPercentageRate? StandardRate { get; init; } 
    /// <summary>
    /// Discount or waiver applied to the fee (charge/commission).
    /// </summary>
    public ChargeOrCommissionDiscount1? DiscountDetails { get; init; } 
    /// <summary>
    /// Requested fee (charge/commission) amount as agreed for the account.
    /// </summary>
    public IsoActiveCurrencyAndAmount? RequestedAmount { get; init; } 
    /// <summary>
    /// Requested rate used to calculate the amount of the fee (charge/commission), as agreed for the account.
    /// </summary>
    public IsoPercentageRate? RequestedRate { get; init; } 
    /// <summary>
    /// Reference to a sales agreement that overrides normal processing or the Service Level Agreement (SLA), such as a fee (charge/commission).
    /// </summary>
    public IsoMax35Text? NonStandardSLAReference { get; init; } 
    /// <summary>
    /// Party entitled to the amount of money resulting from a fee (charge/commission).
    /// </summary>
    public PartyIdentification113? RecipientIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Basis is ChargeBasis2Choice_ BasisValue)
        {
            writer.WriteStartElement(null, "Bsis", xmlNamespace );
            BasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StandardAmount is IsoActiveCurrencyAndAmount StandardAmountValue)
        {
            writer.WriteStartElement(null, "StdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(StandardAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (StandardRate is IsoPercentageRate StandardRateValue)
        {
            writer.WriteStartElement(null, "StdRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(StandardRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (DiscountDetails is ChargeOrCommissionDiscount1 DiscountDetailsValue)
        {
            writer.WriteStartElement(null, "DscntDtls", xmlNamespace );
            DiscountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RequestedAmount is IsoActiveCurrencyAndAmount RequestedAmountValue)
        {
            writer.WriteStartElement(null, "ReqdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(RequestedAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (RequestedRate is IsoPercentageRate RequestedRateValue)
        {
            writer.WriteStartElement(null, "ReqdRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(RequestedRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (NonStandardSLAReference is IsoMax35Text NonStandardSLAReferenceValue)
        {
            writer.WriteStartElement(null, "NonStdSLARef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NonStandardSLAReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RecipientIdentification is PartyIdentification113 RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Fee1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
