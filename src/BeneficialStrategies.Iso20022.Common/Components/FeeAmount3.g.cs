//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FeeAmount3.  ISO2002 ID# _pFtW8ZF2EeukDPgU2BMkjQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount, currency, exchange rate and quotation date, sign and label.
/// </summary>
public partial record FeeAmount3
     : IIsoXmlSerilizable<FeeAmount3>
{
    #nullable enable
    
    /// <summary>
    /// Amount exclusive of currency.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Contains code list for a credit or debit transaction
    /// </summary>
    public CreditDebit3Code? CreditDebit { get; init; } 
    /// <summary>
    /// Currency for the type of amount.
    /// </summary>
    public ISO3NumericCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Exchange rate of the currency code associated with the amount. 
    /// </summary>
    public IsoBaseOne25Rate? EffectiveExchangeRate { get; init; } 
    /// <summary>
    /// Date at which the exchange rate effective.
    /// </summary>
    public IsoISODate? ConversionDate { get; init; } 
    /// <summary>
    /// Time at which the exchange rate effective.
    /// </summary>
    public IsoISOTime? ConversionTime { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(Amount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (CreditDebit is CreditDebit3Code CreditDebitValue)
        {
            writer.WriteStartElement(null, "CdtDbt", xmlNamespace );
            writer.WriteValue(CreditDebitValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Currency is ISO3NumericCurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (EffectiveExchangeRate is IsoBaseOne25Rate EffectiveExchangeRateValue)
        {
            writer.WriteStartElement(null, "FctvXchgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoBaseOne25Rate(EffectiveExchangeRateValue)); // data type BaseOne25Rate System.Decimal
            writer.WriteEndElement();
        }
        if (ConversionDate is IsoISODate ConversionDateValue)
        {
            writer.WriteStartElement(null, "ConvsDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(ConversionDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (ConversionTime is IsoISOTime ConversionTimeValue)
        {
            writer.WriteStartElement(null, "ConvsTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(ConversionTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
    }
    public static FeeAmount3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
