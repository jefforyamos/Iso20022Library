//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrument22.  ISO2002 ID# _Weu8C9p-Ed-ak6NoX_4Aeg_-1232539888.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Security that is a sub-set of an investment fund, and is governed by the same investment fund policy, for example, dividend option or valuation currency.
/// </summary>
public partial record FinancialInstrument22
     : IIsoXmlSerilizable<FinancialInstrument22>
{
    #nullable enable
    
    /// <summary>
    /// Features of units offered by a fund. For example, a unit may have a specific load structure, eg, front end or back end, an income policy, for example, pay out or accumulate, or a trailer policy, eg, with or without. Fund classes are typically denoted by a single character, for example, 'Class A', 'Class 2'.
    /// </summary>
    public IsoMax35Text? ClassType { get; init; } 
    /// <summary>
    /// Specifies the form, that is, ownership, of the security.
    /// </summary>
    public FormOfSecurity1Code? SecuritiesForm { get; init; } 
    /// <summary>
    /// Income policy relating to a class type, that is, if income is paid out or retained in the fund.
    /// </summary>
    public DistributionPolicy1Code? DistributionPolicy { get; init; } 
    /// <summary>
    /// Company specific description of a group of funds.
    /// </summary>
    public IsoRestrictedFINXMax140Text? ProductGroup { get; init; } 
    /// <summary>
    /// Name of the umbrella fund in which financial instrument is contained.
    /// </summary>
    public IsoMax35Text? UmbrellaName { get; init; } 
    /// <summary>
    /// Currency of the investment fund class.
    /// </summary>
    public ActiveCurrencyCode? BaseCurrency { get; init; } 
    /// <summary>
    /// Currency in which a security is issued or redenominated.
    /// </summary>
    public ActiveCurrencyCode? DenominationCurrency { get; init; } 
    /// <summary>
    /// Currency to be used for pricing the fund. This currency must be among the set of currencies in which the price may be expressed, as stated in the prospectus.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? RequestedNAVCurrency { get; init; } 
    /// <summary>
    /// Indicates whether the fund has two prices.
    /// </summary>
    public IsoYesNoIndicator? DualFundIndicator { get; init; } 
    /// <summary>
    /// Country where the fund has legal domicile as reflected in the ISIN classification.
    /// </summary>
    public CountryCode? CountryOfDomicile { get; init; } 
    /// <summary>
    /// Countries where the fund is registered for distribution.
    /// </summary>
    public CountryCode? RegisteredDistributionCountry { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ClassType is IsoMax35Text ClassTypeValue)
        {
            writer.WriteStartElement(null, "ClssTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ClassTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SecuritiesForm is FormOfSecurity1Code SecuritiesFormValue)
        {
            writer.WriteStartElement(null, "SctiesForm", xmlNamespace );
            writer.WriteValue(SecuritiesFormValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DistributionPolicy is DistributionPolicy1Code DistributionPolicyValue)
        {
            writer.WriteStartElement(null, "DstrbtnPlcy", xmlNamespace );
            writer.WriteValue(DistributionPolicyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ProductGroup is IsoRestrictedFINXMax140Text ProductGroupValue)
        {
            writer.WriteStartElement(null, "PdctGrp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINXMax140Text(ProductGroupValue)); // data type RestrictedFINXMax140Text System.String
            writer.WriteEndElement();
        }
        if (UmbrellaName is IsoMax35Text UmbrellaNameValue)
        {
            writer.WriteStartElement(null, "UmbrllNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(UmbrellaNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (BaseCurrency is ActiveCurrencyCode BaseCurrencyValue)
        {
            writer.WriteStartElement(null, "BaseCcy", xmlNamespace );
            writer.WriteValue(BaseCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DenominationCurrency is ActiveCurrencyCode DenominationCurrencyValue)
        {
            writer.WriteStartElement(null, "DnmtnCcy", xmlNamespace );
            writer.WriteValue(DenominationCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RequestedNAVCurrency is ActiveOrHistoricCurrencyCode RequestedNAVCurrencyValue)
        {
            writer.WriteStartElement(null, "ReqdNAVCcy", xmlNamespace );
            writer.WriteValue(RequestedNAVCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DualFundIndicator is IsoYesNoIndicator DualFundIndicatorValue)
        {
            writer.WriteStartElement(null, "DualFndInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DualFundIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CountryOfDomicile is CountryCode CountryOfDomicileValue)
        {
            writer.WriteStartElement(null, "CtryOfDmcl", xmlNamespace );
            writer.WriteValue(CountryOfDomicileValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RegisteredDistributionCountry is CountryCode RegisteredDistributionCountryValue)
        {
            writer.WriteStartElement(null, "RegdDstrbtnCtry", xmlNamespace );
            writer.WriteValue(RegisteredDistributionCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrument22 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
