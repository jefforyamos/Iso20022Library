//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrument40.  ISO2002 ID# _g09jswgOEeSFYfyUKDXKaw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Security that is a sub-set of an investment fund, and is governed by the same investment fund policy, eg, dividend option or valuation currency.
/// </summary>
public partial record FinancialInstrument40
     : IIsoXmlSerilizable<FinancialInstrument40>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier of a security, assigned under a formal or proprietary identification scheme.
    /// </summary>
    public required SecurityIdentification3Choice_ Identification { get; init; } 
    /// <summary>
    /// Name of the financial instrument in free format text.
    /// </summary>
    public IsoMax350Text? Name { get; init; } 
    /// <summary>
    /// Specifies whether the financial instrument is transferred as an asset or as cash.
    /// </summary>
    public required TransferType1Code TransferType { get; init; } 
    /// <summary>
    /// Specifies the quantity of assets to be transferred in units or in a percentage rate.
    /// </summary>
    public required Quantity14Choice_ Quantity { get; init; } 
    /// <summary>
    /// Average cost per share of a security, including all charges and commissions.
    /// </summary>
    public IsoActiveCurrencyAndAmount? AverageAcquisitionPrice { get; init; } 
    /// <summary>
    /// Identifies the currency used to transfer the holdings. Some transfer agents register holdings grouped by currency in addition to using the ISIN for multi-currency fund shares.
    /// </summary>
    public CurrencyCode? TransferCurrency { get; init; } 
    /// <summary>
    /// Net asset on balance sheet - total portfolio value minus or plus the unrealised gain or loss.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalBookValue { get; init; } 
    /// <summary>
    /// Account held in the name of a party that is not the name of the beneficial owner of the shares.
    /// </summary>
    public Account16? TransfereeAccount { get; init; } 
    /// <summary>
    /// Sub-accounts that are grouped in a master or omnibus account.
    /// </summary>
    public SubAccount1? SubAccountDetails { get; init; } 
    /// <summary>
    /// Party that receives securities from the delivering agent via the place of settlement, for example, securities central depository.
    /// </summary>
    public PartyIdentificationAndAccount93? ReceivingAgentDetails { get; init; } 
    /// <summary>
    /// Party that delivers securities to the receiving agent at the place of settlement, for example, a central securities depository.
    /// </summary>
    public PartyIdentificationAndAccount93? DeliveringAgentDetails { get; init; } 
    /// <summary>
    /// Date and time at which the securities are to be exchanged at the International Central Securities Depository (ICSD) or Central Securities Depository (CSD).
    /// </summary>
    public IsoISODate? RequestedSettlementDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Name is IsoMax350Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TrfTp", xmlNamespace );
        writer.WriteValue(TransferType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Qty", xmlNamespace );
        Quantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AverageAcquisitionPrice is IsoActiveCurrencyAndAmount AverageAcquisitionPriceValue)
        {
            writer.WriteStartElement(null, "AvrgAcqstnPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(AverageAcquisitionPriceValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TransferCurrency is CurrencyCode TransferCurrencyValue)
        {
            writer.WriteStartElement(null, "TrfCcy", xmlNamespace );
            writer.WriteValue(TransferCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TotalBookValue is IsoActiveOrHistoricCurrencyAndAmount TotalBookValueValue)
        {
            writer.WriteStartElement(null, "TtlBookVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalBookValueValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TransfereeAccount is Account16 TransfereeAccountValue)
        {
            writer.WriteStartElement(null, "TrfeeAcct", xmlNamespace );
            TransfereeAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SubAccountDetails is SubAccount1 SubAccountDetailsValue)
        {
            writer.WriteStartElement(null, "SubAcctDtls", xmlNamespace );
            SubAccountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReceivingAgentDetails is PartyIdentificationAndAccount93 ReceivingAgentDetailsValue)
        {
            writer.WriteStartElement(null, "RcvgAgtDtls", xmlNamespace );
            ReceivingAgentDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeliveringAgentDetails is PartyIdentificationAndAccount93 DeliveringAgentDetailsValue)
        {
            writer.WriteStartElement(null, "DlvrgAgtDtls", xmlNamespace );
            DeliveringAgentDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RequestedSettlementDate is IsoISODate RequestedSettlementDateValue)
        {
            writer.WriteStartElement(null, "ReqdSttlmDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(RequestedSettlementDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrument40 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
