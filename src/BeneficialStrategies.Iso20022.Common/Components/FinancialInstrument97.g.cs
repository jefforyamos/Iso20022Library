//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrument97.  ISO2002 ID# _MQz4EZJOEeuAlLVx8pyt3w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Tangible items of value to a business.
/// </summary>
public partial record FinancialInstrument97
     : IIsoXmlSerilizable<FinancialInstrument97>
{
    #nullable enable
    
    /// <summary>
    /// Financial instrument which represents a title of ownership in a company, ie, the shareholder is entitled to a part of the company's profit - usually by payment of a dividend - and to voting rights, if any. Each company issues generally different classes of shares, eg, ordinary or common shares, which have no guaranteed amount of dividend but carry voting rights, or preferred shares, which receive dividends before ordinary shares but have no voting right.
    /// </summary>
    public Equity3? Equity { get; init; } 
    /// <summary>
    /// Financial instrument that gives the holder the right to purchase shares or bonds at a given price within a specified time.
    /// </summary>
    public Warrant4? Warrant { get; init; } 
    /// <summary>
    /// Financial instruments evidencing moneys owed by the issuer to the holder on terms as specified.
    /// </summary>
    public Debt5? Debt { get; init; } 
    /// <summary>
    /// Choice between type of derivatives.
    /// </summary>
    public Derivative4? Derivative { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Equity is Equity3 EquityValue)
        {
            writer.WriteStartElement(null, "Eqty", xmlNamespace );
            EquityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Warrant is Warrant4 WarrantValue)
        {
            writer.WriteStartElement(null, "Warrt", xmlNamespace );
            WarrantValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Debt is Debt5 DebtValue)
        {
            writer.WriteStartElement(null, "Debt", xmlNamespace );
            DebtValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Derivative is Derivative4 DerivativeValue)
        {
            writer.WriteStartElement(null, "Deriv", xmlNamespace );
            DerivativeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrument97 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
