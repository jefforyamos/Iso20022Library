//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrumentAggregateBalance1.  ISO2002 ID# _1TSje4jiEeONZKAAW4pOaQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Aggregated position of holdings held in a securities account for a specified financial instrument.
/// </summary>
public partial record FinancialInstrumentAggregateBalance1
     : IIsoXmlSerilizable<FinancialInstrumentAggregateBalance1>
{
    #nullable enable
    
    /// <summary>
    /// Date of the line of holding in the statement.
    /// </summary>
    public required IsoISODate ItemDate { get; init; } 
    /// <summary>
    /// Balances and sub-balances attributed to the holding.
    /// </summary>
    public required FinancialInstrumentAggregateBalance1Choice_ Holdings { get; init; } 
    /// <summary>
    /// Details on the price value, type and source.
    /// </summary>
    public Price6? Price { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ItmDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(ItemDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Hldgs", xmlNamespace );
        Holdings.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Price is Price6 PriceValue)
        {
            writer.WriteStartElement(null, "Pric", xmlNamespace );
            PriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrumentAggregateBalance1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
