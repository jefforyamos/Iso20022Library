//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrumentAttributes35.  ISO2002 ID# _pK6Eof_hEeCcv6nahBzk1w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Elements characterising a financial instrument.
/// </summary>
[DataContract]
[XmlType]
public partial record FinancialInstrumentAttributes35
{
    #nullable enable
    
    /// <summary>
    /// Market(s) on which the security is listed.
    /// </summary>
    [DataMember]
    public MarketIdentification3Choice_? PlaceOfListing { get; init; } 
    /// <summary>
    /// Specifies the computation method of (accrued) interest of the security.
    /// </summary>
    [DataMember]
    public InterestComputationMethodFormat1Choice_? DayCountBasis { get; init; } 
    /// <summary>
    /// Specifies the form, this is, ownership, of the security.
    /// </summary>
    [DataMember]
    public FormOfSecurity2Choice_? RegistrationForm { get; init; } 
    /// <summary>
    /// Specifies the frequency of an interest payment.
    /// </summary>
    [DataMember]
    public Frequency3Choice_? PaymentFrequency { get; init; } 
    /// <summary>
    /// Status of payment of a security at a particular time.
    /// </summary>
    [DataMember]
    public SecuritiesPaymentStatus2Choice_? PaymentStatus { get; init; } 
    /// <summary>
    /// Specifies the frequency of change to the variable rate of an interest bearing instrument.
    /// </summary>
    [DataMember]
    public Frequency3Choice_? VariableRateChangeFrequency { get; init; } 
    /// <summary>
    /// Classification type of the financial instrument, as per the ISO Classification of Financial Instrument (CFI) codification, for example, common share with voting rights, fully paid, or registered.
    /// </summary>
    [DataMember]
    public ClassificationType2Choice_? ClassificationType { get; init; } 
    /// <summary>
    /// Specifies how an option can be exercised (American, European, Bermudan).
    /// </summary>
    [DataMember]
    public OptionStyle4Choice_? OptionStyle { get; init; } 
    /// <summary>
    /// Specifies whether it is a Call option (right to purchase a specific underlying asset) or a Put option (right to sell a specific underlying asset).
    /// </summary>
    [DataMember]
    public OptionType2Choice_? OptionType { get; init; } 
    /// <summary>
    /// Currency in which a security is issued or redenominated.
    /// </summary>
    [DataMember]
    public ActiveOrHistoricCurrencyCode? DenominationCurrency { get; init; } 
    /// <summary>
    /// Next payment date of an interest bearing financial instrument.
    /// </summary>
    [DataMember]
    public IsoISODate? CouponDate { get; init; } 
    /// <summary>
    /// Date on which a privilege expires.
    /// </summary>
    [DataMember]
    public IsoISODate? ExpiryDate { get; init; } 
    /// <summary>
    /// Date at which the interest rate of an interest bearing security will be calculated and reset, according to the terms of the issue.
    /// </summary>
    [DataMember]
    public IsoISODate? FloatingRateFixingDate { get; init; } 
    /// <summary>
    /// Planned final repayment date at the time of issuance.
    /// </summary>
    [DataMember]
    public IsoISODate? MaturityDate { get; init; } 
    /// <summary>
    /// Date at which the security was made available.
    /// </summary>
    [DataMember]
    public IsoISODate? IssueDate { get; init; } 
    /// <summary>
    /// Next date at which the issuer has the right to pay the security prior to maturity.
    /// </summary>
    [DataMember]
    public IsoISODate? NextCallableDate { get; init; } 
    /// <summary>
    /// Date at which the holder has the right to ask for redemption of the security prior to final maturity.
    /// </summary>
    [DataMember]
    public IsoISODate? PutableDate { get; init; } 
    /// <summary>
    /// First date at which a security begins to accrue interest.
    /// </summary>
    [DataMember]
    public IsoISODate? DatedDate { get; init; } 
    /// <summary>
    /// Date at which the first interest payment is due to holders of the security.
    /// </summary>
    [DataMember]
    public IsoISODate? FirstPaymentDate { get; init; } 
    /// <summary>
    /// Rate expressed as a decimal between 0 and 1 that was applicable before the current factor and defines the outstanding principal of the financial instrument (for factored securities).
    /// </summary>
    [DataMember]
    public IsoBaseOneRate? PreviousFactor { get; init; } 
    /// <summary>
    /// Rate expressed as a decimal between 0 and 1 defining the outstanding principal of the financial instrument (for factored securities).
    /// </summary>
    [DataMember]
    public IsoBaseOneRate? CurrentFactor { get; init; } 
    /// <summary>
    /// Rate expressed as a decimal between 0 and 1 that will be applicable as of the next factor date and defines the outstanding principal of the financial instrument (for factored securities).
    /// </summary>
    [DataMember]
    public IsoBaseOneRate? NextFactor { get; init; } 
    /// <summary>
    /// Per annum ratio of interest paid to the principal amount of the financial instrument for a specific period of time.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? InterestRate { get; init; } 
    /// <summary>
    /// Rate of return anticipated on a bond when held until maturity date.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? YieldToMaturityRate { get; init; } 
    /// <summary>
    /// Interest rate applicable to the next interest payment period in relation to variable rate instruments.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? NextInterestRate { get; init; } 
    /// <summary>
    /// Specifies the reference rate for fixed income instruments where the |price of the instrument is indexed to the price of an underlying benchmark.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? IndexRateBasis { get; init; } 
    /// <summary>
    /// Number of the coupon attached to the physical security.
    /// </summary>
    [DataMember]
    public Number2Choice_? CouponAttachedNumber { get; init; } 
    /// <summary>
    /// Number identifying a group of underlying assets assigned by the issuer of a factored security.
    /// </summary>
    [DataMember]
    public GenericIdentification37? PoolNumber { get; init; } 
    /// <summary>
    /// Indicates whether the interest rate of an interest bearing instrument is reset periodically.
    /// </summary>
    [DataMember]
    public IsoYesNoIndicator? VariableRateIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the issuer has the right to pay the security prior to maturity. Also called RetractableIndicator.
    /// </summary>
    [DataMember]
    public IsoYesNoIndicator? CallableIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the holder has the right to ask for redemption of the security prior to final maturity. Also called RedeemableIndicator.
    /// </summary>
    [DataMember]
    public IsoYesNoIndicator? PutableIndicator { get; init; } 
    /// <summary>
    /// Value of the price, for example, as a currency and value per unit or as a percentage.
    /// </summary>
    [DataMember]
    public PriceType1Choice_? MarketOrIndicativePrice { get; init; } 
    /// <summary>
    /// Predetermined price at which the holder of a derivative will buy or sell the underlying instrument.
    /// </summary>
    [DataMember]
    public Price2? ExercisePrice { get; init; } 
    /// <summary>
    /// Pre-determined price at which the holder of a right is entitled to buy the underlying instrument.
    /// </summary>
    [DataMember]
    public Price2? SubscriptionPrice { get; init; } 
    /// <summary>
    /// Price of one target security in the conversion.
    /// </summary>
    [DataMember]
    public Price2? ConversionPrice { get; init; } 
    /// <summary>
    /// Predetermined price at which the holder will have to buy or sell the underlying instrument.
    /// </summary>
    [DataMember]
    public Price2? StrikePrice { get; init; } 
    /// <summary>
    /// Indicates the minimum tradable quantity of a security.
    /// </summary>
    [DataMember]
    public FinancialInstrumentQuantity1Choice_? MinimumNominalQuantity { get; init; } 
    /// <summary>
    /// Ratio or multiplying factor used to convert one contract into a quantity.
    /// </summary>
    [DataMember]
    public FinancialInstrumentQuantity1Choice_? ContractSize { get; init; } 
    /// <summary>
    /// Identification of the underlying security by an ISIN.
    /// </summary>
    [DataMember]
    public ValueList<SecurityIdentification14> UnderlyingFinancialInstrumentIdentification { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Provides additional information about the financial instrument in narrative form.
    /// </summary>
    [DataMember]
    public IsoMax350Text? FinancialInstrumentAttributeAdditionalDetails { get; init; } 
    
    #nullable disable
}
