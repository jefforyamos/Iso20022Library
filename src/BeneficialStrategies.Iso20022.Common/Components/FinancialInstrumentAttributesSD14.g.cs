//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrumentAttributesSD14.  ISO2002 ID# _WqwF8ZEWEeajS_7NioJdVA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding underlying security details.
/// </summary>
public partial record FinancialInstrumentAttributesSD14
     : IIsoXmlSerilizable<FinancialInstrumentAttributesSD14>
{
    #nullable enable
    
    /// <summary>
    /// xPath to the element that is being extended.
    /// </summary>
    public required IsoMax350Text PlaceAndName { get; init; } 
    /// <summary>
    /// Country of source income for the security.
    /// </summary>
    public CountryCode? IncomeSourceCountry { get; init; } 
    /// <summary>
    /// Classification of instruments into asset classes at DTC (The Depository Trust Corporation).
    /// </summary>
    public AssetClass1Code? DTCAssetClass { get; init; } 
    /// <summary>
    /// Further classification of instruments into (issue) asset types at DTC (The Depository Trust Corporation).
    /// </summary>
    public DTCAssetType2Code? DTCAssetType { get; init; } 
    /// <summary>
    /// Indicates whether the security is eligible for holding at DTC.
    /// </summary>
    public IsoYesNoIndicator? SecurityEligibilityIndicator { get; init; } 
    /// <summary>
    /// Ticket symbol for the event security (underlying security).
    /// </summary>
    public IsoMax35Text? TickerSymbol { get; init; } 
    /// <summary>
    /// Security whose characteristics mirror the event security for purposes of FCP eligibility and tax relief. Certain derivative securities like HOLDR may have certain events where the source of payments are from an underlying security.
    /// </summary>
    public SecurityIdentification15? LinkedSecurity { get; init; } 
    /// <summary>
    /// Represents the 'original' security identifier of the event. It is used in the scenarios like "partial call" where there are 2 events. The first event distributes into the Contra CUSIP, a temporary security; and on the second event that temporary security becomes the underlying security of the event. This element is used in the second event to point to the original CUSIP.
    /// </summary>
    public OtherIdentification2? OriginatingSecurityIdentification { get; init; } 
    /// <summary>
    /// Security description associated with DIVANN legacy system which contains additional values such as NTL for interest only notional.
    /// </summary>
    public IsoMax50Text? DIVANNSecurityDescription { get; init; } 
    /// <summary>
    /// Indicates whether the event security is a foreign issue. This field will be initially used for CD Early Redemptions AC63.
    /// </summary>
    public IsoYesNoIndicator? ForeignIssueFlag { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndName)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (IncomeSourceCountry is CountryCode IncomeSourceCountryValue)
        {
            writer.WriteStartElement(null, "IncmSrcCtry", xmlNamespace );
            writer.WriteValue(IncomeSourceCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DTCAssetClass is AssetClass1Code DTCAssetClassValue)
        {
            writer.WriteStartElement(null, "DTCAsstClss", xmlNamespace );
            writer.WriteValue(DTCAssetClassValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (DTCAssetType is DTCAssetType2Code DTCAssetTypeValue)
        {
            writer.WriteStartElement(null, "DTCAsstTp", xmlNamespace );
            writer.WriteValue(DTCAssetTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SecurityEligibilityIndicator is IsoYesNoIndicator SecurityEligibilityIndicatorValue)
        {
            writer.WriteStartElement(null, "SctyElgbltyInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(SecurityEligibilityIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (TickerSymbol is IsoMax35Text TickerSymbolValue)
        {
            writer.WriteStartElement(null, "TckrSymb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TickerSymbolValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (LinkedSecurity is SecurityIdentification15 LinkedSecurityValue)
        {
            writer.WriteStartElement(null, "LkdScty", xmlNamespace );
            LinkedSecurityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginatingSecurityIdentification is OtherIdentification2 OriginatingSecurityIdentificationValue)
        {
            writer.WriteStartElement(null, "OrgtgSctyId", xmlNamespace );
            OriginatingSecurityIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DIVANNSecurityDescription is IsoMax50Text DIVANNSecurityDescriptionValue)
        {
            writer.WriteStartElement(null, "DIVANNSctyDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax50Text(DIVANNSecurityDescriptionValue)); // data type Max50Text System.String
            writer.WriteEndElement();
        }
        if (ForeignIssueFlag is IsoYesNoIndicator ForeignIssueFlagValue)
        {
            writer.WriteStartElement(null, "FrgnIsseFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ForeignIssueFlagValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrumentAttributesSD14 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
