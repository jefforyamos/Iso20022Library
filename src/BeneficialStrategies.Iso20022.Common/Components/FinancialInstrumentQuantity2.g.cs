//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FinancialInstrumentQuantity2.  ISO2002 ID# _SGABM9p-Ed-ak6NoX_4Aeg_345752631.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Quantity of the financial instrument subscribed.
/// </summary>
public partial record FinancialInstrumentQuantity2
     : IIsoXmlSerilizable<FinancialInstrumentQuantity2>
{
    #nullable enable
    
    /// <summary>
    /// Quantity of investment fund units to be subscribed.
    /// </summary>
    public required FinancialInstrumentQuantity1 UnitsNumber { get; init; } 
    /// <summary>
    /// Amount of money to be invested.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? OrderedAmount { get; init; } 
    /// <summary>
    /// Amount of money invested after deduction of charges, commissions and taxes.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? NetAmount { get; init; } 
    /// <summary>
    /// Amount of money invested before deduction of charges, commissions and taxes.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? GrossAmount { get; init; } 
    /// <summary>
    /// Amount of money invested.
    /// </summary>
    public IsoActiveCurrencyAndAmount? ExecutedAmount { get; init; } 
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "UnitsNb", xmlNamespace );
        UnitsNumber.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (OrderedAmount is IsoActiveOrHistoricCurrencyAndAmount OrderedAmountValue)
        {
            writer.WriteStartElement(null, "OrdrdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(OrderedAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (NetAmount is IsoActiveOrHistoricCurrencyAndAmount NetAmountValue)
        {
            writer.WriteStartElement(null, "NetAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(NetAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (GrossAmount is IsoActiveOrHistoricCurrencyAndAmount GrossAmountValue)
        {
            writer.WriteStartElement(null, "GrssAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(GrossAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ExecutedAmount is IsoActiveCurrencyAndAmount ExecutedAmountValue)
        {
            writer.WriteStartElement(null, "ExctdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(ExecutedAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (SettlementAmount is IsoActiveCurrencyAndAmount SettlementAmountValue)
        {
            writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(SettlementAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static FinancialInstrumentQuantity2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
