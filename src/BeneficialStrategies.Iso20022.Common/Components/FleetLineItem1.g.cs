//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FleetLineItem1.  ISO2002 ID# _BF5jY_jUEeiM7KpzmLtmTQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Supplies additional transaction information for fleet transactions.
/// </summary>
public partial record FleetLineItem1
     : IIsoXmlSerilizable<FleetLineItem1>
{
    #nullable enable
    
    /// <summary>
    /// Indicates whether or not the line item represents a fuel or non-fuel product or service.
    /// True = Fuel item
    /// False = Non-fuel item
    /// </summary>
    public required IsoTrueFalseIndicator FuelIndicator { get; init; } 
    /// <summary>
    /// Type of service received at the acceptor location. 
    /// </summary>
    public FleetServiceType1Code? ServiceType { get; init; } 
    /// <summary>
    /// Code that identifies the brand of the fuel purchased. 
    /// </summary>
    public IsoMax4Text? FuelBrandCode { get; init; } 
    /// <summary>
    /// Product code of fleet product or service being purchased.
    /// </summary>
    public IsoMax4Text? FleetProductCode { get; init; } 
    /// <summary>
    /// Contains a code that identifies a category of fleet products or services. 
    /// </summary>
    public IsoMax35Text? FleetProductCategory { get; init; } 
    /// <summary>
    /// Contains a code that identifies the product qualifier of the fleet product or service. 
    /// </summary>
    public IsoMax6Text? FleetProductQualifier { get; init; } 
    /// <summary>
    /// Contains a code that identifies the product code assigner.
    /// </summary>
    public IsoMax35Text? FleetProductCodeAssigner { get; init; } 
    /// <summary>
    /// Indicates whether or not tax is included in unit price.
    /// True: includes tax 
    /// False: does not include tax.   
    /// </summary>
    public IsoTrueFalseIndicator? UnitPriceTaxIndicator { get; init; } 
    /// <summary>
    /// Unit price of the fleet line item.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? UnitPrice { get; init; } 
    /// <summary>
    /// Unit of measure of the item purchased.
    /// </summary>
    public UnitOfMeasure1Code? UnitOfMeasure { get; init; } 
    /// <summary>
    /// Other unit of measure.
    /// </summary>
    public IsoMax35Text? OtherUnitOfMeasure { get; init; } 
    /// <summary>
    /// Quantity of product or item.
    /// </summary>
    public IsoMax12NumericText? ProductQuantity { get; init; } 
    /// <summary>
    /// Contains the discount amount applied to the fleet transaction (includes coupons).
    /// </summary>
    public IsoImpliedCurrencyAndAmount? DiscountAmount { get; init; } 
    /// <summary>
    /// Indicates whether or not amount of fleet purchase is taxable. 
    /// </summary>
    public IsoTrueFalseIndicator? NonTaxableIndicator { get; init; } 
    /// <summary>
    /// Taxes related to the products or services. 
    /// </summary>
    public Tax33? Tax { get; init; } 
    /// <summary>
    /// Total amount excluding tax.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? TotalAmountExcludingTax { get; init; } 
    /// <summary>
    /// Total amount including tax.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? TotalAmountIncludingTax { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "FuelInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(FuelIndicator)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (ServiceType is FleetServiceType1Code ServiceTypeValue)
        {
            writer.WriteStartElement(null, "SvcTp", xmlNamespace );
            writer.WriteValue(ServiceTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (FuelBrandCode is IsoMax4Text FuelBrandCodeValue)
        {
            writer.WriteStartElement(null, "FuelBrndCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4Text(FuelBrandCodeValue)); // data type Max4Text System.String
            writer.WriteEndElement();
        }
        if (FleetProductCode is IsoMax4Text FleetProductCodeValue)
        {
            writer.WriteStartElement(null, "FleetPdctCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4Text(FleetProductCodeValue)); // data type Max4Text System.String
            writer.WriteEndElement();
        }
        if (FleetProductCategory is IsoMax35Text FleetProductCategoryValue)
        {
            writer.WriteStartElement(null, "FleetPdctCtgy", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(FleetProductCategoryValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (FleetProductQualifier is IsoMax6Text FleetProductQualifierValue)
        {
            writer.WriteStartElement(null, "FleetPdctQlfr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax6Text(FleetProductQualifierValue)); // data type Max6Text System.String
            writer.WriteEndElement();
        }
        if (FleetProductCodeAssigner is IsoMax35Text FleetProductCodeAssignerValue)
        {
            writer.WriteStartElement(null, "FleetPdctCdAssgnr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(FleetProductCodeAssignerValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (UnitPriceTaxIndicator is IsoTrueFalseIndicator UnitPriceTaxIndicatorValue)
        {
            writer.WriteStartElement(null, "UnitPricTaxInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(UnitPriceTaxIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (UnitPrice is IsoImpliedCurrencyAndAmount UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(UnitPriceValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (UnitOfMeasure is UnitOfMeasure1Code UnitOfMeasureValue)
        {
            writer.WriteStartElement(null, "UnitOfMeasr", xmlNamespace );
            writer.WriteValue(UnitOfMeasureValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OtherUnitOfMeasure is IsoMax35Text OtherUnitOfMeasureValue)
        {
            writer.WriteStartElement(null, "OthrUnitOfMeasr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherUnitOfMeasureValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ProductQuantity is IsoMax12NumericText ProductQuantityValue)
        {
            writer.WriteStartElement(null, "PdctQty", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax12NumericText(ProductQuantityValue)); // data type Max12NumericText System.String
            writer.WriteEndElement();
        }
        if (DiscountAmount is IsoImpliedCurrencyAndAmount DiscountAmountValue)
        {
            writer.WriteStartElement(null, "DscntAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(DiscountAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (NonTaxableIndicator is IsoTrueFalseIndicator NonTaxableIndicatorValue)
        {
            writer.WriteStartElement(null, "NonTaxblInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(NonTaxableIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (Tax is Tax33 TaxValue)
        {
            writer.WriteStartElement(null, "Tax", xmlNamespace );
            TaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalAmountExcludingTax is IsoImpliedCurrencyAndAmount TotalAmountExcludingTaxValue)
        {
            writer.WriteStartElement(null, "TtlAmtExclgTax", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(TotalAmountExcludingTaxValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalAmountIncludingTax is IsoImpliedCurrencyAndAmount TotalAmountIncludingTaxValue)
        {
            writer.WriteStartElement(null, "TtlAmtInclgTax", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(TotalAmountIncludingTaxValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static FleetLineItem1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
