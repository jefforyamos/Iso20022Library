//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FloatingRate13.  ISO2002 ID# _WIFf0SJdEe2zWP9pqvmqdw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Floating rate related information.
/// </summary>
public partial record FloatingRate13
     : IIsoXmlSerilizable<FloatingRate13>
{
    #nullable enable
    
    /// <summary>
    /// Identifier of the security subject of the transaction
    /// </summary>
    public IsoISINOct2015Identifier? Identification { get; init; } 
    /// <summary>
    /// The full name of the interest rate as assigned by the index provider.
    /// </summary>
    public IsoMax350Text? Name { get; init; } 
    /// <summary>
    /// Indication of the floating rate used.
    /// </summary>
    public FloatingRateIdentification8Choice_? Rate { get; init; } 
    /// <summary>
    /// Information related to reference period.
    /// </summary>
    public InterestRateContractTerm4? ReferencePeriod { get; init; } 
    /// <summary>
    /// Indicates a margin, over or under an index, which determines a price or a rate for each leg of a derivative transaction with periodic payments; or a difference between two floating leg indexes.
    /// </summary>
    public SecuritiesTransactionPrice20Choice_? Spread { get; init; } 
    /// <summary>
    /// Identifies the computation method that determines how interest payments are calculated. It is used to compute the year fraction of the calculation period, and indicates the number of days in the calculation period divided by the number of days in the year.
    /// </summary>
    public InterestComputationMethodFormat7? DayCount { get; init; } 
    /// <summary>
    /// Specifies the time unit associated with the frequency of payments.
    /// </summary>
    public InterestRateFrequency3Choice_? PaymentFrequency { get; init; } 
    /// <summary>
    /// Information related to reset of payment frequency.
    /// </summary>
    public InterestRateFrequency3Choice_? ResetFrequency { get; init; } 
    /// <summary>
    /// Indicates the nearest date in the future at which the floating reference rate will be reset.
    /// </summary>
    public ResetDateAndValue1? NextFloatingReset { get; init; } 
    /// <summary>
    /// Most recent date and value at which the floating reference rate was reset.
    /// </summary>
    public ResetDateAndValue1? LastFloatingReset { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Identification is IsoISINOct2015Identifier IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISINOct2015Identifier(IdentificationValue)); // data type ISINOct2015Identifier System.String
            writer.WriteEndElement();
        }
        if (Name is IsoMax350Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (Rate is FloatingRateIdentification8Choice_ RateValue)
        {
            writer.WriteStartElement(null, "Rate", xmlNamespace );
            RateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReferencePeriod is InterestRateContractTerm4 ReferencePeriodValue)
        {
            writer.WriteStartElement(null, "RefPrd", xmlNamespace );
            ReferencePeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Spread is SecuritiesTransactionPrice20Choice_ SpreadValue)
        {
            writer.WriteStartElement(null, "Sprd", xmlNamespace );
            SpreadValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DayCount is InterestComputationMethodFormat7 DayCountValue)
        {
            writer.WriteStartElement(null, "DayCnt", xmlNamespace );
            DayCountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PaymentFrequency is InterestRateFrequency3Choice_ PaymentFrequencyValue)
        {
            writer.WriteStartElement(null, "PmtFrqcy", xmlNamespace );
            PaymentFrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ResetFrequency is InterestRateFrequency3Choice_ ResetFrequencyValue)
        {
            writer.WriteStartElement(null, "RstFrqcy", xmlNamespace );
            ResetFrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NextFloatingReset is ResetDateAndValue1 NextFloatingResetValue)
        {
            writer.WriteStartElement(null, "NxtFltgRst", xmlNamespace );
            NextFloatingResetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LastFloatingReset is ResetDateAndValue1 LastFloatingResetValue)
        {
            writer.WriteStartElement(null, "LastFltgRst", xmlNamespace );
            LastFloatingResetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FloatingRate13 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
