//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Frequency1.  ISO2002 ID# _QUNr4Q2lEeSNWNtJlXOAhg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details to specify the frequency, pattern and other items to allow for the communication of a series of payments to be made to the same recipient over a period of time.
/// </summary>
public partial record Frequency1
     : IIsoXmlSerilizable<Frequency1>
{
    #nullable enable
    
    /// <summary>
    /// Technical identifier of a Credit Transfer as part of a series of Credit Transfers within a single Payment Instruction. Assists the transfer of complex variable future payment schedules, associated with a single act of customer consent, within a single Payment Instruction.
    /// </summary>
    public IsoMax3NumericText? Sequence { get; init; } 
    /// <summary>
    /// The date of the first payment to be made for this payment schedule.
    /// </summary>
    public required IsoISODate StartDate { get; init; } 
    /// <summary>
    /// Information about when the payment arrangement will end.
    /// </summary>
    public required EndPoint1Choice_ EndPointChoice { get; init; } 
    /// <summary>
    /// Payment schedule frequency pattern which indicates how frequently a payment is made.
    /// </summary>
    public Frequency37Choice_? RequestedFrequencyPattern { get; init; } 
    /// <summary>
    /// Adjustment indicator for a non-working day to enable payment to be made on the next working day.
    /// </summary>
    public BusinessDayConvention1Code? NonWorkingDayAdjustment { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Sequence is IsoMax3NumericText SequenceValue)
        {
            writer.WriteStartElement(null, "Seq", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3NumericText(SequenceValue)); // data type Max3NumericText System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StartDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(StartDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "EndPtChc", xmlNamespace );
        EndPointChoice.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RequestedFrequencyPattern is Frequency37Choice_ RequestedFrequencyPatternValue)
        {
            writer.WriteStartElement(null, "ReqdFrqcyPttrn", xmlNamespace );
            RequestedFrequencyPatternValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NonWorkingDayAdjustment is BusinessDayConvention1Code NonWorkingDayAdjustmentValue)
        {
            writer.WriteStartElement(null, "NonWorkgDayAdjstmnt", xmlNamespace );
            writer.WriteValue(NonWorkingDayAdjustmentValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static Frequency1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
