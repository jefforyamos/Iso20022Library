//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FrequencyAndMoment1.  ISO2002 ID# _CWY182k3Eeanu6HLe77Rkg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines a frequency in terms a specific moment within a specified period type.
/// </summary>
[IsoId("_CWY182k3Eeanu6HLe77Rkg")]
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
[DisplayName("Frequency And Moment")]
#endif
#if DECLARE_SERIALIZABLE
[Serializable]
#endif
#if DECLARE_DATACONTRACT
[DataContract]
#endif
public partial record FrequencyAndMoment1
{
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    // No constructor needed for NET8 and above.
    #else
    /// <summary>
    /// Constructs a FrequencyAndMoment1 instance using the members the ISO20022 deems required.
    /// It is higly recommended that you update to .NET 8 or above so you can use required initialization syntax instead
    /// </summary>
    public FrequencyAndMoment1( Frequency6Code reqType,System.String reqPointInTime )
    {
        Type = reqType;
        PointInTime = reqPointInTime;
    }
    #endif
    #nullable enable
    
    /// <summary>
    /// Period for which the number of instructions are to be created and processed.
    /// </summary>
    [IsoId("_CWY19Wk3Eeanu6HLe77Rkg")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Type")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public required Frequency6Code Type { get; init; } 
    #elif NET7_0_OR_GREATER // C# 11 Records, required members
    public Frequency6Code Type { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public Frequency6Code Type { get; init; } 
    #else
    public Frequency6Code Type { get; set; } 
    #endif
    
    /// <summary>
    /// Further information on the exact point in time the event should take place.
    /// </summary>
    [IsoId("_CWY19Gk3Eeanu6HLe77Rkg")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Point In Time")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 0 ,MinimumLength = 0)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public required IsoExact2NumericText PointInTime { get; init; } 
    #elif NET7_0_OR_GREATER // C# 11 Records, required members
    public System.String PointInTime { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String PointInTime { get; init; } 
    #else
    public System.String PointInTime { get; set; } 
    #endif
    
    
    #nullable disable
    
}
