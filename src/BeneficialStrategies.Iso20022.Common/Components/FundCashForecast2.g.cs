//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FundCashForecast2.  ISO2002 ID# _VBdFudp-Ed-ak6NoX_4Aeg_386757279.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Cash movements from or to a fund as a result of investment funds transactions, eg, subscriptions or redemptions.
/// </summary>
public partial record FundCashForecast2
     : IIsoXmlSerilizable<FundCashForecast2>
{
    #nullable enable
    
    /// <summary>
    /// Date and, if required, the time, at which the price has been applied.
    /// </summary>
    public required DateAndDateTimeChoice_ TradeDateTime { get; init; } 
    /// <summary>
    /// Previous date and time at which a price was applied.
    /// </summary>
    public DateAndDateTimeChoice_? PreviousTradeDateTime { get; init; } 
    /// <summary>
    /// Investment fund class to which a cash flow is related.
    /// </summary>
    public required FinancialInstrument5 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Total value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalNAV { get; init; } 
    /// <summary>
    /// Previous value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? PreviousTotalNAV { get; init; } 
    /// <summary>
    /// Total number of investment fund class units that have been issued.
    /// </summary>
    public FinancialInstrumentQuantity1? TotalUnitsNumber { get; init; } 
    /// <summary>
    /// Previous total number of investment fund class units that have been issued.
    /// </summary>
    public FinancialInstrumentQuantity1? PreviousTotalUnitsNumber { get; init; } 
    /// <summary>
    /// Rate of change of the net asset value.
    /// </summary>
    public IsoPercentageRate? TotalNAVChangeRate { get; init; } 
    /// <summary>
    /// Currency of the investment fund class.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? InvestmentCurrency { get; init; } 
    /// <summary>
    /// Indicates whether the net cash flow is exceptional.
    /// </summary>
    public required IsoYesNoIndicator ExceptionalNetCashFlowIndicator { get; init; } 
    /// <summary>
    /// Information related to the cash movements reported by pre-defined or user defined criteria.
    /// </summary>
    public CashSortingCriterion2? SortingCriteriaDetails { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _VBmPqNp-Ed-ak6NoX_4Aeg_386758081
    /// <summary>
    /// Net cash movements per financial instrument.
    /// </summary>
    public NetCashForecast1? NetCashForecastDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradDtTm", xmlNamespace );
        TradeDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PreviousTradeDateTime is DateAndDateTimeChoice_ PreviousTradeDateTimeValue)
        {
            writer.WriteStartElement(null, "PrvsTradDtTm", xmlNamespace );
            PreviousTradeDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FinInstrmDtls", xmlNamespace );
        FinancialInstrumentDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TotalNAV is IsoActiveOrHistoricCurrencyAndAmount TotalNAVValue)
        {
            writer.WriteStartElement(null, "TtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PreviousTotalNAV is IsoActiveOrHistoricCurrencyAndAmount PreviousTotalNAVValue)
        {
            writer.WriteStartElement(null, "PrvsTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(PreviousTotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalUnitsNumber is FinancialInstrumentQuantity1 TotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "TtlUnitsNb", xmlNamespace );
            TotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreviousTotalUnitsNumber is FinancialInstrumentQuantity1 PreviousTotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "PrvsTtlUnitsNb", xmlNamespace );
            PreviousTotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalNAVChangeRate is IsoPercentageRate TotalNAVChangeRateValue)
        {
            writer.WriteStartElement(null, "TtlNAVChngRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TotalNAVChangeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (InvestmentCurrency is ActiveOrHistoricCurrencyCode InvestmentCurrencyValue)
        {
            writer.WriteStartElement(null, "InvstmtCcy", xmlNamespace );
            writer.WriteValue(InvestmentCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XcptnlNetCshFlowInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExceptionalNetCashFlowIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        // Not sure how to serialize SortingCriteriaDetails, multiplicity Unknown
        if (NetCashForecastDetails is NetCashForecast1 NetCashForecastDetailsValue)
        {
            writer.WriteStartElement(null, "NetCshFcstDtls", xmlNamespace );
            NetCashForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FundCashForecast2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
