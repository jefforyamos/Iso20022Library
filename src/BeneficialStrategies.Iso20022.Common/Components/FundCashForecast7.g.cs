//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FundCashForecast7.  ISO2002 ID# _7zt4EQdpEeSPHJIdUs1USg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Cash movements from or to a fund as a result of investment funds transactions, eg, subscriptions or redemptions.
/// </summary>
public partial record FundCashForecast7
     : IIsoXmlSerilizable<FundCashForecast7>
{
    #nullable enable
    
    /// <summary>
    /// Unique technical identifier for an instance of a fund cash forecast within a fund cash forecast report as assigned by the issuer of the report.
    /// </summary>
    public required IsoMax35Text Identification { get; init; } 
    /// <summary>
    /// Date and, if required, the time, at which the price has been applied.
    /// </summary>
    public required DateAndDateTimeChoice_ TradeDateTime { get; init; } 
    /// <summary>
    /// Previous date and time at which the price was applied.
    /// </summary>
    public DateAndDateTimeChoice_? PreviousTradeDateTime { get; init; } 
    /// <summary>
    /// Investment fund class to which a cash flow is related.
    /// </summary>
    public required FinancialInstrument9 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Total value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalNAV { get; init; } 
    /// <summary>
    /// Previous value of all the holdings, less the fund's liabilities, attributable to a specific investment fund class.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? PreviousTotalNAV { get; init; } 
    /// <summary>
    /// Total number of investment fund class units that have been issued.
    /// </summary>
    public FinancialInstrumentQuantity1? TotalUnitsNumber { get; init; } 
    /// <summary>
    /// Previous total number of investment fund class units that have been issued.
    /// </summary>
    public FinancialInstrumentQuantity1? PreviousTotalUnitsNumber { get; init; } 
    /// <summary>
    /// Rate of change of the net asset value.
    /// </summary>
    public IsoPercentageRate? TotalNAVChangeRate { get; init; } 
    /// <summary>
    /// Currency of the investment fund class.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? InvestmentCurrency { get; init; } 
    /// <summary>
    /// Information about the designation of the share class currency, that is, whether it is for onshore or offshore purposes and other information that may be required. This is typically only required for CNY funds.
    /// </summary>
    public CurrencyDesignation1? CurrencyStatus { get; init; } 
    /// <summary>
    /// Indicates whether the net cash flow is exceptional.
    /// </summary>
    public required IsoYesNoIndicator ExceptionalNetCashFlowIndicator { get; init; } 
    /// <summary>
    /// Price per unit of the trade date.
    /// </summary>
    public UnitPrice19? Price { get; init; } 
    /// <summary>
    /// Foreign exchange rate.
    /// </summary>
    public ForeignExchangeTerms19? ForeignExchangeRate { get; init; } 
    /// <summary>
    /// Net cash flow expressed as a percentage of the total NAV for the share class.
    /// </summary>
    public IsoPercentageRate? PercentageOfShareClassTotalNAV { get; init; } 
    /// <summary>
    /// Cash movements into the fund as a result of transactions in shares in an investment fund, for example, subscriptions or switch-ins.
    /// </summary>
    public CashInForecast6? CashInForecastDetails { get; init; } 
    /// <summary>
    /// Cash movements out of the fund as a result of transactions in shares in an investment fund, for example, redemptions or switch-outs.
    /// </summary>
    public CashOutForecast6? CashOutForecastDetails { get; init; } 
    /// <summary>
    /// Net cash as a result of the cash-in and cash-out flows.
    /// </summary>
    public NetCashForecast4? NetCashForecastDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(Identification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDtTm", xmlNamespace );
        TradeDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PreviousTradeDateTime is DateAndDateTimeChoice_ PreviousTradeDateTimeValue)
        {
            writer.WriteStartElement(null, "PrvsTradDtTm", xmlNamespace );
            PreviousTradeDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FinInstrmDtls", xmlNamespace );
        FinancialInstrumentDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TotalNAV is IsoActiveOrHistoricCurrencyAndAmount TotalNAVValue)
        {
            writer.WriteStartElement(null, "TtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PreviousTotalNAV is IsoActiveOrHistoricCurrencyAndAmount PreviousTotalNAVValue)
        {
            writer.WriteStartElement(null, "PrvsTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(PreviousTotalNAVValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalUnitsNumber is FinancialInstrumentQuantity1 TotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "TtlUnitsNb", xmlNamespace );
            TotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreviousTotalUnitsNumber is FinancialInstrumentQuantity1 PreviousTotalUnitsNumberValue)
        {
            writer.WriteStartElement(null, "PrvsTtlUnitsNb", xmlNamespace );
            PreviousTotalUnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TotalNAVChangeRate is IsoPercentageRate TotalNAVChangeRateValue)
        {
            writer.WriteStartElement(null, "TtlNAVChngRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TotalNAVChangeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (InvestmentCurrency is ActiveOrHistoricCurrencyCode InvestmentCurrencyValue)
        {
            writer.WriteStartElement(null, "InvstmtCcy", xmlNamespace );
            writer.WriteValue(InvestmentCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CurrencyStatus is CurrencyDesignation1 CurrencyStatusValue)
        {
            writer.WriteStartElement(null, "CcySts", xmlNamespace );
            CurrencyStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XcptnlNetCshFlowInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExceptionalNetCashFlowIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (Price is UnitPrice19 PriceValue)
        {
            writer.WriteStartElement(null, "Pric", xmlNamespace );
            PriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ForeignExchangeRate is ForeignExchangeTerms19 ForeignExchangeRateValue)
        {
            writer.WriteStartElement(null, "FXRate", xmlNamespace );
            ForeignExchangeRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PercentageOfShareClassTotalNAV is IsoPercentageRate PercentageOfShareClassTotalNAVValue)
        {
            writer.WriteStartElement(null, "PctgOfShrClssTtlNAV", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PercentageOfShareClassTotalNAVValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (CashInForecastDetails is CashInForecast6 CashInForecastDetailsValue)
        {
            writer.WriteStartElement(null, "CshInFcstDtls", xmlNamespace );
            CashInForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashOutForecastDetails is CashOutForecast6 CashOutForecastDetailsValue)
        {
            writer.WriteStartElement(null, "CshOutFcstDtls", xmlNamespace );
            CashOutForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetCashForecastDetails is NetCashForecast4 NetCashForecastDetailsValue)
        {
            writer.WriteStartElement(null, "NetCshFcstDtls", xmlNamespace );
            NetCashForecastDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FundCashForecast7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
