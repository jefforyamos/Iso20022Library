//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FundCashInBreakdown2.  ISO2002 ID# _SjM6m9p-Ed-ak6NoX_4Aeg_-1373036480.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Breakdown of cash movements into a fund as a result of investment funds transactions, eg, subscriptions or switch-in.
/// </summary>
public partial record FundCashInBreakdown2
     : IIsoXmlSerilizable<FundCashInBreakdown2>
{
    #nullable enable
    
    /// <summary>
    /// Amount of cash flow in, expressed as an amount of money.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? Amount { get; init; } 
    /// <summary>
    /// Amount of the cash flow in, expressed as a number of units.
    /// </summary>
    public FinancialInstrumentQuantity1? UnitsNumber { get; init; } 
    /// <summary>
    /// Indicates whether the cash flow is an item that did not appear on the previously sent report, eg, because it was received close to cut-off time.
    /// </summary>
    public IsoYesNoIndicator? NewAmountIndicator { get; init; } 
    /// <summary>
    /// Breakdown of the cash movements into a fund by transaction type, eg, subscription, switch-in.
    /// </summary>
    public required InvestmentFundTransactionInType1Code InvestmentFundTransactionInType { get; init; } 
    /// <summary>
    /// Breakdown of the cash movements into a fund by transaction type, eg, subscription, switch-in.
    /// </summary>
    public required IsoExtended350Code ExtendedInvestmentFundTransactionInType { get; init; } 
    /// <summary>
    /// Breakdown of the cash movements into a fund by order type, eg, order by quantity of units or amount of money.
    /// </summary>
    public required OrderQuantityType2Code OriginalOrderQuantityType { get; init; } 
    /// <summary>
    /// Breakdown of the cash movements into a fund by transaction type, eg, subscription, switch-in.
    /// </summary>
    public required IsoExtended350Code ExtendedOriginalOrderQuantityType { get; init; } 
    /// <summary>
    /// Charge for the placement of an order.
    /// </summary>
    public Charge16? ChargeDetails { get; init; } 
    /// <summary>
    /// Information related to the commission applied to an order, eg, back-end or front-end commission.
    /// </summary>
    public Commission9? CommissionDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Amount is IsoActiveOrHistoricCurrencyAndAmount AmountValue)
        {
            writer.WriteStartElement(null, "Amt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(AmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (UnitsNumber is FinancialInstrumentQuantity1 UnitsNumberValue)
        {
            writer.WriteStartElement(null, "UnitsNb", xmlNamespace );
            UnitsNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewAmountIndicator is IsoYesNoIndicator NewAmountIndicatorValue)
        {
            writer.WriteStartElement(null, "NewAmtInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(NewAmountIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InvstmtFndTxInTp", xmlNamespace );
        writer.WriteValue(InvestmentFundTransactionInType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XtndedInvstmtFndTxInTp", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedInvestmentFundTransactionInType)); // data type Extended350Code System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OrgnlOrdrQtyTp", xmlNamespace );
        writer.WriteValue(OriginalOrderQuantityType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XtndedOrgnlOrdrQtyTp", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedOriginalOrderQuantityType)); // data type Extended350Code System.String
        writer.WriteEndElement();
        if (ChargeDetails is Charge16 ChargeDetailsValue)
        {
            writer.WriteStartElement(null, "ChrgDtls", xmlNamespace );
            ChargeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CommissionDetails is Commission9 CommissionDetailsValue)
        {
            writer.WriteStartElement(null, "ComssnDtls", xmlNamespace );
            CommissionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FundCashInBreakdown2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
