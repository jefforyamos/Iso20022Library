//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for FutureOrOptionDetails1.  ISO2002 ID# _AvBeoNokEeC60axPepSq7g_1982217603.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parameters for contracts which obligate the buyer to receive and the seller to deliver in the future the assets specified at an agreed price or contracts which grant to the holder either the privilege to purchase or the privilege to sell the assets specified at a predetermined price or formula at or within a time in the future.
/// </summary>
public partial record FutureOrOptionDetails1
{
    #nullable enable
    
    /// <summary>
    /// Specifies the type of the contract for futures and options.
    /// </summary>
    public FutureAndOptionContractType1Code? FutureAndOptionContractType { get; init; } 
    /// <summary>
    /// Last date/time by which the option for physical delivery may still be exercised.
    /// </summary>
    public IsoISODateTime? LastDeliveryDate { get; init; } 
    /// <summary>
    /// Used to indicate the size of the underlying commodity on which the contract is based (e.g., 2500 lbs of lean cattle, 1000 barrels of crude oil, 1000 bushels of corn, etc.).
    /// </summary>
    public UnitOfMeasure1Code? UnitOfMeasure { get; init; } 
    /// <summary>
    /// Date on which future contracts settle.
    /// </summary>
    public IsoISODateTime? FutureDate { get; init; } 
    /// <summary>
    /// Specifies the minimum ratio or multiply factor used to convert from contracts to shares.
    /// </summary>
    public IsoActiveCurrencyAndAmount? MinimumSize { get; init; } 
    /// <summary>
    /// Date/time, as announced by the issuer, at which the securities will be issued.
    /// </summary>
    public IsoISODateTime? AnnouncementDate { get; init; } 
    /// <summary>
    /// Specifies the deliverability of a security.
    /// </summary>
    public Appearance1Code? Appearance { get; init; } 
    /// <summary>
    /// Indicates whether the interest is separable from the principal.
    /// </summary>
    public IsoYesNoIndicator? StrippableIndicator { get; init; } 
    /// <summary>
    /// Indicates the maximum number of listed option contracts on a single security which can be held by an investor or group of investors acting jointly.
    /// </summary>
    public IsoNumber? PositionLimit { get; init; } 
    /// <summary>
    /// Position limit in the near-term contract for a given exchange-traded product.
    /// </summary>
    public IsoNumber? NearTermPositionLimit { get; init; } 
    /// <summary>
    /// Minimum price increase for a given exchange-traded Instrument.
    /// </summary>
    public IsoNumber? MinimumTradingPricingIncrement { get; init; } 
    /// <summary>
    /// Reason for which money is raised through the issuance of a security.
    /// </summary>
    public IsoMax256Text? Purpose { get; init; } 
    /// <summary>
    /// Specifies when the contract (i.e. MBS/TBA) will settle.
    /// </summary>
    public IsoISOYearMonth? ContractSettlementMonth { get; init; } 
    /// <summary>
    /// Date on which new securities begin trading.
    /// </summary>
    public IDateAndDateTime1Choice? FirstDealingDate { get; init; } 
    /// <summary>
    /// Ratio applied to convert the related security.
    /// </summary>
    public UnderlyingRatio1? Ratio { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Rating(s) of the security.
    /// </summary>
    public Rating1? Rating { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Initial issue price of a financial instrument.
    /// </summary>
    public Price4? IssuePrice { get; init; } 
    /// <summary>
    /// Rights to exercise the privilege to purchase or to sell the assets specified at a predetermined price or formula at or within a time in the future.
    /// </summary>
    public IOptionRight1Choice? OptionRights { get; init; } 
    /// <summary>
    /// Indicates whether or not this is the last transaction.
    /// </summary>
    public IsoYesNoIndicator? LastTransaction { get; init; } 
    /// <summary>
    /// Specifies that there will be one price and one transaction when two contracts are carried out simultaneously, one to buy and the other one to sell with two different expiration dates.
    /// </summary>
    public IsoYesNoIndicator? SpreadTransaction { get; init; } 
    
    #nullable disable
}
