//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Garnishment2.  ISO2002 ID# _ncGuUbTREeeyuKckOGlwuA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides remittance information about a payment for garnishment-related purposes.
/// </summary>
public partial record Garnishment2
     : IIsoXmlSerilizable<Garnishment2>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the type of garnishment.
    /// </summary>
    public required GarnishmentType1 Type { get; init; } 
    /// <summary>
    /// Ultimate party that owes an amount of money to the (ultimate) creditor, in this case, to the garnisher.
    /// </summary>
    public PartyIdentification125? Garnishee { get; init; } 
    /// <summary>
    /// Party on the credit side of the transaction who administers the garnishment on behalf of the ultimate beneficiary.
    /// </summary>
    public PartyIdentification125? GarnishmentAdministrator { get; init; } 
    /// <summary>
    /// Reference information that is specific to the agency receiving the garnishment.
    /// </summary>
    public IsoMax140Text? ReferenceNumber { get; init; } 
    /// <summary>
    /// Date of payment which garnishment was taken from.
    /// </summary>
    public IsoISODate? Date { get; init; } 
    /// <summary>
    /// Amount of money remitted for the referred document.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? RemittedAmount { get; init; } 
    /// <summary>
    /// Indicates if the person to whom the garnishment applies (that is, the ultimate debtor) has family medical insurance coverage available.
    /// </summary>
    public IsoTrueFalseIndicator? FamilyMedicalInsuranceIndicator { get; init; } 
    /// <summary>
    /// Indicates if the employment of the person to whom the garnishment applies (that is, the ultimate debtor) has been terminated.
    /// </summary>
    public IsoTrueFalseIndicator? EmployeeTerminationIndicator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Garnishee is PartyIdentification125 GarnisheeValue)
        {
            writer.WriteStartElement(null, "Grnshee", xmlNamespace );
            GarnisheeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GarnishmentAdministrator is PartyIdentification125 GarnishmentAdministratorValue)
        {
            writer.WriteStartElement(null, "GrnshmtAdmstr", xmlNamespace );
            GarnishmentAdministratorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReferenceNumber is IsoMax140Text ReferenceNumberValue)
        {
            writer.WriteStartElement(null, "RefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(ReferenceNumberValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (Date is IsoISODate DateValue)
        {
            writer.WriteStartElement(null, "Dt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (RemittedAmount is IsoActiveOrHistoricCurrencyAndAmount RemittedAmountValue)
        {
            writer.WriteStartElement(null, "RmtdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(RemittedAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (FamilyMedicalInsuranceIndicator is IsoTrueFalseIndicator FamilyMedicalInsuranceIndicatorValue)
        {
            writer.WriteStartElement(null, "FmlyMdclInsrncInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(FamilyMedicalInsuranceIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (EmployeeTerminationIndicator is IsoTrueFalseIndicator EmployeeTerminationIndicatorValue)
        {
            writer.WriteStartElement(null, "MplyeeTermntnInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(EmployeeTerminationIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static Garnishment2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
