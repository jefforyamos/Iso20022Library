//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for GlobalDistributionRequest1.  ISO2002 ID# _UKdzVdp-Ed-ak6NoX_4Aeg_-227934218.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information about the global distribution.
/// </summary>
public partial record GlobalDistributionRequest1
     : IIsoXmlSerilizable<GlobalDistributionRequest1>
{
    #nullable enable
    
    /// <summary>
    /// Indicates wether is message is an advice or pre-advice.
    /// </summary>
    public required IsoYesNoIndicator PreadviceIndicator { get; init; } 
    /// <summary>
    /// Number identifying the available corporate action options.
    /// </summary>
    public required IsoExact3NumericText OptionNumber { get; init; } 
    /// <summary>
    /// Specifies the corporate action options available to the account owner.
    /// </summary>
    public required CorporateActionOption1FormatChoice_ OptionType { get; init; } 
    /// <summary>
    /// Date on which the holders of securities are/will be recorded for the income being paid or for entitlement to the rights or offer/privilege.
    /// </summary>
    public required DateFormat4Choice_ RecordDate { get; init; } 
    /// <summary>
    /// Date on which securities/cash will be paid.
    /// </summary>
    public required DateFormat4Choice_ PaymentDate { get; init; } 
    /// <summary>
    /// Provides information about the securities movement.
    /// </summary>
    public SecurityMovement1? SecuritiesMovement { get; init; } 
    /// <summary>
    /// Provides information about the cash movement.
    /// </summary>
    public CashMovement1? CashMovement { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PradvcInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PreadviceIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OptnNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExact3NumericText(OptionNumber)); // data type Exact3NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OptnTp", xmlNamespace );
        OptionType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RcrdDt", xmlNamespace );
        RecordDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PmtDt", xmlNamespace );
        PaymentDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SecuritiesMovement is SecurityMovement1 SecuritiesMovementValue)
        {
            writer.WriteStartElement(null, "SctiesMvmnt", xmlNamespace );
            SecuritiesMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashMovement is CashMovement1 CashMovementValue)
        {
            writer.WriteStartElement(null, "CshMvmnt", xmlNamespace );
            CashMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static GlobalDistributionRequest1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
