//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for HostCommunicationParameter6.  ISO2002 ID# _-yW3QQufEeqw5uEXxQ9H4g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Configuration parameters to communicate with a host.
/// </summary>
public partial record HostCommunicationParameter6
     : IIsoXmlSerilizable<HostCommunicationParameter6>
{
    #nullable enable
    
    /// <summary>
    /// Type of action for the configuration parameters.
    /// </summary>
    public required TerminalManagementAction3Code ActionType { get; init; } 
    /// <summary>
    /// Identification of the host.
    /// </summary>
    public required IsoMax35Text HostIdentification { get; init; } 
    /// <summary>
    /// Network parameters of the host.
    /// </summary>
    public NetworkParameters7? Address { get; init; } 
    /// <summary>
    /// Cryptographic key used to communicate with the host.
    /// </summary>
    public KEKIdentifier5? Key { get; init; } 
    /// <summary>
    /// Access information to reach an intermediate network service provider.
    /// </summary>
    public NetworkParameters7? NetworkServiceProvider { get; init; } 
    /// <summary>
    /// Physical Interface where the host is connected.
    /// </summary>
    public PhysicalInterfaceParameter1? PhysicalInterface { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ActnTp", xmlNamespace );
        writer.WriteValue(ActionType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "HstId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(HostIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (Address is NetworkParameters7 AddressValue)
        {
            writer.WriteStartElement(null, "Adr", xmlNamespace );
            AddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Key is KEKIdentifier5 KeyValue)
        {
            writer.WriteStartElement(null, "Key", xmlNamespace );
            KeyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetworkServiceProvider is NetworkParameters7 NetworkServiceProviderValue)
        {
            writer.WriteStartElement(null, "NtwkSvcPrvdr", xmlNamespace );
            NetworkServiceProviderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PhysicalInterface is PhysicalInterfaceParameter1 PhysicalInterfaceValue)
        {
            writer.WriteStartElement(null, "PhysIntrfc", xmlNamespace );
            PhysicalInterfaceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static HostCommunicationParameter6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
