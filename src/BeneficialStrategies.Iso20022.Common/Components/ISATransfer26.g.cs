//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ISATransfer26.  ISO2002 ID# __BBKKyPvEeWQjryFgN2ITg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Describes the type of product and the assets to be transferred.
/// </summary>
public partial record ISATransfer26
     : IIsoXmlSerilizable<ISATransfer26>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for a group of individual transfers as assigned by the instructing party. This identifier links the individual transfers together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Identification of the confirmation assigned by the transferor to the transfer.
    /// </summary>
    public required IsoMax35Text TransferConfirmationIdentification { get; init; } 
    /// <summary>
    /// Identification assigned to the transfer of asset, typically assigned by the transferee.
    /// </summary>
    public required IsoMax35Text TransferInstructionReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of a transfer. This reference can typically be used in a hub scenario to give the reference of the transfer as assigned by the underlying client.
    /// </summary>
    public AdditionalReference7? ClientReference { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transfer allocated by the counterparty.
    /// </summary>
    public AdditionalReference7? CounterpartyReference { get; init; } 
    /// <summary>
    /// Identifies the business process in which the actors are involved. This is important to trigger the right business process, according to the market business model, which may require matching instructions in a CSD environment (double leg process) or not (single leg process).
    /// </summary>
    public BusinessFlowType1Code? BusinessFlowType { get; init; } 
    /// <summary>
    /// Date when the transfer instruction was executed.
    /// </summary>
    public IsoISODate? ActualTransferDate { get; init; } 
    /// <summary>
    /// Indicates whether there is cash in the account that is awaiting investment.
    /// </summary>
    public ResidualCash1Code? ResidualCash { get; init; } 
    /// <summary>
    /// Specifies portfolio information or government schemes, for example Individual Savings Account (ISA) in the UK.
    /// </summary>
    public ISAPortfolio2Choice_? Portfolio { get; init; } 
    /// <summary>
    /// Specifies whether all remaining assets in a portfolio not listed for transfer should be liquidated and transferred as cash.
    /// </summary>
    public AllOtherCash1Code? AllOtherCash { get; init; } 
    /// <summary>
    /// Specifies the underlying assets for the ISA or portfolio.
    /// </summary>
    public FinancialInstrument48? FinancialInstrumentAssetForTransfer { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MasterReference is IsoMax35Text MasterReferenceValue)
        {
            writer.WriteStartElement(null, "MstrRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MasterReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TrfConfId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferConfirmationIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TrfInstrRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferInstructionReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ClientReference is AdditionalReference7 ClientReferenceValue)
        {
            writer.WriteStartElement(null, "ClntRef", xmlNamespace );
            ClientReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartyReference is AdditionalReference7 CounterpartyReferenceValue)
        {
            writer.WriteStartElement(null, "CtrPtyRef", xmlNamespace );
            CounterpartyReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BusinessFlowType is BusinessFlowType1Code BusinessFlowTypeValue)
        {
            writer.WriteStartElement(null, "BizFlowTp", xmlNamespace );
            writer.WriteValue(BusinessFlowTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ActualTransferDate is IsoISODate ActualTransferDateValue)
        {
            writer.WriteStartElement(null, "ActlTrfDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(ActualTransferDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (ResidualCash is ResidualCash1Code ResidualCashValue)
        {
            writer.WriteStartElement(null, "RsdlCsh", xmlNamespace );
            writer.WriteValue(ResidualCashValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Portfolio is ISAPortfolio2Choice_ PortfolioValue)
        {
            writer.WriteStartElement(null, "Prtfl", xmlNamespace );
            PortfolioValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AllOtherCash is AllOtherCash1Code AllOtherCashValue)
        {
            writer.WriteStartElement(null, "AllOthrCsh", xmlNamespace );
            writer.WriteValue(AllOtherCashValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (FinancialInstrumentAssetForTransfer is FinancialInstrument48 FinancialInstrumentAssetForTransferValue)
        {
            writer.WriteStartElement(null, "FinInstrmAsstForTrf", xmlNamespace );
            FinancialInstrumentAssetForTransferValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ISATransfer26 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
