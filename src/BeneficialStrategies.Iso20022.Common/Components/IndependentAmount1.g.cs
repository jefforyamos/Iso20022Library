//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IndependentAmount1.  ISO2002 ID# _UlI9KNp-Ed-ak6NoX_4Aeg_1173631516.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Indicates the independent amount and how it was applied in the calculation.
/// </summary>
public partial record IndependentAmount1
     : IIsoXmlSerilizable<IndependentAmount1>
{
    #nullable enable
    
    /// <summary>
    /// Provides the independant amount.
    /// </summary>
    public required IsoActiveCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Determines how the independent amount was applied in the calculation. 
    /// It is either:
    /// - before threshold, effectively acting as an add on to exposure, 
    /// - after threshold where the amount is an add on to the credit support amount and forms part of the variation margin requirement,
    /// - segregated where it is treated independently of variation margin for segregation purposes.
    /// </summary>
    public required IndependentAmountConventionType1Code Convention { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(Amount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Cnvntn", xmlNamespace );
        writer.WriteValue(Convention.ToString()); // Enum value
        writer.WriteEndElement();
    }
    public static IndependentAmount1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
