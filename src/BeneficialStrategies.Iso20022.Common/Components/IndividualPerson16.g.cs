//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IndividualPerson16.  ISO2002 ID# _QBX3Adp-Ed-ak6NoX_4Aeg_-685335209.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Human entity, as distinguished from a corporate entity (which is sometimes referred to as an 'artificial person').
/// </summary>
public partial record IndividualPerson16
     : IIsoXmlSerilizable<IndividualPerson16>
{
    #nullable enable
    
    /// <summary>
    /// Name received at birth, eg, maiden name.
    /// </summary>
    public required IsoMax35Text BirthName { get; init; } 
    /// <summary>
    /// First name of a person.
    /// </summary>
    public IsoMax35Text? GivenName { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification of a person, eg, passport.
    /// </summary>
    public PersonIdentification6? Identification { get; init; } 
    /// <summary>
    /// Postal address of a party.
    /// </summary>
    public LongPostalAddress2Choice_? Address { get; init; } 
    /// <summary>
    /// Organisation represented by a person, or for which a person works.
    /// </summary>
    public PartyIdentification9Choice_? EmployingParty { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "BirthNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(BirthName)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (GivenName is IsoMax35Text GivenNameValue)
        {
            writer.WriteStartElement(null, "GvnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(GivenNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Identification is PersonIdentification6 IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            IdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Address is LongPostalAddress2Choice_ AddressValue)
        {
            writer.WriteStartElement(null, "Adr", xmlNamespace );
            AddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EmployingParty is PartyIdentification9Choice_ EmployingPartyValue)
        {
            writer.WriteStartElement(null, "EmplngPty", xmlNamespace );
            EmployingPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static IndividualPerson16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
