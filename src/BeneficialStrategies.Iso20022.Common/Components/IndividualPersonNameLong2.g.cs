//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IndividualPersonNameLong2.  ISO2002 ID# _xEB5Ic4IEeiRUq1z_PF1Sw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// First name of a person.
/// </summary>
public partial record IndividualPersonNameLong2
     : IIsoXmlSerilizable<IndividualPersonNameLong2>
{
    #nullable enable
    
    /// <summary>
    /// Prefix, as a title before a person's name.
    /// </summary>
    public NamePrefix2Code? NamePrefix { get; init; } 
    /// <summary>
    /// Surname is a name added to a given name and is part of a personal name. In many cases, a surname is a family name.
    /// </summary>
    public required IsoMax35Text Surname { get; init; } 
    /// <summary>
    /// Name given at birth.
    /// </summary>
    public IsoMax35Text? GivenName { get; init; } 
    /// <summary>
    /// Second name of a person.
    /// </summary>
    public IsoMax35Text? MiddleName { get; init; } 
    /// <summary>
    /// Initial prefix for name.
    /// </summary>
    public IsoMax6Text? Initials { get; init; } 
    /// <summary>
    /// Suffix for name.
    /// </summary>
    public IsoMax350Text? NameSuffix { get; init; } 
    /// <summary>
    /// Full legal name.
    /// </summary>
    public IsoMax350Text? Name { get; init; } 
    /// <summary>
    /// Date that the name was assigned.
    /// </summary>
    public IsoISODate? StartDate { get; init; } 
    /// <summary>
    /// Date that name changed.
    /// </summary>
    public IsoISODate? EndDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (NamePrefix is NamePrefix2Code NamePrefixValue)
        {
            writer.WriteStartElement(null, "NmPrfx", xmlNamespace );
            writer.WriteValue(NamePrefixValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Srnm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(Surname)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (GivenName is IsoMax35Text GivenNameValue)
        {
            writer.WriteStartElement(null, "GvnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(GivenNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MiddleName is IsoMax35Text MiddleNameValue)
        {
            writer.WriteStartElement(null, "MddlNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MiddleNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Initials is IsoMax6Text InitialsValue)
        {
            writer.WriteStartElement(null, "Initls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax6Text(InitialsValue)); // data type Max6Text System.String
            writer.WriteEndElement();
        }
        if (NameSuffix is IsoMax350Text NameSuffixValue)
        {
            writer.WriteStartElement(null, "NmSfx", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NameSuffixValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (Name is IsoMax350Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (StartDate is IsoISODate StartDateValue)
        {
            writer.WriteStartElement(null, "StartDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(StartDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (EndDate is IsoISODate EndDateValue)
        {
            writer.WriteStartElement(null, "EndDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(EndDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
    }
    public static IndividualPersonNameLong2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
