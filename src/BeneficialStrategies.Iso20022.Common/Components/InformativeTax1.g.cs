//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for InformativeTax1.  ISO2002 ID# _fH5lkDh7EeaH-93K5JKmzw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Tax related to an investment fund order.
/// </summary>
public partial record InformativeTax1
     : IIsoXmlSerilizable<InformativeTax1>
{
    #nullable enable
    
    /// <summary>
    /// Amount included in the dividend that corresponds to gains directly or indirectly derived from interest payment in the scope of the European Directive on taxation of savings income in the form of interest payments.
    /// </summary>
    public IsoActiveCurrencyAndAmount? TaxableIncomePerDividend { get; init; } 
    /// <summary>
    /// Specifies whether capital gain is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public EUCapitalGain3Choice_? EUCapitalGain { get; init; } 
    /// <summary>
    /// Specifies whether dividend is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public EUDividendStatusType2Choice_? EUDividendStatus { get; init; } 
    /// <summary>
    /// Percentage of the underlying assets of the funds that represents a debt and is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June).
    /// </summary>
    public IsoPercentageRate? PercentageOfDebtClaim { get; init; } 
    /// <summary>
    /// Information related to a specific tax that is provided for information purposes.
    /// </summary>
    public Tax32? IndividualTax { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TaxableIncomePerDividend is IsoActiveCurrencyAndAmount TaxableIncomePerDividendValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerDvdd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(TaxableIncomePerDividendValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (EUCapitalGain is EUCapitalGain3Choice_ EUCapitalGainValue)
        {
            writer.WriteStartElement(null, "EUCptlGn", xmlNamespace );
            EUCapitalGainValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EUDividendStatus is EUDividendStatusType2Choice_ EUDividendStatusValue)
        {
            writer.WriteStartElement(null, "EUDvddSts", xmlNamespace );
            EUDividendStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PercentageOfDebtClaim is IsoPercentageRate PercentageOfDebtClaimValue)
        {
            writer.WriteStartElement(null, "PctgOfDebtClm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PercentageOfDebtClaimValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (IndividualTax is Tax32 IndividualTaxValue)
        {
            writer.WriteStartElement(null, "IndvTax", xmlNamespace );
            IndividualTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static InformativeTax1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
