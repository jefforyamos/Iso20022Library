//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IntraBalanceModification6.  ISO2002 ID# _aD2U7zneEem7JZMuWtwtsg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides the details of the modification requests.
/// </summary>
public partial record IntraBalanceModification6
     : IIsoXmlSerilizable<IntraBalanceModification6>
{
    #nullable enable
    
    /// <summary>
    /// Account to or from which a cash entry is made.
    /// </summary>
    public CashAccount38? CashAccount { get; init; } 
    /// <summary>
    /// Party that owns the account.
    /// </summary>
    public SystemPartyIdentification8? CashAccountOwner { get; init; } 
    /// <summary>
    /// Party that manages the cash account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? CashAccountServicer { get; init; } 
    /// <summary>
    /// Status and status reason of the transaction.
    /// </summary>
    public ProcessingStatus71Choice_? ProcessingStatus { get; init; } 
    /// <summary>
    /// Unambiguous identification of the modification request.
    /// </summary>
    public required IsoMax35Text RequestReference { get; init; } 
    /// <summary>
    /// Date and time at which the status was assigned.
    /// </summary>
    public IsoISODateTime? StatusDate { get; init; } 
    /// <summary>
    /// Details of the request providing the changes and references of the instruction for which the modification is requested.
    /// </summary>
    public RequestDetails22? RequestDetails { get; init; } 
    /// <summary>
    /// Identifies additional details of the transaction.
    /// </summary>
    public IntraBalance5? UnderlyingIntraBalance { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CashAccount is CashAccount38 CashAccountValue)
        {
            writer.WriteStartElement(null, "CshAcct", xmlNamespace );
            CashAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAccountOwner is SystemPartyIdentification8 CashAccountOwnerValue)
        {
            writer.WriteStartElement(null, "CshAcctOwnr", xmlNamespace );
            CashAccountOwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAccountServicer is BranchAndFinancialInstitutionIdentification6 CashAccountServicerValue)
        {
            writer.WriteStartElement(null, "CshAcctSvcr", xmlNamespace );
            CashAccountServicerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProcessingStatus is ProcessingStatus71Choice_ ProcessingStatusValue)
        {
            writer.WriteStartElement(null, "PrcgSts", xmlNamespace );
            ProcessingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ReqRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(RequestReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (StatusDate is IsoISODateTime StatusDateValue)
        {
            writer.WriteStartElement(null, "StsDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(StatusDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (RequestDetails is RequestDetails22 RequestDetailsValue)
        {
            writer.WriteStartElement(null, "ReqDtls", xmlNamespace );
            RequestDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnderlyingIntraBalance is IntraBalance5 UnderlyingIntraBalanceValue)
        {
            writer.WriteStartElement(null, "UndrlygIntraBal", xmlNamespace );
            UnderlyingIntraBalanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static IntraBalanceModification6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
