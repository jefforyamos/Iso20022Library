//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IntraBalanceMovement6.  ISO2002 ID# _YX0RITneEem7JZMuWtwtsg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional details of the intra-balance movements data.
/// </summary>
public partial record IntraBalanceMovement6
     : IIsoXmlSerilizable<IntraBalanceMovement6>
{
    #nullable enable
    
    /// <summary>
    /// Balance from which the amount of money is moved.
    /// </summary>
    public required CashSubBalanceTypeAndQuantityBreakdown3 BalanceFrom { get; init; } 
    /// <summary>
    /// Balance to which the amount of money is moved.
    /// </summary>
    public required CashSubBalanceTypeAndQuantityBreakdown3 BalanceTo { get; init; } 
    /// <summary>
    /// Amount of money effectively settled and which will be credited to/debited from the account owner's cash account. It may differ from the instructed settlement amount based on market tolerance level.
    /// </summary>
    public required Amount2Choice_ SettlementAmount { get; init; } 
    /// <summary>
    /// Amount of money effectively settled and which will be credited to/debited from the account owner's cash account. It may differ from the instructed settlement amount based on market tolerance level.
    /// </summary>
    public Amount2Choice_? SettledAmount { get; init; } 
    /// <summary>
    /// Amount of money previously settled.
    /// </summary>
    public Amount2Choice_? PreviouslySettledAmount { get; init; } 
    /// <summary>
    /// Amount of money remaining to be settled.
    /// </summary>
    public Amount2Choice_? RemainingSettlementAmount { get; init; } 
    /// <summary>
    /// Date and time at which the amount of money is intended to be moved.
    /// </summary>
    public required DateAndDateTime2Choice_ IntendedSettlementDate { get; init; } 
    /// <summary>
    /// Date and time at which the amount of money is moved.
    /// </summary>
    public DateAndDateTime2Choice_? EffectiveSettlementDate { get; init; } 
    /// <summary>
    /// Date and time at which the status was assigned.
    /// </summary>
    public IsoISODateTime? StatusDate { get; init; } 
    /// <summary>
    /// Number identifying a lot constituting the sub-balance.
    /// </summary>
    public GenericIdentification37? CashSubBalanceIdentification { get; init; } 
    /// <summary>
    /// Link to another transaction that must be processed after, before or at the same time.
    /// </summary>
    public Linkages57? Linkages { get; init; } 
    /// <summary>
    /// Specifies whether the transaction is to be executed with a high priority.
    /// </summary>
    public PriorityNumeric4Choice_? Priority { get; init; } 
    /// <summary>
    /// Party that originated the message, if other than the sender.
    /// </summary>
    public SystemPartyIdentification8? MessageOriginator { get; init; } 
    /// <summary>
    /// Specifies the date/time on which the trade was executed.
    /// </summary>
    public required IsoISODateTime CreationDateTime { get; init; } 
    /// <summary>
    /// Provides additional settlement processing information which can not be included within the structured fields of the message.
    /// </summary>
    public IsoMax350Text? InstructionProcessingAdditionalDetails { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "BalFr", xmlNamespace );
        BalanceFrom.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BalTo", xmlNamespace );
        BalanceTo.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
        SettlementAmount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SettledAmount is Amount2Choice_ SettledAmountValue)
        {
            writer.WriteStartElement(null, "SttldAmt", xmlNamespace );
            SettledAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreviouslySettledAmount is Amount2Choice_ PreviouslySettledAmountValue)
        {
            writer.WriteStartElement(null, "PrevslySttldAmt", xmlNamespace );
            PreviouslySettledAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RemainingSettlementAmount is Amount2Choice_ RemainingSettlementAmountValue)
        {
            writer.WriteStartElement(null, "RmngSttlmAmt", xmlNamespace );
            RemainingSettlementAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "IntnddSttlmDt", xmlNamespace );
        IntendedSettlementDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EffectiveSettlementDate is DateAndDateTime2Choice_ EffectiveSettlementDateValue)
        {
            writer.WriteStartElement(null, "FctvSttlmDt", xmlNamespace );
            EffectiveSettlementDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatusDate is IsoISODateTime StatusDateValue)
        {
            writer.WriteStartElement(null, "StsDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(StatusDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (CashSubBalanceIdentification is GenericIdentification37 CashSubBalanceIdentificationValue)
        {
            writer.WriteStartElement(null, "CshSubBalId", xmlNamespace );
            CashSubBalanceIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Linkages is Linkages57 LinkagesValue)
        {
            writer.WriteStartElement(null, "Lnkgs", xmlNamespace );
            LinkagesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Priority is PriorityNumeric4Choice_ PriorityValue)
        {
            writer.WriteStartElement(null, "Prty", xmlNamespace );
            PriorityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MessageOriginator is SystemPartyIdentification8 MessageOriginatorValue)
        {
            writer.WriteStartElement(null, "MsgOrgtr", xmlNamespace );
            MessageOriginatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CreDtTm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODateTime(CreationDateTime)); // data type ISODateTime System.DateTime
        writer.WriteEndElement();
        if (InstructionProcessingAdditionalDetails is IsoMax350Text InstructionProcessingAdditionalDetailsValue)
        {
            writer.WriteStartElement(null, "InstrPrcgAddtlDtls", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(InstructionProcessingAdditionalDetailsValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static IntraBalanceMovement6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
