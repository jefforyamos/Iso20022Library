//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IntraBalancePending6.  ISO2002 ID# _Y3sq1zneEem7JZMuWtwtsg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identifies the details of the transaction.
/// </summary>
[DataContract]
[XmlType]
public partial record IntraBalancePending6
{
    #nullable enable
    
    /// <summary>
    /// Status and status reason of the transaction.
    /// </summary>
    [DataMember]
    public PendingStatusAndReason2? StatusAndReason { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transaction as known by the account owner (or the instructing party managing the account).
    /// </summary>
    [DataMember]
    public required IsoMax35Text AccountOwnerTransactionIdentification { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transaction as known by the account servicer.
    /// </summary>
    [DataMember]
    public IsoMax35Text? AccountServicerTransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of a transaction assigned by a market infrastructure other than a central securities depository, for example, Target2-Securities.
    /// </summary>
    [DataMember]
    public IsoMax35Text? MarketInfrastructureTransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of the transaction as assigned by the processor.
    /// </summary>
    [DataMember]
    public IsoMax35Text? ProcessorTransactionIdentification { get; init; } 
    /// <summary>
    /// Collective reference identifying a set of messages.
    /// </summary>
    [DataMember]
    public IsoMax35Text? PoolIdentification { get; init; } 
    /// <summary>
    /// Identification assigned by the account servicer to unambiguously identify a corporate action event.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CorporateActionEventIdentification { get; init; } 
    /// <summary>
    /// Balance from which the amount of money is moved.
    /// </summary>
    [DataMember]
    public required CashSubBalanceTypeAndQuantityBreakdown3 BalanceFrom { get; init; } 
    /// <summary>
    /// Balance to which the amount of money is moved.
    /// </summary>
    [DataMember]
    public required CashSubBalanceTypeAndQuantityBreakdown3 BalanceTo { get; init; } 
    /// <summary>
    /// Amount of money effectively settled and which will be credited to/debited from the account owner's cash account. It may differ from the instructed settlement amount based on market tolerance level.
    /// </summary>
    [DataMember]
    public required Amount2Choice_ SettlementAmount { get; init; } 
    /// <summary>
    /// Date and time at which the amount of money is intended to be moved.
    /// </summary>
    [DataMember]
    public required DateAndDateTime2Choice_ IntendedSettlementDate { get; init; } 
    /// <summary>
    /// Date and time at which the status was assigned.
    /// </summary>
    [DataMember]
    public IsoISODateTime? StatusDate { get; init; } 
    /// <summary>
    /// Number identifying a lot constituting the sub-balance.
    /// </summary>
    [DataMember]
    public GenericIdentification37? CashSubBalanceIdentification { get; init; } 
    /// <summary>
    /// Link to another transaction that must be processed after, before or at the same time.
    /// </summary>
    [DataMember]
    public ValueList<Linkages57> Linkages { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies whether the transaction is to be executed with a high priority.
    /// </summary>
    [DataMember]
    public PriorityNumeric4Choice_? Priority { get; init; } 
    /// <summary>
    /// Party that originated the message, if other than the sender.
    /// </summary>
    [DataMember]
    public SystemPartyIdentification8? MessageOriginator { get; init; } 
    /// <summary>
    /// Specifies the date/time on which the trade was executed.
    /// </summary>
    [DataMember]
    public required IsoISODateTime CreationDateTime { get; init; } 
    /// <summary>
    /// Provides additional settlement processing information which can not be included within the structured fields of the message.
    /// </summary>
    [DataMember]
    public IsoMax350Text? InstructionProcessingAdditionalDetails { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [DataMember]
    public ValueList<SupplementaryData1> SupplementaryData { get; init; } = []; // Warning: Don't know multiplicity.
    
    #nullable disable
}
