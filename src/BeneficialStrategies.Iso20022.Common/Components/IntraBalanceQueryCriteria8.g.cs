//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IntraBalanceQueryCriteria8.  ISO2002 ID# _3_TRNTp8EemwKdP955WBJQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the criteria based on which information is included.
/// </summary>
public partial record IntraBalanceQueryCriteria8
     : IIsoXmlSerilizable<IntraBalanceQueryCriteria8>
{
    #nullable enable
    
    /// <summary>
    /// Collective reference identifying a set of messages.
    /// </summary>
    public IsoMax35Text? ModificationRequestIdentification { get; init; } 
    /// <summary>
    /// Provides the status of settlement of a transaction.
    /// </summary>
    public ModificationProcessingStatus9Choice_? ProcessingStatus { get; init; } 
    /// <summary>
    /// Account in which cash is maintained.
    /// </summary>
    public AccountIdentificationSearchCriteria2Choice_? CashAccount { get; init; } 
    /// <summary>
    /// Party that owns the account.
    /// </summary>
    public SystemPartyIdentification8? CashAccountOwner { get; init; } 
    /// <summary>
    /// Party that manages the cash account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? CashAccountServicer { get; init; } 
    /// <summary>
    /// Party that originated the message, if other than the sender.
    /// </summary>
    public SystemPartyIdentification8? MessageOriginator { get; init; } 
    /// <summary>
    /// Specifies the creation date/time of the intra-balance movement.
    /// </summary>
    public DateAndDateTimeSearch5Choice_? CreationDateTime { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ModificationRequestIdentification is IsoMax35Text ModificationRequestIdentificationValue)
        {
            writer.WriteStartElement(null, "ModReqId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ModificationRequestIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ProcessingStatus is ModificationProcessingStatus9Choice_ ProcessingStatusValue)
        {
            writer.WriteStartElement(null, "PrcgSts", xmlNamespace );
            ProcessingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAccount is AccountIdentificationSearchCriteria2Choice_ CashAccountValue)
        {
            writer.WriteStartElement(null, "CshAcct", xmlNamespace );
            CashAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAccountOwner is SystemPartyIdentification8 CashAccountOwnerValue)
        {
            writer.WriteStartElement(null, "CshAcctOwnr", xmlNamespace );
            CashAccountOwnerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAccountServicer is BranchAndFinancialInstitutionIdentification6 CashAccountServicerValue)
        {
            writer.WriteStartElement(null, "CshAcctSvcr", xmlNamespace );
            CashAccountServicerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MessageOriginator is SystemPartyIdentification8 MessageOriginatorValue)
        {
            writer.WriteStartElement(null, "MsgOrgtr", xmlNamespace );
            MessageOriginatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreationDateTime is DateAndDateTimeSearch5Choice_ CreationDateTimeValue)
        {
            writer.WriteStartElement(null, "CreDtTm", xmlNamespace );
            CreationDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static IntraBalanceQueryCriteria8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
