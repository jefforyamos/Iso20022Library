//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for InvestmentAccount36.  ISO2002 ID# _J-WeURKLEeKj15WxqwlXPw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Account between an investor(s) and a fund manager or a fund. The account can contain holdings in any investment fund or investment fund class managed (or distributed) by the fund manager, within the same fund family.
/// </summary>
public partial record InvestmentAccount36
     : IIsoXmlSerilizable<InvestmentAccount36>
{
    #nullable enable
    
    /// <summary>
    /// Name of the account. It provides an additional means of identification, and is designated by the account servicer in agreement with the account owner.
    /// </summary>
    public IsoMax35Text? Name { get; init; } 
    /// <summary>
    /// Supplementary registration information applying to a specific block of units for dealing and reporting purposes. The supplementary registration information may be used when all the units are registered, for example, to a funds supermarket, but holdings for each investor have to reconciled individually.
    /// </summary>
    public IsoMax35Text? Designation { get; init; } 
    /// <summary>
    /// Purpose of the account/source fund type. This is typically linked to an investment product, for example, wrapper, ISA.
    /// </summary>
    public AccountType1Choice_? Type { get; init; } 
    /// <summary>
    /// Ownership status of the account, for example, joint owners.
    /// </summary>
    public required OwnershipType1Choice_ OwnershipType { get; init; } 
    /// <summary>
    /// Tax advantage specific to the account.
    /// </summary>
    public TaxExemptionReason1Choice_? TaxExemption { get; init; } 
    /// <summary>
    /// Frequency at which a statement is issued.
    /// </summary>
    public StatementFrequencyReason1Choice_? StatementFrequency { get; init; } 
    /// <summary>
    /// Currency chosen for reporting purposes by the account owner in agreement with the account servicer.
    /// </summary>
    public ActiveCurrencyCode? ReferenceCurrency { get; init; } 
    /// <summary>
    /// Language for all communication concerning the account.
    /// </summary>
    public LanguageCode? Language { get; init; } 
    /// <summary>
    /// Dividend option chosen by the account owner based on the options offered in the prospectus.
    /// </summary>
    public IncomePreference1Code? IncomePreference { get; init; } 
    /// <summary>
    /// Method by which the tax (withholding tax) is to be processed i.e. either withheld at source or tax information reported to tax authorities or tax information is reported due to the provision of a tax certificate.
    /// </summary>
    public TaxWithholdingMethod2Code? TaxWithholdingMethod { get; init; } 
    /// <summary>
    /// Details of the letter of intent.
    /// </summary>
    public LetterIntent1? LetterIntentDetails { get; init; } 
    /// <summary>
    /// Reference of an accumulation rights program, in which sales commissions are based on a customer's present purchases of shares and the aggregate quantity previously purchased by the customer. An accumulation rights program is mainly used in the US market.
    /// </summary>
    public IsoMax35Text? AccumulationRightReference { get; init; } 
    /// <summary>
    /// Number of account owners or related parties required to authorise transactions on the account.
    /// </summary>
    public IsoNumber? RequiredSignatoriesNumber { get; init; } 
    /// <summary>
    /// Name of the investment fund family.
    /// </summary>
    public IsoMax350Text? FundFamilyName { get; init; } 
    /// <summary>
    /// Detailed information about the investment fund associated to the account.
    /// </summary>
    public ModificationScope13? ModifiedFundDetails { get; init; } 
    /// <summary>
    /// Parameters to be applied on deal amount for orders when the amount is a fractional number.
    /// </summary>
    public RoundingParameters1? RoundingDetails { get; init; } 
    /// <summary>
    /// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
    /// </summary>
    public PartyIdentification2Choice_? AccountServicer { get; init; } 
    /// <summary>
    /// Specifies information about blocked accounts.
    /// </summary>
    public Blocked1? BlockedStatus { get; init; } 
    /// <summary>
    /// Specifies the type of usage of the account.
    /// </summary>
    public AccountUsageType1Choice_? AccountUsageType { get; init; } 
    /// <summary>
    /// Specifies if documentary evidence has been provided for the foreign resident.
    /// </summary>
    public Provided1Code? ForeignStatusCertification { get; init; } 
    /// <summary>
    /// Date the investor signs the open account form.
    /// </summary>
    public DateAndDateTimeChoice_? AccountSignatureDateTime { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax35Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Designation is IsoMax35Text DesignationValue)
        {
            writer.WriteStartElement(null, "Dsgnt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DesignationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Type is AccountType1Choice_ TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OwnrshTp", xmlNamespace );
        OwnershipType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TaxExemption is TaxExemptionReason1Choice_ TaxExemptionValue)
        {
            writer.WriteStartElement(null, "TaxXmptn", xmlNamespace );
            TaxExemptionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatementFrequency is StatementFrequencyReason1Choice_ StatementFrequencyValue)
        {
            writer.WriteStartElement(null, "StmtFrqcy", xmlNamespace );
            StatementFrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReferenceCurrency is ActiveCurrencyCode ReferenceCurrencyValue)
        {
            writer.WriteStartElement(null, "RefCcy", xmlNamespace );
            writer.WriteValue(ReferenceCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Language is LanguageCode LanguageValue)
        {
            writer.WriteStartElement(null, "Lang", xmlNamespace );
            writer.WriteValue(LanguageValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (IncomePreference is IncomePreference1Code IncomePreferenceValue)
        {
            writer.WriteStartElement(null, "IncmPref", xmlNamespace );
            writer.WriteValue(IncomePreferenceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TaxWithholdingMethod is TaxWithholdingMethod2Code TaxWithholdingMethodValue)
        {
            writer.WriteStartElement(null, "TaxWhldgMtd", xmlNamespace );
            writer.WriteValue(TaxWithholdingMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (LetterIntentDetails is LetterIntent1 LetterIntentDetailsValue)
        {
            writer.WriteStartElement(null, "LttrInttDtls", xmlNamespace );
            LetterIntentDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccumulationRightReference is IsoMax35Text AccumulationRightReferenceValue)
        {
            writer.WriteStartElement(null, "AcmltnRghtRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AccumulationRightReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RequiredSignatoriesNumber is IsoNumber RequiredSignatoriesNumberValue)
        {
            writer.WriteStartElement(null, "ReqrdSgntriesNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(RequiredSignatoriesNumberValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (FundFamilyName is IsoMax350Text FundFamilyNameValue)
        {
            writer.WriteStartElement(null, "FndFmlyNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(FundFamilyNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ModifiedFundDetails is ModificationScope13 ModifiedFundDetailsValue)
        {
            writer.WriteStartElement(null, "ModfdFndDtls", xmlNamespace );
            ModifiedFundDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RoundingDetails is RoundingParameters1 RoundingDetailsValue)
        {
            writer.WriteStartElement(null, "RndgDtls", xmlNamespace );
            RoundingDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountServicer is PartyIdentification2Choice_ AccountServicerValue)
        {
            writer.WriteStartElement(null, "AcctSvcr", xmlNamespace );
            AccountServicerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BlockedStatus is Blocked1 BlockedStatusValue)
        {
            writer.WriteStartElement(null, "BlckdSts", xmlNamespace );
            BlockedStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountUsageType is AccountUsageType1Choice_ AccountUsageTypeValue)
        {
            writer.WriteStartElement(null, "AcctUsgTp", xmlNamespace );
            AccountUsageTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ForeignStatusCertification is Provided1Code ForeignStatusCertificationValue)
        {
            writer.WriteStartElement(null, "FrgnStsCertfctn", xmlNamespace );
            writer.WriteValue(ForeignStatusCertificationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AccountSignatureDateTime is DateAndDateTimeChoice_ AccountSignatureDateTimeValue)
        {
            writer.WriteStartElement(null, "AcctSgntrDtTm", xmlNamespace );
            AccountSignatureDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static InvestmentAccount36 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
