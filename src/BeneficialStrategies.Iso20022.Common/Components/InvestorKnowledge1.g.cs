//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for InvestorKnowledge1.  ISO2002 ID# _40olsDcNEeiIxKQErQxblg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Knowledge and/or experience of an investor.
/// </summary>
public partial record InvestorKnowledge1
     : IIsoXmlSerilizable<InvestorKnowledge1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether the investor is a basic investor. A basic investor has one, or more, of the following characteristics:
    /// - a basic knowledge of relevant financial instruments (a basic investor can make an informed investment decision based on the regulated and authorised offering documentation or with the help of basic information provided at the point of sale),
    /// - no financial industry experience, that is, suited to a first time investor.
    /// When used in reference to MiFID, this is in the scope of the European MiFID Template (EMT) reference 02010.
    /// </summary>
    public TargetMarket1Code? BasicInvestor { get; init; } 
    /// <summary>
    /// Specifies whether the investor is an informed investor. An informed investor has one, or more, of the following characteristics:
    /// - average knowledge of relevant financial products (an informed investor can make an informed investment decision based on the regulated and authorised offering documentation, together with knowledge and understanding of the specific factors/risks highlighted within them only),
    /// - some financial industry experience.
    /// When used in reference to MiFID, this is in the scope of the European MiFID Template (EMT) reference 02020.
    /// </summary>
    public TargetMarket1Code? InformedInvestor { get; init; } 
    /// <summary>
    /// Specifies whether the investor is an advanced investor. An advanced investor has one, or more, of the following characteristics:
    /// - good knowledge of relevant financial products and transactions, financial industry experience or accompanied by professional investment advice or included in a - discretionary portfolio service.
    /// When used in reference to MiFID, this is in the scope of the European MiFID Template (EMT) reference 02030.
    /// </summary>
    public TargetMarket1Code? AdvancedInvestor { get; init; } 
    /// <summary>
    /// Specifies whether the investor is an expert investor. An expert investor has expert knowledge of and/or experience with highly specialised financial products. (Specific to Germany.) 
    /// When used in reference to MiFID, this is in the scope of the European MiFID Template (EMT) reference 02040.
    /// </summary>
    public TargetMarket1Code? ExpertInvestorGermany { get; init; } 
    /// <summary>
    /// Type of investor knowledge and experience for which the financial instrument is targeted.
    /// </summary>
    public OtherTargetMarketInvestorKnowledge1? Other { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (BasicInvestor is TargetMarket1Code BasicInvestorValue)
        {
            writer.WriteStartElement(null, "BsicInvstr", xmlNamespace );
            writer.WriteValue(BasicInvestorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (InformedInvestor is TargetMarket1Code InformedInvestorValue)
        {
            writer.WriteStartElement(null, "InfrmdInvstr", xmlNamespace );
            writer.WriteValue(InformedInvestorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AdvancedInvestor is TargetMarket1Code AdvancedInvestorValue)
        {
            writer.WriteStartElement(null, "AdvncdInvstr", xmlNamespace );
            writer.WriteValue(AdvancedInvestorValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExpertInvestorGermany is TargetMarket1Code ExpertInvestorGermanyValue)
        {
            writer.WriteStartElement(null, "ExprtInvstrDE", xmlNamespace );
            writer.WriteValue(ExpertInvestorGermanyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Other is OtherTargetMarketInvestorKnowledge1 OtherValue)
        {
            writer.WriteStartElement(null, "Othr", xmlNamespace );
            OtherValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static InvestorKnowledge1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
