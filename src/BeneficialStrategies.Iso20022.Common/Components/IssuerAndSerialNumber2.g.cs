//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for IssuerAndSerialNumber2.  ISO2002 ID# _-vM7ES8iEeu125Ip9zFcsQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Certificate issuer name and serial number (see X.509).
/// </summary>
public partial record IssuerAndSerialNumber2
     : IIsoXmlSerilizable<IssuerAndSerialNumber2>
{
    #nullable enable
    
    /// <summary>
    /// Certificate issuer name (see X.509).
    /// </summary>
    public required CertificateIssuer1 Issuer { get; init; } 
    /// <summary>
    /// Certificate serial number (see X.509).
    /// </summary>
    public required IsoMax500Binary SerialNumber { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Issr", xmlNamespace );
        Issuer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SrlNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax500Binary(SerialNumber)); // data type Max500Binary System.Byte[]
        writer.WriteEndElement();
    }
    public static IssuerAndSerialNumber2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
