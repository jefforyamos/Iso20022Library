//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for KeyTransport1.  ISO2002 ID# _SxIvtgEcEeCQm6a_G2yO_w_182276268.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Key encryption key (KEK), encrypted previously distributed symmetric key.
/// </summary>
public partial record KeyTransport1
     : IIsoXmlSerilizable<KeyTransport1>
{
    #nullable enable
    
    /// <summary>
    /// Version of the cryptographic key.
    /// </summary>
    public required IsoNumber Version { get; init; } 
    /// <summary>
    /// Transport key or key encryption key (KEK) for the recipient.
    /// </summary>
    public required CertificateIdentifier1 RecipientIdentification { get; init; } 
    /// <summary>
    /// Algorithm to encrypt the key encryption key (KEK).
    /// </summary>
    public required AlgorithmIdentification1 KeyEncryptionAlgorithm { get; init; } 
    /// <summary>
    /// Encrypted key encryption key (KEK).
    /// </summary>
    public required IsoMax140Binary EncryptedKey { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Vrsn", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoNumber(Version)); // data type Number System.UInt64
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RcptId", xmlNamespace );
        RecipientIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "KeyNcrptnAlgo", xmlNamespace );
        KeyEncryptionAlgorithm.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "NcrptdKey", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax140Binary(EncryptedKey)); // data type Max140Binary System.Byte[]
        writer.WriteEndElement();
    }
    public static KeyTransport1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
