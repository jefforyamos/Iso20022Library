//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LineItemDetails11.  ISO2002 ID# _SxwzgTAWEeOKib24wnHaFg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Goods or services that are part of a commercial trade agreement.
/// </summary>
public partial record LineItemDetails11
     : IIsoXmlSerilizable<LineItemDetails11>
{
    #nullable enable
    
    /// <summary>
    /// Sequential number assigned to a line item.
    /// </summary>
    public required IsoMax70Text LineItemIdentification { get; init; } 
    /// <summary>
    /// Specifies the quantity of a product in a trade transaction.
    /// </summary>
    public required Quantity9 Quantity { get; init; } 
    /// <summary>
    /// Amount of money for which goods or services are offered, sold, or bought.
    /// </summary>
    public UnitPrice18? UnitPrice { get; init; } 
    /// <summary>
    /// Name of the product detailed in the corresponding line item.
    /// </summary>
    public IsoMax70Text? ProductName { get; init; } 
    /// <summary>
    /// Identifies the product of the corresponding line item.
    /// </summary>
    public ProductIdentifier2Choice_? ProductIdentifier { get; init; } 
    /// <summary>
    /// Identifies the characteristics of product.
    /// </summary>
    public ProductCharacteristics1Choice_? ProductCharacteristics { get; init; } 
    /// <summary>
    /// Identifies the category of product.
    /// </summary>
    public ProductCategory1Choice_? ProductCategory { get; init; } 
    /// <summary>
    /// Country of origin of the goods.
    /// </summary>
    public CountryCode? ProductOrigin { get; init; } 
    /// <summary>
    /// Variance on price for the goods.
    /// </summary>
    public Adjustment6? Adjustment { get; init; } 
    /// <summary>
    /// Charges related to the conveyance of goods.
    /// </summary>
    public Charge25? FreightCharges { get; init; } 
    /// <summary>
    /// Amount of money due to the government or tax authority, according to various pre-defined parameters linked to the value of the goods in a trade transaction.
    /// </summary>
    public Tax22? Tax { get; init; } 
    /// <summary>
    /// Total amount of the line item after adjustments have been applied.
    /// </summary>
    public required IsoCurrencyAndAmount TotalAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "LineItmId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax70Text(LineItemIdentification)); // data type Max70Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Qty", xmlNamespace );
        Quantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (UnitPrice is UnitPrice18 UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            UnitPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProductName is IsoMax70Text ProductNameValue)
        {
            writer.WriteStartElement(null, "PdctNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(ProductNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (ProductIdentifier is ProductIdentifier2Choice_ ProductIdentifierValue)
        {
            writer.WriteStartElement(null, "PdctIdr", xmlNamespace );
            ProductIdentifierValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProductCharacteristics is ProductCharacteristics1Choice_ ProductCharacteristicsValue)
        {
            writer.WriteStartElement(null, "PdctChrtcs", xmlNamespace );
            ProductCharacteristicsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProductCategory is ProductCategory1Choice_ ProductCategoryValue)
        {
            writer.WriteStartElement(null, "PdctCtgy", xmlNamespace );
            ProductCategoryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProductOrigin is CountryCode ProductOriginValue)
        {
            writer.WriteStartElement(null, "PdctOrgn", xmlNamespace );
            writer.WriteValue(ProductOriginValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Adjustment is Adjustment6 AdjustmentValue)
        {
            writer.WriteStartElement(null, "Adjstmnt", xmlNamespace );
            AdjustmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FreightCharges is Charge25 FreightChargesValue)
        {
            writer.WriteStartElement(null, "FrghtChrgs", xmlNamespace );
            FreightChargesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Tax is Tax22 TaxValue)
        {
            writer.WriteStartElement(null, "Tax", xmlNamespace );
            TaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TtlAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(TotalAmount)); // data type CurrencyAndAmount System.Decimal
        writer.WriteEndElement();
    }
    public static LineItemDetails11 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
