//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LiquidResourceInformation1.  ISO2002 ID# _nNjvsESrEemM8-DVOYzdVQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to the liquid resources.
/// </summary>
public partial record LiquidResourceInformation1
     : IIsoXmlSerilizable<LiquidResourceInformation1>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the facility provider.
    /// </summary>
    public IsoMax35Text? CounterPartyIdentification { get; init; } 
    /// <summary>
    /// Amount of liquid resources available to meet liquid requirements.
    /// </summary>
    public required AmountAndDirection102 LiquidResourceValue { get; init; } 
    /// <summary>
    /// The market value of the financial instruments being used to secure the facility.
    /// </summary>
    public AmountAndDirection102? MarketValue { get; init; } 
    /// <summary>
    /// Indicates whether the facility is secured or not.
    /// </summary>
    public required IsoTrueFalseIndicator Secured { get; init; } 
    /// <summary>
    /// Indicates whether the financial instruments are encumbered or not. This includes where financial instruments must be pledged to secure liquidity facilities.
    /// </summary>
    public required IsoTrueFalseIndicator AssetEncumbered { get; init; } 
    /// <summary>
    /// Indicates whether the available liquid resource counts towards the liquid requirements in the scenario or not.
    /// </summary>
    public required IsoTrueFalseIndicator QualifyingResource { get; init; } 
    /// <summary>
    /// Indicates the reliance on third party entities to settle payment obligations for the CCP or a clearing member. The article 32(4) of Commission Delegated Regulated 153/2013 includes a full list of third party entities which a CCP may have a liquidity exposure to. If the value is true, the portion of the liquid resource which is assumed to be unavailable due to a dependency on third party entities. If the value is false, the portion of the liquid resource which is assumed to be available as no dependency on third party entities.
    /// </summary>
    public required IsoTrueFalseIndicator AgencyArrangements { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CounterPartyIdentification is IsoMax35Text CounterPartyIdentificationValue)
        {
            writer.WriteStartElement(null, "CntrPtyId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CounterPartyIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "LqdRsrcVal", xmlNamespace );
        LiquidResourceValue.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (MarketValue is AmountAndDirection102 MarketValueValue)
        {
            writer.WriteStartElement(null, "MktVal", xmlNamespace );
            MarketValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Scrd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(Secured)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AsstNcmbrd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AssetEncumbered)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QlfygRsrc", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(QualifyingResource)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AgcyArrgmnts", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AgencyArrangements)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
    }
    public static LiquidResourceInformation1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
