//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LiquidityRequiredAndAvailable1.  ISO2002 ID# _IW-vwLbxEeaqL_M7XFD7PQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Obligations of a legal entity or other financial construct that must be met in cash and the resources such legal entity of financial construct has available to meet those obligations.
/// </summary>
public partial record LiquidityRequiredAndAvailable1
     : IIsoXmlSerilizable<LiquidityRequiredAndAvailable1>
{
    #nullable enable
    
    /// <summary>
    /// Flows of resources that are estimated to be available to the CCP on each day of the reporting horizon. That is, balances as of close‐of‐business on day ‘T‐1’, then flows from day ‘T’ of the default to ‘T+5 onwards’.
    /// </summary>
    public required LiquidResources1 LiquidResources { get; init; } 
    /// <summary>
    /// Period of reporting of liquidity requirements and resources relative to a set date.
    /// </summary>
    public required SettlementDate6Code LiquidityHorizon { get; init; } 
    /// <summary>
    /// Total expected liquidity need under Scenario ID for the relevant currency over each day of the horizon from day T onwards.
    /// </summary>
    public required StressLiquidResourceRequirement1 StressLiquidResourceRequirement { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "LqdRsrcs", xmlNamespace );
        LiquidResources.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "LqdtyHrzn", xmlNamespace );
        writer.WriteValue(LiquidityHorizon.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "StrssLqdRsrcRqrmnt", xmlNamespace );
        StressLiquidResourceRequirement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static LiquidityRequiredAndAvailable1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
