//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LiquidityStressScenarioDefinition1.  ISO2002 ID# _ERnlwLDDEeaSl6vJk5Bd8w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Attributes and information that describe a scenario used to test whether a legal entity or other financial construct has sufficient liquid resources to meet its obligations as they arise.
/// </summary>
public partial record LiquidityStressScenarioDefinition1
     : IIsoXmlSerilizable<LiquidityStressScenarioDefinition1>
{
    #nullable enable
    
    /// <summary>
    /// CCP’s internal unique identifier of the stress scenario that generates the reported liquidity need.
    /// </summary>
    public required GenericIdentification168 Identification { get; init; } 
    /// <summary>
    /// Details of the method and assumptions used for estimating operational outflows.
    /// </summary>
    public required IsoMax2000Text Description { get; init; } 
    /// <summary>
    /// CCP’s internal classification of stress scenario type.
    /// </summary>
    public IsoMax35Text? Type { get; init; } 
    /// <summary>
    /// Stress currency, or if aggregate, report ‘XLL’.
    /// </summary>
    public required ActiveCurrencyCode StressCurrency { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Desc", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax2000Text(Description)); // data type Max2000Text System.String
        writer.WriteEndElement();
        if (Type is IsoMax35Text TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StrssCcy", xmlNamespace );
        writer.WriteValue(StressCurrency.ToString()); // Enum value
        writer.WriteEndElement();
    }
    public static LiquidityStressScenarioDefinition1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
