//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LoanMatchingCriteria6.  ISO2002 ID# _DBFZsf_oEemm3skPVSMJQg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Compares information related to both sides of a loan.
/// </summary>
public partial record LoanMatchingCriteria6
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether the values for the Unique Trade Identifier (UTI) are matching or not.
    /// </summary>
    public CompareText1? UniqueTradeIdentifier { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date are matching or not.
    /// </summary>
    public CompareDate2? TerminationDate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as exposure type are matching or not.
    /// </summary>
    public CompareExposureType2? ContractType { get; init; } 
    /// <summary>
    /// Specifies whether the information on contract clearing are matching or not.
    /// </summary>
    public CompareClearingStatus2? ClearingStatus { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date and time are matching or not.
    /// </summary>
    public CompareDateTime2? ClearingDateTime { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as LEI identifier are matching or not.
    /// </summary>
    public CompareOrganisationIdentification1? CCP { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as MIC identifier are matching or not.
    /// </summary>
    public CompareMICIdentifier2? TradingVenue { get; init; } 
    /// <summary>
    /// Specifies whether the information on master agreement type are matching or not.
    /// </summary>
    public CompareAgreementType1? MasterAgreementType { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date and time are matching or not.
    /// </summary>
    public CompareDateTime2? ExecutingDateTime { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date are matching or not.
    /// </summary>
    public CompareDate2? StartDate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date are matching or not.
    /// </summary>
    public CompareDate2? EndDate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber3? MinimumNoticePeriod { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date are matching or not.
    /// </summary>
    public CompareDate2? EarliestCallBackDate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as type of collateral agreement are matching or not.
    /// </summary>
    public CompareSpecialCollateral2? GeneralCollateral { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as true/false indicator are matching or not.
    /// </summary>
    public CompareTrueFalseIndicator2? DeliveryByValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as collateral delivery method are matching or not.
    /// </summary>
    public CompareDeliveryMethod2? CollateralDeliveryMethod { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as true/false indicator are matching or not.
    /// </summary>
    public CompareTrueFalseIndicator2? OpenTerm { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as repo termination option are matching or not.
    /// </summary>
    public CompareTerminationOption2? TerminationOption { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as percentage rate are matching or not.
    /// </summary>
    public ComparePercentageRate2? FixedInterestRate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 5 characters are matching or not.
    /// </summary>
    public CompareInterestComputationMethod2? DayCountBasis { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as benchmark curve name are matching or not.
    /// </summary>
    public CompareBenchmarkCurveName2? FloatingInterestReferenceRate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingInterestRateTermUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber3? FloatingInterestRateTermValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingInterestRatePaymentFrequencyUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber3? FloatingInterestRatePaymentFrequencyValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingInterestRateResetFrequencyUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber2? FloatingInterestRateResetFrequencyValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 5 characters are matching or not.
    /// </summary>
    public CompareNumber2? InterestRateBasisPointSpread { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareAmountAndDirection1? MarginLoanAmount { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareActiveOrHistoricCurrencyAndAmount2? PrincipalAmountStartDateAmount { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareActiveOrHistoricCurrencyAndAmount2? PrincipalAmountMaturityDateAmount { get; init; } 
    /// <summary>
    /// Specifies whether the infromation on the asset type is matching or not.
    /// </summary>
    public SecurityCommodity4? AssetType { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareActiveOrHistoricCurrencyAndAmount2? LoanValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as percentage rate are matching or not.
    /// </summary>
    public ComparePercentageRate2? FixedRebateReferenceRate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as benchmark curve name are matching or not.
    /// </summary>
    public CompareBenchmarkCurveName2? FloatingRebateReferenceRate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingRebateRateTermUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber2? FloatingRebateRateTermValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingRebateRatePaymentFrequencyUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber2? FloatingRebateRatePaymentFrequencyValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as rate basis code are matching or not.
    /// </summary>
    public CompareRateBasis2? FloatingRebateRateResetFrequencyUnit { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 3 characters are matching or not.
    /// </summary>
    public CompareNumber2? FloatingRebateRateResetFrequencyValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as number with max 5 characters are matching or not.
    /// </summary>
    public CompareNumber2? RebateRateBasisPointSpread { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as the adjusted rate are matching or not.
    /// </summary>
    public ComparePercentageRate2? AdjustedRate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as the Rate Date are matching or not.
    /// </summary>
    public CompareDate2? AdjustmentRateDate { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as percentage rate are matching or not.
    /// </summary>
    public ComparePercentageRate2? LendingFee { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareActiveOrHistoricCurrencyAndAmount2? OutstandingLoan { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareActiveOrHistoricCurrencyAndAmount2? ShortMarketValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as transaction/position indicator are matching or not.
    /// </summary>
    public CompareReportingLevelType2? LevelType { get; init; } 
    /// <summary>
    /// Unit of measure in which the quantity is expressed.
    /// </summary>
    public CompareUnitOfMeasure2? UnitOfMeasure { get; init; } 
    
    #nullable disable
}
