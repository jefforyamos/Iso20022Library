//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for LongPaymentIdentification1.  ISO2002 ID# _8DMnBqMgEeCJ6YNENx4h-w_-1860065430.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identifies a payment instruction by a set of characteristics (as per EBA system requirements) which provides an unambiguous identification of the instruction.
/// </summary>
public partial record LongPaymentIdentification1
     : IIsoXmlSerilizable<LongPaymentIdentification1>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.|Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level. The instructing agent has to make sure that the transaction identification is unique for a pre-agreed period.|Usage: this is the former PaymentInstructionReference element.
    /// </summary>
    public required IsoMax35Text TransactionIdentification { get; init; } 
    /// <summary>
    /// Amount of money moved between the instructing agent and the instructed agent.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount InterBankSettlementAmount { get; init; } 
    /// <summary>
    /// Date on which the amount of money ceases to be available to the agent that owes it and when the amount of money becomes available to the agent to which it is due.
    /// </summary>
    public required IsoISODate InterBankSettlementDate { get; init; } 
    /// <summary>
    /// Message type with which the instruction has been initiated.
    /// </summary>
    public PaymentOrigin1Choice_? PaymentMethod { get; init; } 
    /// <summary>
    /// Agent that instructs the next party in the chain to carry out the (set of) instruction(s).
    /// </summary>
    public required BranchAndFinancialInstitutionIdentification5 InstructingAgent { get; init; } 
    /// <summary>
    /// Agent that is instructed by the previous party in the chain to carry out the (set of) instruction(s).
    /// </summary>
    public required BranchAndFinancialInstitutionIdentification5 InstructedAgent { get; init; } 
    /// <summary>
    /// Optional qualifier providing additional system specific information about the entry.
    /// </summary>
    public IsoEntryTypeIdentifier? EntryType { get; init; } 
    /// <summary>
    /// Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.|Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction.|It can be included in several messages related to the transaction.|Usage: this is the former RelatedReference.
    /// </summary>
    public IsoMax35Text? EndToEndIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransactionIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "IntrBkSttlmAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(InterBankSettlementAmount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "IntrBkSttlmDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(InterBankSettlementDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (PaymentMethod is PaymentOrigin1Choice_ PaymentMethodValue)
        {
            writer.WriteStartElement(null, "PmtMtd", xmlNamespace );
            PaymentMethodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InstgAgt", xmlNamespace );
        InstructingAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "InstdAgt", xmlNamespace );
        InstructedAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EntryType is IsoEntryTypeIdentifier EntryTypeValue)
        {
            writer.WriteStartElement(null, "NtryTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoEntryTypeIdentifier(EntryTypeValue)); // data type EntryTypeIdentifier System.String
            writer.WriteEndElement();
        }
        if (EndToEndIdentification is IsoMax35Text EndToEndIdentificationValue)
        {
            writer.WriteStartElement(null, "EndToEndId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(EndToEndIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
    }
    public static LongPaymentIdentification1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
