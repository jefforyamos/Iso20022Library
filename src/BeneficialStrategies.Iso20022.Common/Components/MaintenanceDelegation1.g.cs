//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MaintenanceDelegation1.  ISO2002 ID# _Kw_ykGp5EeSojYXQbRlLzA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information on the delegation of a maintenance action or maintenance function.
/// </summary>
public partial record MaintenanceDelegation1
     : IIsoXmlSerilizable<MaintenanceDelegation1>
{
    #nullable enable
    
    /// <summary>
    /// Maintenance service to be delegated.
    /// </summary>
    public DataSetCategory6Code? MaintenanceService { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _lFEjUGp5EeSojYXQbRlLzA
    /// <summary>
    /// Flag to indicate that the delegated maintenance must be performed on a subset of the terminal estate.
    /// </summary>
    public IsoTrueFalseIndicator? PartialDelegation { get; init; } 
    /// <summary>
    /// Subset of the terminal estate for the delegated actions, for instance for pilot or key deactivation). The subset may be expressed as a list of POI or terminal estate subset identifier.
    /// </summary>
    public IsoMax35Text? POISubset { get; init; } 
    /// <summary>
    /// Information for the MTM to build or include delegated actions in the management plan of the POI.
    /// </summary>
    public MaintenanceDelegateAction1? DelegatedAction { get; init; } 
    /// <summary>
    /// Identification of the parameters subset assigned by the MTM.
    /// </summary>
    public IsoMax35Text? ParametersSubsetIdentification { get; init; } 
    /// <summary>
    /// Definition of the subset of application parameters, for instance the range of application profiles, the RID (registered application provider identification).
    /// </summary>
    public IsoMax3000Binary? ParametersSubsetDefinition { get; init; } 
    /// <summary>
    /// Certificate path of the terminal manager.
    /// </summary>
    public IsoMax5000Binary? Certificate { get; init; } 
    /// <summary>
    /// Association of the TM identifier and the MTM identifier of a POI.
    /// </summary>
    public MaintenanceIdentificationAssociation1? POIIdentificationAssociation { get; init; } 
    /// <summary>
    /// Identification of the key to manage or to download.
    /// </summary>
    public KEKIdentifier2? SymmetricKey { get; init; } 
    /// <summary>
    /// Configuration parameters of the terminal manager to be sent by the MTM.
    /// </summary>
    public TerminalManagementDataSet14? ParameterDataSet { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize MaintenanceService, multiplicity Unknown
        if (PartialDelegation is IsoTrueFalseIndicator PartialDelegationValue)
        {
            writer.WriteStartElement(null, "PrtlDlgtn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(PartialDelegationValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (POISubset is IsoMax35Text POISubsetValue)
        {
            writer.WriteStartElement(null, "POISubset", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(POISubsetValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DelegatedAction is MaintenanceDelegateAction1 DelegatedActionValue)
        {
            writer.WriteStartElement(null, "DlgtdActn", xmlNamespace );
            DelegatedActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ParametersSubsetIdentification is IsoMax35Text ParametersSubsetIdentificationValue)
        {
            writer.WriteStartElement(null, "ParamsSubsetId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ParametersSubsetIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ParametersSubsetDefinition is IsoMax3000Binary ParametersSubsetDefinitionValue)
        {
            writer.WriteStartElement(null, "ParamsSubsetDef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3000Binary(ParametersSubsetDefinitionValue)); // data type Max3000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (Certificate is IsoMax5000Binary CertificateValue)
        {
            writer.WriteStartElement(null, "Cert", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5000Binary(CertificateValue)); // data type Max5000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (POIIdentificationAssociation is MaintenanceIdentificationAssociation1 POIIdentificationAssociationValue)
        {
            writer.WriteStartElement(null, "POIIdAssoctn", xmlNamespace );
            POIIdentificationAssociationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SymmetricKey is KEKIdentifier2 SymmetricKeyValue)
        {
            writer.WriteStartElement(null, "SmmtrcKey", xmlNamespace );
            SymmetricKeyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ParameterDataSet is TerminalManagementDataSet14 ParameterDataSetValue)
        {
            writer.WriteStartElement(null, "ParamDataSet", xmlNamespace );
            ParameterDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MaintenanceDelegation1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
