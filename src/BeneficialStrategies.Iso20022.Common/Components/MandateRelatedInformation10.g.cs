//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MandateRelatedInformation10.  ISO2002 ID# _m-35kR72EeSxevWRRWxNAg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides further details related to a direct debit mandate signed between the creditor and the debtor.
/// </summary>
public partial record MandateRelatedInformation10
     : IIsoXmlSerilizable<MandateRelatedInformation10>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification, as assigned by the creditor, to unambiguously identify the mandate.
    /// </summary>
    public IsoMax35Text? MandateIdentification { get; init; } 
    /// <summary>
    /// Date on which the direct debit mandate has been signed by the debtor.
    /// </summary>
    public IsoISODate? DateOfSignature { get; init; } 
    /// <summary>
    /// Indicator notifying whether the underlying mandate is amended or not.
    /// </summary>
    public IsoTrueFalseIndicator? AmendmentIndicator { get; init; } 
    /// <summary>
    /// List of mandate elements that have been modified.
    /// </summary>
    public AmendmentInformationDetails10? AmendmentInformationDetails { get; init; } 
    /// <summary>
    /// Additional security provisions, such as a digital signature, as provided by the debtor.
    /// </summary>
    public IsoMax1025Text? ElectronicSignature { get; init; } 
    /// <summary>
    /// Date of the first collection of a direct debit as per the mandate.
    /// </summary>
    public IsoISODate? FirstCollectionDate { get; init; } 
    /// <summary>
    /// Date of the final collection of a direct debit as per the mandate.
    /// </summary>
    public IsoISODate? FinalCollectionDate { get; init; } 
    /// <summary>
    /// Regularity with which direct debit instructions are to be created and processed.
    /// </summary>
    public Frequency21Choice_? Frequency { get; init; } 
    /// <summary>
    /// Reason for the direct debit mandate to allow the user to distinguish between different mandates for the same creditor.
    /// </summary>
    public MandateSetupReason1Choice_? Reason { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MandateIdentification is IsoMax35Text MandateIdentificationValue)
        {
            writer.WriteStartElement(null, "MndtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MandateIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DateOfSignature is IsoISODate DateOfSignatureValue)
        {
            writer.WriteStartElement(null, "DtOfSgntr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateOfSignatureValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (AmendmentIndicator is IsoTrueFalseIndicator AmendmentIndicatorValue)
        {
            writer.WriteStartElement(null, "AmdmntInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AmendmentIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AmendmentInformationDetails is AmendmentInformationDetails10 AmendmentInformationDetailsValue)
        {
            writer.WriteStartElement(null, "AmdmntInfDtls", xmlNamespace );
            AmendmentInformationDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ElectronicSignature is IsoMax1025Text ElectronicSignatureValue)
        {
            writer.WriteStartElement(null, "ElctrncSgntr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax1025Text(ElectronicSignatureValue)); // data type Max1025Text System.String
            writer.WriteEndElement();
        }
        if (FirstCollectionDate is IsoISODate FirstCollectionDateValue)
        {
            writer.WriteStartElement(null, "FrstColltnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(FirstCollectionDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (FinalCollectionDate is IsoISODate FinalCollectionDateValue)
        {
            writer.WriteStartElement(null, "FnlColltnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(FinalCollectionDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Frequency is Frequency21Choice_ FrequencyValue)
        {
            writer.WriteStartElement(null, "Frqcy", xmlNamespace );
            FrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Reason is MandateSetupReason1Choice_ ReasonValue)
        {
            writer.WriteStartElement(null, "Rsn", xmlNamespace );
            ReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MandateRelatedInformation10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
