//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Meeting6.  ISO2002 ID# _8FEVwfM6EeqRfth943bvEA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about the date and location(s) of a general meeting.
/// </summary>
public partial record Meeting6
     : IIsoXmlSerilizable<Meeting6>
{
    #nullable enable
    
    /// <summary>
    /// Date and time at which the meeting will take place.
    /// </summary>
    public required DateFormat58Choice_ DateAndTime { get; init; } 
    /// <summary>
    /// Status of the meeting date.
    /// </summary>
    public MeetingDateStatus2Code? DateStatus { get; init; } 
    /// <summary>
    /// Indicates whether a minimum number of security representation is required to hold a meeting.
    /// </summary>
    public IsoYesNoIndicator? QuorumRequired { get; init; } 
    /// <summary>
    /// Location at which the meeting will take place.
    /// </summary>
    public ValueList<LocationFormat1Choice_> Location { get; init; } = [];
    /// <summary>
    /// Minimum quantity of securities required to hold a meeting.
    /// </summary>
    public QuorumQuantity1Choice_? QuorumQuantity { get; init; } 
    /// <summary>
    /// Address for the Universal Resource Locator (URL), for example, used over the www (HTTP) service.
    /// </summary>
    public IsoMax2048Text? URLAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "DtAndTm", xmlNamespace );
        DateAndTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DateStatus is MeetingDateStatus2Code DateStatusValue)
        {
            writer.WriteStartElement(null, "DtSts", xmlNamespace );
            writer.WriteValue(DateStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (QuorumRequired is IsoYesNoIndicator QuorumRequiredValue)
        {
            writer.WriteStartElement(null, "QrmReqrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(QuorumRequiredValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Lctn", xmlNamespace );
        Location.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (QuorumQuantity is QuorumQuantity1Choice_ QuorumQuantityValue)
        {
            writer.WriteStartElement(null, "QrmQty", xmlNamespace );
            QuorumQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (URLAddress is IsoMax2048Text URLAddressValue)
        {
            writer.WriteStartElement(null, "URLAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2048Text(URLAddressValue)); // data type Max2048Text System.String
            writer.WriteEndElement();
        }
    }
    public static Meeting6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
