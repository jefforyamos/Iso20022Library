//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MeetingContactPerson1.  ISO2002 ID# _QDKmxtp-Ed-ak6NoX_4Aeg_-854378880.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contact person at the party organising the meeting, at the issuer or at an intermediary.
/// </summary>
public partial record MeetingContactPerson1
     : IIsoXmlSerilizable<MeetingContactPerson1>
{
    #nullable enable
    
    /// <summary>
    /// Identifies a contact person by a name, a given name and an address.
    /// </summary>
    public ContactIdentification1? ContactPerson { get; init; } 
    /// <summary>
    /// Identifies the organisation which is represented by a person or for which a person works.
    /// </summary>
    public PartyIdentification9Choice_? EmployingParty { get; init; } 
    /// <summary>
    /// The identification of a financial market, as stipulated in the norm ISO 10383 'Codes for exchanges and market identifications'.
    /// </summary>
    public IsoMICIdentifier? PlaceOfListing { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ContactPerson is ContactIdentification1 ContactPersonValue)
        {
            writer.WriteStartElement(null, "CtctPrsn", xmlNamespace );
            ContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EmployingParty is PartyIdentification9Choice_ EmployingPartyValue)
        {
            writer.WriteStartElement(null, "EmplngPty", xmlNamespace );
            EmployingPartyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PlaceOfListing is IsoMICIdentifier PlaceOfListingValue)
        {
            writer.WriteStartElement(null, "PlcOfListg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMICIdentifier(PlaceOfListingValue)); // data type MICIdentifier System.String
            writer.WriteEndElement();
        }
    }
    public static MeetingContactPerson1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
