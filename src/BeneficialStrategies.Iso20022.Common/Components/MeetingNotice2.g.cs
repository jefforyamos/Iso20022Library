//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MeetingNotice2.  ISO2002 ID# _TlqdLdp-Ed-ak6NoX_4Aeg_-507959976.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about the shareholders meeting, specifying the participation requirements and the voting procedures. Alternatively, it may indicate where such information may be obtained.
/// </summary>
public partial record MeetingNotice2
     : IIsoXmlSerilizable<MeetingNotice2>
{
    #nullable enable
    
    /// <summary>
    /// Identification assigned to a general meeting by the party notifying the meeting. It must be unique for the party notifying the meeting.
    /// </summary>
    public IsoMax35Text? MeetingIdentification { get; init; } 
    /// <summary>
    /// Identification assigned to a meeting by the issuer. It must be unique for the issuer.
    /// </summary>
    public IsoMax35Text? IssuerMeetingIdentification { get; init; } 
    /// <summary>
    /// Specifies the type of security holders meeting.
    /// </summary>
    public required MeetingType2Code Type { get; init; } 
    /// <summary>
    /// Classifies the type of meeting.
    /// </summary>
    public MeetingTypeClassification1Code? Classification { get; init; } 
    /// <summary>
    /// This code can be used in case another meeting classifications is required.
    /// </summary>
    public IsoExtended350Code? ExtendedClassification { get; init; } 
    /// <summary>
    /// Official meeting announcement date.
    /// </summary>
    public IsoISODate? AnnouncementDate { get; init; } 
    /// <summary>
    /// Indicates whether physical participation to a meeting is required in order to be allowed to vote.
    /// </summary>
    public required IsoYesNoIndicator AttendanceRequired { get; init; } 
    /// <summary>
    /// Indicates how to order the attendance card or to give notice of attendance.
    /// </summary>
    public IsoMax350Text? AttendanceConfirmationInformation { get; init; } 
    /// <summary>
    /// Date and time by which the beneficial owner or agent must notify of their intention to participate in a meeting. This deadline is set by an intermediary.
    /// </summary>
    public DateFormat2Choice_? AttendanceConfirmationDeadline { get; init; } 
    /// <summary>
    /// Date and time by which the beneficial owner or agent must notify of their intention to participate in a meeting (STP mode). This deadline is set by an intermediary.
    /// </summary>
    public DateFormat2Choice_? AttendanceConfirmationSTPDeadline { get; init; } 
    /// <summary>
    /// Date and time by which the attendance to the meeting should be confirmed. This deadline is set by the issuer.
    /// </summary>
    public DateFormat2Choice_? AttendanceConfirmationMarketDeadline { get; init; } 
    /// <summary>
    /// Address to use over the www (HTTP) service where addtional information on the meeting may be found.
    /// </summary>
    public IsoMax256Text? AdditionalDocumentationURLAddress { get; init; } 
    /// <summary>
    /// Date and time by which security holders can propose amendments or new resolutions. This deadline is set by an intermediary.
    /// </summary>
    public DateFormat2Choice_? ResolutionProposalDeadline { get; init; } 
    /// <summary>
    /// Date and time by which security holders can propose amendments or new resolutions. This deadline is set by the issuer.
    /// </summary>
    public DateFormat2Choice_? ResolutionProposalMarketDeadline { get; init; } 
    /// <summary>
    /// Specifies the minimum stake in share capital or cash value or number of security holders required to table resolutions.
    /// </summary>
    public IsoMax350Text? ResolutionProposalThreshold { get; init; } 
    /// <summary>
    /// Specifies the minimum stake in share capital or cash value or number of security holders required to table resolutions. This minimum is expressed as a percentage.
    /// </summary>
    public IsoPercentageRate? ResolutionProposalThresholdPercentage { get; init; } 
    /// <summary>
    /// Number of securities admitted to the vote, expressed as an amount and a currency.
    /// </summary>
    public IsoCurrencyAndAmount? TotalNumberOfSecuritiesOutstanding { get; init; } 
    /// <summary>
    /// Number of rights admitted to the vote.
    /// </summary>
    public IsoNumber? TotalNumberOfVotingRights { get; init; } 
    /// <summary>
    /// Address where the information on the proxy should be sent.
    /// </summary>
    public PostalAddress1? ProxyAppointmentNotificationAddress { get; init; } 
    /// <summary>
    /// Indicates that no proxy is allowed for a meeting.
    /// </summary>
    public ProxyNotAllowedCode? ProxyNotAllowed { get; init; } 
    /// <summary>
    /// Specifies the elements required to assign a proxy.
    /// </summary>
    public ProxyAppointmentInformation1? Proxy { get; init; } 
    /// <summary>
    /// Contact person at the party organising the meeting, at the issuer or at an intermediary.
    /// </summary>
    public ValueList<MeetingContactPerson1> ContactPersonDetails { get; init; } = [];
    /// <summary>
    /// Date on which a company publishes the results of its meeting.
    /// </summary>
    public DateFormat3Choice_? ResultPublicationDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MeetingIdentification is IsoMax35Text MeetingIdentificationValue)
        {
            writer.WriteStartElement(null, "MtgId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MeetingIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (IssuerMeetingIdentification is IsoMax35Text IssuerMeetingIdentificationValue)
        {
            writer.WriteStartElement(null, "IssrMtgId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(IssuerMeetingIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        if (Classification is MeetingTypeClassification1Code ClassificationValue)
        {
            writer.WriteStartElement(null, "Clssfctn", xmlNamespace );
            writer.WriteValue(ClassificationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExtendedClassification is IsoExtended350Code ExtendedClassificationValue)
        {
            writer.WriteStartElement(null, "XtndedClssfctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedClassificationValue)); // data type Extended350Code System.String
            writer.WriteEndElement();
        }
        if (AnnouncementDate is IsoISODate AnnouncementDateValue)
        {
            writer.WriteStartElement(null, "AnncmntDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(AnnouncementDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AttndncReqrd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(AttendanceRequired)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (AttendanceConfirmationInformation is IsoMax350Text AttendanceConfirmationInformationValue)
        {
            writer.WriteStartElement(null, "AttndncConfInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(AttendanceConfirmationInformationValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (AttendanceConfirmationDeadline is DateFormat2Choice_ AttendanceConfirmationDeadlineValue)
        {
            writer.WriteStartElement(null, "AttndncConfDdln", xmlNamespace );
            AttendanceConfirmationDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AttendanceConfirmationSTPDeadline is DateFormat2Choice_ AttendanceConfirmationSTPDeadlineValue)
        {
            writer.WriteStartElement(null, "AttndncConfSTPDdln", xmlNamespace );
            AttendanceConfirmationSTPDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AttendanceConfirmationMarketDeadline is DateFormat2Choice_ AttendanceConfirmationMarketDeadlineValue)
        {
            writer.WriteStartElement(null, "AttndncConfMktDdln", xmlNamespace );
            AttendanceConfirmationMarketDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalDocumentationURLAddress is IsoMax256Text AdditionalDocumentationURLAddressValue)
        {
            writer.WriteStartElement(null, "AddtlDcmnttnURLAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(AdditionalDocumentationURLAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (ResolutionProposalDeadline is DateFormat2Choice_ ResolutionProposalDeadlineValue)
        {
            writer.WriteStartElement(null, "RsltnPrpslDdln", xmlNamespace );
            ResolutionProposalDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ResolutionProposalMarketDeadline is DateFormat2Choice_ ResolutionProposalMarketDeadlineValue)
        {
            writer.WriteStartElement(null, "RsltnPrpslMktDdln", xmlNamespace );
            ResolutionProposalMarketDeadlineValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ResolutionProposalThreshold is IsoMax350Text ResolutionProposalThresholdValue)
        {
            writer.WriteStartElement(null, "RsltnPrpslThrshld", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(ResolutionProposalThresholdValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ResolutionProposalThresholdPercentage is IsoPercentageRate ResolutionProposalThresholdPercentageValue)
        {
            writer.WriteStartElement(null, "RsltnPrpslThrshldPctg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(ResolutionProposalThresholdPercentageValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TotalNumberOfSecuritiesOutstanding is IsoCurrencyAndAmount TotalNumberOfSecuritiesOutstandingValue)
        {
            writer.WriteStartElement(null, "TtlNbOfSctiesOutsdng", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(TotalNumberOfSecuritiesOutstandingValue)); // data type CurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalNumberOfVotingRights is IsoNumber TotalNumberOfVotingRightsValue)
        {
            writer.WriteStartElement(null, "TtlNbOfVtngRghts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TotalNumberOfVotingRightsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (ProxyAppointmentNotificationAddress is PostalAddress1 ProxyAppointmentNotificationAddressValue)
        {
            writer.WriteStartElement(null, "PrxyAppntmntNtfctnAdr", xmlNamespace );
            ProxyAppointmentNotificationAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProxyNotAllowed is ProxyNotAllowedCode ProxyNotAllowedValue)
        {
            writer.WriteStartElement(null, "PrxyNotAllwd", xmlNamespace );
            writer.WriteValue(ProxyNotAllowedValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Proxy is ProxyAppointmentInformation1 ProxyValue)
        {
            writer.WriteStartElement(null, "Prxy", xmlNamespace );
            ProxyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CtctPrsnDtls", xmlNamespace );
        ContactPersonDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ResultPublicationDate is DateFormat3Choice_ ResultPublicationDateValue)
        {
            writer.WriteStartElement(null, "RsltPblctnDt", xmlNamespace );
            ResultPublicationDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MeetingNotice2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
