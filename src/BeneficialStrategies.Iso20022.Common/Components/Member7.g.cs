//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Member7.  ISO2002 ID# _fSe1VdcZEeqRFcf2R4bPBw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information about the members of a system.
/// </summary>
public partial record Member7
     : IIsoXmlSerilizable<Member7>
{
    #nullable enable
    
    /// <summary>
    /// Word by which something is called or known or the family name of a person.
    /// </summary>
    public IsoMax35Text? Name { get; init; } 
    /// <summary>
    /// Physical/logical address belonging to a member, segregated from its main address that is used for normal operations. The fund return address is used to route messages that require specific attention/exception handling, for example returns or rejects.
    /// </summary>
    public MemberIdentification3Choice_? ReturnAddress { get; init; } 
    /// <summary>
    /// Account to or from which a cash entry is made.
    /// </summary>
    public CashAccount40? Account { get; init; } 
    /// <summary>
    /// Nature of the relationship a member has with a system.
    /// </summary>
    public SystemMemberType1Choice_? Type { get; init; } 
    /// <summary>
    /// Status of a member in a system, for example enabled or deleted.
    /// </summary>
    public SystemMemberStatus1Choice_? Status { get; init; } 
    /// <summary>
    /// Person to be contacted in a given organisation.
    /// </summary>
    public ContactIdentificationAndAddress2? ContactReference { get; init; } 
    /// <summary>
    /// Number, or virtual address, used for communication.
    /// </summary>
    public CommunicationAddress10? CommunicationAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax35Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(NameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ReturnAddress is MemberIdentification3Choice_ ReturnAddressValue)
        {
            writer.WriteStartElement(null, "RtrAdr", xmlNamespace );
            ReturnAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Account is CashAccount40 AccountValue)
        {
            writer.WriteStartElement(null, "Acct", xmlNamespace );
            AccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Type is SystemMemberType1Choice_ TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Status is SystemMemberStatus1Choice_ StatusValue)
        {
            writer.WriteStartElement(null, "Sts", xmlNamespace );
            StatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ContactReference is ContactIdentificationAndAddress2 ContactReferenceValue)
        {
            writer.WriteStartElement(null, "CtctRef", xmlNamespace );
            ContactReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CommunicationAddress is CommunicationAddress10 CommunicationAddressValue)
        {
            writer.WriteStartElement(null, "ComAdr", xmlNamespace );
            CommunicationAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Member7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
