//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MerchantConfigurationParameters4.  ISO2002 ID# _MIxOYdX3Eeia9rtBTv_9KA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Acceptor parameters dedicated to the merchant.
/// </summary>
public partial record MerchantConfigurationParameters4
     : IIsoXmlSerilizable<MerchantConfigurationParameters4>
{
    #nullable enable
    
    /// <summary>
    /// Type of action for the configuration parameters.
    /// </summary>
    public required TerminalManagementAction3Code ActionType { get; init; } 
    /// <summary>
    /// Identification of the merchant for the MTM, if the POI manages several merchants.
    /// </summary>
    public IsoMax35Text? MerchantIdentification { get; init; } 
    /// <summary>
    /// Version of the merchant parameters.
    /// </summary>
    public IsoMax256Text? Version { get; init; } 
    /// <summary>
    /// Version of the parameters' format.
    /// </summary>
    public IsoMax8Text? ParameterFormatIdentifier { get; init; } 
    /// <summary>
    /// Local proxy configuration.
    /// </summary>
    public NetworkParameters6? Proxy { get; init; } 
    /// <summary>
    /// Other merchant parameters.
    /// </summary>
    public IsoMax10000Binary? OtherParameters { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ActnTp", xmlNamespace );
        writer.WriteValue(ActionType.ToString()); // Enum value
        writer.WriteEndElement();
        if (MerchantIdentification is IsoMax35Text MerchantIdentificationValue)
        {
            writer.WriteStartElement(null, "MrchntId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MerchantIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Version is IsoMax256Text VersionValue)
        {
            writer.WriteStartElement(null, "Vrsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(VersionValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (ParameterFormatIdentifier is IsoMax8Text ParameterFormatIdentifierValue)
        {
            writer.WriteStartElement(null, "ParamFrmtIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax8Text(ParameterFormatIdentifierValue)); // data type Max8Text System.String
            writer.WriteEndElement();
        }
        if (Proxy is NetworkParameters6 ProxyValue)
        {
            writer.WriteStartElement(null, "Prxy", xmlNamespace );
            ProxyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherParameters is IsoMax10000Binary OtherParametersValue)
        {
            writer.WriteStartElement(null, "OthrParams", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10000Binary(OtherParametersValue)); // data type Max10000Binary System.Byte[]
            writer.WriteEndElement();
        }
    }
    public static MerchantConfigurationParameters4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
