//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for MultilateralSettlementRequest2.  ISO2002 ID# _I5-6EQcZEeyTDbUIoCmuCw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides details specific to the individual settlement instruction(s) included in the message.
/// </summary>
public partial record MultilateralSettlementRequest2
     : IIsoXmlSerilizable<MultilateralSettlementRequest2>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification, as assigned by the instructing agent, and sent to the market infrastructure to unambiguously identify the instruction.
    /// Usage: The instruction identification is a point to point reference that can be used between the instructing agent and the market infrastructure to refer to the individual instruction. It can be included in several messages related to the instruction.
    /// </summary>
    public required IsoMax35Text InstructionIdentification { get; init; } 
    /// <summary>
    /// Indicator of the urgency or order of importance that the instructing agent would like the market infrastructure to apply to the processing of the instruction.
    /// Usage: Market practice or bilateral agreement should specify how this element should be used. If this element is not populated and there is no market guidance or bilateral agreement, the priority will be considered as 'Normal'.
    /// </summary>
    public Priority3Code? InstructionPriority { get; init; } 
    /// <summary>
    /// Provides information on the requested settlement time(s) of the instruction.
    /// </summary>
    public SettlementTimeRequest2? SettlementTimeRequest { get; init; } 
    /// <summary>
    /// Indicator of the urgency or order of importance that the instructing agent would like the market infrastructure to apply to the processing of the settlement instruction.
    /// Usage: Market practice or bilateral agreement should specify how this element should be used. If this element is not populated and there is no market guidance or bilateral agreement, the priority will be considered as 'Normal'.
    /// </summary>
    public Priority3Code? SettlementPriority { get; init; } 
    /// <summary>
    /// Identification of the settlement cycle in the settlement service.
    /// Usage: The SettlementCycle is used to differentiate this multilateral settlement from other multilateral settlements where more than one occurs within a given time period.
    /// </summary>
    public IsoMax35Text? SettlementCycle { get; init; } 
    /// <summary>
    /// Indicator of the number of movement records contained in an individual settlement request.
    /// </summary>
    public IsoNumber? NumberOfMovementRecords { get; init; } 
    /// <summary>
    /// Credit or debit transaction contained in an individual settlement request.
    /// Usage: Number of occurrences of MovementRecord shall always be even.
    /// </summary>
    public MovementRecord1? MovementRecord { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _I-zvvwcZEeyTDbUIoCmuCw
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "InstrId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(InstructionIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (InstructionPriority is Priority3Code InstructionPriorityValue)
        {
            writer.WriteStartElement(null, "InstrPrty", xmlNamespace );
            writer.WriteValue(InstructionPriorityValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SettlementTimeRequest is SettlementTimeRequest2 SettlementTimeRequestValue)
        {
            writer.WriteStartElement(null, "SttlmTmReq", xmlNamespace );
            SettlementTimeRequestValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementPriority is Priority3Code SettlementPriorityValue)
        {
            writer.WriteStartElement(null, "SttlmPrty", xmlNamespace );
            writer.WriteValue(SettlementPriorityValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SettlementCycle is IsoMax35Text SettlementCycleValue)
        {
            writer.WriteStartElement(null, "SttlmCycl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SettlementCycleValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (NumberOfMovementRecords is IsoNumber NumberOfMovementRecordsValue)
        {
            writer.WriteStartElement(null, "NbOfMvmntRcrds", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(NumberOfMovementRecordsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        // Not sure how to serialize MovementRecord, multiplicity Unknown
    }
    public static MultilateralSettlementRequest2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
