//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for NonClearingReason2.  ISO2002 ID# _Ak0bdZPuEey0rJ3Gl6WZVA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Indicates the reason for which the contract has not been cleared.
/// </summary>
public partial record NonClearingReason2
     : IIsoXmlSerilizable<NonClearingReason2>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the reason for a clearing exemption or exception.
    /// </summary>
    public ClearingExemptionException1Code? ClearingExemptionException { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _AmE_sZPuEey0rJ3Gl6WZVA
    /// <summary>
    /// Indicates the reason for which the contract has not been cleared.
    /// </summary>
    public IsoMax350Text? NonClearingReasonInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        // Not sure how to serialize ClearingExemptionException, multiplicity Unknown
        if (NonClearingReasonInformation is IsoMax350Text NonClearingReasonInformationValue)
        {
            writer.WriteStartElement(null, "NonClrRsnInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NonClearingReasonInformationValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
    }
    public static NonClearingReason2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
