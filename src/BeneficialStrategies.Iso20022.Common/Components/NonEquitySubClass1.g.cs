//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for NonEquitySubClass1.  ISO2002 ID# _POi7M6aTEeqZmriXpMtonA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Sub-class of non-equity instruments sharing common characteristics according to criteria defined as per local regulation.
/// </summary>
public partial record NonEquitySubClass1
     : IIsoXmlSerilizable<NonEquitySubClass1>
{
    #nullable enable
    
    /// <summary>
    /// Description of the derivative sub-class.
    /// </summary>
    public IsoMax1000Text? Description { get; init; } 
    /// <summary>
    /// Criteria used to segment classes of derivative instruments into sub classes as per local regulation.
    /// </summary>
    public NonEquitySubClassSegmentationCriterion1? SegmentationCriteria { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _POi7NKaTEeqZmriXpMtonA
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Description is IsoMax1000Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax1000Text(DescriptionValue)); // data type Max1000Text System.String
            writer.WriteEndElement();
        }
        // Not sure how to serialize SegmentationCriteria, multiplicity Unknown
    }
    public static NonEquitySubClass1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
