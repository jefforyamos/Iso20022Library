//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Obligation8.  ISO2002 ID# _G5UkMSW1EeyT3chuyX0PgA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// General information about the collateral agreement.
/// </summary>
public partial record Obligation8
     : IIsoXmlSerilizable<Obligation8>
{
    #nullable enable
    
    /// <summary>
    /// One of the entities associated with the collateral agreement
    /// </summary>
    public required PartyIdentification178Choice_ PartyA { get; init; } 
    /// <summary>
    /// Party that is acting on behalf of party A and that offers collateral management services.
    /// </summary>
    public PartyIdentification178Choice_? ServicingPartyA { get; init; } 
    /// <summary>
    /// Other entity associated with the collateral agreement
    /// </summary>
    public required PartyIdentification178Choice_ PartyB { get; init; } 
    /// <summary>
    /// Party that is acting on behalf of party B and that offers collateral management services.
    /// </summary>
    public PartyIdentification178Choice_? ServicingPartyB { get; init; } 
    /// <summary>
    /// Provides additional information on the collateral account of the party delivering/receiving the collateral.
    /// </summary>
    public CollateralAccount3? CollateralAccountIdentification { get; init; } 
    /// <summary>
    /// Blockchain address or wallet where digital assets are maintained. This is the equivalent of collateral account for digital assets.
    /// </summary>
    public BlockChainAddressWallet5? BlockChainAddressOrWallet { get; init; } 
    /// <summary>
    /// Underlying business area or type of trade causing the collateral movement.
    /// </summary>
    public ExposureType21Choice_? ExposureType { get; init; } 
    /// <summary>
    /// Type of collateral instruction.
    /// </summary>
    public CollateralTransactionType1Choice_? CollateralTransactionType { get; init; } 
    /// <summary>
    /// Specifies whether the client is the collateral taker or giver.
    /// </summary>
    public CollateralRole1Code? CollateralSide { get; init; } 
    /// <summary>
    /// Amount of the principal. 
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? ExposureAmount { get; init; } 
    /// <summary>
    /// Close of business date on which the initiating party is valuing the margin call.
    /// </summary>
    public DateAndDateTime2Choice_? ValuationDate { get; init; } 
    /// <summary>
    /// Closing date/time or maturity date/time of the transaction.
    /// </summary>
    public ClosingDate4Choice_? ClosingDate { get; init; } 
    /// <summary>
    /// Date/time at which the instructing party requests the instruction to be executed. 
    /// </summary>
    public DateAndDateTime2Choice_? RequestedExecutionDate { get; init; } 
    /// <summary>
    /// Specifies the settlement process in which the collateral will be settled.
    /// </summary>
    public GenericIdentification30? SettlementProcess { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PtyA", xmlNamespace );
        PartyA.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ServicingPartyA is PartyIdentification178Choice_ ServicingPartyAValue)
        {
            writer.WriteStartElement(null, "SvcgPtyA", xmlNamespace );
            ServicingPartyAValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PtyB", xmlNamespace );
        PartyB.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ServicingPartyB is PartyIdentification178Choice_ ServicingPartyBValue)
        {
            writer.WriteStartElement(null, "SvcgPtyB", xmlNamespace );
            ServicingPartyBValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralAccountIdentification is CollateralAccount3 CollateralAccountIdentificationValue)
        {
            writer.WriteStartElement(null, "CollAcctId", xmlNamespace );
            CollateralAccountIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BlockChainAddressOrWallet is BlockChainAddressWallet5 BlockChainAddressOrWalletValue)
        {
            writer.WriteStartElement(null, "BlckChainAdrOrWllt", xmlNamespace );
            BlockChainAddressOrWalletValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExposureType is ExposureType21Choice_ ExposureTypeValue)
        {
            writer.WriteStartElement(null, "XpsrTp", xmlNamespace );
            ExposureTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralTransactionType is CollateralTransactionType1Choice_ CollateralTransactionTypeValue)
        {
            writer.WriteStartElement(null, "CollTxTp", xmlNamespace );
            CollateralTransactionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralSide is CollateralRole1Code CollateralSideValue)
        {
            writer.WriteStartElement(null, "CollSd", xmlNamespace );
            writer.WriteValue(CollateralSideValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExposureAmount is IsoActiveOrHistoricCurrencyAndAmount ExposureAmountValue)
        {
            writer.WriteStartElement(null, "XpsrAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(ExposureAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ValuationDate is DateAndDateTime2Choice_ ValuationDateValue)
        {
            writer.WriteStartElement(null, "ValtnDt", xmlNamespace );
            ValuationDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClosingDate is ClosingDate4Choice_ ClosingDateValue)
        {
            writer.WriteStartElement(null, "ClsgDt", xmlNamespace );
            ClosingDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RequestedExecutionDate is DateAndDateTime2Choice_ RequestedExecutionDateValue)
        {
            writer.WriteStartElement(null, "ReqdExctnDt", xmlNamespace );
            RequestedExecutionDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementProcess is GenericIdentification30 SettlementProcessValue)
        {
            writer.WriteStartElement(null, "SttlmPrc", xmlNamespace );
            SettlementProcessValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Obligation8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
