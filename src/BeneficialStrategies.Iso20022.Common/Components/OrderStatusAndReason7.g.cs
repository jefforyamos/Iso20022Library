//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for OrderStatusAndReason7.  ISO2002 ID# _RMBsRNp-Ed-ak6NoX_4Aeg_-571096042.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Status report of a bulk or multiple or switch order that was previously received.
/// </summary>
public partial record OrderStatusAndReason7
     : IIsoXmlSerilizable<OrderStatusAndReason7>
{
    #nullable enable
    
    /// <summary>
    /// Reference assigned to a set of orders or trades in order to link them together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Status of all the orders in the order message. There is no reason attached.
    /// </summary>
    public required OrderStatus4Code Status { get; init; } 
    /// <summary>
    /// Status of all the orders in the order message is cancelled. This status is used for orders that have been accepted or that have been entered in an order book but that can not be executed.
    /// </summary>
    public required CancelledStatus2 Cancelled { get; init; } 
    /// <summary>
    /// Status of all the orders in the order message is conditionally accepted.
    /// </summary>
    public required ConditionallyAcceptedStatus2 ConditionallyAccepted { get; init; } 
    /// <summary>
    /// Status of all the orders in the order message is rejected. This status is used for orders that have not been accepted or entered in an order book.
    /// </summary>
    public ValueList<RejectedStatus6> Rejected { get; init; } = [];
    /// <summary>
    /// Status of all the orders in the order message is suspended.
    /// </summary>
    public required SuspendedStatus2 Suspended { get; init; } 
    /// <summary>
    /// Status of all the orders in the order message is partially settled.
    /// </summary>
    public required PartiallySettledStatus1 PartiallySettled { get; init; } 
    /// <summary>
    /// Party that initiates the status of the order.
    /// </summary>
    public PartyIdentification2Choice_? StatusInitiator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MasterReference is IsoMax35Text MasterReferenceValue)
        {
            writer.WriteStartElement(null, "MstrRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MasterReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Sts", xmlNamespace );
        writer.WriteValue(Status.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Canc", xmlNamespace );
        Cancelled.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CondlyAccptd", xmlNamespace );
        ConditionallyAccepted.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rjctd", xmlNamespace );
        Rejected.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sspd", xmlNamespace );
        Suspended.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PrtlySttld", xmlNamespace );
        PartiallySettled.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (StatusInitiator is PartyIdentification2Choice_ StatusInitiatorValue)
        {
            writer.WriteStartElement(null, "StsInitr", xmlNamespace );
            StatusInitiatorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static OrderStatusAndReason7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
