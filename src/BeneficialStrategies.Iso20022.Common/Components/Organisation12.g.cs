//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Organisation12.  ISO2002 ID# _17ILgQ3zEeKGXqvMN6jpiw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information which describes the organisation.
/// </summary>
public partial record Organisation12
     : IIsoXmlSerilizable<Organisation12>
{
    #nullable enable
    
    /// <summary>
    /// Name by which a party is known and which is usually used to identify that party.
    /// </summary>
    public required IsoMax350Text FullLegalName { get; init; } 
    /// <summary>
    /// Name used by a business for commercial purposes, although its registered legal name, used for contracts and other formal situations, may be another.
    /// </summary>
    public IsoMax350Text? TradingName { get; init; } 
    /// <summary>
    /// Country in which the organisation has its business activity.
    /// </summary>
    public required CountryCode CountryOfOperation { get; init; } 
    /// <summary>
    /// Date and time at which a given organisation was officially registered.
    /// </summary>
    public IsoISODate? RegistrationDate { get; init; } 
    /// <summary>
    /// Is an operational address, for example, of a shared services center.
    /// </summary>
    public PostalAddress6? OperationalAddress { get; init; } 
    /// <summary>
    /// Is the address where the business activity is taking place.
    /// </summary>
    public PostalAddress6? BusinessAddress { get; init; } 
    /// <summary>
    /// Is the address where the entity resides and is registered. More generically, it is the home address (Residential address).
    /// </summary>
    public required PostalAddress6 LegalAddress { get; init; } 
    /// <summary>
    /// Address where invoices must be sent.
    /// </summary>
    public PostalAddress6? BillingAddress { get; init; } 
    /// <summary>
    /// Unique and unambiguous way of identifying an organisation.
    /// </summary>
    public required OrganisationIdentification8 OrganisationIdentification { get; init; } 
    /// <summary>
    /// Person in the customer's organisation who can be contacted by the account servicer in relation to the account(s) identified in this instruction.
    /// </summary>
    public PartyIdentification40? RepresentativeOfficer { get; init; } 
    /// <summary>
    /// Person responsible of the treasury department within the customer’s organisation.
    /// </summary>
    public PartyIdentification40? TreasuryManager { get; init; } 
    /// <summary>
    /// Person that has the mandate to delegate authority, to assign mandates to other individuals (mandate holders) to perform specific bank operations on the account.
    /// </summary>
    public PartyIdentification40? MainMandateHolder { get; init; } 
    /// <summary>
    /// Person that may be the potential sender of a message related to the life cycle of the account.
    /// </summary>
    public PartyIdentification40? Sender { get; init; } 
    /// <summary>
    /// Person that is officially and legally mandated to represent the organisation. Depending on legislation, the legal representative(s) might for instance be assigned by the Board, identified in the by-laws of the organisation, be publicly announced in the official journal of a country, etc.
    /// </summary>
    public PartyIdentification40? LegalRepresentative { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "FullLglNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(FullLegalName)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (TradingName is IsoMax350Text TradingNameValue)
        {
            writer.WriteStartElement(null, "TradgNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(TradingNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CtryOfOpr", xmlNamespace );
        writer.WriteValue(CountryOfOperation.ToString()); // Enum value
        writer.WriteEndElement();
        if (RegistrationDate is IsoISODate RegistrationDateValue)
        {
            writer.WriteStartElement(null, "RegnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(RegistrationDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (OperationalAddress is PostalAddress6 OperationalAddressValue)
        {
            writer.WriteStartElement(null, "OprlAdr", xmlNamespace );
            OperationalAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BusinessAddress is PostalAddress6 BusinessAddressValue)
        {
            writer.WriteStartElement(null, "BizAdr", xmlNamespace );
            BusinessAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "LglAdr", xmlNamespace );
        LegalAddress.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BillingAddress is PostalAddress6 BillingAddressValue)
        {
            writer.WriteStartElement(null, "BllgAdr", xmlNamespace );
            BillingAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "OrgId", xmlNamespace );
        OrganisationIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RepresentativeOfficer is PartyIdentification40 RepresentativeOfficerValue)
        {
            writer.WriteStartElement(null, "RprtvOffcr", xmlNamespace );
            RepresentativeOfficerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TreasuryManager is PartyIdentification40 TreasuryManagerValue)
        {
            writer.WriteStartElement(null, "TrsrMgr", xmlNamespace );
            TreasuryManagerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MainMandateHolder is PartyIdentification40 MainMandateHolderValue)
        {
            writer.WriteStartElement(null, "MainMndtHldr", xmlNamespace );
            MainMandateHolderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Sender is PartyIdentification40 SenderValue)
        {
            writer.WriteStartElement(null, "Sndr", xmlNamespace );
            SenderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LegalRepresentative is PartyIdentification40 LegalRepresentativeValue)
        {
            writer.WriteStartElement(null, "LglRprtv", xmlNamespace );
            LegalRepresentativeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Organisation12 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
