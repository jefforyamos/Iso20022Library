//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Organisation29.  ISO2002 ID# _Ar5KgUzREea8fovz_9xSTQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Organised structure that is set up for a particular purpose, for example, a business, government body, department, charity, or financial institution.
/// </summary>
public partial record Organisation29
     : IIsoXmlSerilizable<Organisation29>
{
    #nullable enable
    
    /// <summary>
    /// Name by which the organisation is known and which is usually used to identify that organisation.
    /// </summary>
    public IsoMax350Text? Name { get; init; } 
    /// <summary>
    /// Name of the organisation in short form.
    /// </summary>
    public IsoMax35Text? ShortName { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the organisation.
    /// </summary>
    public PartyIdentification72Choice_? Identification { get; init; } 
    /// <summary>
    /// Identification of the organisation with a Legal Entity Identifier. This is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)".
    /// </summary>
    public IsoLEIIdentifier? LegalEntityIdentifier { get; init; } 
    /// <summary>
    /// Purpose of the organisation, for example, charity.
    /// </summary>
    public IsoMax35Text? Purpose { get; init; } 
    /// <summary>
    /// Country in which the organisation is registered.
    /// </summary>
    public CountryCode? RegistrationCountry { get; init; } 
    /// <summary>
    /// Date and time at which a given organisation was officially registered.
    /// </summary>
    public IsoISODate? RegistrationDate { get; init; } 
    /// <summary>
    /// Information related to an address to be inserted, updated or deleted.
    /// </summary>
    public ModificationScope34? ModifiedPostalAddress { get; init; } 
    /// <summary>
    /// Type of organisation.
    /// </summary>
    public OrganisationType1Choice_? TypeOfOrganisation { get; init; } 
    /// <summary>
    /// Place of listing for shares in the organisation.
    /// </summary>
    public IsoMICIdentifier? PlaceOfListing { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax350Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ShortName is IsoMax35Text ShortNameValue)
        {
            writer.WriteStartElement(null, "ShrtNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ShortNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Identification is PartyIdentification72Choice_ IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            IdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LegalEntityIdentifier is IsoLEIIdentifier LegalEntityIdentifierValue)
        {
            writer.WriteStartElement(null, "LglNttyIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(LegalEntityIdentifierValue)); // data type LEIIdentifier System.String
            writer.WriteEndElement();
        }
        if (Purpose is IsoMax35Text PurposeValue)
        {
            writer.WriteStartElement(null, "Purp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PurposeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RegistrationCountry is CountryCode RegistrationCountryValue)
        {
            writer.WriteStartElement(null, "RegnCtry", xmlNamespace );
            writer.WriteValue(RegistrationCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RegistrationDate is IsoISODate RegistrationDateValue)
        {
            writer.WriteStartElement(null, "RegnDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(RegistrationDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (ModifiedPostalAddress is ModificationScope34 ModifiedPostalAddressValue)
        {
            writer.WriteStartElement(null, "ModfdPstlAdr", xmlNamespace );
            ModifiedPostalAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TypeOfOrganisation is OrganisationType1Choice_ TypeOfOrganisationValue)
        {
            writer.WriteStartElement(null, "TpOfOrg", xmlNamespace );
            TypeOfOrganisationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PlaceOfListing is IsoMICIdentifier PlaceOfListingValue)
        {
            writer.WriteStartElement(null, "PlcOfListg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMICIdentifier(PlaceOfListingValue)); // data type MICIdentifier System.String
            writer.WriteEndElement();
        }
    }
    public static Organisation29 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
