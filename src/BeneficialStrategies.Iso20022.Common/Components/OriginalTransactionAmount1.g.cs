//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for OriginalTransactionAmount1.  ISO2002 ID# _wYTrgEULEeea-M6VZkEPUw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount related to the original transaction.
/// </summary>
public partial record OriginalTransactionAmount1
     : IIsoXmlSerilizable<OriginalTransactionAmount1>
{
    #nullable enable
    
    /// <summary>
    /// Qualifies the amount of the transaction.
    /// </summary>
    public TypeOfAmount11Code? AmountQualifier { get; init; } 
    /// <summary>
    /// Actual amount of the transaction.
    /// </summary>
    public required TransactionAmount1 TransactionAmount { get; init; } 
    /// <summary>
    /// Amount to be billed to cardholder.
    /// </summary>
    public Amount4? CardholderBillingAmount { get; init; } 
    /// <summary>
    /// Amount used for reconciliation.
    /// </summary>
    public Amount4? ReconciliationAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AmountQualifier is TypeOfAmount11Code AmountQualifierValue)
        {
            writer.WriteStartElement(null, "AmtQlfr", xmlNamespace );
            writer.WriteValue(AmountQualifierValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxAmt", xmlNamespace );
        TransactionAmount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CardholderBillingAmount is Amount4 CardholderBillingAmountValue)
        {
            writer.WriteStartElement(null, "CrdhldrBllgAmt", xmlNamespace );
            CardholderBillingAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReconciliationAmount is Amount4 ReconciliationAmountValue)
        {
            writer.WriteStartElement(null, "RcncltnAmt", xmlNamespace );
            ReconciliationAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static OriginalTransactionAmount1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
