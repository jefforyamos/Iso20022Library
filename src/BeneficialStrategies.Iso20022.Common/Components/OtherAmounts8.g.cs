//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for OtherAmounts8.  ISO2002 ID# _9q6Y4dz1Ed-a791rB7tZXQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identifies other amounts pertaining to the transaction.
/// </summary>
public partial record OtherAmounts8
     : IIsoXmlSerilizable<OtherAmounts8>
{
    #nullable enable
    
    /// <summary>
    /// Interest amount that has accrued in between coupon payment periods.
    /// </summary>
    public AmountAndDirection23? AccruedInterestAmount { get; init; } 
    /// <summary>
    /// Amount of money paid for the provision of financial services that cannot be categorised by another qualifier.
    /// </summary>
    public AmountAndDirection23? ChargesFees { get; init; } 
    /// <summary>
    /// Principal amount of a trade (price multiplied by quantity).
    /// </summary>
    public AmountAndDirection23? TradeAmount { get; init; } 
    /// <summary>
    /// Amount of money paid to an executing broker as a commission.
    /// </summary>
    public AmountAndDirection23? ExecutingBrokerAmount { get; init; } 
    /// <summary>
    /// Tax charged by the jurisdiction in which the financial instrument settles.
    /// </summary>
    public AmountAndDirection23? LocalTax { get; init; } 
    /// <summary>
    /// Amount of commission paid to a local broker.
    /// </summary>
    public AmountAndDirection23? LocalBrokerCommission { get; init; } 
    /// <summary>
    /// An amount that is not indicated by a known business denomination.
    /// </summary>
    public AmountAndDirection23? Other { get; init; } 
    /// <summary>
    /// Amount of stamp duty.
    /// </summary>
    public AmountAndDirection23? StampDuty { get; init; } 
    /// <summary>
    /// Amount of transaction tax.
    /// </summary>
    public AmountAndDirection23? TransactionTax { get; init; } 
    /// <summary>
    /// Amount of money that will be withheld by a tax authority.
    /// </summary>
    public AmountAndDirection23? WithholdingTax { get; init; } 
    /// <summary>
    /// Amount of consumption tax.
    /// </summary>
    public AmountAndDirection23? ConsumptionTax { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AccruedInterestAmount is AmountAndDirection23 AccruedInterestAmountValue)
        {
            writer.WriteStartElement(null, "AcrdIntrstAmt", xmlNamespace );
            AccruedInterestAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ChargesFees is AmountAndDirection23 ChargesFeesValue)
        {
            writer.WriteStartElement(null, "ChrgsFees", xmlNamespace );
            ChargesFeesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradeAmount is AmountAndDirection23 TradeAmountValue)
        {
            writer.WriteStartElement(null, "TradAmt", xmlNamespace );
            TradeAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExecutingBrokerAmount is AmountAndDirection23 ExecutingBrokerAmountValue)
        {
            writer.WriteStartElement(null, "ExctgBrkrAmt", xmlNamespace );
            ExecutingBrokerAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LocalTax is AmountAndDirection23 LocalTaxValue)
        {
            writer.WriteStartElement(null, "LclTax", xmlNamespace );
            LocalTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LocalBrokerCommission is AmountAndDirection23 LocalBrokerCommissionValue)
        {
            writer.WriteStartElement(null, "LclBrkrComssn", xmlNamespace );
            LocalBrokerCommissionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Other is AmountAndDirection23 OtherValue)
        {
            writer.WriteStartElement(null, "Othr", xmlNamespace );
            OtherValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StampDuty is AmountAndDirection23 StampDutyValue)
        {
            writer.WriteStartElement(null, "StmpDty", xmlNamespace );
            StampDutyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionTax is AmountAndDirection23 TransactionTaxValue)
        {
            writer.WriteStartElement(null, "TxTax", xmlNamespace );
            TransactionTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WithholdingTax is AmountAndDirection23 WithholdingTaxValue)
        {
            writer.WriteStartElement(null, "WhldgTax", xmlNamespace );
            WithholdingTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConsumptionTax is AmountAndDirection23 ConsumptionTaxValue)
        {
            writer.WriteStartElement(null, "CsmptnTax", xmlNamespace );
            ConsumptionTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static OtherAmounts8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
