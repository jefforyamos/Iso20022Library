//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for OtherPrices1.  ISO2002 ID# _AVY2oNokEeC60axPepSq7g_-1057295935.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the type of price and information about the price.
/// </summary>
public partial record OtherPrices1
     : IIsoXmlSerilizable<OtherPrices1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the maximum price.
    /// </summary>
    public Price4? Maximum { get; init; } 
    /// <summary>
    /// Specifies the transaction price.
    /// </summary>
    public Price4? Transaction { get; init; } 
    /// <summary>
    /// Market price including or excluding the broker's commission.
    /// </summary>
    public Price4? MarketBrokerCommission { get; init; } 
    /// <summary>
    /// In case of an order to buy, the price that the broker paid on the market plus the broker's commission.
    /// </summary>
    public Price4? MarkedUp { get; init; } 
    /// <summary>
    /// In case of an order to sell, the price the broker receives in the market minus the broker's commission.
    /// </summary>
    public Price4? MarkedDown { get; init; } 
    /// <summary>
    /// Price is net to the disclosed client.
    /// </summary>
    public Price4? NetDisclosed { get; init; } 
    /// <summary>
    /// Price is net to the client undisclosed (used in the UK market).
    /// </summary>
    public Price4? NetUndisclosed { get; init; } 
    /// <summary>
    /// Price is notional gross (used in the UK market).
    /// </summary>
    public Price4? NotionalGross { get; init; } 
    /// <summary>
    /// Price is weighted average price of the benchmark prices at the time of each partial fill.
    /// </summary>
    public Price4? BenchmarkWeightedAverage { get; init; } 
    /// <summary>
    /// Price is weighted average price of all market executions during the completion of the order.
    /// </summary>
    public Price4? AllMarketsWeightedAverage { get; init; } 
    /// <summary>
    /// Price is a benchmark price relating to the current partial fills (eg, last trade tick from market).
    /// </summary>
    public Price4? Benchmark { get; init; } 
    /// <summary>
    /// Type of price that is not defined explicitly.
    /// </summary>
    public Price4? OtherPrice { get; init; } 
    /// <summary>
    /// Price of securities representing a particular market or a portion of it.
    /// </summary>
    public Price4? IndexPrice { get; init; } 
    /// <summary>
    /// Price used to differentiate from price on a confirmation of a marked up or marked down principal trade.
    /// </summary>
    public Price4? ReportedPrice { get; init; } 
    /// <summary>
    /// Price of reference of the concerned financial instrument.
    /// </summary>
    public PriceInformation9? ReferencePrice { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Maximum is Price4 MaximumValue)
        {
            writer.WriteStartElement(null, "Max", xmlNamespace );
            MaximumValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Transaction is Price4 TransactionValue)
        {
            writer.WriteStartElement(null, "Tx", xmlNamespace );
            TransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketBrokerCommission is Price4 MarketBrokerCommissionValue)
        {
            writer.WriteStartElement(null, "MktBrkrComssn", xmlNamespace );
            MarketBrokerCommissionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarkedUp is Price4 MarkedUpValue)
        {
            writer.WriteStartElement(null, "MrkdUp", xmlNamespace );
            MarkedUpValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarkedDown is Price4 MarkedDownValue)
        {
            writer.WriteStartElement(null, "MrkdDwn", xmlNamespace );
            MarkedDownValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetDisclosed is Price4 NetDisclosedValue)
        {
            writer.WriteStartElement(null, "NetDscld", xmlNamespace );
            NetDisclosedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NetUndisclosed is Price4 NetUndisclosedValue)
        {
            writer.WriteStartElement(null, "NetUdscld", xmlNamespace );
            NetUndisclosedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NotionalGross is Price4 NotionalGrossValue)
        {
            writer.WriteStartElement(null, "NtnlGrss", xmlNamespace );
            NotionalGrossValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BenchmarkWeightedAverage is Price4 BenchmarkWeightedAverageValue)
        {
            writer.WriteStartElement(null, "BchmkWghtdAvrg", xmlNamespace );
            BenchmarkWeightedAverageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AllMarketsWeightedAverage is Price4 AllMarketsWeightedAverageValue)
        {
            writer.WriteStartElement(null, "AllMktsWghtdAvrg", xmlNamespace );
            AllMarketsWeightedAverageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Benchmark is Price4 BenchmarkValue)
        {
            writer.WriteStartElement(null, "Bchmk", xmlNamespace );
            BenchmarkValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherPrice is Price4 OtherPriceValue)
        {
            writer.WriteStartElement(null, "OthrPric", xmlNamespace );
            OtherPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IndexPrice is Price4 IndexPriceValue)
        {
            writer.WriteStartElement(null, "IndxPric", xmlNamespace );
            IndexPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReportedPrice is Price4 ReportedPriceValue)
        {
            writer.WriteStartElement(null, "RptdPric", xmlNamespace );
            ReportedPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReferencePrice is PriceInformation9 ReferencePriceValue)
        {
            writer.WriteStartElement(null, "RefPric", xmlNamespace );
            ReferencePriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static OtherPrices1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
