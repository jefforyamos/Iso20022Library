//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyAndAuthorisation1.  ISO2002 ID# _MhacEQ4ZEeKGXqvMN6jpiw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Party and related authorisation.
/// </summary>
public partial record PartyAndAuthorisation1
     : IIsoXmlSerilizable<PartyAndAuthorisation1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies a party or a group of parties.
    /// </summary>
    public required PartyOrGroup1Choice_ PartyOrGroup { get; init; } 
    /// <summary>
    /// Order in which the mandate holder has to sign.
    /// </summary>
    public IsoMax15PlusSignedNumericText? SignatureOrder { get; init; } 
    /// <summary>
    /// Authorisation granted to a mandate holder.
    /// </summary>
    public required Authorisation2 Authorisation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PtyOrGrp", xmlNamespace );
        PartyOrGroup.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SignatureOrder is IsoMax15PlusSignedNumericText SignatureOrderValue)
        {
            writer.WriteStartElement(null, "SgntrOrdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15PlusSignedNumericText(SignatureOrderValue)); // data type Max15PlusSignedNumericText System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Authstn", xmlNamespace );
        Authorisation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static PartyAndAuthorisation1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
