//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyIdentification135.  ISO2002 ID# _6ClkRW48EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.Components.PartyIdentification135>;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the identification of a person or an organisation.
/// </summary>
[DataContract(Namespace = "")]
[XmlType]
public partial record PartyIdentification135
     : IIsoXmlSerilizable<PartyIdentification135>
{
    #nullable enable
    
    /// <summary>
    /// Name by which a party is known and which is usually used to identify that party.
    /// </summary>
    [DataMember]
    public IsoMax140Text? Name { get; init; } 
    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services.
    /// </summary>
    [DataMember]
    public PostalAddress24? PostalAddress { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification of a party.
    /// </summary>
    [DataMember]
    public Party38Choice_? Identification { get; init; } 
    /// <summary>
    /// Country in which a person resides (the place of a person's home). In the case of a company, it is the country from which the affairs of that company are directed.
    /// </summary>
    [DataMember]
    public CountryCode? CountryOfResidence { get; init; } 
    /// <summary>
    /// Set of elements used to indicate how to contact the party.
    /// </summary>
    [DataMember]
    public Contact4? ContactDetails { get; init; } 
    
    #nullable disable
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Name is IsoMax140Text NameValue)
        {
            writer.WriteStartElement(null, "Nm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(NameValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (PostalAddress is PostalAddress24 PostalAddressValue)
        {
            writer.WriteStartElement(null, "PstlAdr", xmlNamespace );
            PostalAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Identification is Party38Choice_ IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            IdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CountryOfResidence is CountryCode CountryOfResidenceValue)
        {
            writer.WriteStartElement(null, "CtryOfRes", xmlNamespace );
            writer.WriteValue(CountryOfResidenceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ContactDetails is Contact4 ContactDetailsValue)
        {
            writer.WriteStartElement(null, "CtctDtls", xmlNamespace );
            ContactDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PartyIdentification135 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
