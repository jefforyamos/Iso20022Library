//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyIdentification199.  ISO2002 ID# _fLSzbuwMEeiMkKo2clXHdQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identification of a party.
/// </summary>
public partial record PartyIdentification199
     : IIsoXmlSerilizable<PartyIdentification199>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the acceptor.
    /// ISO 8583 bit 42
    /// </summary>
    public IsoMax35Text? Identification { get; init; } 
    /// <summary>
    /// Identification of the entity assigning an identification to the acceptor.
    /// </summary>
    public IsoMax35Text? Assigner { get; init; } 
    /// <summary>
    /// Country code of the acceptor.
    /// ISO 8583 bit 19
    /// </summary>
    public ISO3NumericCountryCode? Country { get; init; } 
    /// <summary>
    /// Short name of the acceptor.
    /// </summary>
    public IsoMax35Text? ShortName { get; init; } 
    /// <summary>
    /// Additional identification assigned by an agent to an acceptor.
    /// </summary>
    public IsoMax35Text? AdditionalIdentification { get; init; } 
    /// <summary>
    /// Name and location of acceptor.
    /// ISO 8583:87/93 bit 43 & 8583:2003 bit 43-71 (when used for Acceptor name and location)
    /// </summary>
    public IsoMax99Text? NameAndLocation { get; init; } 
    /// <summary>
    /// Address of the entity.
    /// </summary>
    public Address1? Address { get; init; } 
    /// <summary>
    /// Electronic mail address.
    /// </summary>
    public IsoMax256Text? Email { get; init; } 
    /// <summary>
    /// Universal Resource Locator (URL) address.
    /// </summary>
    public IsoMax256Text? URLAddress { get; init; } 
    /// <summary>
    /// Collection of information that identifies  a phone number as defined by telecom services.
    /// </summary>
    public IsoMax35Text? PhoneNumber { get; init; } 
    /// <summary>
    /// Phone number of the customer service.
    /// </summary>
    public IsoMax35Text? CustomerService { get; init; } 
    /// <summary>
    /// Additional information used to facilitate contact with the card acceptor, for instance sales agent name, dispute manager name.
    /// </summary>
    public IsoMax256Text? AdditionalContactInformation { get; init; } 
    /// <summary>
    /// Identification of a party by its tax registration number.
    /// </summary>
    public IsoMax35Text? TaxRegistrationIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Identification is IsoMax35Text IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(IdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Assigner is IsoMax35Text AssignerValue)
        {
            writer.WriteStartElement(null, "Assgnr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AssignerValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Country is ISO3NumericCountryCode CountryValue)
        {
            writer.WriteStartElement(null, "Ctry", xmlNamespace );
            writer.WriteValue(CountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ShortName is IsoMax35Text ShortNameValue)
        {
            writer.WriteStartElement(null, "ShrtNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ShortNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalIdentification is IsoMax35Text AdditionalIdentificationValue)
        {
            writer.WriteStartElement(null, "AddtlId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AdditionalIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (NameAndLocation is IsoMax99Text NameAndLocationValue)
        {
            writer.WriteStartElement(null, "NmAndLctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax99Text(NameAndLocationValue)); // data type Max99Text System.String
            writer.WriteEndElement();
        }
        if (Address is Address1 AddressValue)
        {
            writer.WriteStartElement(null, "Adr", xmlNamespace );
            AddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Email is IsoMax256Text EmailValue)
        {
            writer.WriteStartElement(null, "Email", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(EmailValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (URLAddress is IsoMax256Text URLAddressValue)
        {
            writer.WriteStartElement(null, "URLAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(URLAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (PhoneNumber is IsoMax35Text PhoneNumberValue)
        {
            writer.WriteStartElement(null, "PhneNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PhoneNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CustomerService is IsoMax35Text CustomerServiceValue)
        {
            writer.WriteStartElement(null, "CstmrSvc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CustomerServiceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalContactInformation is IsoMax256Text AdditionalContactInformationValue)
        {
            writer.WriteStartElement(null, "AddtlCtctInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(AdditionalContactInformationValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (TaxRegistrationIdentification is IsoMax35Text TaxRegistrationIdentificationValue)
        {
            writer.WriteStartElement(null, "TaxRegnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TaxRegistrationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
    }
    public static PartyIdentification199 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
