//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyIdentification216.  ISO2002 ID# _yc2f8DtmEemIf7eyjCwinw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identification of a party.
/// </summary>
public partial record PartyIdentification216
     : IIsoXmlSerilizable<PartyIdentification216>
{
    #nullable enable
    
    /// <summary>
    /// Name and address of the party.
    /// </summary>
    public required NameAndAddress17 NameAndAddress { get; init; } 
    /// <summary>
    /// Address for electronic mail (e-mail).
    /// </summary>
    public IsoMax256Text? EmailAddress { get; init; } 
    /// <summary>
    /// Identification of the party.
    /// </summary>
    public required PartyIdentification198Choice_ Identification { get; init; } 
    /// <summary>
    /// Country in which the company is incorporated or legally registered. 
    /// </summary>
    public CountryCode? CountryOfIncorporation { get; init; } 
    /// <summary>
    /// Economical activity of the  investor.
    /// </summary>
    public IsoISICIdentifier? ActivityIndicator { get; init; } 
    /// <summary>
    /// Type of investor.
    /// </summary>
    public InvestorType1Choice_? InvestorType { get; init; } 
    /// <summary>
    /// Provides information about the ownership on an asset.
    /// </summary>
    public Ownership1? Ownership { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "NmAndAdr", xmlNamespace );
        NameAndAddress.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EmailAddress is IsoMax256Text EmailAddressValue)
        {
            writer.WriteStartElement(null, "EmailAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(EmailAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CountryOfIncorporation is CountryCode CountryOfIncorporationValue)
        {
            writer.WriteStartElement(null, "CtryOfIncorprtn", xmlNamespace );
            writer.WriteValue(CountryOfIncorporationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ActivityIndicator is IsoISICIdentifier ActivityIndicatorValue)
        {
            writer.WriteStartElement(null, "ActvtyInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISICIdentifier(ActivityIndicatorValue)); // data type ISICIdentifier System.String
            writer.WriteEndElement();
        }
        if (InvestorType is InvestorType1Choice_ InvestorTypeValue)
        {
            writer.WriteStartElement(null, "InvstrTp", xmlNamespace );
            InvestorTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Ownership is Ownership1 OwnershipValue)
        {
            writer.WriteStartElement(null, "Ownrsh", xmlNamespace );
            OwnershipValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PartyIdentification216 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
