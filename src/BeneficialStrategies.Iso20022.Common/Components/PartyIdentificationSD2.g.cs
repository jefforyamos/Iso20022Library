//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyIdentificationSD2.  ISO2002 ID# _1SUrNTL3EeKU9IrkkToqcw_-650886899.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding the existing agent component.
/// </summary>
public partial record PartyIdentificationSD2
     : IIsoXmlSerilizable<PartyIdentificationSD2>
{
    #nullable enable
    
    /// <summary>
    /// xPath to the element that is being extended.
    /// </summary>
    public required IsoMax350Text PlaceAndName { get; init; } 
    /// <summary>
    /// DTC agent identification number.
    /// </summary>
    public IsoMax8Text? AgentIdentification { get; init; } 
    /// <summary>
    /// Telephone number of the agent.
    /// </summary>
    public IsoPhoneNumber? AgentTelephoneNumber { get; init; } 
    /// <summary>
    /// Agent designated contact information details.
    /// </summary>
    public PartyIdentificationSD4? ContactInformation { get; init; } 
    /// <summary>
    /// Email address of the event agent.
    /// </summary>
    public IsoMax256Text? AgentEmailAddress { get; init; } 
    /// <summary>
    /// Event agent address.
    /// </summary>
    public PostalAddress1? AgentAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndName)); // data type Max350Text System.String
        writer.WriteEndElement();
        if (AgentIdentification is IsoMax8Text AgentIdentificationValue)
        {
            writer.WriteStartElement(null, "AgtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax8Text(AgentIdentificationValue)); // data type Max8Text System.String
            writer.WriteEndElement();
        }
        if (AgentTelephoneNumber is IsoPhoneNumber AgentTelephoneNumberValue)
        {
            writer.WriteStartElement(null, "AgtTelNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPhoneNumber(AgentTelephoneNumberValue)); // data type PhoneNumber System.String
            writer.WriteEndElement();
        }
        if (ContactInformation is PartyIdentificationSD4 ContactInformationValue)
        {
            writer.WriteStartElement(null, "CtctInf", xmlNamespace );
            ContactInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AgentEmailAddress is IsoMax256Text AgentEmailAddressValue)
        {
            writer.WriteStartElement(null, "AgtEmailAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(AgentEmailAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (AgentAddress is PostalAddress1 AgentAddressValue)
        {
            writer.WriteStartElement(null, "AgtAdr", xmlNamespace );
            AgentAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PartyIdentificationSD2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
