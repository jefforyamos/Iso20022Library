//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PartyProfileInformation1.  ISO2002 ID# _TUhp1dp-Ed-ak6NoX_4Aeg_-300374569.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information to support the Know Your Customer processes.
/// </summary>
[IsoId("_TUhp1dp-Ed-ak6NoX_4Aeg_-300374569")]
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
[DisplayName("Party Profile Information")]
#endif
#if DECLARE_SERIALIZABLE
[Serializable]
#endif
#if DECLARE_DATACONTRACT
[DataContract]
#endif
public partial record PartyProfileInformation1
{
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    // No constructor needed for NET8 and above.
    #else
    /// <summary>
    /// Constructs a PartyProfileInformation1 instance using the members the ISO20022 deems required.
    /// It is higly recommended that you update to .NET 8 or above so you can use required initialization syntax instead
    /// </summary>
    public PartyProfileInformation1( System.String reqCertificationIndicator,CertificateType1Code reqCertificateType,System.String reqExtendedCertificateType )
    {
        CertificationIndicator = reqCertificationIndicator;
        CertificateType = reqCertificateType;
        ExtendedCertificateType = reqExtendedCertificateType;
    }
    #endif
    #nullable enable
    
    /// <summary>
    /// Indicates whether the certificate type has been obtained and verified.
    /// </summary>
    [IsoId("_TUhp1tp-Ed-ak6NoX_4Aeg_903696093")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Certification Indicator")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public required IsoYesNoIndicator CertificationIndicator { get; init; } 
    #elif NET7_0_OR_GREATER // C# 11 Records, required members
    public System.String CertificationIndicator { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String CertificationIndicator { get; init; } 
    #else
    public System.String CertificationIndicator { get; set; } 
    #endif
    
    /// <summary>
    /// Identification of the person who validated the document.
    /// </summary>
    [IsoId("_TUhp19p-Ed-ak6NoX_4Aeg_497583653")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Validating Party")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 140 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax140Text? ValidatingParty { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? ValidatingParty { get; init; } 
    #else
    public System.String? ValidatingParty { get; set; } 
    #endif
    
    /// <summary>
    /// Identification of the person who checked the document.
    /// </summary>
    [IsoId("_TUhp2Np-Ed-ak6NoX_4Aeg_-461332733")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Checking Party")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 140 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax140Text? CheckingParty { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? CheckingParty { get; init; } 
    #else
    public System.String? CheckingParty { get; set; } 
    #endif
    
    /// <summary>
    /// Identification of the person who is responsible for the document.
    /// </summary>
    [IsoId("_TUhp2dp-Ed-ak6NoX_4Aeg_368913503")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Responsible Party")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 140 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax140Text? ResponsibleParty { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? ResponsibleParty { get; init; } 
    #else
    public System.String? ResponsibleParty { get; set; } 
    #endif
    
    /// <summary>
    /// Identifies the type of certificate.
    /// </summary>
    [IsoId("_TUhp2tp-Ed-ak6NoX_4Aeg_301560457")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Certificate Type")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public required CertificateType1Code CertificateType { get; init; } 
    #elif NET7_0_OR_GREATER // C# 11 Records, required members
    public CertificateType1Code CertificateType { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public CertificateType1Code CertificateType { get; init; } 
    #else
    public CertificateType1Code CertificateType { get; set; } 
    #endif
    
    /// <summary>
    /// Identifies the type of certificate.
    /// </summary>
    [IsoId("_TUra0Np-Ed-ak6NoX_4Aeg_536135706")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Extended Certificate Type")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 350 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public required IsoExtended350Code ExtendedCertificateType { get; init; } 
    #elif NET7_0_OR_GREATER // C# 11 Records, required members
    public System.String ExtendedCertificateType { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String ExtendedCertificateType { get; init; } 
    #else
    public System.String ExtendedCertificateType { get; set; } 
    #endif
    
    /// <summary>
    /// Date at which the certification check has been performed.
    /// </summary>
    [IsoId("_TUra0dp-Ed-ak6NoX_4Aeg_-459485436")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Checking Date")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoISODate? CheckingDate { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.DateOnly? CheckingDate { get; init; } 
    #else
    public System.DateOnly? CheckingDate { get; set; } 
    #endif
    
    /// <summary>
    /// Specifies how frequently the check is performed.
    /// </summary>
    [IsoId("_TUra0tp-Ed-ak6NoX_4Aeg_-458560305")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Checking Frequency")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public EventFrequency1Code? CheckingFrequency { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public EventFrequency1Code? CheckingFrequency { get; init; } 
    #else
    public EventFrequency1Code? CheckingFrequency { get; set; } 
    #endif
    
    /// <summary>
    /// Specifies the date at which the next certification check will be performed.
    /// </summary>
    [IsoId("_TUra09p-Ed-ak6NoX_4Aeg_-456714285")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Next Revision Date")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoISODate? NextRevisionDate { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.DateOnly? NextRevisionDate { get; init; } 
    #else
    public System.DateOnly? NextRevisionDate { get; set; } 
    #endif
    
    /// <summary>
    /// Limits between which a person's salary is estimated.
    /// </summary>
    [IsoId("_TUra1Np-Ed-ak6NoX_4Aeg_-444706221")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Salary Range")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 35 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax35Text? SalaryRange { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? SalaryRange { get; init; } 
    #else
    public System.String? SalaryRange { get; set; } 
    #endif
    
    /// <summary>
    /// Indicates the main source of revenue.
    /// </summary>
    [IsoId("_TUra1dp-Ed-ak6NoX_4Aeg_-206438748")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Source Of Wealth")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 140 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax140Text? SourceOfWealth { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? SourceOfWealth { get; init; } 
    #else
    public System.String? SourceOfWealth { get; set; } 
    #endif
    
    
    #nullable disable
    
}
