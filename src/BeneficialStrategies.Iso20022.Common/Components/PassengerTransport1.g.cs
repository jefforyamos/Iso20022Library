//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PassengerTransport1.  ISO2002 ID# _E2tJY_QcEeihCvvpsmGI2w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Passenger ticket information for the cardholder. 
/// </summary>
public partial record PassengerTransport1
     : IIsoXmlSerilizable<PassengerTransport1>
{
    #nullable enable
    
    /// <summary>
    /// Component supports ticketing transactions for airline, railway, and travel agency transactions to provide passenger ticket information for the cardholder. Acquirers can submit one occurrence of this component for each airline, railway, or travel agency transaction to provide general ticket information.
    /// </summary>
    public PassengerTransportSummary1? Summary { get; init; } 
    /// <summary>
    /// Component supports ticketing transactions for airline, railway, and travel agency transactions to provide passenger ticket information for the cardholder. Acquirers can submit multiple occurrences of this component for each airline, railway, or travel agency transaction to provide general ticket information.
    /// </summary>
    public TripLeg1? TripLeg { get; init; } 
    /// <summary>
    /// Contains additional charges related to or during transit (for example, baggage fee, in-flight purchase). These are separate from the original ticket purchase.
    /// </summary>
    public AncillaryPurchase1? AncillaryPurchase { get; init; } 
    /// <summary>
    /// Vehicle for hire for passenger transport - excludes vehicles driven by a renter.  Examples include, but are not limited to, taxi, chauffered limousine, boats.
    /// </summary>
    public HiredVehicle1? HiredVehicleDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Summary is PassengerTransportSummary1 SummaryValue)
        {
            writer.WriteStartElement(null, "Summry", xmlNamespace );
            SummaryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TripLeg is TripLeg1 TripLegValue)
        {
            writer.WriteStartElement(null, "TripLeg", xmlNamespace );
            TripLegValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AncillaryPurchase is AncillaryPurchase1 AncillaryPurchaseValue)
        {
            writer.WriteStartElement(null, "AncllryPurchs", xmlNamespace );
            AncillaryPurchaseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HiredVehicleDetails is HiredVehicle1 HiredVehicleDetailsValue)
        {
            writer.WriteStartElement(null, "HirdVhclDtls", xmlNamespace );
            HiredVehicleDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PassengerTransport1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
