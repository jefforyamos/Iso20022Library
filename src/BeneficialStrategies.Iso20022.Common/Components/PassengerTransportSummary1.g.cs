//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PassengerTransportSummary1.  ISO2002 ID# _YkXBm_PhEeihCvvpsmGI2w.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Passenger ticket summary information for the cardholder. 
/// </summary>
public partial record PassengerTransportSummary1
{
    #nullable enable
    
    /// <summary>
    /// Unique identification number of the document.
    /// </summary>
    public IsoMax35Text? DocumentNumber { get; init; } 
    /// <summary>
    /// Reservation number or identifier. 
    /// </summary>
    public ReservationDetails3? Reservation { get; init; } 
    /// <summary>
    /// Contains a code provided to a travel agent by a company to authorise ticket issuance. 
    /// </summary>
    public IsoMax70Text? TravelAuthorisationCode { get; init; } 
    /// <summary>
    /// Name of the issuing ticket agent. 
    /// </summary>
    public IsoMax35Text? TicketIssuer { get; init; } 
    /// <summary>
    /// Indicates whether or not the ticket is open or restricted.
    /// </summary>
    public IsoTrueFalseIndicator? OpenTicketIndicator { get; init; } 
    /// <summary>
    /// Contains Customer Reference Values provided for this transaction and used for various reference processing at the customer site. These values represent information most prevalently provided by travel agencies for transactions booked against a lodged account or central travel account.
    /// </summary>
    public CustomerReference1? CustomerReference { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Contains the details of the passenger.
    /// </summary>
    public Customer5? Passenger { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Contains departure location, date and time. 
    /// </summary>
    public DepartureOrArrival1? Departure { get; init; } 
    /// <summary>
    /// Duration of the trip in days.
    /// </summary>
    public IsoMax4NumericText? Duration { get; init; } 
    /// <summary>
    /// Indicates whether or not insurance was purchased. 
    /// </summary>
    public IsoTrueFalseIndicator? InsuranceIndicator { get; init; } 
    /// <summary>
    /// Total amount.
    /// </summary>
    public AmountDetails1? TotalAmount { get; init; } 
    /// <summary>
    /// Provides the identifier assigned by the card acceptor that best categorizes the items being purchased in a standardized commodity group.
    /// </summary>
    public IsoMax35Text? SummaryCommodityIdentification { get; init; } 
    /// <summary>
    /// Loyalty programme details. 
    /// </summary>
    public LoyaltyProgramme2? LoyaltyProgramme { get; init; } 
    /// <summary>
    /// Additional user-defined data pertaining to the transportation.
    /// </summary>
    public IsoMax350Text? AdditionalData { get; init; } 
    
    #nullable disable
}
