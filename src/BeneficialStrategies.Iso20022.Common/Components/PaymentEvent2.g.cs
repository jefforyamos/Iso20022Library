//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentEvent2.  ISO2002 ID# _TsN2cKJoEeaLbOzg6lYrCA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains elements identifying an event belonging to the transaction.
/// </summary>
public partial record PaymentEvent2
     : IIsoXmlSerilizable<PaymentEvent2>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the sending MessagingEndpoint that has created this business message for the receiving MessagingEndpoint that will process this business message.
    /// Usage:
    /// the sending MessagingEndpoint might be different from the sending address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    public required IsoAnyBICIdentifier From { get; init; } 
    /// <summary>
    /// Specifies the MessagingEndpoint designated by the sending MessagingEndpoint to be the recipient who will ultimately process this business message.
    /// Usage:
    /// the receiving MessagingEndpoint might be different from the receiving address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    public required IsoAnyBICIdentifier To { get; init; } 
    /// <summary>
    /// Indicates whether a payment has been received or not. 
    /// </summary>
    public required IsoYesNoIndicator Received { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Fr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoAnyBICIdentifier(From)); // data type AnyBICIdentifier System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "To", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoAnyBICIdentifier(To)); // data type AnyBICIdentifier System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rcvd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(Received)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static PaymentEvent2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
