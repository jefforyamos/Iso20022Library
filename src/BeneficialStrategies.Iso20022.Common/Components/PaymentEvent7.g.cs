//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentEvent7.  ISO2002 ID# _6UM5FIElEei51tn2YGQhvg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains information coming from the related payment instruction (specified for example in the related MT 199 or MT 103), or the StatusConfirmationUpdate.
/// </summary>
[DataContract]
[XmlType]
public partial record PaymentEvent7
{
    #nullable enable
    
    /// <summary>
    /// Specifies the reference assigned by the network when sending the payment.
    /// </summary>
    [DataMember]
    public required IsoMax50Text NetworkReference { get; init; } 
    /// <summary>
    /// Identifies the original message name identifier to which the message refers.
    /// </summary>
    [DataMember]
    public required IsoMax35Text MessageNameIdentification { get; init; } 
    /// <summary>
    /// Specifies the business service agreed between the two MessagingEndpoints under which rules this Business Message is exchanged.
    /// Usage:
    /// To be used when there is a choice of processing services or processing service levels.
    /// </summary>
    [DataMember]
    public IsoMax35Text? BusinessService { get; init; } 
    /// <summary>
    /// Specifies the type of payment event.
    /// </summary>
    [DataMember]
    public required TrackerEventType1Code TrackerEventType { get; init; } 
    /// <summary>
    /// Indicates if a payment is consistent (YES) or isn't (NO).
    /// </summary>
    [DataMember]
    public required IsoYesNoIndicator Valid { get; init; } 
    /// <summary>
    /// Contains a coded reason as to why the event is not a valid component of a payments transaction.
    /// </summary>
    [DataMember]
    public ExternalInvalidPaymentsEvent1Code? InvalidityReason { get; init; } 
    /// <summary>
    /// Contains a textual description as to why the event is not a valid component of a payments transaction.
    /// </summary>
    [DataMember]
    public IsoMax350Text? InvalidityDescription { get; init; } 
    /// <summary>
    /// Unique identification, as assigned by an instructing party for an instructed party, to unambiguously identify the instruction.||Usage: The instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
    /// </summary>
    [DataMember]
    public IsoMax35Text? InstructionIdentification { get; init; } 
    /// <summary>
    /// Identification referring to the underlying payment transaction.
    /// </summary>
    [DataMember]
    public IsoMax35Text? RelatedReference { get; init; } 
    /// <summary>
    /// Uniquely identifies the case.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CaseIdentification { get; init; } 
    /// <summary>
    /// Unique identification, as assigned by the original instructing party for the original instructed party, to unambiguously identify the original instruction.
    /// </summary>
    [DataMember]
    public IsoMax35Text? OriginalInstructionIdentification { get; init; } 
    /// <summary>
    /// Uniquely identifies the case assignment.
    /// </summary>
    [DataMember]
    public IsoMax35Text? AssignmentIdentification { get; init; } 
    /// <summary>
    /// Uniquely identifies the case.
    /// </summary>
    [DataMember]
    public IsoMax35Text? ResolvedCaseIdentification { get; init; } 
    /// <summary>
    /// Specifies the status of a transaction, in a coded form.
    /// </summary>
    [DataMember]
    public PaymentStatus5? TransactionStatus { get; init; } 
    /// <summary>
    /// Provides further information with regards to the cancellation of the payments event.
    /// </summary>
    [DataMember]
    public UnderlyingCancellationDetails2? UnderlyingCancellationDetails { get; init; } 
    /// <summary>
    /// Identifies the entity to which the entity reporting the status has forwarded the payment transaction.
    /// Usage:
    /// This element can only be used in case the status is ACSP and the reason is G000 or G001.
    /// </summary>
    [DataMember]
    public IsoAnyBICIdentifier? ForwardedToAgent { get; init; } 
    /// <summary>
    /// Specifies the date and time at which the funds are available,  as reported in the ACSC status update.
    /// Usage:
    /// Must only be used when TransactionStatus is "ACSC".
    /// </summary>
    [DataMember]
    public IsoISODateTime? FundsAvailable { get; init; } 
    /// <summary>
    /// Specifies the sending MessagingEndpoint that has created this business message for the receiving MessagingEndpoint that will process this business message.
    /// Usage:
    /// The sending MessagingEndpoint might be different from the sending address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    [DataMember]
    public required IsoAnyBICIdentifier From { get; init; } 
    /// <summary>
    /// Specifies the MessagingEndpoint designated by the sending MessagingEndpoint to be the recipient who will ultimately process this business message.
    /// Usage:
    /// The receiving MessagingEndpoint might be different from the receiving address potentially contained in the transport header (as defined in the transport layer).
    /// </summary>
    [DataMember]
    public required IsoAnyBICIdentifier To { get; init; } 
    /// <summary>
    /// Party that issues the status.
    /// </summary>
    [DataMember]
    public IsoAnyBICIdentifier? Originator { get; init; } 
    /// <summary>
    /// Identifies the parties involved in a serial payment scenario.
    /// </summary>
    [DataMember]
    public CustomerCreditTransferTransactionParties1? SerialParties { get; init; } 
    /// <summary>
    /// Identifies the parties involved in a cover payment scenario.
    /// </summary>
    [DataMember]
    public CreditTransferTransactionParties1? CoverParties { get; init; } 
    /// <summary>
    /// Date and time at which the sender was acknowledged receipt of the message.
    /// </summary>
    [DataMember]
    public required IsoISODateTime SenderAcknowledgementReceipt { get; init; } 
    /// <summary>
    /// Date and time at which the message was acknowledged by the receiver.
    /// </summary>
    [DataMember]
    public IsoISODateTime? ReceivedDate { get; init; } 
    /// <summary>
    /// Amount of money to be moved between the debtor (ordering customer) and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    /// Usage: This amount has to be transported unchanged through the transaction chain.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? InstructedAmount { get; init; } 
    /// <summary>
    /// Specifies the amount confirmed by the originator. Depending on the transaction status, this amount can be the credited amount, pending amount, rejected amount or transferred amount.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? ConfirmedAmount { get; init; } 
    /// <summary>
    /// Specifies the amount of money moved between the instructing agent and the instructed agent.
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? InterbankSettlementAmount { get; init; } 
    /// <summary>
    /// Specifies the date on which the amount of money ceases to be available to the agent that owes it and when the amount of money becomes available to the agent to which it is due.
    /// </summary>
    [DataMember]
    public IsoISODate? InterbankSettlementDate { get; init; } 
    /// <summary>
    /// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
    /// </summary>
    [DataMember]
    public ChargeBearerType3Code? ChargeBearer { get; init; } 
    /// <summary>
    /// Specifies the amount of money asked or paid for the charge.
    /// </summary>
    [DataMember]
    public ValueList<IsoActiveOrHistoricCurrencyAndAmount> ChargeAmount { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies the exchange rate details between two currencies.
    /// </summary>
    [DataMember]
    public CurrencyExchange12? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Contains the network reference of the payment for which the status confirmation was applicable.
    /// Usage:
    /// Implements the correlation between a payment message and a status update on it.
    /// </summary>
    [DataMember]
    public IsoMax50Text? UpdatePayment { get; init; } 
    /// <summary>
    /// Network reference of the original recorded payment.
    /// </summary>
    [DataMember]
    public IsoMax50Text? DuplicateMessageReference { get; init; } 
    /// <summary>
    /// Specifies the copied business service of the market infrastructure.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CopiedBusinessService { get; init; } 
    /// <summary>
    /// Last date and time at which the status of this payment event was updated.
    /// </summary>
    [DataMember]
    public required IsoISODateTime LastUpdateTime { get; init; } 
    
    #nullable disable
}
