//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentInstruction32.  ISO2002 ID# __RjHAW49EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides details on the payment instruction.
/// </summary>
[DataContract]
[XmlType]
public partial record PaymentInstruction32
{
    #nullable enable
    
    /// <summary>
    /// Point to point reference, as assigned by the original initiating party, to unambiguously identify the original payment transaction message|Usage: this is the former TransactionReference.
    /// </summary>
    [DataMember]
    public IsoMax35Text? MessageIdentification { get; init; } 
    /// <summary>
    /// Date and time at which the cash is at the disposal of the credit account owner, or ceases to be at the disposal of the debit account owner.
    /// </summary>
    [DataMember]
    public DateAndDateTime2Choice_? RequestedExecutionDate { get; init; } 
    /// <summary>
    /// Detailed information about the status of a transfer.||.
    /// </summary>
    [DataMember]
    public ValueList<PaymentStatus6> Status { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
    /// </summary>
    [DataMember]
    public Amount3Choice_? InstructedAmount { get; init; } 
    /// <summary>
    /// Amount of money moved between the instructing agent and the instructed agent.
    /// </summary>
    [DataMember]
    public Amount2Choice_? InterbankSettlementAmount { get; init; } 
    /// <summary>
    /// Underlying reason for the payment transaction.
    /// </summary>
    [DataMember]
    public IsoMax10Text? Purpose { get; init; } 
    /// <summary>
    /// Indicates the message or event from which an instruction has been initiated.
    /// </summary>
    [DataMember]
    public PaymentOrigin1Choice_? PaymentMethod { get; init; } 
    /// <summary>
    /// Urgency or order of importance that the originator would like the recipient of the payment instruction to apply to the processing of the payment instruction.|.
    /// </summary>
    [DataMember]
    public Priority1Choice_? Priority { get; init; } 
    /// <summary>
    /// Date and time range within which the payment instruction must be processed.|.
    /// </summary>
    [DataMember]
    public DateTimePeriod1Choice_? ProcessingValidityTime { get; init; } 
    /// <summary>
    /// Copy of the original instruction, in free form text.
    /// </summary>
    [DataMember]
    public IsoMax20000Text? InstructionCopy { get; init; } 
    /// <summary>
    /// Type, or nature, of the payment, such as express payment.|.
    /// </summary>
    [DataMember]
    public PaymentType4Choice_? Type { get; init; } 
    /// <summary>
    /// Payment is a liquidity transfer order that has been executed automatically following a predefined or standing order.
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? GeneratedOrder { get; init; } 
    /// <summary>
    /// Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain.
    /// Usage: The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level. The instructing agent has to make sure that the transaction identification is unique for a pre-agreed period.
    /// Usage: This is the former PaymentInstructionReference.
    /// </summary>
    [DataMember]
    public IsoMax35Text? TransactionIdentification { get; init; } 
    /// <summary>
    /// Date on which the amount of money ceases to be available to the agent that owes it and when the amount of money becomes available to the agent to which it is due.
    /// </summary>
    [DataMember]
    public IsoISODate? InterbankSettlementDate { get; init; } 
    /// <summary>
    /// Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
    /// Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction.
    /// It can be included in several messages related to the transaction.
    /// Usage: This is the former related reference.
    /// </summary>
    [DataMember]
    public IsoMax35Text? EndToEndIdentification { get; init; } 
    /// <summary>
    /// Defines the party fields used to search for a payment.
    /// </summary>
    [DataMember]
    public PaymentTransactionParty3? Parties { get; init; } 
    
    #nullable disable
}
