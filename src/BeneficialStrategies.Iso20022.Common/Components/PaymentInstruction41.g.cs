//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentInstruction41.  ISO2002 ID# _faapUdcZEeqRFcf2R4bPBw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Instruction to pay an amount of money to an ultimate beneficiary, on behalf of an originator. This instruction may have to be forwarded several times to complete the settlement chain.
/// </summary>
public partial record PaymentInstruction41
{
    #nullable enable
    
    /// <summary>
    /// Reference assigned by a sending party to unambiguously identify the payment information block within the message.
    /// </summary>
    public IsoMax35Text? PaymentInformationIdentification { get; init; } 
    /// <summary>
    /// Specifies the means of payment that will be used to move the amount of money.
    /// </summary>
    public required PaymentMethod7Code PaymentMethod { get; init; } 
    /// <summary>
    /// Type of advice details requested.
    /// </summary>
    public AdviceType1? RequestedAdviceType { get; init; } 
    /// <summary>
    /// Set of elements used to further specify the type of transaction.
    /// </summary>
    public PaymentTypeInformation26? PaymentTypeInformation { get; init; } 
    /// <summary>
    /// Date at which the initiating party requests the clearing agent to process the payment. If payment by cheque, the date when the cheque must be generated by the bank.
    /// Usage: This is the date on which the debtor's account(s) is (are) to be debited.
    /// </summary>
    public required DateAndDateTime2Choice_ RequestedExecutionDate { get; init; } 
    /// <summary>
    /// Date by which the debtor must have accepted or rejected the request.
    /// Usage: 
    /// Beyond this date, the request becomes void and cannot be processed anymore.
    /// </summary>
    public DateAndDateTime2Choice_? ExpiryDate { get; init; } 
    /// <summary>
    /// Conditions for the execution of the payment.
    /// </summary>
    public PaymentCondition1? PaymentCondition { get; init; } 
    /// <summary>
    /// Party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    public required PartyIdentification135 Debtor { get; init; } 
    /// <summary>
    /// Account used to process charges associated with a transaction.
    /// </summary>
    public CashAccount40? DebtorAccount { get; init; } 
    /// <summary>
    /// Financial institution servicing an account for the debtor.
    /// </summary>
    public required BranchAndFinancialInstitutionIdentification6 DebtorAgent { get; init; } 
    /// <summary>
    /// Ultimate party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    public PartyIdentification135? UltimateDebtor { get; init; } 
    /// <summary>
    /// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
    /// </summary>
    public ChargeBearerType1Code? ChargeBearer { get; init; } 
    /// <summary>
    /// Payment processes required to transfer cash from the debtor to the creditor.
    /// </summary>
    public CreditTransferTransaction55[] CreditTransferTransaction { get; init; } = []; // Warning: Don't know multiplicity.
    
    #nullable disable
}
