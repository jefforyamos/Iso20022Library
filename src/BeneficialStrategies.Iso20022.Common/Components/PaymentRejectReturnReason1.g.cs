//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentRejectReturnReason1.  ISO2002 ID# _Q4Lykc73EemEIuVuDudp4g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides further details on the reason of the return of the transaction.
/// </summary>
public partial record PaymentRejectReturnReason1
     : IIsoXmlSerilizable<PaymentRejectReturnReason1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies the reason for the return.
    /// </summary>
    public ReturnReason5Choice_? Reason { get; init; } 
    /// <summary>
    /// Further details on the return reason.
    /// </summary>
    public IsoMax105Text? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Reason is ReturnReason5Choice_ ReasonValue)
        {
            writer.WriteStartElement(null, "Rsn", xmlNamespace );
            ReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is IsoMax105Text AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax105Text(AdditionalInformationValue)); // data type Max105Text System.String
            writer.WriteEndElement();
        }
    }
    public static PaymentRejectReturnReason1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
