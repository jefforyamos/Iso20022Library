//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentResponse5.  ISO2002 ID# _XkoZAXG_Ee2TbaNWBpRZpQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data to respond to a payment request.
/// </summary>
public partial record PaymentResponse5
     : IIsoXmlSerilizable<PaymentResponse5>
{
    #nullable enable
    
    /// <summary>
    /// Sale System identification of the transaction in an unambiguous way.
    /// </summary>
    public required TransactionIdentifier1 SaleTransactionIdentification { get; init; } 
    /// <summary>
    /// Global reference of the sale transaction for the sale system.
    /// </summary>
    public IsoMax35Text? SaleReferenceIdentification { get; init; } 
    /// <summary>
    /// POI identification of the transaction in an unambiguous way.
    /// </summary>
    public required TransactionIdentifier1 POITransactionIdentification { get; init; } 
    /// <summary>
    /// Unique identification of the reconciliation period between the acceptor and the acquirer.
    /// </summary>
    public IsoMax35Text? POIReconciliationIdentification { get; init; } 
    /// <summary>
    /// Identification of the transaction given by the Issuer.
    /// </summary>
    public IsoMax140Text? IssuerReferenceData { get; init; } 
    /// <summary>
    /// Data related to the result of a processed payment transaction.
    /// </summary>
    public required RetailerPaymentResult5 RetailerPaymentResult { get; init; } 
    /// <summary>
    /// Customer or Merchant payment receipt.
    /// </summary>
    public PaymentReceipt5? PaymentReceipt { get; init; } 
    /// <summary>
    /// Data related to the result of a processed loyalty transaction.
    /// </summary>
    public LoyaltyResult3? LoyaltyResult { get; init; } 
    /// <summary>
    /// Customer order attached to a customer, recorded in the POI system.
    /// </summary>
    public CustomerOrder1? CustomerOrder { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "SaleTxId", xmlNamespace );
        SaleTransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SaleReferenceIdentification is IsoMax35Text SaleReferenceIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleRefId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleReferenceIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "POITxId", xmlNamespace );
        POITransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (POIReconciliationIdentification is IsoMax35Text POIReconciliationIdentificationValue)
        {
            writer.WriteStartElement(null, "POIRcncltnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(POIReconciliationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (IssuerReferenceData is IsoMax140Text IssuerReferenceDataValue)
        {
            writer.WriteStartElement(null, "IssrRefData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(IssuerReferenceDataValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RtlrPmtRslt", xmlNamespace );
        RetailerPaymentResult.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PaymentReceipt is PaymentReceipt5 PaymentReceiptValue)
        {
            writer.WriteStartElement(null, "PmtRct", xmlNamespace );
            PaymentReceiptValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LoyaltyResult is LoyaltyResult3 LoyaltyResultValue)
        {
            writer.WriteStartElement(null, "LltyRslt", xmlNamespace );
            LoyaltyResultValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustomerOrder is CustomerOrder1 CustomerOrderValue)
        {
            writer.WriteStartElement(null, "CstmrOrdr", xmlNamespace );
            CustomerOrderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PaymentResponse5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
