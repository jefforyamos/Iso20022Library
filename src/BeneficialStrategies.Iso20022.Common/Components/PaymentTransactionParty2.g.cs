//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PaymentTransactionParty2.  ISO2002 ID# _72PJEKMgEeCJ6YNENx4h-w_-1323572611.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the party fields used to search for a payment.
/// </summary>
public partial record PaymentTransactionParty2
     : IIsoXmlSerilizable<PaymentTransactionParty2>
{
    #nullable enable
    
    /// <summary>
    /// Party that owes assets to the creditor, such as a result of receipt of goods or services, gifts, or charity payments. The debtor may also be the debit account owner.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? Debtor { get; init; } 
    /// <summary>
    /// Financial institution that receives the payment transaction from the account owner, or other authorised party, and processes the instruction.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? DebtorAgent { get; init; } 
    /// <summary>
    /// Specifies the agent through which the instructing agent will reimburse the instructed agent.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? InstructingReimbursementAgent { get; init; } 
    /// <summary>
    /// Agent at which the instructed agent will be reimbursed.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? InstructedReimbursementAgent { get; init; } 
    /// <summary>
    /// Party within the settlement chain between the debtor and creditor agents.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? IntermediaryAgent { get; init; } 
    /// <summary>
    /// Financial institution that receives the payment transaction on behalf of an account owner, or other nominated party, and credits the account.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? CreditorAgent { get; init; } 
    /// <summary>
    /// Party that receives an amount of money from the debtor. In the context of the payment model, the creditor is also the credit account owner.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? Creditor { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Debtor is BranchAndFinancialInstitutionIdentification5 DebtorValue)
        {
            writer.WriteStartElement(null, "Dbtr", xmlNamespace );
            DebtorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DebtorAgent is BranchAndFinancialInstitutionIdentification5 DebtorAgentValue)
        {
            writer.WriteStartElement(null, "DbtrAgt", xmlNamespace );
            DebtorAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstructingReimbursementAgent is BranchAndFinancialInstitutionIdentification5 InstructingReimbursementAgentValue)
        {
            writer.WriteStartElement(null, "InstgRmbrsmntAgt", xmlNamespace );
            InstructingReimbursementAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstructedReimbursementAgent is BranchAndFinancialInstitutionIdentification5 InstructedReimbursementAgentValue)
        {
            writer.WriteStartElement(null, "InstdRmbrsmntAgt", xmlNamespace );
            InstructedReimbursementAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IntermediaryAgent is BranchAndFinancialInstitutionIdentification5 IntermediaryAgentValue)
        {
            writer.WriteStartElement(null, "IntrmyAgt", xmlNamespace );
            IntermediaryAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditorAgent is BranchAndFinancialInstitutionIdentification5 CreditorAgentValue)
        {
            writer.WriteStartElement(null, "CdtrAgt", xmlNamespace );
            CreditorAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Creditor is BranchAndFinancialInstitutionIdentification5 CreditorValue)
        {
            writer.WriteStartElement(null, "Cdtr", xmlNamespace );
            CreditorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PaymentTransactionParty2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
