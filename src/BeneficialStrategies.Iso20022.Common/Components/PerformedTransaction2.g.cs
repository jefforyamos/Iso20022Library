//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PerformedTransaction2.  ISO2002 ID# _b8LzcQxsEeqdx6buGpCCQw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Result of performed transactions.
/// </summary>
public partial record PerformedTransaction2
     : IIsoXmlSerilizable<PerformedTransaction2>
{
    #nullable enable
    
    /// <summary>
    /// Response for this performed transaction.
    /// </summary>
    public required ResponseType9 Response { get; init; } 
    /// <summary>
    /// Unique identification of a sale transaction.
    /// </summary>
    public TransactionIdentifier1? SaleTransactionIdentification { get; init; } 
    /// <summary>
    /// Unique identification of a POI transaction.
    /// </summary>
    public TransactionIdentifier1? POITransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of the POI reconciliation period.
    /// </summary>
    public IsoMax35Text? POIReconciliationIdentification { get; init; } 
    /// <summary>
    /// Data related to the result of a processed payment transaction.
    /// </summary>
    public RetailerPaymentResult2? PaymentResult { get; init; } 
    /// <summary>
    /// Data related to the result of a processed Loyalty transaction.
    /// </summary>
    public LoyaltyResult2? LoyaltyResult { get; init; } 
    /// <summary>
    /// Amount of the payment or loyalty to reverse.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? ReversedAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Rspn", xmlNamespace );
        Response.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SaleTransactionIdentification is TransactionIdentifier1 SaleTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleTxId", xmlNamespace );
            SaleTransactionIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (POITransactionIdentification is TransactionIdentifier1 POITransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "POITxId", xmlNamespace );
            POITransactionIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (POIReconciliationIdentification is IsoMax35Text POIReconciliationIdentificationValue)
        {
            writer.WriteStartElement(null, "POIRcncltnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(POIReconciliationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PaymentResult is RetailerPaymentResult2 PaymentResultValue)
        {
            writer.WriteStartElement(null, "PmtRslt", xmlNamespace );
            PaymentResultValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LoyaltyResult is LoyaltyResult2 LoyaltyResultValue)
        {
            writer.WriteStartElement(null, "LltyRslt", xmlNamespace );
            LoyaltyResultValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReversedAmount is IsoImpliedCurrencyAndAmount ReversedAmountValue)
        {
            writer.WriteStartElement(null, "RvsdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(ReversedAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static PerformedTransaction2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
