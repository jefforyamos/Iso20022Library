//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PersonIdentification11.  ISO2002 ID# _QCWkEZXrEeWMQt4mOczoDw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Set of unique and unambiguous ways to identify a person.
/// </summary>
public partial record PersonIdentification11
     : IIsoXmlSerilizable<PersonIdentification11>
{
    #nullable enable
    
    /// <summary>
    /// Number assigned by a license authority to a driver's license.
    /// </summary>
    public IsoMax35Text? DriverLicenseNumber { get; init; } 
    /// <summary>
    /// Country, state or province, issuer of the driver license.
    /// </summary>
    public IsoMax35Text? DriverLicenseLocation { get; init; } 
    /// <summary>
    /// Name or title of the driver license.
    /// </summary>
    public IsoMax35Text? DriverLicenseName { get; init; } 
    /// <summary>
    /// Identification of the driver in the fleet of vehicle.
    /// </summary>
    public IsoMax35Text? DriverIdentification { get; init; } 
    /// <summary>
    /// Number assigned by an agent to identify its customer.
    /// </summary>
    public IsoMax35Text? CustomerNumber { get; init; } 
    /// <summary>
    /// Number assigned by a social security agency.
    /// </summary>
    public IsoMax35Text? SocialSecurityNumber { get; init; } 
    /// <summary>
    /// Number assigned by a government agency to identify foreign nationals.
    /// </summary>
    public IsoMax35Text? AlienRegistrationNumber { get; init; } 
    /// <summary>
    /// Number assigned by a passport authority to a passport.
    /// </summary>
    public IsoMax35Text? PassportNumber { get; init; } 
    /// <summary>
    /// Number assigned by a tax authority to an entity.
    /// </summary>
    public IsoMax35Text? TaxIdentificationNumber { get; init; } 
    /// <summary>
    /// Number assigned by a national authority to an identity card.
    /// </summary>
    public IsoMax35Text? IdentityCardNumber { get; init; } 
    /// <summary>
    /// Number assigned to an employer by a registration authority.
    /// </summary>
    public IsoMax35Text? EmployerIdentificationNumber { get; init; } 
    /// <summary>
    /// Number assigned to an employee by a employer.
    /// </summary>
    public IsoMax35Text? EmployeeIdentificationNumber { get; init; } 
    /// <summary>
    /// Identification of the job.
    /// </summary>
    public IsoMax35Text? JobNumber { get; init; } 
    /// <summary>
    /// Identification of the department.
    /// </summary>
    public IsoMax35Text? Department { get; init; } 
    /// <summary>
    /// Address for electronic mail (e-mail).
    /// </summary>
    public IsoMax256Text? EmailAddress { get; init; } 
    /// <summary>
    /// Date and place of birth of a person.
    /// </summary>
    public DateAndPlaceOfBirth? DateAndPlaceOfBirth { get; init; } 
    /// <summary>
    /// Unique identification of a person, as assigned by an institution, using an identification scheme.
    /// </summary>
    public GenericIdentification4? Other { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (DriverLicenseNumber is IsoMax35Text DriverLicenseNumberValue)
        {
            writer.WriteStartElement(null, "DrvrLicNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DriverLicenseNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DriverLicenseLocation is IsoMax35Text DriverLicenseLocationValue)
        {
            writer.WriteStartElement(null, "DrvrLicLctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DriverLicenseLocationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DriverLicenseName is IsoMax35Text DriverLicenseNameValue)
        {
            writer.WriteStartElement(null, "DrvrLicNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DriverLicenseNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DriverIdentification is IsoMax35Text DriverIdentificationValue)
        {
            writer.WriteStartElement(null, "DrvrId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DriverIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CustomerNumber is IsoMax35Text CustomerNumberValue)
        {
            writer.WriteStartElement(null, "CstmrNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CustomerNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SocialSecurityNumber is IsoMax35Text SocialSecurityNumberValue)
        {
            writer.WriteStartElement(null, "SclSctyNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SocialSecurityNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AlienRegistrationNumber is IsoMax35Text AlienRegistrationNumberValue)
        {
            writer.WriteStartElement(null, "AlnRegnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AlienRegistrationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PassportNumber is IsoMax35Text PassportNumberValue)
        {
            writer.WriteStartElement(null, "PsptNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PassportNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TaxIdentificationNumber is IsoMax35Text TaxIdentificationNumberValue)
        {
            writer.WriteStartElement(null, "TaxIdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TaxIdentificationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (IdentityCardNumber is IsoMax35Text IdentityCardNumberValue)
        {
            writer.WriteStartElement(null, "IdntyCardNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(IdentityCardNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (EmployerIdentificationNumber is IsoMax35Text EmployerIdentificationNumberValue)
        {
            writer.WriteStartElement(null, "MplyrIdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(EmployerIdentificationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (EmployeeIdentificationNumber is IsoMax35Text EmployeeIdentificationNumberValue)
        {
            writer.WriteStartElement(null, "MplyeeIdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(EmployeeIdentificationNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (JobNumber is IsoMax35Text JobNumberValue)
        {
            writer.WriteStartElement(null, "JobNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(JobNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Department is IsoMax35Text DepartmentValue)
        {
            writer.WriteStartElement(null, "Dept", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DepartmentValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (EmailAddress is IsoMax256Text EmailAddressValue)
        {
            writer.WriteStartElement(null, "EmailAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(EmailAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (DateAndPlaceOfBirth is DateAndPlaceOfBirth DateAndPlaceOfBirthValue)
        {
            writer.WriteStartElement(null, "DtAndPlcOfBirth", xmlNamespace );
            DateAndPlaceOfBirthValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Other is GenericIdentification4 OtherValue)
        {
            writer.WriteStartElement(null, "Othr", xmlNamespace );
            OtherValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PersonIdentification11 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
