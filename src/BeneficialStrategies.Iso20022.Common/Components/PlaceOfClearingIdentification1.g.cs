//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PlaceOfClearingIdentification1.  ISO2002 ID# _GVozg2wwEeWLq_lbZ2Mhyw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identification of infrastructure which may be a component of a clearing house and which facilitates clearing and settlement for its members by standing between the buyer and the seller. It may net transactions and it substitutes itself as settlement counterparty for each position.
/// </summary>
public partial record PlaceOfClearingIdentification1
     : IIsoXmlSerilizable<PlaceOfClearingIdentification1>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification of the place of clearing.
    /// </summary>
    public IsoAnyBICIdentifier? Identification { get; init; } 
    /// <summary>
    /// Legal entity identification as an alternate identification for a place of clearing.
    /// </summary>
    public IsoLEIIdentifier? LEI { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Identification is IsoAnyBICIdentifier IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoAnyBICIdentifier(IdentificationValue)); // data type AnyBICIdentifier System.String
            writer.WriteEndElement();
        }
        if (LEI is IsoLEIIdentifier LEIValue)
        {
            writer.WriteStartElement(null, "LEI", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(LEIValue)); // data type LEIIdentifier System.String
            writer.WriteEndElement();
        }
    }
    public static PlaceOfClearingIdentification1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
