//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PlainCardData15.  ISO2002 ID# _l24gIY0TEeWRYffwL7E13A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Sensible data associated with the payment card performing the transaction.
/// </summary>
public partial record PlainCardData15
     : IIsoXmlSerilizable<PlainCardData15>
{
    #nullable enable
    
    /// <summary>
    /// Primary Account Number (PAN) of the card, or surrogate of the PAN by a payment token.
    /// </summary>
    public required IsoMin8Max28NumericText PAN { get; init; } 
    /// <summary>
    /// Identify a card or a payment token inside a set of cards with the same PAN or token.
    /// </summary>
    public IsoMin2Max3NumericText? CardSequenceNumber { get; init; } 
    /// <summary>
    /// Date from which the card can be used, expressed either in the YYYY-MM format, or in the YYYY-MM-DD format.
    /// </summary>
    public IsoMax10Text? EffectiveDate { get; init; } 
    /// <summary>
    /// Expiry date of the card or the payment token expressed either in the YYYY-MM format, or in the YYYY-MM-DD format.
    /// </summary>
    public required IsoMax10Text ExpiryDate { get; init; } 
    /// <summary>
    /// Services attached to the card, as defined in ISO 7813.
    /// </summary>
    public IsoExact3NumericText? ServiceCode { get; init; } 
    /// <summary>
    /// ISO track 1 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax76Text? Track1 { get; init; } 
    /// <summary>
    /// ISO track 2 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax37Text? Track2 { get; init; } 
    /// <summary>
    /// ISO track 3 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 4909, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax104Text? Track3 { get; init; } 
    /// <summary>
    /// Name of the cardholder stored on the card.
    /// </summary>
    public IsoMax45Text? CardholderName { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PAN", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMin8Max28NumericText(PAN)); // data type Min8Max28NumericText System.String
        writer.WriteEndElement();
        if (CardSequenceNumber is IsoMin2Max3NumericText CardSequenceNumberValue)
        {
            writer.WriteStartElement(null, "CardSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMin2Max3NumericText(CardSequenceNumberValue)); // data type Min2Max3NumericText System.String
            writer.WriteEndElement();
        }
        if (EffectiveDate is IsoMax10Text EffectiveDateValue)
        {
            writer.WriteStartElement(null, "FctvDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10Text(EffectiveDateValue)); // data type Max10Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XpryDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax10Text(ExpiryDate)); // data type Max10Text System.String
        writer.WriteEndElement();
        if (ServiceCode is IsoExact3NumericText ServiceCodeValue)
        {
            writer.WriteStartElement(null, "SvcCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact3NumericText(ServiceCodeValue)); // data type Exact3NumericText System.String
            writer.WriteEndElement();
        }
        if (Track1 is IsoMax76Text Track1Value)
        {
            writer.WriteStartElement(null, "Trck1", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax76Text(Track1Value)); // data type Max76Text System.String
            writer.WriteEndElement();
        }
        if (Track2 is IsoMax37Text Track2Value)
        {
            writer.WriteStartElement(null, "Trck2", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax37Text(Track2Value)); // data type Max37Text System.String
            writer.WriteEndElement();
        }
        if (Track3 is IsoMax104Text Track3Value)
        {
            writer.WriteStartElement(null, "Trck3", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax104Text(Track3Value)); // data type Max104Text System.String
            writer.WriteEndElement();
        }
        if (CardholderName is IsoMax45Text CardholderNameValue)
        {
            writer.WriteStartElement(null, "CrdhldrNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax45Text(CardholderNameValue)); // data type Max45Text System.String
            writer.WriteEndElement();
        }
    }
    public static PlainCardData15 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
