//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PlainCardData17.  ISO2002 ID# _GIIq4ZbhEeW6aPG6p-lhQQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Sensitive data associated with a payment card.
/// </summary>
public partial record PlainCardData17
     : IIsoXmlSerilizable<PlainCardData17>
{
    #nullable enable
    
    /// <summary>
    /// Primary Account Number (PAN) of the card.
    /// </summary>
    public IsoMin8Max28NumericText? PAN { get; init; } 
    /// <summary>
    /// ISO track 1 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The format is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax76Text? Track1 { get; init; } 
    /// <summary>
    /// ISO track 2 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 7813, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax37Text? Track2 { get; init; } 
    /// <summary>
    /// ISO track 3 issued from the magnetic stripe card or from the ICC if the magnetic stripe was not read. The content is conform to ISO 4909, removing beginning and ending sentinels and longitudinal redundancy check characters.
    /// </summary>
    public IsoMax104Text? Track3 { get; init; } 
    /// <summary>
    /// Additional card issuer specific data.
    /// </summary>
    public IsoMax35Text? AdditionalCardData { get; init; } 
    /// <summary>
    /// Entry mode of the card.
    /// </summary>
    public CardDataReading5Code? EntryMode { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PAN is IsoMin8Max28NumericText PANValue)
        {
            writer.WriteStartElement(null, "PAN", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMin8Max28NumericText(PANValue)); // data type Min8Max28NumericText System.String
            writer.WriteEndElement();
        }
        if (Track1 is IsoMax76Text Track1Value)
        {
            writer.WriteStartElement(null, "Trck1", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax76Text(Track1Value)); // data type Max76Text System.String
            writer.WriteEndElement();
        }
        if (Track2 is IsoMax37Text Track2Value)
        {
            writer.WriteStartElement(null, "Trck2", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax37Text(Track2Value)); // data type Max37Text System.String
            writer.WriteEndElement();
        }
        if (Track3 is IsoMax104Text Track3Value)
        {
            writer.WriteStartElement(null, "Trck3", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax104Text(Track3Value)); // data type Max104Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalCardData is IsoMax35Text AdditionalCardDataValue)
        {
            writer.WriteStartElement(null, "AddtlCardData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AdditionalCardDataValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (EntryMode is CardDataReading5Code EntryModeValue)
        {
            writer.WriteStartElement(null, "NtryMd", xmlNamespace );
            writer.WriteValue(EntryModeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static PlainCardData17 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
