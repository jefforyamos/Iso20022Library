//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PointOfServiceContext1.  ISO2002 ID# _yjeRsEavEeeIjf8aP9KbJA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Context of the transaction at the point of service.
/// </summary>
[DataContract]
[XmlType]
public partial record PointOfServiceContext1
{
    #nullable enable
    
    /// <summary>
    /// Indicates whether the transaction has been initiated by a card physically present or not.
    /// True: Card physically present during the transaction
    /// False: Card physically absent during the transaction.
    /// ISO 8583:87 bit 25, ISO 8583:93 bit 22-6.
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? CardPresent { get; init; } 
    /// <summary>
    /// Indicates whether the transaction has been initiated in presence of the cardholder or not.
    /// True: Cardholder present during the transaction
    /// False: Cardholder absent during the transaction.
    /// ISO 8583:87 bit 25, ISO 8583:93 bit 22-5
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? CardholderPresent { get; init; } 
    /// <summary>
    /// Indicates whether the automated device was operated solely by the cardholder or not (for example, vending machine, automated fuel dispenser, ATM, kiosk, etc.).
    /// True: Device operated solely by the cardholder
    /// False: Device not operated solely by the cardholder.
    /// ISO 8583:2003 bit 22-3
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? CardholderActivated { get; init; } 
    /// <summary>
    /// Transaction initiated through a transponder or not.
    /// True: Transaction initiated through a transponder.
    /// False: Transaction not initiated through a transponder.
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? TransponderInitiated { get; init; } 
    /// <summary>
    /// Card acceptor representative in attendance at the point of service during the transaction.
    /// When an acceptor’s terminal is semi-attended (for example, multiple terminals supervised by a single clerk), it will be identified as ‘attended’.
    /// True: Attended transaction at the terminal
    /// False: Non-attended transaction at the terminal
    /// ISO 8583:87 bit 25, ISO 8583:93 bit 22-4, ISO 8583:2003 bit 22-3
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? AttendedIndicator { get; init; } 
    /// <summary>
    /// Transaction category level on an unattended terminal.
    /// </summary>
    [DataMember]
    public IsoMax35NumericText? UnattendedLevelCategory { get; init; } 
    /// <summary>
    /// Indicates whether the point of service is an e-commerce one or not:
    /// True: e-commerce 
    /// False: non e-commerce 
    /// Default: False
    /// ISO 8583:2003 bit 22-3
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? ECommerceIndicator { get; init; } 
    /// <summary>
    /// Contains electronic commerce data. 
    /// </summary>
    [DataMember]
    public ValueList<ECommerceData1> ECommerceData { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Indicates whether the context of the point of service is a MOTO one or not.
    /// True: MOTO 
    /// False: non-MOTO 
    /// Default: False
    /// ISO 8583:2003 bit 25
    /// ISO 8583:2003 bit 22-5
    /// ISO 8583:2003 bit 22-3
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? MOTOIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the point of service supports partial approval or not.
    /// True: partial approval is supported
    /// False: partial approval is not supported
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? PartialApprovalSupported { get; init; } 
    /// <summary>
    /// Indicates whether the authorisation was delayed due to an on-board initiated transaction.
    /// True: The authorisation was delayed
    /// False: The authorisation was not delayed
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? DelayedAuthorisationIndicator { get; init; } 
    /// <summary>
    /// Security characteristics of the communication link in the card acceptance process.
    /// ISO 8583:2003 bit 22-4
    /// </summary>
    [DataMember]
    public ValueList<SecurityCharacteristics1Code> SecurityCharacteristics { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Other security characteristics.
    /// </summary>
    [DataMember]
    public IsoMax35Text? OtherSecurityCharacteristics { get; init; } 
    /// <summary>
    /// Entry mode of the card data for the transaction
    /// ISO 8583:87 bit 22 (1-2), ISO 8583:93 bit 22-7, ISO 8583:2003 bit 22-1
    /// </summary>
    [DataMember]
    public required CardDataReading7Code CardDataEntryMode { get; init; } 
    /// <summary>
    /// Other type of card data entry mode.
    /// </summary>
    [DataMember]
    public IsoMax35Text? OtherCardDataEntryMode { get; init; } 
    /// <summary>
    /// Storage location of payment credential (for example, Acceptor or third party wallet).
    /// </summary>
    [DataMember]
    public IsoMax35Text? StorageLocation { get; init; } 
    /// <summary>
    /// Data used to assign specific conditions at the card acceptor location and decided by bilateral agreements.
    /// </summary>
    [DataMember]
    public ValueList<SpecialConditions1> SpecialConditions { get; init; } = []; // Warning: Don't know multiplicity.
    
    #nullable disable
}
