//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PortfolioTransfer8.  ISO2002 ID# _n_YKkZNBEemQB_8XA98K0Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Type of product and assets to be transferred.
/// </summary>
public partial record PortfolioTransfer8
     : IIsoXmlSerilizable<PortfolioTransfer8>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for a group of individual transfers as assigned by the instructing party. This identifier links the individual transfers together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Identification assigned to the transfer of assets.
    /// </summary>
    public required IsoMax35Text TransferIdentification { get; init; } 
    /// <summary>
    /// Identification of the confirmation assigned by the transferor to the transfer.
    /// </summary>
    public IsoMax35Text? TransferConfirmationIdentification { get; init; } 
    /// <summary>
    /// Date for which the instructing party requests the transfer of the portfolio as a whole.
    /// </summary>
    public IsoISODate? RequestedTransferDate { get; init; } 
    /// <summary>
    /// Choice of tax efficient product, general investment or pension.
    /// </summary>
    public FundPortfolio6Choice_? Portfolio { get; init; } 
    /// <summary>
    /// Specifies whether all remaining assets in the portfolio not listed for transfer should be liquidated and transferred as cash. 
    /// </summary>
    public AllOtherCash1? AllOtherCash { get; init; } 
    /// <summary>
    /// Specifies whether all assets in the portfolio are to be liquidated and transferred as cash.
    /// </summary>
    public CashAll1? CashAll { get; init; } 
    /// <summary>
    /// Specifies how the cash in the account that is awaiting investment is to be dealt with.
    /// </summary>
    public ResidualCash2? ResidualCash { get; init; } 
    /// <summary>
    /// Payment process for the transfer of cash from the debtor to the creditor.
    /// </summary>
    public PaymentInstrument14? PaymentDetails { get; init; } 
    /// <summary>
    /// Asset to be transferred.
    /// </summary>
    public FinancialInstrument86? FinancialInstrumentAssetForTransfer { get; init; } 
    /// <summary>
    /// Additional information about the product transfer.
    /// </summary>
    public AdditionalInformation15? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MasterReference is IsoMax35Text MasterReferenceValue)
        {
            writer.WriteStartElement(null, "MstrRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MasterReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TrfId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (TransferConfirmationIdentification is IsoMax35Text TransferConfirmationIdentificationValue)
        {
            writer.WriteStartElement(null, "TrfConfId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferConfirmationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RequestedTransferDate is IsoISODate RequestedTransferDateValue)
        {
            writer.WriteStartElement(null, "ReqdTrfDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(RequestedTransferDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Portfolio is FundPortfolio6Choice_ PortfolioValue)
        {
            writer.WriteStartElement(null, "Prtfl", xmlNamespace );
            PortfolioValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AllOtherCash is AllOtherCash1 AllOtherCashValue)
        {
            writer.WriteStartElement(null, "AllOthrCsh", xmlNamespace );
            AllOtherCashValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAll is CashAll1 CashAllValue)
        {
            writer.WriteStartElement(null, "CshAll", xmlNamespace );
            CashAllValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ResidualCash is ResidualCash2 ResidualCashValue)
        {
            writer.WriteStartElement(null, "RsdlCsh", xmlNamespace );
            ResidualCashValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PaymentDetails is PaymentInstrument14 PaymentDetailsValue)
        {
            writer.WriteStartElement(null, "PmtDtls", xmlNamespace );
            PaymentDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FinancialInstrumentAssetForTransfer is FinancialInstrument86 FinancialInstrumentAssetForTransferValue)
        {
            writer.WriteStartElement(null, "FinInstrmAsstForTrf", xmlNamespace );
            FinancialInstrumentAssetForTransferValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is AdditionalInformation15 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PortfolioTransfer8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
