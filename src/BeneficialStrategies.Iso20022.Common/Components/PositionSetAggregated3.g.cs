//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PositionSetAggregated3.  ISO2002 ID# _0wETAQ1MEeqV4s5SpzR1dQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Type of position sets calculated to represent the exposures between a pair of counterparties.
/// </summary>
public partial record PositionSetAggregated3
     : IIsoXmlSerilizable<PositionSetAggregated3>
{
    #nullable enable
    
    /// <summary>
    /// Reference date for statistics collection.
    /// </summary>
    public required IsoISODate ReferenceDate { get; init; } 
    /// <summary>
    /// Aggregation of outstanding derivatives with similar dimensions. Numerous positions sets that are produced according to the combination of dimensions used to stratify the derivatives, and different metrics are used to represent the aggregations. 
    /// </summary>
    public PositionSet5? PositionSet { get; init; } 
    /// <summary>
    /// Aggregation of outstanding derivatives according to the currency of the position, for use by central banks issuing specific currencies.
    /// </summary>
    public PositionSet5? CurrencyPositionSet { get; init; } 
    /// <summary>
    /// Aggregation of collateral for derivative positions using collateral fields as metrics.
    /// </summary>
    public PositionSet4? CollateralPositionSet { get; init; } 
    /// <summary>
    /// Aggregation of collateral with similar dimensions that relate to the currency position sets, with relevant collateral related metrics.
    /// </summary>
    public PositionSet4? CurrencyCollateralPositionSet { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RefDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(ReferenceDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (PositionSet is PositionSet5 PositionSetValue)
        {
            writer.WriteStartElement(null, "PosSet", xmlNamespace );
            PositionSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrencyPositionSet is PositionSet5 CurrencyPositionSetValue)
        {
            writer.WriteStartElement(null, "CcyPosSet", xmlNamespace );
            CurrencyPositionSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralPositionSet is PositionSet4 CollateralPositionSetValue)
        {
            writer.WriteStartElement(null, "CollPosSet", xmlNamespace );
            CollateralPositionSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CurrencyCollateralPositionSet is PositionSet4 CurrencyCollateralPositionSetValue)
        {
            writer.WriteStartElement(null, "CcyCollPosSet", xmlNamespace );
            CurrencyCollateralPositionSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PositionSetAggregated3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
