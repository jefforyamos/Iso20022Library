//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PositionSetCollateralTotal1.  ISO2002 ID# _9h9p58WLEeiRga8tPu1L4Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Variables used to quantify the different calculations for position sets and currency position sets reports.
/// </summary>
public partial record PositionSetCollateralTotal1
     : IIsoXmlSerilizable<PositionSetCollateralTotal1>
{
    #nullable enable
    
    /// <summary>
    /// Refers to the number of reports used for calculating the position set.
    /// </summary>
    public IsoMax20PositiveNumber? NumberOfReports { get; init; } 
    /// <summary>
    /// Values of the initial margin for the portfolio.
    /// </summary>
    public PositionSetPostedAndReceived1? InitialMargin { get; init; } 
    /// <summary>
    /// Values of the variation margin for the portfolio.
    /// </summary>
    public PositionSetPostedAndReceived1? VariationMargin { get; init; } 
    /// <summary>
    /// Values of the excess cash for the portfolio.
    /// </summary>
    public PositionSetPostedAndReceived1? ExcessCash { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (NumberOfReports is IsoMax20PositiveNumber NumberOfReportsValue)
        {
            writer.WriteStartElement(null, "NbOfRpts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax20PositiveNumber(NumberOfReportsValue)); // data type Max20PositiveNumber System.UInt64
            writer.WriteEndElement();
        }
        if (InitialMargin is PositionSetPostedAndReceived1 InitialMarginValue)
        {
            writer.WriteStartElement(null, "InitlMrgn", xmlNamespace );
            InitialMarginValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (VariationMargin is PositionSetPostedAndReceived1 VariationMarginValue)
        {
            writer.WriteStartElement(null, "VartnMrgn", xmlNamespace );
            VariationMarginValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExcessCash is PositionSetPostedAndReceived1 ExcessCashValue)
        {
            writer.WriteStartElement(null, "XcssCsh", xmlNamespace );
            ExcessCashValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PositionSetCollateralTotal1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
