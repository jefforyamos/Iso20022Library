//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PositionSetDimensions14.  ISO2002 ID# _F6dn8cguEeuGrNSsxk3B0A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Variables related to derivatives that are used to group derivatives together into positions for position sets.
/// </summary>
public partial record PositionSetDimensions14
     : IIsoXmlSerilizable<PositionSetDimensions14>
{
    #nullable enable
    
    /// <summary>
    /// Data specific to counterparties.
    /// </summary>
    public CounterpartyData86? CounterpartyData { get; init; } 
    /// <summary>
    /// Details of the loan used for financing the transaction.
    /// </summary>
    public LoanData134? LoanData { get; init; } 
    /// <summary>
    /// Provides the details of the collateral used in the transaction.
    /// </summary>
    public CollateralData33? CollateralData { get; init; } 
    /// <summary>
    /// Flag to identify whether the reported Securities Financing Transaction position contains abnormal values.
    /// </summary>
    public IsoTrueFalseIndicator? OutliersIncluded { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CounterpartyData is CounterpartyData86 CounterpartyDataValue)
        {
            writer.WriteStartElement(null, "CtrPtyData", xmlNamespace );
            CounterpartyDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LoanData is LoanData134 LoanDataValue)
        {
            writer.WriteStartElement(null, "LnData", xmlNamespace );
            LoanDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralData is CollateralData33 CollateralDataValue)
        {
            writer.WriteStartElement(null, "CollData", xmlNamespace );
            CollateralDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OutliersIncluded is IsoTrueFalseIndicator OutliersIncludedValue)
        {
            writer.WriteStartElement(null, "OtlrsIncl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OutliersIncludedValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static PositionSetDimensions14 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
