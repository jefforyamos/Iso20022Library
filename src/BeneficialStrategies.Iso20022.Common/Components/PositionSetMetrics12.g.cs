//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PositionSetMetrics12.  ISO2002 ID# _oRNJEc9JEeubvZK8CMH-Eg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Variables used to quantify the different calculations for position sets.
/// </summary>
public partial record PositionSetMetrics12
     : IIsoXmlSerilizable<PositionSetMetrics12>
{
    #nullable enable
    
    /// <summary>
    /// Numeric variables calculated on the number of transactions or on market exposures.
    /// </summary>
    public VolumeMetrics6? VolumeMetrics { get; init; } 
    /// <summary>
    /// Collateral haircut, a risk control measure applied to underlying collateral whereby the value of that underlying collateral is calculated as the market value of the assets reduced by a certain percentage. 
    /// In the case of margin lending, collateral haircut or margin requirement, a risk control measure applied to the entire collateral portfolio whereby the value of that underlying collateral is calculated as the market value of the assets reduced by a certain percentage. 
    /// Only actual values, as opposed to estimated or default values are to be reported for this attribute.
    /// </summary>
    public IsoPercentageRate? HaircutOrMargin { get; init; } 
    /// <summary>
    /// Quantity of the securities other than bonds.
    /// </summary>
    public QuantityNominalValue2Choice_? QuantityOrNominalAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (VolumeMetrics is VolumeMetrics6 VolumeMetricsValue)
        {
            writer.WriteStartElement(null, "VolMtrcs", xmlNamespace );
            VolumeMetricsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HaircutOrMargin is IsoPercentageRate HaircutOrMarginValue)
        {
            writer.WriteStartElement(null, "HrcutOrMrgn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(HaircutOrMarginValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (QuantityOrNominalAmount is QuantityNominalValue2Choice_ QuantityOrNominalAmountValue)
        {
            writer.WriteStartElement(null, "QtyOrNmnlAmt", xmlNamespace );
            QuantityOrNominalAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PositionSetMetrics12 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
