//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PostalAddress24.  ISO2002 ID# _9XYD524-EeiU9cctagi5ow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.Components.PostalAddress24>;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information that locates and identifies a specific address, as defined by postal services.
/// </summary>
[DataContract(Namespace = "")]
[XmlType]
public partial record PostalAddress24
     : IIsoXmlSerilizable<PostalAddress24>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the nature of the postal address.
    /// </summary>
    [DataMember]
    public AddressType3Choice_? AddressType { get; init; } 
    /// <summary>
    /// Identification of a division of a large organisation or building.
    /// </summary>
    [DataMember]
    public IsoMax70Text? Department { get; init; } 
    /// <summary>
    /// Identification of a sub-division of a large organisation or building.
    /// </summary>
    [DataMember]
    public IsoMax70Text? SubDepartment { get; init; } 
    /// <summary>
    /// Name of a street or thoroughfare.
    /// </summary>
    [DataMember]
    public IsoMax70Text? StreetName { get; init; } 
    /// <summary>
    /// Number that identifies the position of a building on a street.
    /// </summary>
    [DataMember]
    public IsoMax16Text? BuildingNumber { get; init; } 
    /// <summary>
    /// Name of the building or house.
    /// </summary>
    [DataMember]
    public IsoMax35Text? BuildingName { get; init; } 
    /// <summary>
    /// Floor or storey within a building.
    /// </summary>
    [DataMember]
    public IsoMax70Text? Floor { get; init; } 
    /// <summary>
    /// Numbered box in a post office, assigned to a person or organisation, where letters are kept until called for.
    /// </summary>
    [DataMember]
    public IsoMax16Text? PostBox { get; init; } 
    /// <summary>
    /// Building room number.
    /// </summary>
    [DataMember]
    public IsoMax70Text? Room { get; init; } 
    /// <summary>
    /// Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
    /// </summary>
    [DataMember]
    public IsoMax16Text? PostCode { get; init; } 
    /// <summary>
    /// Name of a built-up area, with defined boundaries, and a local government.
    /// </summary>
    [DataMember]
    public IsoMax35Text? TownName { get; init; } 
    /// <summary>
    /// Specific location name within the town.
    /// </summary>
    [DataMember]
    public IsoMax35Text? TownLocationName { get; init; } 
    /// <summary>
    /// Identifies a subdivision within a country sub-division.
    /// </summary>
    [DataMember]
    public IsoMax35Text? DistrictName { get; init; } 
    /// <summary>
    /// Identifies a subdivision of a country such as state, region, county.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CountrySubDivision { get; init; } 
    /// <summary>
    /// Nation with its own government.
    /// </summary>
    [DataMember]
    public CountryCode? Country { get; init; } 
    /// <summary>
    /// Information that locates and identifies a specific address, as defined by postal services, presented in free format text.
    /// </summary>
    [DataMember]
    public ValueList<IsoMax70Text> AddressLine { get; init; } = [];
    
    #nullable disable
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AddressType is AddressType3Choice_ AddressTypeValue)
        {
            writer.WriteStartElement(null, "AdrTp", xmlNamespace );
            AddressTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Department is IsoMax70Text DepartmentValue)
        {
            writer.WriteStartElement(null, "Dept", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(DepartmentValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (SubDepartment is IsoMax70Text SubDepartmentValue)
        {
            writer.WriteStartElement(null, "SubDept", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(SubDepartmentValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (StreetName is IsoMax70Text StreetNameValue)
        {
            writer.WriteStartElement(null, "StrtNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(StreetNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (BuildingNumber is IsoMax16Text BuildingNumberValue)
        {
            writer.WriteStartElement(null, "BldgNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax16Text(BuildingNumberValue)); // data type Max16Text System.String
            writer.WriteEndElement();
        }
        if (BuildingName is IsoMax35Text BuildingNameValue)
        {
            writer.WriteStartElement(null, "BldgNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(BuildingNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Floor is IsoMax70Text FloorValue)
        {
            writer.WriteStartElement(null, "Flr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(FloorValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (PostBox is IsoMax16Text PostBoxValue)
        {
            writer.WriteStartElement(null, "PstBx", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax16Text(PostBoxValue)); // data type Max16Text System.String
            writer.WriteEndElement();
        }
        if (Room is IsoMax70Text RoomValue)
        {
            writer.WriteStartElement(null, "Room", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(RoomValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (PostCode is IsoMax16Text PostCodeValue)
        {
            writer.WriteStartElement(null, "PstCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax16Text(PostCodeValue)); // data type Max16Text System.String
            writer.WriteEndElement();
        }
        if (TownName is IsoMax35Text TownNameValue)
        {
            writer.WriteStartElement(null, "TwnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TownNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TownLocationName is IsoMax35Text TownLocationNameValue)
        {
            writer.WriteStartElement(null, "TwnLctnNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TownLocationNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DistrictName is IsoMax35Text DistrictNameValue)
        {
            writer.WriteStartElement(null, "DstrctNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DistrictNameValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CountrySubDivision is IsoMax35Text CountrySubDivisionValue)
        {
            writer.WriteStartElement(null, "CtrySubDvsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CountrySubDivisionValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Country is CountryCode CountryValue)
        {
            writer.WriteStartElement(null, "Ctry", xmlNamespace );
            writer.WriteValue(CountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        // Not sure how to serialize AddressLine, multiplicity Collection
    }
    public static PostalAddress24 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
