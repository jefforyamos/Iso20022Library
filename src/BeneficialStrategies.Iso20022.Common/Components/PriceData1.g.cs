//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for PriceData1.  ISO2002 ID# _hM_uQHizEeqKjIYaFgh_2g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Indicates the details of the price applicable to the derivative transaction.
/// </summary>
public partial record PriceData1
     : IIsoXmlSerilizable<PriceData1>
{
    #nullable enable
    
    /// <summary>
    /// Indicates the price per derivative excluding, where applicable: fees, taxes or commissions.
    /// </summary>
    public SecuritiesTransactionPrice17Choice_? Price { get; init; } 
    /// <summary>
    /// Specifies the effective date and end date of the schedule for derivative transactions with prices varying throughout the life of the transaction.
    /// </summary>
    public Schedule1? PriceSchedule { get; init; } 
    /// <summary>
    /// Specifies the unit of measure in which the price is expressed.
    /// </summary>
    public UnitOfMeasure12Code? UnitOfMeasure { get; init; } 
    /// <summary>
    /// Number of units of the underlying instrument represented by a single derivative contract.
    /// </summary>
    public IsoLongFraction19DecimalNumber? PriceMultiplier { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Price is SecuritiesTransactionPrice17Choice_ PriceValue)
        {
            writer.WriteStartElement(null, "Pric", xmlNamespace );
            PriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceSchedule is Schedule1 PriceScheduleValue)
        {
            writer.WriteStartElement(null, "PricSchdl", xmlNamespace );
            PriceScheduleValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnitOfMeasure is UnitOfMeasure12Code UnitOfMeasureValue)
        {
            writer.WriteStartElement(null, "UnitOfMeasr", xmlNamespace );
            writer.WriteValue(UnitOfMeasureValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (PriceMultiplier is IsoLongFraction19DecimalNumber PriceMultiplierValue)
        {
            writer.WriteStartElement(null, "PricMltplr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLongFraction19DecimalNumber(PriceMultiplierValue)); // data type LongFraction19DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
    }
    public static PriceData1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
