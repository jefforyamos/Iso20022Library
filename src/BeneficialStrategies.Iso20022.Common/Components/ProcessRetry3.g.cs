//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ProcessRetry3.  ISO2002 ID# _M4Y0sTASEeugIJ3Gvoevmg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Definition of retry process if activation of an action fails.
/// </summary>
public partial record ProcessRetry3
     : IIsoXmlSerilizable<ProcessRetry3>
{
    #nullable enable
    
    /// <summary>
    /// Time period to wait for a retry in months, days, hours and minutes, leading zeros could be omitted.
    /// </summary>
    public required IsoMax9NumericText Delay { get; init; } 
    /// <summary>
    /// Maximum number of retries.
    /// </summary>
    public IsoNumber? MaximumNumber { get; init; } 
    /// <summary>
    /// Identification of the minimum unit of time used by time configuration parameters.
    /// </summary>
    public TimeUnit1Code? UnitOfTime { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Dely", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax9NumericText(Delay)); // data type Max9NumericText System.String
        writer.WriteEndElement();
        if (MaximumNumber is IsoNumber MaximumNumberValue)
        {
            writer.WriteStartElement(null, "MaxNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(MaximumNumberValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (UnitOfTime is TimeUnit1Code UnitOfTimeValue)
        {
            writer.WriteStartElement(null, "UnitOfTm", xmlNamespace );
            writer.WriteValue(UnitOfTimeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static ProcessRetry3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
