//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for QualifiedPartyIdentification1.  ISO2002 ID# _OTgzMjEy-AOSNFX-8224491.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines and associates identifications for a party as a list of other global or qualified relative identifiers.
/// It is assumed that customers of a party can be referenced by an identifier local to the party. The party together with the local identifier can be used to reference the customer.
/// Multiple references can be given to identify the same party.
/// A short identification can be used for display purposes.
/// </summary>
public partial record QualifiedPartyIdentification1
     : IIsoXmlSerilizable<QualifiedPartyIdentification1>
{
    #nullable enable
    
    /// <summary>
    /// Schema ID to be used in IDREF values.
    /// </summary>
    public required IsoID Identification { get; init; } 
    /// <summary>
    /// List of identifications for the same party.
    /// </summary>
    public SingleQualifiedPartyIdentification1? Party { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _OTgzMjU1-AOSNFX-8224494
    /// <summary>
    /// Short identification of the resulting party as a control mechanism for humans.
    /// </summary>
    public PartyIdentification2Choice_? ShortIdentification { get; init; } 
    /// <summary>
    /// Formally defined role qualifying the party.
    /// </summary>
    public GenericIdentification1? Role { get; init; } 
    /// <summary>
    /// Free form description of the party's role.
    /// </summary>
    public IsoMax256Text? RoleDescription { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoID(Identification)); // data type ID System.String
        writer.WriteEndElement();
        // Not sure how to serialize Party, multiplicity Unknown
        if (ShortIdentification is PartyIdentification2Choice_ ShortIdentificationValue)
        {
            writer.WriteStartElement(null, "ShrtId", xmlNamespace );
            ShortIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Role is GenericIdentification1 RoleValue)
        {
            writer.WriteStartElement(null, "Role", xmlNamespace );
            RoleValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RoleDescription is IsoMax256Text RoleDescriptionValue)
        {
            writer.WriteStartElement(null, "RoleDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(RoleDescriptionValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
    }
    public static QualifiedPartyIdentification1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
