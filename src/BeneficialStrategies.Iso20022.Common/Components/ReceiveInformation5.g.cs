//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ReceiveInformation5.  ISO2002 ID# _1LZwYfpiEeCG_oUHBFcYXA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parameters applied to the settlement of a security transfer.
/// </summary>
public partial record ReceiveInformation5
     : IIsoXmlSerilizable<ReceiveInformation5>
{
    #nullable enable
    
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    /// <summary>
    /// Indicates whether the settlement amount includes the stamp duty amount.
    /// </summary>
    public StampDutyType2Code? StampDuty { get; init; } 
    /// <summary>
    /// Deal amount.
    /// </summary>
    public IsoActiveCurrencyAndAmount? NetAmount { get; init; } 
    /// <summary>
    /// Chain of parties involved in the settlement of a transaction.
    /// </summary>
    public required ReceivingPartiesAndAccount8 SettlementPartiesDetails { get; init; } 
    /// <summary>
    /// Charge related to the transfer of a financial instrument.
    /// </summary>
    public Charge20? ChargeDetails { get; init; } 
    /// <summary>
    /// Commission related to the transfer of a financial instrument.
    /// </summary>
    public Commission12? CommissionDetails { get; init; } 
    /// <summary>
    /// Tax related to the transfer of a financial instrument.
    /// </summary>
    public Tax15? TaxDetails { get; init; } 
    /// <summary>
    /// Indicates whether the financial instrument is to be physically delivered.
    /// </summary>
    public PhysicalTransferType1Code? PhysicalTransfer { get; init; } 
    /// <summary>
    /// Parameters of a physical delivery.
    /// </summary>
    public DeliveryParameters4? PhysicalTransferDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SettlementAmount is IsoActiveCurrencyAndAmount SettlementAmountValue)
        {
            writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(SettlementAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (StampDuty is StampDutyType2Code StampDutyValue)
        {
            writer.WriteStartElement(null, "StmpDty", xmlNamespace );
            writer.WriteValue(StampDutyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NetAmount is IsoActiveCurrencyAndAmount NetAmountValue)
        {
            writer.WriteStartElement(null, "NetAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(NetAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "SttlmPtiesDtls", xmlNamespace );
        SettlementPartiesDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ChargeDetails is Charge20 ChargeDetailsValue)
        {
            writer.WriteStartElement(null, "ChrgDtls", xmlNamespace );
            ChargeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CommissionDetails is Commission12 CommissionDetailsValue)
        {
            writer.WriteStartElement(null, "ComssnDtls", xmlNamespace );
            CommissionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxDetails is Tax15 TaxDetailsValue)
        {
            writer.WriteStartElement(null, "TaxDtls", xmlNamespace );
            TaxDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PhysicalTransfer is PhysicalTransferType1Code PhysicalTransferValue)
        {
            writer.WriteStartElement(null, "PhysTrf", xmlNamespace );
            writer.WriteValue(PhysicalTransferValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (PhysicalTransferDetails is DeliveryParameters4 PhysicalTransferDetailsValue)
        {
            writer.WriteStartElement(null, "PhysTrfDtls", xmlNamespace );
            PhysicalTransferDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ReceiveInformation5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
