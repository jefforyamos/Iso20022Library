//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ReceivedMarginOrCollateral3.  ISO2002 ID# _J-eOwayHEem81-uIvTF5rQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information on the received margin or collateral of the transaction.
/// </summary>
public partial record ReceivedMarginOrCollateral3
     : IIsoXmlSerilizable<ReceivedMarginOrCollateral3>
{
    #nullable enable
    
    /// <summary>
    /// Value of the initial margin received by the reporting counterparty from the other counterparty.
    /// Where initial margin is received on a portfolio basis, this field should include the overall value of initial margin received for the portfolio.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? InitialMarginReceived { get; init; } 
    /// <summary>
    /// Value of the variation margin received, including cash settled, by the reporting counterparty from the other counterparty. 
    /// Where variation margin is received on a portfolio basis, this field should include the overall value of variation margin received for the portfolio.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? VariationMarginReceived { get; init; } 
    /// <summary>
    /// Value of collateral received in excess of the required collateral.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? ExcessCollateralReceived { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (InitialMarginReceived is IsoActiveOrHistoricCurrencyAndAmount InitialMarginReceivedValue)
        {
            writer.WriteStartElement(null, "InitlMrgnRcvd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(InitialMarginReceivedValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (VariationMarginReceived is IsoActiveOrHistoricCurrencyAndAmount VariationMarginReceivedValue)
        {
            writer.WriteStartElement(null, "VartnMrgnRcvd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(VariationMarginReceivedValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ExcessCollateralReceived is IsoActiveOrHistoricCurrencyAndAmount ExcessCollateralReceivedValue)
        {
            writer.WriteStartElement(null, "XcssCollRcvd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(ExcessCollateralReceivedValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static ReceivedMarginOrCollateral3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
