//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ReconciliationFlag1.  ISO2002 ID# _N6obcNIDEeiG-o-KpBT4-g.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the process type used for the trade repository reconciliation.
/// </summary>
public partial record ReconciliationFlag1
     : IIsoXmlSerilizable<ReconciliationFlag1>
{
    #nullable enable
    
    /// <summary>
    /// Indicates whether both counterparties to the transaction have reported to the same Trade Repository
    /// </summary>
    public TradeRepositoryReportingType1Code? ReportType { get; init; } 
    /// <summary>
    /// Indicates whether both counterparties are obliged to report the transaction data.
    /// </summary>
    public IsoTrueFalseIndicator? BothCounterpartiesReporting { get; init; } 
    /// <summary>
    /// Indicates whether the transaction is paired.
    /// </summary>
    public IsoTrueFalseIndicator? PairedStatus { get; init; } 
    /// <summary>
    /// Indicates whether loan data is reconciled.
    /// </summary>
    public IsoTrueFalseIndicator? LoanReconciliationStatus { get; init; } 
    /// <summary>
    /// Indicates whether collateral data is reconciled.
    /// </summary>
    public IsoTrueFalseIndicator? CollateralReconciliationStatus { get; init; } 
    /// <summary>
    /// Indicates whether the initially submitted report was further modified using action type modification.
    /// </summary>
    public IsoTrueFalseIndicator? ModificationStatus { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ReportType is TradeRepositoryReportingType1Code ReportTypeValue)
        {
            writer.WriteStartElement(null, "RptTp", xmlNamespace );
            writer.WriteValue(ReportTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (BothCounterpartiesReporting is IsoTrueFalseIndicator BothCounterpartiesReportingValue)
        {
            writer.WriteStartElement(null, "BothCtrPtiesRptg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(BothCounterpartiesReportingValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (PairedStatus is IsoTrueFalseIndicator PairedStatusValue)
        {
            writer.WriteStartElement(null, "PairdSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(PairedStatusValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (LoanReconciliationStatus is IsoTrueFalseIndicator LoanReconciliationStatusValue)
        {
            writer.WriteStartElement(null, "LnRcncltnSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(LoanReconciliationStatusValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CollateralReconciliationStatus is IsoTrueFalseIndicator CollateralReconciliationStatusValue)
        {
            writer.WriteStartElement(null, "CollRcncltnSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(CollateralReconciliationStatusValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ModificationStatus is IsoTrueFalseIndicator ModificationStatusValue)
        {
            writer.WriteStartElement(null, "ModSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ModificationStatusValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static ReconciliationFlag1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
