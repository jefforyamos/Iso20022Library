//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for RedemptionExecution16.  ISO2002 ID# _E-YG1zbtEead9bDRE_1DAQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Execution of a redemption order.
/// </summary>
public partial record RedemptionExecution16
     : IIsoXmlSerilizable<RedemptionExecution16>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for the order, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of the order. This reference can typically be used in a hub scenario to give the reference of the order as assigned by the underlying client.
    /// </summary>
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the order execution, as assigned by the confirming party.
    /// </summary>
    public required IsoMax35Text DealReference { get; init; } 
    /// <summary>
    /// Category of the investment fund order.
    /// </summary>
    public ValueList<FundOrderType4Choice_> OrderType { get; init; } = [];
    /// <summary>
    /// Additional information about the investor.
    /// </summary>
    public IndividualPerson32? BeneficiaryDetails { get; init; } 
    /// <summary>
    /// Number of investment funds units redeemed.
    /// </summary>
    public required IsoDecimalNumber UnitsNumber { get; init; } 
    /// <summary>
    /// Indicates the rounding direction applied to nearest unit.
    /// </summary>
    public RoundingDirection2Code? Rounding { get; init; } 
    /// <summary>
    /// Amount of money paid to the investor when redeeming fund units. 
    /// Net amount = (Quantity * Price) – (Fees + Taxes).
    /// </summary>
    public IsoActiveCurrencyAndAmount? NetAmount { get; init; } 
    /// <summary>
    /// Account impacted by the investment fund order execution.
    /// </summary>
    public required InvestmentAccount58 InvestmentAccountDetails { get; init; } 
    /// <summary>
    /// Portion of the investor's holdings redeemed.
    /// </summary>
    public IsoPercentageRate? HoldingsRedemptionRate { get; init; } 
    /// <summary>
    /// Amount of money redeemed from the fund. 
    /// Gross Amount = Quantity * Price.
    /// </summary>
    public IsoActiveCurrencyAndAmount? GrossAmount { get; init; } 
    /// <summary>
    /// Date and time at which a price is applied, according to the terms stated in the prospectus.
    /// </summary>
    public required DateAndDateTimeChoice_ TradeDateTime { get; init; } 
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    public required IsoActiveCurrencyAndAmount SettlementAmount { get; init; } 
    /// <summary>
    /// Date on which cash is available.
    /// </summary>
    public IsoISODate? CashSettlementDate { get; init; } 
    /// <summary>
    /// Method by which the transaction is settled.
    /// </summary>
    public DeliveryReceiptType2Code? SettlementMethod { get; init; } 
    /// <summary>
    /// Price at which the order was executed.
    /// </summary>
    public required UnitPrice22 DealingPriceDetails { get; init; } 
    /// <summary>
    /// Other quoted price than the one at which the order was executed.
    /// </summary>
    public ValueList<UnitPrice22> InformativePriceDetails { get; init; } = [];
    /// <summary>
    /// Indicates whether the order has been partially executed, that is, the confirmed quantity does not match the ordered quantity for a given financial instrument.
    /// </summary>
    public required IsoYesNoIndicator PartiallyExecutedIndicator { get; init; } 
    /// <summary>
    /// Specifies that the execution was subject to best execution rules as defined by MiFID.
    /// </summary>
    public BestExecution1Code? BestExecution { get; init; } 
    /// <summary>
    /// Indicates whether the dividend is included, that is, cum-dividend, in the executed price. When the dividend is not included, the price will be ex-dividend.
    /// </summary>
    public required IsoYesNoIndicator CumDividendIndicator { get; init; } 
    /// <summary>
    /// Part of the price deemed as accrued income or profit rather than capital. The interim profit amount is used for tax purposes.
    /// </summary>
    public ProfitAndLoss2Choice_? InterimProfitAmount { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// How the exchange rate is expressed determines which currency is the Unit Currency and Quoted Currency. If the amounts concerned are EUR 1000 and USD 1300, the exchange rate may be expressed as per either of the following examples:
    /// EXAMPLE 1 
    /// UnitCurrency EUR
    /// QuotedCurrency USD
    /// ExchangeRate 1.300
    /// EXAMPLE 2
    /// UnitCurrency USD
    /// QuotedCurrency EUR
    /// ExchangeRate 0.769.
    /// </summary>
    public ForeignExchangeTerms33? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Dividend option chosen by the account owner based on the options offered in the prospectus.
    /// </summary>
    public IncomePreference1Code? IncomePreference { get; init; } 
    /// <summary>
    /// Tax group to which the purchased investment fund units belong. The investor indicates to the intermediary operating pooled nominees, which type of unit is to be sold.
    /// </summary>
    public UKTaxGroupUnit1Code? Group1Or2Units { get; init; } 
    /// <summary>
    /// Fees (charges/commission) and taxes that are taken into consideration for the transaction, so that the total difference between the net amount and gross amount is known, without taking into account equalisation.
    /// </summary>
    public TotalFeesAndTaxes40? TransactionOverhead { get; init; } 
    /// <summary>
    /// Additional information about tax that does not have an impact on the transaction overhead.
    /// </summary>
    public InformativeTax1? InformativeTaxDetails { get; init; } 
    /// <summary>
    /// Breakdown of the net amount per type of order.
    /// </summary>
    public ValueList<InvestmentFundsOrderBreakdown2> StaffClientBreakdown { get; init; } = [];
    /// <summary>
    /// Parameters used to execute the settlement of an investment fund order.
    /// </summary>
    public FundSettlementParameters11? SettlementAndCustodyDetails { get; init; } 
    /// <summary>
    /// Indicates whether the financial instrument is to be physically delivered.
    /// </summary>
    public required IsoYesNoIndicator PhysicalDeliveryIndicator { get; init; } 
    /// <summary>
    /// Information related to the physical delivery of the securities.
    /// </summary>
    public DeliveryParameters3? PhysicalDeliveryDetails { get; init; } 
    /// <summary>
    /// Payment process for the transfer of cash from the debtor to the creditor.
    /// </summary>
    public PaymentTransaction72? CashSettlementDetails { get; init; } 
    /// <summary>
    /// Additional specific settlement information for non-regulated traded funds.
    /// </summary>
    public IsoMax350Text? NonStandardSettlementInformation { get; init; } 
    /// <summary>
    /// Percentage of units partially settled.
    /// </summary>
    public IsoPercentageRate? PartialSettlementOfUnits { get; init; } 
    /// <summary>
    /// Percentage of cash partially settled.
    /// </summary>
    public IsoPercentageRate? PartialSettlementOfCash { get; init; } 
    /// <summary>
    /// Amount retained by the fund and paid out later at a time decided by the fund.
    /// </summary>
    public IsoActiveCurrencyAndAmount? PartialRedemptionWithholdingAmount { get; init; } 
    /// <summary>
    /// Specifies if advice has been received from an independent financial advisor.
    /// </summary>
    public FinancialAdvice1Code? FinancialAdvice { get; init; } 
    /// <summary>
    /// Specifies whether the trade is negotiated.
    /// </summary>
    public NegotiatedTrade1Code? NegotiatedTrade { get; init; } 
    /// <summary>
    /// Specifies whether the order execution confirmation is late.
    /// </summary>
    public LateReport1Code? LateReport { get; init; } 
    /// <summary>
    /// Party related to the transaction.
    /// </summary>
    public ValueList<Intermediary39> RelatedPartyDetails { get; init; } = [];
    /// <summary>
    /// Part of an investor's subscription amount that was held by the fund in order to pay incentive/performance fees at the end of the fiscal year, and is returned due to the redemption.
    /// </summary>
    public Equalisation1? Equalisation { get; init; } 
    /// <summary>
    /// Assessment of the customer’s behaviour at the time of the account opening application.
    /// </summary>
    public CustomerConductClassification1Choice_? CustomerConductClassification { get; init; } 
    /// <summary>
    /// Means by which the investor or account owner submits the open account form.
    /// </summary>
    public TransactionChannelType1Choice_? TransactionChannelType { get; init; } 
    /// <summary>
    /// Type of signature.
    /// </summary>
    public SignatureType1Choice_? SignatureType { get; init; } 
    /// <summary>
    /// Information about a non-standard order.
    /// </summary>
    public OrderWaiver1? OrderWaiverDetails { get; init; } 
    /// <summary>
    /// Information about gating and hold back of redemption proceeds.
    /// </summary>
    public HoldBackInformation2? GatingOrHoldBackDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "OrdrRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(OrderReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ClientReference is IsoMax35Text ClientReferenceValue)
        {
            writer.WriteStartElement(null, "ClntRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ClientReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "DealRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(DealReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OrdrTp", xmlNamespace );
        OrderType.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BeneficiaryDetails is IndividualPerson32 BeneficiaryDetailsValue)
        {
            writer.WriteStartElement(null, "BnfcryDtls", xmlNamespace );
            BeneficiaryDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "UnitsNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoDecimalNumber(UnitsNumber)); // data type DecimalNumber System.UInt64
        writer.WriteEndElement();
        if (Rounding is RoundingDirection2Code RoundingValue)
        {
            writer.WriteStartElement(null, "Rndg", xmlNamespace );
            writer.WriteValue(RoundingValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NetAmount is IsoActiveCurrencyAndAmount NetAmountValue)
        {
            writer.WriteStartElement(null, "NetAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(NetAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InvstmtAcctDtls", xmlNamespace );
        InvestmentAccountDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (HoldingsRedemptionRate is IsoPercentageRate HoldingsRedemptionRateValue)
        {
            writer.WriteStartElement(null, "HldgsRedRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(HoldingsRedemptionRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (GrossAmount is IsoActiveCurrencyAndAmount GrossAmountValue)
        {
            writer.WriteStartElement(null, "GrssAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(GrossAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradDtTm", xmlNamespace );
        TradeDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(SettlementAmount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (CashSettlementDate is IsoISODate CashSettlementDateValue)
        {
            writer.WriteStartElement(null, "CshSttlmDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CashSettlementDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (SettlementMethod is DeliveryReceiptType2Code SettlementMethodValue)
        {
            writer.WriteStartElement(null, "SttlmMtd", xmlNamespace );
            writer.WriteValue(SettlementMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "DealgPricDtls", xmlNamespace );
        DealingPriceDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "InftvPricDtls", xmlNamespace );
        InformativePriceDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PrtlyExctdInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PartiallyExecutedIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (BestExecution is BestExecution1Code BestExecutionValue)
        {
            writer.WriteStartElement(null, "BestExctn", xmlNamespace );
            writer.WriteValue(BestExecutionValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CumDvddInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CumDividendIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (InterimProfitAmount is ProfitAndLoss2Choice_ InterimProfitAmountValue)
        {
            writer.WriteStartElement(null, "IntrmPrftAmt", xmlNamespace );
            InterimProfitAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ForeignExchangeDetails is ForeignExchangeTerms33 ForeignExchangeDetailsValue)
        {
            writer.WriteStartElement(null, "FXDtls", xmlNamespace );
            ForeignExchangeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IncomePreference is IncomePreference1Code IncomePreferenceValue)
        {
            writer.WriteStartElement(null, "IncmPref", xmlNamespace );
            writer.WriteValue(IncomePreferenceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Group1Or2Units is UKTaxGroupUnit1Code Group1Or2UnitsValue)
        {
            writer.WriteStartElement(null, "Grp1Or2Units", xmlNamespace );
            writer.WriteValue(Group1Or2UnitsValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TransactionOverhead is TotalFeesAndTaxes40 TransactionOverheadValue)
        {
            writer.WriteStartElement(null, "TxOvrhd", xmlNamespace );
            TransactionOverheadValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InformativeTaxDetails is InformativeTax1 InformativeTaxDetailsValue)
        {
            writer.WriteStartElement(null, "InftvTaxDtls", xmlNamespace );
            InformativeTaxDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StffClntBrkdwn", xmlNamespace );
        StaffClientBreakdown.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SettlementAndCustodyDetails is FundSettlementParameters11 SettlementAndCustodyDetailsValue)
        {
            writer.WriteStartElement(null, "SttlmAndCtdyDtls", xmlNamespace );
            SettlementAndCustodyDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PhysDlvryInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PhysicalDeliveryIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (PhysicalDeliveryDetails is DeliveryParameters3 PhysicalDeliveryDetailsValue)
        {
            writer.WriteStartElement(null, "PhysDlvryDtls", xmlNamespace );
            PhysicalDeliveryDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashSettlementDetails is PaymentTransaction72 CashSettlementDetailsValue)
        {
            writer.WriteStartElement(null, "CshSttlmDtls", xmlNamespace );
            CashSettlementDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NonStandardSettlementInformation is IsoMax350Text NonStandardSettlementInformationValue)
        {
            writer.WriteStartElement(null, "NonStdSttlmInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NonStandardSettlementInformationValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (PartialSettlementOfUnits is IsoPercentageRate PartialSettlementOfUnitsValue)
        {
            writer.WriteStartElement(null, "PrtlSttlmOfUnits", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PartialSettlementOfUnitsValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (PartialSettlementOfCash is IsoPercentageRate PartialSettlementOfCashValue)
        {
            writer.WriteStartElement(null, "PrtlSttlmOfCsh", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PartialSettlementOfCashValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (PartialRedemptionWithholdingAmount is IsoActiveCurrencyAndAmount PartialRedemptionWithholdingAmountValue)
        {
            writer.WriteStartElement(null, "PrtlRedWhldgAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(PartialRedemptionWithholdingAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (FinancialAdvice is FinancialAdvice1Code FinancialAdviceValue)
        {
            writer.WriteStartElement(null, "FinAdvc", xmlNamespace );
            writer.WriteValue(FinancialAdviceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NegotiatedTrade is NegotiatedTrade1Code NegotiatedTradeValue)
        {
            writer.WriteStartElement(null, "NgtdTrad", xmlNamespace );
            writer.WriteValue(NegotiatedTradeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (LateReport is LateReport1Code LateReportValue)
        {
            writer.WriteStartElement(null, "LateRpt", xmlNamespace );
            writer.WriteValue(LateReportValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RltdPtyDtls", xmlNamespace );
        RelatedPartyDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Equalisation is Equalisation1 EqualisationValue)
        {
            writer.WriteStartElement(null, "Equlstn", xmlNamespace );
            EqualisationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustomerConductClassification is CustomerConductClassification1Choice_ CustomerConductClassificationValue)
        {
            writer.WriteStartElement(null, "CstmrCndctClssfctn", xmlNamespace );
            CustomerConductClassificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionChannelType is TransactionChannelType1Choice_ TransactionChannelTypeValue)
        {
            writer.WriteStartElement(null, "TxChanlTp", xmlNamespace );
            TransactionChannelTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SignatureType is SignatureType1Choice_ SignatureTypeValue)
        {
            writer.WriteStartElement(null, "SgntrTp", xmlNamespace );
            SignatureTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OrderWaiverDetails is OrderWaiver1 OrderWaiverDetailsValue)
        {
            writer.WriteStartElement(null, "OrdrWvrDtls", xmlNamespace );
            OrderWaiverDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (GatingOrHoldBackDetails is HoldBackInformation2 GatingOrHoldBackDetailsValue)
        {
            writer.WriteStartElement(null, "GtgOrHldBckDtls", xmlNamespace );
            GatingOrHoldBackDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static RedemptionExecution16 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
