//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for RedemptionOrder3.  ISO2002 ID# _Vck7c9p-Ed-ak6NoX_4Aeg_-984991905.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Instruction from an investor to sell investment fund units back to the fund.
/// </summary>
public partial record RedemptionOrder3
     : IIsoXmlSerilizable<RedemptionOrder3>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for an order, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Specifies the category of the investment fund order.
    /// </summary>
    public FundOrderType1? OrderType { get; init; } 
    /// <summary>
    /// Account impacted by an investment fund order.
    /// </summary>
    public required InvestmentAccount13 InvestmentAccountDetails { get; init; } 
    /// <summary>
    /// Additional information about the investor.
    /// </summary>
    public IndividualPerson2? BeneficiaryDetails { get; init; } 
    /// <summary>
    /// Quantity of investment fund units redeemed.
    /// </summary>
    public required FinancialInstrumentQuantity1 UnitsNumber { get; init; } 
    /// <summary>
    /// Net amount of money used to derive the quantity of investment fund units to be sold.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAndAmount NetAmount { get; init; } 
    /// <summary>
    /// Portion of the investor's holdings, in a specific investment fund/ fund class, that is redeemed.
    /// </summary>
    public required IsoPercentageRate HoldingsRedemptionRate { get; init; } 
    /// <summary>
    /// Indicates the rounding direction applied to nearest unit.
    /// </summary>
    public RoundingDirection2Code? Rounding { get; init; } 
    /// <summary>
    /// Amount of money used to derive the quantity of investment fund units to be sold, including all charges, commissions, and tax.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? GrossAmount { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// </summary>
    public ForeignExchangeTerms5? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Dividend option chosen by the account owner based on the options offered in the prospectus.
    /// </summary>
    public IncomePreference1Code? IncomePreference { get; init; } 
    /// <summary>
    /// Tax group to which the purchased investment fund units belong. The investor indicates to the intermediary operating pooled nominees, which type of unit is to be sold.
    /// </summary>
    public UKTaxGroupUnitCode? Group1Or2Units { get; init; } 
    /// <summary>
    /// Charge for the placement of an order.
    /// </summary>
    public Charge8? ChargeDetails { get; init; } 
    /// <summary>
    /// Commission linked to the execution of an investment fund order.
    /// </summary>
    public Commission6? CommissionDetails { get; init; } 
    /// <summary>
    /// Tax applicable to an investment fund order.
    /// </summary>
    public Tax6? TaxDetails { get; init; } 
    /// <summary>
    /// Parameters used to execute the settlement of an investment fund order.
    /// </summary>
    public FundSettlementParameters3? SettlementAndCustodyDetails { get; init; } 
    /// <summary>
    /// Indicates whether the financial instrument is to be physically delivered.
    /// </summary>
    public required IsoYesNoIndicator PhysicalDeliveryIndicator { get; init; } 
    /// <summary>
    /// Information related to physical delivery of the securities.
    /// </summary>
    public DeliveryParameters3? PhysicalDeliveryDetails { get; init; } 
    /// <summary>
    /// Payment transaction resulting from the investment fund order execution.
    /// </summary>
    public PaymentTransaction18? CashSettlementDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "OrdrRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(OrderReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (OrderType is FundOrderType1 OrderTypeValue)
        {
            writer.WriteStartElement(null, "OrdrTp", xmlNamespace );
            OrderTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InvstmtAcctDtls", xmlNamespace );
        InvestmentAccountDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BeneficiaryDetails is IndividualPerson2 BeneficiaryDetailsValue)
        {
            writer.WriteStartElement(null, "BnfcryDtls", xmlNamespace );
            BeneficiaryDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "UnitsNb", xmlNamespace );
        UnitsNumber.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "NetAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(NetAmount)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        writer.WriteStartElement(null, "HldgsRedRate", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoPercentageRate(HoldingsRedemptionRate)); // data type PercentageRate System.Decimal
        writer.WriteEndElement();
        if (Rounding is RoundingDirection2Code RoundingValue)
        {
            writer.WriteStartElement(null, "Rndg", xmlNamespace );
            writer.WriteValue(RoundingValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (GrossAmount is IsoActiveOrHistoricCurrencyAndAmount GrossAmountValue)
        {
            writer.WriteStartElement(null, "GrssAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(GrossAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ForeignExchangeDetails is ForeignExchangeTerms5 ForeignExchangeDetailsValue)
        {
            writer.WriteStartElement(null, "FXDtls", xmlNamespace );
            ForeignExchangeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IncomePreference is IncomePreference1Code IncomePreferenceValue)
        {
            writer.WriteStartElement(null, "IncmPref", xmlNamespace );
            writer.WriteValue(IncomePreferenceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Group1Or2Units is UKTaxGroupUnitCode Group1Or2UnitsValue)
        {
            writer.WriteStartElement(null, "Grp1Or2Units", xmlNamespace );
            writer.WriteValue(Group1Or2UnitsValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ChargeDetails is Charge8 ChargeDetailsValue)
        {
            writer.WriteStartElement(null, "ChrgDtls", xmlNamespace );
            ChargeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CommissionDetails is Commission6 CommissionDetailsValue)
        {
            writer.WriteStartElement(null, "ComssnDtls", xmlNamespace );
            CommissionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxDetails is Tax6 TaxDetailsValue)
        {
            writer.WriteStartElement(null, "TaxDtls", xmlNamespace );
            TaxDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementAndCustodyDetails is FundSettlementParameters3 SettlementAndCustodyDetailsValue)
        {
            writer.WriteStartElement(null, "SttlmAndCtdyDtls", xmlNamespace );
            SettlementAndCustodyDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PhysDlvryInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PhysicalDeliveryIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (PhysicalDeliveryDetails is DeliveryParameters3 PhysicalDeliveryDetailsValue)
        {
            writer.WriteStartElement(null, "PhysDlvryDtls", xmlNamespace );
            PhysicalDeliveryDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashSettlementDetails is PaymentTransaction18 CashSettlementDetailsValue)
        {
            writer.WriteStartElement(null, "CshSttlmDtls", xmlNamespace );
            CashSettlementDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static RedemptionOrder3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
