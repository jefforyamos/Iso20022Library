//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for References6.  ISO2002 ID# _QoQ34Np-Ed-ak6NoX_4Aeg_126946620.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Set of elements for the identification of the message and related references.
/// </summary>
public partial record References6
     : IIsoXmlSerilizable<References6>
{
    #nullable enable
    
    /// <summary>
    /// Identify the type of rejected request.
    /// </summary>
    public required UseCases1Code RejectedRequestType { get; init; } 
    /// <summary>
    /// Reason of the message rejection.
    /// </summary>
    public IsoMax350Text? RejectionReason { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _QoQ34tp-Ed-ak6NoX_4Aeg_1011680219
    /// <summary>
    /// Identification of the rejected request message.
    /// </summary>
    public required MessageIdentification1 RejectedRequestIdentification { get; init; } 
    /// <summary>
    /// Identifies a message by a unique identifier and the date and time when the message was created by the sender.
    /// </summary>
    public required MessageIdentification1 MessageIdentification { get; init; } 
    /// <summary>
    /// Identifies a process by a unique identifier and the date and time when the first message belonging to the process was created by the sender. The process identification remains the same in all messages belonging to the same process, from the initial request message to the final account report closing the process.
    /// </summary>
    public required MessageIdentification1 ProcessIdentification { get; init; } 
    /// <summary>
    /// File name of a document logically related to the request.
    /// </summary>
    public IsoMax70Text? AttachedDocumentName { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RjctdReqTp", xmlNamespace );
        writer.WriteValue(RejectedRequestType.ToString()); // Enum value
        writer.WriteEndElement();
        // Not sure how to serialize RejectionReason, multiplicity Unknown
        writer.WriteStartElement(null, "RjctdReqId", xmlNamespace );
        RejectedRequestIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "MsgId", xmlNamespace );
        MessageIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PrcId", xmlNamespace );
        ProcessIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AttachedDocumentName is IsoMax70Text AttachedDocumentNameValue)
        {
            writer.WriteStartElement(null, "AttchdDocNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AttachedDocumentNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static References6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
