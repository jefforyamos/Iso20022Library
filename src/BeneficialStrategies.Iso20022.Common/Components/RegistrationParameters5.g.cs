//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for RegistrationParameters5.  ISO2002 ID# _6Szd8ZNLEeWGlc8L7oPDIg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to registration of securities.
/// </summary>
public partial record RegistrationParameters5
     : IIsoXmlSerilizable<RegistrationParameters5>
{
    #nullable enable
    
    /// <summary>
    /// Identification assigned to a deposit.
    /// </summary>
    public IsoRestrictedFINXMax16Text? CertificationIdentification { get; init; } 
    /// <summary>
    /// Date/time at which the certificates in the deposit were validated by the agent.
    /// </summary>
    public DateAndDateTimeChoice_? CertificationDateTime { get; init; } 
    /// <summary>
    /// Account at the registrar where financial instruments are registered.
    /// </summary>
    public IsoRestrictedFINXMax35Text? RegistrarAccount { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier of a certificate assigned by the issuer.
    /// </summary>
    public SecuritiesCertificate5? CertificateNumber { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CertificationIdentification is IsoRestrictedFINXMax16Text CertificationIdentificationValue)
        {
            writer.WriteStartElement(null, "CertfctnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINXMax16Text(CertificationIdentificationValue)); // data type RestrictedFINXMax16Text System.String
            writer.WriteEndElement();
        }
        if (CertificationDateTime is DateAndDateTimeChoice_ CertificationDateTimeValue)
        {
            writer.WriteStartElement(null, "CertfctnDtTm", xmlNamespace );
            CertificationDateTimeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RegistrarAccount is IsoRestrictedFINXMax35Text RegistrarAccountValue)
        {
            writer.WriteStartElement(null, "RegarAcct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINXMax35Text(RegistrarAccountValue)); // data type RestrictedFINXMax35Text System.String
            writer.WriteEndElement();
        }
        if (CertificateNumber is SecuritiesCertificate5 CertificateNumberValue)
        {
            writer.WriteStartElement(null, "CertNb", xmlNamespace );
            CertificateNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static RegistrationParameters5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
