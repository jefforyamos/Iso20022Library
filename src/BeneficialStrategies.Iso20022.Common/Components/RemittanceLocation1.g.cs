//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for RemittanceLocation1.  ISO2002 ID# _QFjMYdp-Ed-ak6NoX_4Aeg_-1561763068.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Remittance information that provides all remittance address elements, that enables the matching, i.e. reconciliation, of a payment with the items that the transaction in intended to settle.
/// </summary>
public partial record RemittanceLocation1
     : IIsoXmlSerilizable<RemittanceLocation1>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of the remittance information, e.g. a remittance advice, which is sent separately from the payment instruction.
    /// </summary>
    public IsoMax35Text? RemittanceIdentification { get; init; } 
    /// <summary>
    /// Specifies the method used to deliver the remittance advice information.
    /// </summary>
    public RemittanceLocationMethod1Code? RemittanceLocationMethod { get; init; } 
    /// <summary>
    /// Electronic address to which an agent is to send the remittance information.
    /// </summary>
    public IsoMax256Text? RemittanceLocationElectronicAddress { get; init; } 
    /// <summary>
    /// Postal address to which an agent is to send the remittance information.
    /// </summary>
    public NameAndAddress3? RemittanceLocationPostalAddress { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (RemittanceIdentification is IsoMax35Text RemittanceIdentificationValue)
        {
            writer.WriteStartElement(null, "RmtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(RemittanceIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RemittanceLocationMethod is RemittanceLocationMethod1Code RemittanceLocationMethodValue)
        {
            writer.WriteStartElement(null, "RmtLctnMtd", xmlNamespace );
            writer.WriteValue(RemittanceLocationMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RemittanceLocationElectronicAddress is IsoMax256Text RemittanceLocationElectronicAddressValue)
        {
            writer.WriteStartElement(null, "RmtLctnElctrncAdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(RemittanceLocationElectronicAddressValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (RemittanceLocationPostalAddress is NameAndAddress3 RemittanceLocationPostalAddressValue)
        {
            writer.WriteStartElement(null, "RmtLctnPstlAdr", xmlNamespace );
            RemittanceLocationPostalAddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static RemittanceLocation1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
