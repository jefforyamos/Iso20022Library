//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ReorganisationInstructionDetailsSD2.  ISO2002 ID# _QNHyY8YAEeexPc-mfUU5zQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action reorganisation instruction details.
/// </summary>
public partial record ReorganisationInstructionDetailsSD2
     : IIsoXmlSerilizable<ReorganisationInstructionDetailsSD2>
{
    #nullable enable
    
    /// <summary>
    /// Xpath to the element that is being extended.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Identifies the reorganisation transaction type.
    /// </summary>
    public ReorganisationTransactionType1Code? TransactionType { get; init; } 
    /// <summary>
    /// Unique number assigned by the depository. Transaction identification will be either the DTC instruction reference number for reorganisation instructions (VOI) or the DAM reference number for custody / reorganisation deposits.
    /// </summary>
    public IsoMax15Text? TransactionIdentification { get; init; } 
    /// <summary>
    /// Number which further identifies DTC instruction reference number. Not applicable to reorganisation / custody deposits.
    /// </summary>
    public IsoMax3NumericText? TransactionSequenceNumber { get; init; } 
    /// <summary>
    /// Unique identifier for each customer in a transaction.
    /// </summary>
    public IsoMax9NumericText? CustomerSequenceNumber { get; init; } 
    /// <summary>
    /// Status of the instruction.
    /// </summary>
    public DTCInstructionStatus2Code? TransactionIdentificationStatus { get; init; } 
    /// <summary>
    /// Status of the Protect Instruction.
    /// </summary>
    public DTCProtectInstructionStatus1Code? ProtectTransactionStatus { get; init; } 
    /// <summary>
    /// Reason for which an inbound instruction message or a cancellation instruction message is rejected.
    /// </summary>
    public SimpleValueList<InstructionRejectionReason1Code> RejectionReason { get; init; } = [];
    /// <summary>
    /// Identifies the protect itself or of that is being covered. It is required for the function types cover protect (COVR), cover protect directly to agent (COVA) and cover on behalf of another participant (COVP).
    /// </summary>
    public required IsoMax15Text ProtectIdentification { get; init; } 
    /// <summary>
    /// For cover protect instructions whereby one safekeeping account is covering on behalf of another safekeeping account. The protect safekeeping account will be the account which submitted the original protect instruction.
    /// </summary>
    public IsoRestrictedFINMax35Text? ProtectSafekeepingAccount { get; init; } 
    /// <summary>
    /// Date on which the protect was created. It is required for transaction types cover protect transaction (COVR), cover protect directly to agent transaction (COVA) and 
    /// cover protect on behalf of another participant transaction (COVP).
    /// </summary>
    public required IsoISODate ProtectDate { get; init; } 
    /// <summary>
    /// Provides information about securities quantity linked to a corporate action option.
    /// </summary>
    public SecuritiesQuantityDetailsSD4? SecuritiesQuantityDetails { get; init; } 
    /// <summary>
    /// Warrant subscription amount entered by client when instructing on a warrant exercise instruction.
    /// </summary>
    public IsoRestrictedFINActiveCurrencyAndAmount? WarrantSubscriptionChargeAmount { get; init; } 
    /// <summary>
    /// Indicates whether the tender offer accepts odd lots. 
    /// Yes: tender offer accepts odd lots.
    /// No: tender offer does not accept odd lots.
    /// </summary>
    public IsoYesNoIndicator? TenderOddLotIndicator { get; init; } 
    /// <summary>
    /// Certificate information for a given instruction.
    /// </summary>
    public CorporateActionCertificateSD1? Certificate { get; init; } 
    /// <summary>
    /// Customer identification entered by client upon instruction submission.
    /// </summary>
    public IsoMax30Text? CustomerReferenceIdentification { get; init; } 
    /// <summary>
    /// Unique identification of the transaction used by the transmitting party.
    /// </summary>
    public IsoMax6Text? UserReferenceNumber { get; init; } 
    /// <summary>
    /// Party contact information for the given instruction; required for voluntary offer instruction transaction (VOIT), protect transaction (PROT) and protect on behalf of another participant transaction (PROP); not required for cover protect instructions like cover protect transaction (COVR), cover protect directly to agent transaction (COVA) and cover protect on behalf of another participant transaction (COVP).
    /// </summary>
    public ContactIdentification5? ContactPerson { get; init; } 
    /// <summary>
    /// Acknowledgement information relative to corporate action reorganisation instructions.
    /// </summary>
    public CorporateActionAcknowledgementSD1? AcknowledgementDetails { get; init; } 
    /// <summary>
    /// Beneficial owner information related to CD early redemption instructions.
    /// </summary>
    public DeceasedStatusSD1? DeceasedBeneficialOwnerDetails { get; init; } 
    /// <summary>
    /// Transaction record number for ATAM or ART system which may be causing pending status. Corresponds to ATP RBN number.
    /// </summary>
    public IsoMax10NumericText? TransactionRecordNumber { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (TransactionType is ReorganisationTransactionType1Code TransactionTypeValue)
        {
            writer.WriteStartElement(null, "TxTp", xmlNamespace );
            writer.WriteValue(TransactionTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TransactionIdentification is IsoMax15Text TransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "TxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15Text(TransactionIdentificationValue)); // data type Max15Text System.String
            writer.WriteEndElement();
        }
        if (TransactionSequenceNumber is IsoMax3NumericText TransactionSequenceNumberValue)
        {
            writer.WriteStartElement(null, "TxSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3NumericText(TransactionSequenceNumberValue)); // data type Max3NumericText System.String
            writer.WriteEndElement();
        }
        if (CustomerSequenceNumber is IsoMax9NumericText CustomerSequenceNumberValue)
        {
            writer.WriteStartElement(null, "CstmrSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax9NumericText(CustomerSequenceNumberValue)); // data type Max9NumericText System.String
            writer.WriteEndElement();
        }
        if (TransactionIdentificationStatus is DTCInstructionStatus2Code TransactionIdentificationStatusValue)
        {
            writer.WriteStartElement(null, "TxIdSts", xmlNamespace );
            writer.WriteValue(TransactionIdentificationStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ProtectTransactionStatus is DTCProtectInstructionStatus1Code ProtectTransactionStatusValue)
        {
            writer.WriteStartElement(null, "PrtctTxSts", xmlNamespace );
            writer.WriteValue(ProtectTransactionStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RjctnRsn", xmlNamespace );
        writer.WriteValue(RejectionReason.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PrtctId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax15Text(ProtectIdentification)); // data type Max15Text System.String
        writer.WriteEndElement();
        if (ProtectSafekeepingAccount is IsoRestrictedFINMax35Text ProtectSafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "PrtctSfkpgAcct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINMax35Text(ProtectSafekeepingAccountValue)); // data type RestrictedFINMax35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PrtctDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(ProtectDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        if (SecuritiesQuantityDetails is SecuritiesQuantityDetailsSD4 SecuritiesQuantityDetailsValue)
        {
            writer.WriteStartElement(null, "SctiesQtyDtls", xmlNamespace );
            SecuritiesQuantityDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WarrantSubscriptionChargeAmount is IsoRestrictedFINActiveCurrencyAndAmount WarrantSubscriptionChargeAmountValue)
        {
            writer.WriteStartElement(null, "WarrtSbcptChrgAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINActiveCurrencyAndAmount(WarrantSubscriptionChargeAmountValue)); // data type RestrictedFINActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TenderOddLotIndicator is IsoYesNoIndicator TenderOddLotIndicatorValue)
        {
            writer.WriteStartElement(null, "TndrOddLotInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(TenderOddLotIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Certificate is CorporateActionCertificateSD1 CertificateValue)
        {
            writer.WriteStartElement(null, "Cert", xmlNamespace );
            CertificateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustomerReferenceIdentification is IsoMax30Text CustomerReferenceIdentificationValue)
        {
            writer.WriteStartElement(null, "CstmrRefId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax30Text(CustomerReferenceIdentificationValue)); // data type Max30Text System.String
            writer.WriteEndElement();
        }
        if (UserReferenceNumber is IsoMax6Text UserReferenceNumberValue)
        {
            writer.WriteStartElement(null, "UsrRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax6Text(UserReferenceNumberValue)); // data type Max6Text System.String
            writer.WriteEndElement();
        }
        if (ContactPerson is ContactIdentification5 ContactPersonValue)
        {
            writer.WriteStartElement(null, "CtctPrsn", xmlNamespace );
            ContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AcknowledgementDetails is CorporateActionAcknowledgementSD1 AcknowledgementDetailsValue)
        {
            writer.WriteStartElement(null, "AckDtls", xmlNamespace );
            AcknowledgementDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeceasedBeneficialOwnerDetails is DeceasedStatusSD1 DeceasedBeneficialOwnerDetailsValue)
        {
            writer.WriteStartElement(null, "DcsdBnfclOwnrDtls", xmlNamespace );
            DeceasedBeneficialOwnerDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionRecordNumber is IsoMax10NumericText TransactionRecordNumberValue)
        {
            writer.WriteStartElement(null, "TxRcrdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10NumericText(TransactionRecordNumberValue)); // data type Max10NumericText System.String
            writer.WriteEndElement();
        }
    }
    public static ReorganisationInstructionDetailsSD2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
