//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Report3.  ISO2002 ID# _AX6mMNokEeC60axPepSq7g_-1810191064.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// General characteristics related to a statement which reports information for a precise date.
/// </summary>
public partial record Report3
     : IIsoXmlSerilizable<Report3>
{
    #nullable enable
    
    /// <summary>
    /// Sequential number of the report.
    /// </summary>
    public IsoMax5NumericText? ReportNumber { get; init; } 
    /// <summary>
    /// Gives the name and the reference of the query.
    /// </summary>
    public QueryReference? QueryReference { get; init; } 
    /// <summary>
    /// Reference of the report.
    /// </summary>
    public IsoMax35Text? ReportIdentification { get; init; } 
    /// <summary>
    /// Date of the statement.
    /// </summary>
    public required DateAndDateTime1Choice_ ReportDateTime { get; init; } 
    /// <summary>
    /// Specifies the regularity of an event.
    /// </summary>
    public Frequency4Choice_? Frequency { get; init; } 
    /// <summary>
    /// Indicates whether the report is complete or contains changes only.
    /// </summary>
    public StatementUpdateTypeCodeAndDSSCodeChoice_? UpdateType { get; init; } 
    /// <summary>
    /// Notifies the type of report transmitted.
    /// </summary>
    public GenericIdentification38? NoticeType { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ReportNumber is IsoMax5NumericText ReportNumberValue)
        {
            writer.WriteStartElement(null, "RptNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5NumericText(ReportNumberValue)); // data type Max5NumericText System.String
            writer.WriteEndElement();
        }
        if (QueryReference is QueryReference QueryReferenceValue)
        {
            writer.WriteStartElement(null, "QryRef", xmlNamespace );
            QueryReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReportIdentification is IsoMax35Text ReportIdentificationValue)
        {
            writer.WriteStartElement(null, "RptId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ReportIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RptDtTm", xmlNamespace );
        ReportDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Frequency is Frequency4Choice_ FrequencyValue)
        {
            writer.WriteStartElement(null, "Frqcy", xmlNamespace );
            FrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UpdateType is StatementUpdateTypeCodeAndDSSCodeChoice_ UpdateTypeValue)
        {
            writer.WriteStartElement(null, "UpdTp", xmlNamespace );
            UpdateTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NoticeType is GenericIdentification38 NoticeTypeValue)
        {
            writer.WriteStartElement(null, "NtceTp", xmlNamespace );
            NoticeTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Report3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
