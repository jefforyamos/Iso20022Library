//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ReportQuerySearchCriteria2.  ISO2002 ID# _3b6DFZb6Eee4htziCyV8eA.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the criteria used to search for a report.
/// </summary>
public partial record ReportQuerySearchCriteria2
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification for the account between the account owner and the account servicer.
    /// </summary>
    public IAccountIdentificationSearchCriteria2Choice? AccountIdentification { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Numerical representation of the net increases and decreases in an account at a specific point in time. A cash balance is calculated from a sum of cash credits minus a sum of cash debits.
    /// </summary>
    public CashBalance12? Balance { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Values of possible reports.
    /// </summary>
    public IsoMax4AlphaNumericText? ReportName { get; init; } 
    /// <summary>
    /// Specifies the query message name identifier to which the message refers.
    /// </summary>
    public IsoMax35Text? MessageNameIdentification { get; init; } 
    /// <summary>
    /// Report owning party.
    /// </summary>
    public required PartyIdentification136 PartyIdentification { get; init; } 
    /// <summary>
    /// Responsible Party of the report owning party.
    /// </summary>
    public PartyIdentification136? ResponsiblePartyIdentification { get; init; } 
    /// <summary>
    /// Date and time when the report was created.
    /// </summary>
    public IDatePeriodSearch1Choice? DateSearch { get; init; } 
    /// <summary>
    /// Time when the (business) event, which triggered the report, was scheduled.
    /// </summary>
    public IDateTimePeriod1Choice? ScheduledTime { get; init; } 
    /// <summary>
    /// Execution type is executed based on an event driven trigger.
    /// </summary>
    public IEventType1Choice? Event { get; init; } 
    
    #nullable disable
}
