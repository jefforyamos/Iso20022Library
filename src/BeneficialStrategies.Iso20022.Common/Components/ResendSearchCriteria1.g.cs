//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ResendSearchCriteria1.  ISO2002 ID# _jJzloO5NEeCisYr99QEiWA_840208955.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the criteria to extract the message(s) which should be resent.
/// </summary>
public partial record ResendSearchCriteria1
     : IIsoXmlSerilizable<ResendSearchCriteria1>
{
    #nullable enable
    
    /// <summary>
    /// Date of the business day of the requested messages the resend function is used for.
    /// </summary>
    public IsoISODate? BusinessDate { get; init; } 
    /// <summary>
    /// Independent counter for message sequence, which is available once per party technical address.|Specifies the identification sequence number for a specific couple sender/receiver.
    /// </summary>
    public IsoMax35Text? SequenceNumber { get; init; } 
    /// <summary>
    /// Unambiguously identifies the original business message, which was delivered by the business sender.
    /// </summary>
    public IsoMax35Text? OriginalMessageNameIdentification { get; init; } 
    /// <summary>
    /// String of characters that uniquely identifies the file, which was delivered by the sender.
    /// </summary>
    public IsoMax35Text? FileReference { get; init; } 
    /// <summary>
    /// Unique identification to unambiguously identify the recipient of the report message.
    /// </summary>
    public required PartyIdentification71Choice_ Recipient { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (BusinessDate is IsoISODate BusinessDateValue)
        {
            writer.WriteStartElement(null, "BizDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(BusinessDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (SequenceNumber is IsoMax35Text SequenceNumberValue)
        {
            writer.WriteStartElement(null, "SeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SequenceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (OriginalMessageNameIdentification is IsoMax35Text OriginalMessageNameIdentificationValue)
        {
            writer.WriteStartElement(null, "OrgnlMsgNmId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OriginalMessageNameIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (FileReference is IsoMax35Text FileReferenceValue)
        {
            writer.WriteStartElement(null, "FileRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(FileReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Rcpt", xmlNamespace );
        Recipient.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static ResendSearchCriteria1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
