//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Resolution2.  ISO2002 ID# _Ti1Lodp-Ed-ak6NoX_4Aeg_-799797210.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies an item in the agenda of the meeting. Some resolutions are submitted to the vote of the security holders, some are presented for information only.
/// </summary>
public partial record Resolution2
     : IIsoXmlSerilizable<Resolution2>
{
    #nullable enable
    
    /// <summary>
    /// Numbering of the resolution as specified by the issuer or its agent.
    /// </summary>
    public required IsoMax35Text IssuerLabel { get; init; } 
    /// <summary>
    /// Free text description of the resolution.
    /// </summary>
    public IsoMax1025Text? Description { get; init; } 
    /// <summary>
    /// Abbreviated description of the resolution.
    /// </summary>
    public IsoMax350Text? Title { get; init; } 
    /// <summary>
    /// Indicates whether a resolution is ordinary, extraordinary or special.
    /// </summary>
    public required ResolutionType1Code Type { get; init; } 
    /// <summary>
    /// Indicates whether the resolution is listed for information or for voting.
    /// </summary>
    public required IsoYesNoIndicator ForInformationOnly { get; init; } 
    /// <summary>
    /// Indicates whether the resolution is active or withdrawn.
    /// </summary>
    public required ResolutionStatus1Code Status { get; init; } 
    /// <summary>
    /// Indicates whether the resolution has been submitted by the security holder.
    /// </summary>
    public required IsoYesNoIndicator SubmittedBySecurityHolder { get; init; } 
    /// <summary>
    /// Vote options allowed at the resolution level. When specified, it supersedes the vote options given for the meeting.
    /// </summary>
    public SimpleValueList<VoteInstruction2Code> VoteInstructionType { get; init; } = [];
    /// <summary>
    /// Indicates how the management of the issuing company wishes the security holders to vote.
    /// </summary>
    public VoteInstruction1Code? ManagementRecommendation { get; init; } 
    /// <summary>
    /// Indicates how the notifying party recommends that the security holders vote.
    /// </summary>
    public VoteInstruction1Code? NotifyingPartyRecommendation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "IssrLabl", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(IssuerLabel)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (Description is IsoMax1025Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax1025Text(DescriptionValue)); // data type Max1025Text System.String
            writer.WriteEndElement();
        }
        if (Title is IsoMax350Text TitleValue)
        {
            writer.WriteStartElement(null, "Titl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(TitleValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ForInfOnly", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ForInformationOnly)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sts", xmlNamespace );
        writer.WriteValue(Status.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SubmittdBySctyHldr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(SubmittedBySecurityHolder)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "VoteInstrTp", xmlNamespace );
        writer.WriteValue(VoteInstructionType.ToString()); // Enum value
        writer.WriteEndElement();
        if (ManagementRecommendation is VoteInstruction1Code ManagementRecommendationValue)
        {
            writer.WriteStartElement(null, "MgmtRcmmndtn", xmlNamespace );
            writer.WriteValue(ManagementRecommendationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NotifyingPartyRecommendation is VoteInstruction1Code NotifyingPartyRecommendationValue)
        {
            writer.WriteStartElement(null, "NtifngPtyRcmmndtn", xmlNamespace );
            writer.WriteValue(NotifyingPartyRecommendationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static Resolution2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
