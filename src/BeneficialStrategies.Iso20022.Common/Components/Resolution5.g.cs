//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Resolution5.  ISO2002 ID# _xJ1FUfM8EeqRfth943bvEA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Resolutions at the agenda of a meeting and type of resolution.
/// </summary>
[DataContract]
[XmlType]
public partial record Resolution5
{
    #nullable enable
    
    /// <summary>
    /// Number of the resolution as specified by the issuer or its agent.
    /// </summary>
    [DataMember]
    public required IsoMax35Text IssuerLabel { get; init; } 
    /// <summary>
    /// Language, title and textual description of an agenda resolution. 
    /// </summary>
    [DataMember]
    public ValueList<ItemDescription1> Description { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies under the same label a group of agenda resolutions for which a vote in favour can be assigned to only one resolution of that group.
    /// </summary>
    [DataMember]
    public IsoMax35Text? ListingGroupResolutionLabel { get; init; } 
    /// <summary>
    /// Type of resolution.
    /// </summary>
    [DataMember]
    public ResolutionType2Code? Type { get; init; } 
    /// <summary>
    /// Indicates whether the resolution is listed for information or for voting.
    /// </summary>
    [DataMember]
    public required IsoYesNoIndicator ForInformationOnly { get; init; } 
    /// <summary>
    /// Impact of vote results on an agenda resolution.
    /// </summary>
    [DataMember]
    public VoteType1Code? VoteType { get; init; } 
    /// <summary>
    /// Specifies whether the resolution is active or withdrawn.
    /// </summary>
    [DataMember]
    public required ResolutionStatus1Code Status { get; init; } 
    /// <summary>
    /// Indicates whether the resolution has been submitted by the security holder.
    /// </summary>
    [DataMember]
    public IsoYesNoIndicator? SubmittedBySecurityHolder { get; init; } 
    /// <summary>
    /// Indicates whether a client who has not voted in favour of the resolutions which is finally approved, has the right to withdraw from a related corporate action event.
    /// </summary>
    [DataMember]
    public IsoYesNoIndicator? RightToWithdrawIndicator { get; init; } 
    /// <summary>
    /// Vote options allowed at the resolution level. When specified, it supersedes the vote options given for the meeting.
    /// </summary>
    [DataMember]
    public ValueList<VoteInstructionType1> VoteInstructionType { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Specifies how the management of the issuing company wishes the security holders to vote.
    /// </summary>
    [DataMember]
    public VoteInstruction5Code? ManagementRecommendation { get; init; } 
    /// <summary>
    /// Specifies how the notifying party recommends that the security holders vote.
    /// </summary>
    [DataMember]
    public VoteInstruction5Code? NotifyingPartyRecommendation { get; init; } 
    /// <summary>
    /// Number of votes assigned per resolution to one security.
    /// </summary>
    [DataMember]
    public Entitlement1Choice_? Entitlement { get; init; } 
    /// <summary>
    /// Voting rights threshold required in percentage or in quantity to have the resolution approved.
    /// </summary>
    [DataMember]
    public NumberOrPercentage1Choice_? VotingRightsThresholdForApproval { get; init; } 
    /// <summary>
    /// Address to use over the www (HTTP) service where specific additional information on meeting resolutions may be found.
    /// </summary>
    [DataMember]
    public IsoMax2048Text? URLAddress { get; init; } 
    
    #nullable disable
}
