//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for RetailerPaymentResult1.  ISO2002 ID# _oQ188NxFEeioifFt1dhnJA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Payment Data Results.
/// </summary>
public partial record RetailerPaymentResult1
     : IIsoXmlSerilizable<RetailerPaymentResult1>
{
    #nullable enable
    
    /// <summary>
    /// Type of payment transaction.
    /// </summary>
    public required CardPaymentServiceType12Code TransactionType { get; init; } 
    /// <summary>
    /// Service provided by the card payment transaction, in addition to the main service.
    /// </summary>
    public CardPaymentServiceType9Code? AdditionalService { get; init; } 
    /// <summary>
    /// Additional attribute of the service type.
    /// </summary>
    public CardPaymentServiceType3Code? ServiceAttribute { get; init; } 
    /// <summary>
    /// Data associated with the Transaction.
    /// </summary>
    public CardPaymentTransaction91? RequestedTransaction { get; init; } 
    /// <summary>
    /// Result of the transaction processing.
    /// </summary>
    public CardPaymentTransaction84? TransactionResponse { get; init; } 
    /// <summary>
    /// Customer order attached to a customer, recorded in the POI system.
    /// </summary>
    public CustomerOrder1? CustomerOrder { get; init; } 
    /// <summary>
    /// Numeric value of a handwritten signature.
    /// </summary>
    public CapturedSignature1? ImageCapturedSignature { get; init; } 
    /// <summary>
    /// Protected value of a handwritten signature.
    /// </summary>
    public ContentInformationType17? ProtectedCapturedSignature { get; init; } 
    /// <summary>
    /// Indicate that the Merchant forced the result of the payment to successful.
    /// </summary>
    public IsoTrueFalseIndicator? MerchantOverrideFlag { get; init; } 
    /// <summary>
    /// Language used to display messages to the customer.
    /// </summary>
    public LanguageCode? CustomerLanguage { get; init; } 
    /// <summary>
    /// Indicate that the payment transaction processing has required the approval of an acquirer.
    /// </summary>
    public IsoTrueFalseIndicator? OnlineFlag { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxTp", xmlNamespace );
        writer.WriteValue(TransactionType.ToString()); // Enum value
        writer.WriteEndElement();
        if (AdditionalService is CardPaymentServiceType9Code AdditionalServiceValue)
        {
            writer.WriteStartElement(null, "AddtlSvc", xmlNamespace );
            writer.WriteValue(AdditionalServiceValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ServiceAttribute is CardPaymentServiceType3Code ServiceAttributeValue)
        {
            writer.WriteStartElement(null, "SvcAttr", xmlNamespace );
            writer.WriteValue(ServiceAttributeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RequestedTransaction is CardPaymentTransaction91 RequestedTransactionValue)
        {
            writer.WriteStartElement(null, "ReqdTx", xmlNamespace );
            RequestedTransactionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionResponse is CardPaymentTransaction84 TransactionResponseValue)
        {
            writer.WriteStartElement(null, "TxRspn", xmlNamespace );
            TransactionResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustomerOrder is CustomerOrder1 CustomerOrderValue)
        {
            writer.WriteStartElement(null, "CstmrOrdr", xmlNamespace );
            CustomerOrderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ImageCapturedSignature is CapturedSignature1 ImageCapturedSignatureValue)
        {
            writer.WriteStartElement(null, "ImgCaptrdSgntr", xmlNamespace );
            ImageCapturedSignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProtectedCapturedSignature is ContentInformationType17 ProtectedCapturedSignatureValue)
        {
            writer.WriteStartElement(null, "PrtctdCaptrdSgntr", xmlNamespace );
            ProtectedCapturedSignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MerchantOverrideFlag is IsoTrueFalseIndicator MerchantOverrideFlagValue)
        {
            writer.WriteStartElement(null, "MrchntOvrrdFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(MerchantOverrideFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CustomerLanguage is LanguageCode CustomerLanguageValue)
        {
            writer.WriteStartElement(null, "CstmrLang", xmlNamespace );
            writer.WriteValue(CustomerLanguageValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OnlineFlag is IsoTrueFalseIndicator OnlineFlagValue)
        {
            writer.WriteStartElement(null, "OnlnFlg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OnlineFlagValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static RetailerPaymentResult1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
