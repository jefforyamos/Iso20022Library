//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SaleContext2.  ISO2002 ID# _1piOoY0VEeWRYffwL7E13A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Sale context in which the transaction is performed.
/// </summary>
public partial record SaleContext2
     : IIsoXmlSerilizable<SaleContext2>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the sale terminal (electronic cash register or point of sale terminal) or the sale system.
    /// </summary>
    public IsoMax35Text? SaleIdentification { get; init; } 
    /// <summary>
    /// Identify a sale transaction assigned by the sale system.
    /// </summary>
    public IsoMax35Text? SaleReferenceNumber { get; init; } 
    /// <summary>
    /// Identifier of the reconciliation between the Sale system and the POI system.
    /// </summary>
    public IsoMax35Text? SaleReconciliationIdentification { get; init; } 
    /// <summary>
    /// Identification of the cashier who carried out the transaction.
    /// </summary>
    public IsoMax35Text? CashierIdentification { get; init; } 
    /// <summary>
    /// Identifies the shift of the cashier.
    /// </summary>
    public IsoMax2NumericText? ShiftNumber { get; init; } 
    /// <summary>
    /// Identification of the purchase order.
    /// </summary>
    public IsoMax35Text? PurchaseOrderNumber { get; init; } 
    /// <summary>
    /// Identification of the invoice.
    /// </summary>
    public IsoMax35Text? InvoiceNumber { get; init; } 
    /// <summary>
    /// Identification allocated by the sale system and given to the customer.
    /// </summary>
    public IsoMax35Text? DeliveryNoteNumber { get; init; } 
    /// <summary>
    /// Merchant using the payment services of a payment facilitator, acting as a card acceptor.
    /// </summary>
    public Organisation26? SponsoredMerchant { get; init; } 
    /// <summary>
    /// True if the payment transaction is a partial payment of the sale transaction.
    /// </summary>
    public IsoTrueFalseIndicator? SplitPayment { get; init; } 
    /// <summary>
    /// Remaining amount to complete the sale transaction, if a partial payment has been completed for the sale transaction.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? RemainingAmount { get; init; } 
    /// <summary>
    /// Additional information associated with the sale transaction.
    /// </summary>
    public IsoMax70Text? AdditionalSaleData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SaleIdentification is IsoMax35Text SaleIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SaleReferenceNumber is IsoMax35Text SaleReferenceNumberValue)
        {
            writer.WriteStartElement(null, "SaleRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleReferenceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SaleReconciliationIdentification is IsoMax35Text SaleReconciliationIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleRcncltnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleReconciliationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CashierIdentification is IsoMax35Text CashierIdentificationValue)
        {
            writer.WriteStartElement(null, "CshrId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CashierIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ShiftNumber is IsoMax2NumericText ShiftNumberValue)
        {
            writer.WriteStartElement(null, "ShftNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax2NumericText(ShiftNumberValue)); // data type Max2NumericText System.String
            writer.WriteEndElement();
        }
        if (PurchaseOrderNumber is IsoMax35Text PurchaseOrderNumberValue)
        {
            writer.WriteStartElement(null, "PurchsOrdrNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PurchaseOrderNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (InvoiceNumber is IsoMax35Text InvoiceNumberValue)
        {
            writer.WriteStartElement(null, "InvcNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(InvoiceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (DeliveryNoteNumber is IsoMax35Text DeliveryNoteNumberValue)
        {
            writer.WriteStartElement(null, "DlvryNoteNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DeliveryNoteNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SponsoredMerchant is Organisation26 SponsoredMerchantValue)
        {
            writer.WriteStartElement(null, "SpnsrdMrchnt", xmlNamespace );
            SponsoredMerchantValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SplitPayment is IsoTrueFalseIndicator SplitPaymentValue)
        {
            writer.WriteStartElement(null, "SpltPmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(SplitPaymentValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (RemainingAmount is IsoImpliedCurrencyAndAmount RemainingAmountValue)
        {
            writer.WriteStartElement(null, "RmngAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(RemainingAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AdditionalSaleData is IsoMax70Text AdditionalSaleDataValue)
        {
            writer.WriteStartElement(null, "AddtlSaleData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AdditionalSaleDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static SaleContext2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
