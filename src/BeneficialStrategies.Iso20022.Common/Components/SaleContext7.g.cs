//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SaleContext7.  ISO2002 ID# _OQG4kf5rEeiLerArw36g0w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Context of the sale involved in a card transaction.
/// </summary>
public partial record SaleContext7
     : IIsoXmlSerilizable<SaleContext7>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the sale terminal (electronic cash register or point of sale terminal) or the sale system.
    /// </summary>
    public IsoMax35Text? SaleIdentification { get; init; } 
    /// <summary>
    /// Global reference of the sale transaction for the sale system.
    /// </summary>
    public IsoMax35Text? SaleReferenceIdentification { get; init; } 
    /// <summary>
    /// Identify a sale transaction assigned by the sale system.
    /// </summary>
    public IsoMax35Text? SaleReferenceNumber { get; init; } 
    /// <summary>
    /// Type of goods and/or services.
    /// </summary>
    public GoodsAndServices1Code? GoodsAndServicesType { get; init; } 
    /// <summary>
    /// Sub type of goods and/or services.
    /// </summary>
    public GoodsAndServicesSubType1Code? GoodAndServicesSubType { get; init; } 
    /// <summary>
    /// Other goods and services sub type applied to the transaction.
    /// </summary>
    public IsoMax35Text? GoodAndServicesOtherSubType { get; init; } 
    /// <summary>
    /// Also referred to as split tender. Indicates whether the payment transaction is a partial payment of the sale transaction.
    /// True: Partial payment of a sale transaction
    /// False: Not a partial payment of a sale transaction.
    /// </summary>
    public IsoTrueFalseIndicator? SplitPaymentIndicator { get; init; } 
    /// <summary>
    /// Indicates whether a receipt from the goods or services provider was requested.
    /// True: Receipt requested
    /// False: Receipt not requested.
    /// </summary>
    public IsoTrueFalseIndicator? ReceiptRequestIndicator { get; init; } 
    /// <summary>
    /// Type of receipt requested or communication channel used.
    /// </summary>
    public ReceiptType1Code? ReceiptType { get; init; } 
    /// <summary>
    /// Destination of the receipt (for example, e-mail address, SMS number, etc.).
    /// </summary>
    public IsoMax70Text? ReceiptDestination { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SaleIdentification is IsoMax35Text SaleIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SaleReferenceIdentification is IsoMax35Text SaleReferenceIdentificationValue)
        {
            writer.WriteStartElement(null, "SaleRefId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleReferenceIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SaleReferenceNumber is IsoMax35Text SaleReferenceNumberValue)
        {
            writer.WriteStartElement(null, "SaleRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SaleReferenceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (GoodsAndServicesType is GoodsAndServices1Code GoodsAndServicesTypeValue)
        {
            writer.WriteStartElement(null, "GoodsAndSvcsTp", xmlNamespace );
            writer.WriteValue(GoodsAndServicesTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (GoodAndServicesSubType is GoodsAndServicesSubType1Code GoodAndServicesSubTypeValue)
        {
            writer.WriteStartElement(null, "GoodAndSvcsSubTp", xmlNamespace );
            writer.WriteValue(GoodAndServicesSubTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (GoodAndServicesOtherSubType is IsoMax35Text GoodAndServicesOtherSubTypeValue)
        {
            writer.WriteStartElement(null, "GoodAndSvcsOthrSubTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(GoodAndServicesOtherSubTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SplitPaymentIndicator is IsoTrueFalseIndicator SplitPaymentIndicatorValue)
        {
            writer.WriteStartElement(null, "SpltPmtInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(SplitPaymentIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ReceiptRequestIndicator is IsoTrueFalseIndicator ReceiptRequestIndicatorValue)
        {
            writer.WriteStartElement(null, "RctReqInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ReceiptRequestIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ReceiptType is ReceiptType1Code ReceiptTypeValue)
        {
            writer.WriteStartElement(null, "RctTp", xmlNamespace );
            writer.WriteValue(ReceiptTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ReceiptDestination is IsoMax70Text ReceiptDestinationValue)
        {
            writer.WriteStartElement(null, "RctDstn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(ReceiptDestinationValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static SaleContext7 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
