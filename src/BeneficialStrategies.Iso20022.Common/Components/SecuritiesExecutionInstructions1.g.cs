//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SecuritiesExecutionInstructions1.  ISO2002 ID# _Tq4UXNp-Ed-ak6NoX_4Aeg_867867766.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Identifies the instructions for order handling.
/// </summary>
public partial record SecuritiesExecutionInstructions1
     : IIsoXmlSerilizable<SecuritiesExecutionInstructions1>
{
    #nullable enable
    
    /// <summary>
    /// Round-lot market or limit-price order that must be executed in its entirety or not at all; unlike Fill or Kill orders, AON orders are not treated as canceled if they are not executed as soon as represented in the Trading Crowd.
    /// </summary>
    public IsoAllOrNoneIndicator? AllOrNone { get; init; } 
    /// <summary>
    /// Refers to the client before trading in order to catch all verbal instructions on trading strategy usually because the strategy is too complex or cannot be represented in the trading application.
    /// </summary>
    public IsoYesNoIndicator? CallFirst { get; init; } 
    /// <summary>
    /// Allow crossing of an order.
    /// </summary>
    public IsoYesNoIndicator? Cross { get; init; } 
    /// <summary>
    /// Exchange or ECN required by the SEC to display limit orders in the public order book. A customer can choose not to have his limit order displayed to the public.
    /// </summary>
    public IsoYesNoIndicator? CustomerDisplay { get; init; } 
    /// <summary>
    /// Indicates whether the firm executing the order is held to best execution requirements and may be able to make some discretionary decisions.
    /// </summary>
    public IsoYesNoIndicator? Hold { get; init; } 
    /// <summary>
    /// Indicates whether the order is to be increased in shares on the ex-dividend date as a result of a stock dividend or distribution.
    /// </summary>
    public IsoYesNoIndicator? Increase { get; init; } 
    /// <summary>
    /// Identifies that the broker is restricted to dealing with other buy side firms.
    /// </summary>
    public IsoYesNoIndicator? InstitutionsOnly { get; init; } 
    /// <summary>
    /// Qualifies an asset (usually a payment instrument) of which rights cannot be transferred to a party other then the original debtor and creditor.
    /// </summary>
    public IsoYesNoIndicator? NonNegotiable { get; init; } 
    /// <summary>
    /// Indicates whether to execute parts of the order over the course of the day. Usually done with large block orders.
    /// </summary>
    public IsoYesNoIndicator? OverTheDay { get; init; } 
    /// <summary>
    /// An order that may participate in a transaction initiated by another party, but may not initiate a transaction.
    /// </summary>
    public IsoYesNoIndicator? ParticipateDontInitiate { get; init; } 
    /// <summary>
    /// Indicates that the Sender does not want all of the volume on the floor.
    /// </summary>
    public IsoYesNoIndicator? PercentOfVolume { get; init; } 
    /// <summary>
    /// An order to buy (or sell) a financial instrument which specifies the total amount to be bought (or sold) and the amount to be bought (or sold) at specified price variations.
    /// </summary>
    public IsoYesNoIndicator? Scale { get; init; } 
    /// <summary>
    /// Specifies the order limit based on the offer/bid at the time of the order submission.
    /// </summary>
    public StayOnSideType1Code? StayOnSide { get; init; } 
    /// <summary>
    /// Make the order active until notified.
    /// </summary>
    public IsoYesNoIndicator? Work { get; init; } 
    /// <summary>
    /// Used for listed equity securities. Buy or sell at prices that randomly occur on the floor, participating in what|trades the specialist and other players will allow.
    /// </summary>
    public IsoYesNoIndicator? GoAlong { get; init; } 
    /// <summary>
    /// Order to buy (sell) a security that specifies the total amount to be bought (sold) and the amount to be bought (sold) at successively decreasing (increasing) price intervals; often placed in order to average the price.
    /// </summary>
    public IsoYesNoIndicator? TryScale { get; init; } 
    /// <summary>
    /// Indicates whether to buy, to stop order to sell, or to stop limit order to sell that is not to be reduced in price by the amount of an ordinary cash dividend on the ex-dividend date. A "do not reduce" order applies only to ordinary cash dividends; it should be reduced for other distributions - such as when a stock goes ex stock dividend or ex rights.
    /// </summary>
    public IsoYesNoIndicator? DoNotReduce { get; init; } 
    /// <summary>
    /// If a system failure interrupts trading or order routing, attempt to cancel this order and attempt to reinstate this order, subject to time in force limitations. Note that depending on the type and severity of the failure, this might not be possible.
    /// </summary>
    public IsoYesNoIndicator? CancelOnSystemFailure { get; init; } 
    /// <summary>
    /// If trading in this instrument is halted, cancel this order and reinstate this order when/if trading resumes, subject to time in force limitations.
    /// </summary>
    public IsoYesNoIndicator? CancelOnTradingHalt { get; init; } 
    /// <summary>
    /// Indicates whether the broker has permission to handle and place the order in the market even if the broker already has its own proprietary orders for the same financial instrument placed in the market.
    /// </summary>
    public IsoYesNoIndicator? TradeAlong { get; init; } 
    /// <summary>
    /// Limit order that must be traded at the exact limit price specified without any price improvement.
    /// </summary>
    public IsoYesNoIndicator? StrictLimit { get; init; } 
    /// <summary>
    /// Disables validity checking of price fields for an order or change request.
    /// </summary>
    public IsoYesNoIndicator? IgnorePriceValidityChecks { get; init; } 
    /// <summary>
    /// If a system failure interrupts trading or order routing, attempt to reinstate this order, subject to time in force limitations. Depending on the type and severity of the failure, this might not be possible.
    /// </summary>
    public IsoYesNoIndicator? ReinstateOnSystemFailure { get; init; } 
    /// <summary>
    /// If trading in this instrument is halted, reinstate this order when/if trading resumes, subject to time in force limitations.
    /// </summary>
    public IsoYesNoIndicator? ReinstateOnTradingHalt { get; init; } 
    /// <summary>
    /// Indicates that an order should be cancelled if it is no longer the best bid if buying, or the best offer if selling.
    /// </summary>
    public IsoYesNoIndicator? CancelIfNotBest { get; init; } 
    /// <summary>
    /// Indicates that an order sent to one market may be routed by that market to other external markets, especially in cases where the order locks or crosses the market and it can be executed against another markets superior price. The absence of this instruction does not imply that an order should not be routed externally; rather, the order receivers default will apply.
    /// </summary>
    public IsoYesNoIndicator? ExternalRoutingAllowed { get; init; } 
    /// <summary>
    /// Indicates that an order sent to one market may never be routed by that market to other external markets. Should the order lock or cross the market but be unable to execute due to price protection reasons, a market may have to take alternate action, which might include rejecting the order, depending on the markets rules.The absence of this instruction does not imply that an order should be routed externally; rather, the order receivers default will apply.
    /// </summary>
    public IsoYesNoIndicator? ExternalRoutingNotAllowed { get; init; } 
    /// <summary>
    /// Indicates that the order can only hit the imbalance during a call auction. The imbalance is the remaining quantity when other buy and sell orders are matched at the auction clearing price.
    /// </summary>
    public IsoYesNoIndicator? ImbalanceOnly { get; init; } 
    /// <summary>
    /// Indicates that the party sending the order has taken responsibility for price protection, and the recipient of the order should execute it, if possible, without regard to protection of other markets prices. While the term "Intermarket sweep" is specific to the United States, it may be used in other markets, where appropriate, to indicate an order that should be executed without regard to price protection.
    /// </summary>
    public IsoYesNoIndicator? IntermarketSweep { get; init; } 
    /// <summary>
    /// Used when sending multiple orders indicating that you would be 'netting' the F/X later.
    /// </summary>
    public IsoYesNoIndicator? Netting { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AllOrNone is IsoAllOrNoneIndicator AllOrNoneValue)
        {
            writer.WriteStartElement(null, "AllOrNn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoAllOrNoneIndicator(AllOrNoneValue)); // data type AllOrNoneIndicator System.String
            writer.WriteEndElement();
        }
        if (CallFirst is IsoYesNoIndicator CallFirstValue)
        {
            writer.WriteStartElement(null, "CallFrst", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CallFirstValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Cross is IsoYesNoIndicator CrossValue)
        {
            writer.WriteStartElement(null, "Cross", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CrossValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CustomerDisplay is IsoYesNoIndicator CustomerDisplayValue)
        {
            writer.WriteStartElement(null, "CstmrDisp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CustomerDisplayValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Hold is IsoYesNoIndicator HoldValue)
        {
            writer.WriteStartElement(null, "Hld", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(HoldValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Increase is IsoYesNoIndicator IncreaseValue)
        {
            writer.WriteStartElement(null, "Incr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(IncreaseValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (InstitutionsOnly is IsoYesNoIndicator InstitutionsOnlyValue)
        {
            writer.WriteStartElement(null, "InstnsOnly", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(InstitutionsOnlyValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (NonNegotiable is IsoYesNoIndicator NonNegotiableValue)
        {
            writer.WriteStartElement(null, "NonNgtbl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(NonNegotiableValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (OverTheDay is IsoYesNoIndicator OverTheDayValue)
        {
            writer.WriteStartElement(null, "OverTheDay", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(OverTheDayValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ParticipateDontInitiate is IsoYesNoIndicator ParticipateDontInitiateValue)
        {
            writer.WriteStartElement(null, "PtcpDontInit", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ParticipateDontInitiateValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (PercentOfVolume is IsoYesNoIndicator PercentOfVolumeValue)
        {
            writer.WriteStartElement(null, "PctOfVol", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(PercentOfVolumeValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Scale is IsoYesNoIndicator ScaleValue)
        {
            writer.WriteStartElement(null, "Scale", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ScaleValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (StayOnSide is StayOnSideType1Code StayOnSideValue)
        {
            writer.WriteStartElement(null, "StayOnSd", xmlNamespace );
            writer.WriteValue(StayOnSideValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (Work is IsoYesNoIndicator WorkValue)
        {
            writer.WriteStartElement(null, "Work", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(WorkValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (GoAlong is IsoYesNoIndicator GoAlongValue)
        {
            writer.WriteStartElement(null, "GoAlong", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(GoAlongValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (TryScale is IsoYesNoIndicator TryScaleValue)
        {
            writer.WriteStartElement(null, "TryScale", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(TryScaleValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (DoNotReduce is IsoYesNoIndicator DoNotReduceValue)
        {
            writer.WriteStartElement(null, "DoNotRdc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DoNotReduceValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CancelOnSystemFailure is IsoYesNoIndicator CancelOnSystemFailureValue)
        {
            writer.WriteStartElement(null, "CclOnSysFailr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CancelOnSystemFailureValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CancelOnTradingHalt is IsoYesNoIndicator CancelOnTradingHaltValue)
        {
            writer.WriteStartElement(null, "CclOnTradgHalt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CancelOnTradingHaltValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (TradeAlong is IsoYesNoIndicator TradeAlongValue)
        {
            writer.WriteStartElement(null, "TradAlong", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(TradeAlongValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (StrictLimit is IsoYesNoIndicator StrictLimitValue)
        {
            writer.WriteStartElement(null, "StrctLmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(StrictLimitValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (IgnorePriceValidityChecks is IsoYesNoIndicator IgnorePriceValidityChecksValue)
        {
            writer.WriteStartElement(null, "IgnrPricVldtyChcks", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(IgnorePriceValidityChecksValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ReinstateOnSystemFailure is IsoYesNoIndicator ReinstateOnSystemFailureValue)
        {
            writer.WriteStartElement(null, "RinsttOnSysFailr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ReinstateOnSystemFailureValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ReinstateOnTradingHalt is IsoYesNoIndicator ReinstateOnTradingHaltValue)
        {
            writer.WriteStartElement(null, "RinsttOnTradgHalt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ReinstateOnTradingHaltValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (CancelIfNotBest is IsoYesNoIndicator CancelIfNotBestValue)
        {
            writer.WriteStartElement(null, "CclIfNotBest", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(CancelIfNotBestValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ExternalRoutingAllowed is IsoYesNoIndicator ExternalRoutingAllowedValue)
        {
            writer.WriteStartElement(null, "XtrnlRtgAllwd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExternalRoutingAllowedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ExternalRoutingNotAllowed is IsoYesNoIndicator ExternalRoutingNotAllowedValue)
        {
            writer.WriteStartElement(null, "XtrnlRtgNotAllwd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExternalRoutingNotAllowedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (ImbalanceOnly is IsoYesNoIndicator ImbalanceOnlyValue)
        {
            writer.WriteStartElement(null, "ImbalOnly", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ImbalanceOnlyValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (IntermarketSweep is IsoYesNoIndicator IntermarketSweepValue)
        {
            writer.WriteStartElement(null, "IntrmktSweep", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(IntermarketSweepValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Netting is IsoYesNoIndicator NettingValue)
        {
            writer.WriteStartElement(null, "Netg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(NettingValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static SecuritiesExecutionInstructions1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
