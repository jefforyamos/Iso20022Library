//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SecuritiesOption84.  ISO2002 ID# _ptJq_Ti7Eeydid5dcNPKvg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the security option of a corporate event.
/// </summary>
public partial record SecuritiesOption84
     : IIsoXmlSerilizable<SecuritiesOption84>
{
    #nullable enable
    
    /// <summary>
    /// Maximum quantity of financial instrument that may be instructed.
    /// </summary>
    public FinancialInstrumentQuantity44Choice_? MaximumQuantityToInstruct { get; init; } 
    /// <summary>
    /// Minimum quantity of financial instrument that may be instructed.
    /// </summary>
    public FinancialInstrumentQuantity44Choice_? MinimumQuantityToInstruct { get; init; } 
    /// <summary>
    /// Minimum multiple quantity of financial instrument that may be instructed.
    /// </summary>
    public FinancialInstrumentQuantity43Choice_? MinimumMultipleQuantityToInstruct { get; init; } 
    /// <summary>
    /// Quantity of equity that makes up the new board lot.
    /// </summary>
    public FinancialInstrumentQuantity43Choice_? NewBoardLotQuantity { get; init; } 
    /// <summary>
    /// New denomination of the equity following, for example, an increase or decrease in nominal value.
    /// </summary>
    public FinancialInstrumentQuantity43Choice_? NewDenominationQuantity { get; init; } 
    /// <summary>
    /// Specifies that if an order is prorated holders of odd lots who tender their full position will not have tendered position prorated but rather accepted in full.
    /// </summary>
    public FinancialInstrumentQuantity43Choice_? FrontEndOddLotQuantity { get; init; } 
    /// <summary>
    /// Represents the presence of a back end odd lot provision and the quantity of equity required after proration to be eligible for this privilege.
    /// </summary>
    public FinancialInstrumentQuantity43Choice_? BackEndOddLotQuantity { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (MaximumQuantityToInstruct is FinancialInstrumentQuantity44Choice_ MaximumQuantityToInstructValue)
        {
            writer.WriteStartElement(null, "MaxQtyToInst", xmlNamespace );
            MaximumQuantityToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumQuantityToInstruct is FinancialInstrumentQuantity44Choice_ MinimumQuantityToInstructValue)
        {
            writer.WriteStartElement(null, "MinQtyToInst", xmlNamespace );
            MinimumQuantityToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MinimumMultipleQuantityToInstruct is FinancialInstrumentQuantity43Choice_ MinimumMultipleQuantityToInstructValue)
        {
            writer.WriteStartElement(null, "MinMltplQtyToInst", xmlNamespace );
            MinimumMultipleQuantityToInstructValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewBoardLotQuantity is FinancialInstrumentQuantity43Choice_ NewBoardLotQuantityValue)
        {
            writer.WriteStartElement(null, "NewBrdLotQty", xmlNamespace );
            NewBoardLotQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NewDenominationQuantity is FinancialInstrumentQuantity43Choice_ NewDenominationQuantityValue)
        {
            writer.WriteStartElement(null, "NewDnmtnQty", xmlNamespace );
            NewDenominationQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FrontEndOddLotQuantity is FinancialInstrumentQuantity43Choice_ FrontEndOddLotQuantityValue)
        {
            writer.WriteStartElement(null, "FrntEndOddLotQty", xmlNamespace );
            FrontEndOddLotQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BackEndOddLotQuantity is FinancialInstrumentQuantity43Choice_ BackEndOddLotQuantityValue)
        {
            writer.WriteStartElement(null, "BckEndOddLotQty", xmlNamespace );
            BackEndOddLotQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SecuritiesOption84 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
