//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SecuritiesOptionSD4.  ISO2002 ID# _1gMIEjL3EeKU9IrkkToqcw_385488940.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional information regarding corporate action option securities movement details.
/// </summary>
public partial record SecuritiesOptionSD4
     : IIsoXmlSerilizable<SecuritiesOptionSD4>
{
    #nullable enable
    
    /// <summary>
    /// xPath to the element that is being extended.
    /// </summary>
    public required IsoMax350Text PlaceAndName { get; init; } 
    /// <summary>
    /// Unique number associated with a payout within an option.
    /// </summary>
    public required IsoExact3NumericText PayoutNumber { get; init; } 
    /// <summary>
    /// Describes the type of payout associated with the event.
    /// </summary>
    public required DTCCPayoutType2Code PayoutType { get; init; } 
    /// <summary>
    /// Workflow status of the payout.
    /// </summary>
    public required WorkflowStatus1Code PayoutStatus { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndName)); // data type Max350Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PyoutNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExact3NumericText(PayoutNumber)); // data type Exact3NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PyoutTp", xmlNamespace );
        writer.WriteValue(PayoutType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PyoutSts", xmlNamespace );
        writer.WriteValue(PayoutStatus.ToString()); // Enum value
        writer.WriteEndElement();
    }
    public static SecuritiesOptionSD4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
