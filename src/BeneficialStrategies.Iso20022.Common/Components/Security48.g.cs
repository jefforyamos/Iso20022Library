//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Security48.  ISO2002 ID# _A2yHacK3EeuFNp8LZAnorg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Data specific to securities being subject to the transaction.
/// </summary>
public partial record Security48
     : IIsoXmlSerilizable<Security48>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether the values defined as ISIN (International Securities Identification Number-ISO 6166) identifier are matching or not.
    /// </summary>
    public CompareISINIdentifier4? Identification { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as CFI (Classification of Financial Instruments-ISO 10962) identifier are matching or not.
    /// </summary>
    public CompareCFIIdentifier3? ClassificationType { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as decimal number are matching or not.
    /// </summary>
    public CompareDecimalNumber3? Quantity { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareAmountAndDirection2? NominalValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as collateral quality type code are matching or not.
    /// </summary>
    public CompareCollateralQualityType3? Quality { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as ISO date are matching or not.
    /// </summary>
    public CompareDate3? Maturity { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as LEI identifier are matching or not.
    /// </summary>
    public CompareOrganisationIdentification6? IssuerIdentification { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as country code are matching or not.
    /// </summary>
    public CompareCountryCode3? IssuerCountry { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as securities lending type are matching or not.
    /// </summary>
    public CompareSecuritiesLendingType3? Type { get; init; } 
    /// <summary>
    /// Specifies whether the the unit prices are matching or not.
    /// </summary>
    public CompareUnitPrice6? UnitPrice { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as true/false indicator are matching or not.
    /// </summary>
    public CompareTrueFalseIndicator3? ExclusiveArrangement { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CompareAmountAndDirection2? MarketValue { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as true/false indicator are matching or not.
    /// </summary>
    public CompareTrueFalseIndicator3? AvailableForCollateralReuse { get; init; } 
    /// <summary>
    /// Collateral haircut, a risk control measure applied to underlying collateral whereby the value of that underlying collateral is calculated as the market value of the assets reduced by a certain percentage. 
    /// In the case of margin lending, collateral haircut or margin requirement, a risk control measure applied to the entire collateral portfolio whereby the value of that underlying collateral is calculated as the market value of the assets reduced by a certain percentage. 
    /// Only actual values, as opposed to estimated or default values are to be reported for this attribute.
    /// </summary>
    public ComparePercentageRate3? HaircutOrMargin { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Identification is CompareISINIdentifier4 IdentificationValue)
        {
            writer.WriteStartElement(null, "Id", xmlNamespace );
            IdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClassificationType is CompareCFIIdentifier3 ClassificationTypeValue)
        {
            writer.WriteStartElement(null, "ClssfctnTp", xmlNamespace );
            ClassificationTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Quantity is CompareDecimalNumber3 QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            QuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NominalValue is CompareAmountAndDirection2 NominalValueValue)
        {
            writer.WriteStartElement(null, "NmnlVal", xmlNamespace );
            NominalValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Quality is CompareCollateralQualityType3 QualityValue)
        {
            writer.WriteStartElement(null, "Qlty", xmlNamespace );
            QualityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Maturity is CompareDate3 MaturityValue)
        {
            writer.WriteStartElement(null, "Mtrty", xmlNamespace );
            MaturityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IssuerIdentification is CompareOrganisationIdentification6 IssuerIdentificationValue)
        {
            writer.WriteStartElement(null, "IssrId", xmlNamespace );
            IssuerIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (IssuerCountry is CompareCountryCode3 IssuerCountryValue)
        {
            writer.WriteStartElement(null, "IssrCtry", xmlNamespace );
            IssuerCountryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Type is CompareSecuritiesLendingType3 TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            TypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UnitPrice is CompareUnitPrice6 UnitPriceValue)
        {
            writer.WriteStartElement(null, "UnitPric", xmlNamespace );
            UnitPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExclusiveArrangement is CompareTrueFalseIndicator3 ExclusiveArrangementValue)
        {
            writer.WriteStartElement(null, "ExclsvArrgmnt", xmlNamespace );
            ExclusiveArrangementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketValue is CompareAmountAndDirection2 MarketValueValue)
        {
            writer.WriteStartElement(null, "MktVal", xmlNamespace );
            MarketValueValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AvailableForCollateralReuse is CompareTrueFalseIndicator3 AvailableForCollateralReuseValue)
        {
            writer.WriteStartElement(null, "AvlblForCollReuse", xmlNamespace );
            AvailableForCollateralReuseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (HaircutOrMargin is ComparePercentageRate3 HaircutOrMarginValue)
        {
            writer.WriteStartElement(null, "HrcutOrMrgn", xmlNamespace );
            HaircutOrMarginValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Security48 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
