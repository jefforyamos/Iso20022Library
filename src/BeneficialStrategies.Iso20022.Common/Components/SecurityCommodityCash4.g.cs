//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SecurityCommodityCash4.  ISO2002 ID# _A1bcjcK3EeuFNp8LZAnorg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Indication of the type of assets subject of the transaction.
/// </summary>
public partial record SecurityCommodityCash4
     : IIsoXmlSerilizable<SecurityCommodityCash4>
{
    #nullable enable
    
    /// <summary>
    /// Data specific to securities being subject to the transaction.
    /// </summary>
    public Security48? Security { get; init; } 
    /// <summary>
    /// Data specific to commodities being subject to the transaction.
    /// </summary>
    public Commodity42? Commodity { get; init; } 
    /// <summary>
    /// Specifies whether the values defined as active or historic currency and amount are matching or not.
    /// </summary>
    public CashCompare3? Cash { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Security is Security48 SecurityValue)
        {
            writer.WriteStartElement(null, "Scty", xmlNamespace );
            SecurityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Commodity is Commodity42 CommodityValue)
        {
            writer.WriteStartElement(null, "Cmmdty", xmlNamespace );
            CommodityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Cash is CashCompare3 CashValue)
        {
            writer.WriteStartElement(null, "Csh", xmlNamespace );
            CashValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SecurityCommodityCash4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
