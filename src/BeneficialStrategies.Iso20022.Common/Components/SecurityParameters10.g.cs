//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SecurityParameters10.  ISO2002 ID# _usm58bTxEeeQy4o2AayYHg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Security parameters of the host downloading the key.
/// </summary>
public partial record SecurityParameters10
     : IIsoXmlSerilizable<SecurityParameters10>
{
    #nullable enable
    
    /// <summary>
    /// Random value from the host.
    /// </summary>
    public IsoMax140Binary? HostChallenge { get; init; } 
    /// <summary>
    /// Cryptographic key used to store in the ATM.
    /// </summary>
    public CryptographicKey12? Key { get; init; } 
    /// <summary>
    /// Element containing the signature.
    /// </summary>
    public ATMSignature2Choice_? SignatureChoice { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (HostChallenge is IsoMax140Binary HostChallengeValue)
        {
            writer.WriteStartElement(null, "HstChllng", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Binary(HostChallengeValue)); // data type Max140Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (Key is CryptographicKey12 KeyValue)
        {
            writer.WriteStartElement(null, "Key", xmlNamespace );
            KeyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SignatureChoice is ATMSignature2Choice_ SignatureChoiceValue)
        {
            writer.WriteStartElement(null, "SgntrChc", xmlNamespace );
            SignatureChoiceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SecurityParameters10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
