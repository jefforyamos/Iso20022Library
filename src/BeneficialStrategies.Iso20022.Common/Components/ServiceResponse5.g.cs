//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ServiceResponse5.  ISO2002 ID# _l07w0VS8EeuUvsVXOV79DQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// This component contains the response of the corresponding service request.
/// </summary>
public partial record ServiceResponse5
     : IIsoXmlSerilizable<ServiceResponse5>
{
    #nullable enable
    
    /// <summary>
    /// Environment of the transaction.
    /// </summary>
    public required CardPaymentEnvironment77 Environment { get; init; } 
    /// <summary>
    /// Context in which the transaction is performed (payment and sale).
    /// </summary>
    public required CardPaymentContext28 Context { get; init; } 
    /// <summary>
    /// Define the type of service response.
    /// </summary>
    public required RetailerService3Code ServiceContent { get; init; } 
    /// <summary>
    /// Data to respond to a Payment request.
    /// </summary>
    public PaymentResponse3? PaymentResponse { get; init; } 
    /// <summary>
    /// Response Data to a Reversal request.
    /// </summary>
    public ReversalResponse5? ReversalResponse { get; init; } 
    /// <summary>
    /// Response data to a balance inquiry service request.
    /// </summary>
    public BalanceInquiryResponse3? BalanceInquiryResponse { get; init; } 
    /// <summary>
    /// Response data to a loyalty service request.
    /// </summary>
    public LoyaltyResponse2? LoyaltyResponse { get; init; } 
    /// <summary>
    /// Response data to a Stored Value request.
    /// </summary>
    public StoredValueResponse4? StoredValueResponse { get; init; } 
    /// <summary>
    /// Content of the Batch Response message.
    /// </summary>
    public BatchResponse3? BatchResponse { get; init; } 
    /// <summary>
    /// Content of the Card Acquisition Response message.
    /// </summary>
    public CardAcquisitionResponse2? CardAcquisitionResponse { get; init; } 
    /// <summary>
    /// Result of the processing of the request.
    /// </summary>
    public required ResponseType11 Response { get; init; } 
    /// <summary>
    /// Additional information incorporated as an extension to the message.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Envt", xmlNamespace );
        Environment.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Cntxt", xmlNamespace );
        Context.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SvcCntt", xmlNamespace );
        writer.WriteValue(ServiceContent.ToString()); // Enum value
        writer.WriteEndElement();
        if (PaymentResponse is PaymentResponse3 PaymentResponseValue)
        {
            writer.WriteStartElement(null, "PmtRspn", xmlNamespace );
            PaymentResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReversalResponse is ReversalResponse5 ReversalResponseValue)
        {
            writer.WriteStartElement(null, "RvslRspn", xmlNamespace );
            ReversalResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BalanceInquiryResponse is BalanceInquiryResponse3 BalanceInquiryResponseValue)
        {
            writer.WriteStartElement(null, "BalNqryRspn", xmlNamespace );
            BalanceInquiryResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LoyaltyResponse is LoyaltyResponse2 LoyaltyResponseValue)
        {
            writer.WriteStartElement(null, "LltyRspn", xmlNamespace );
            LoyaltyResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StoredValueResponse is StoredValueResponse4 StoredValueResponseValue)
        {
            writer.WriteStartElement(null, "StordValRspn", xmlNamespace );
            StoredValueResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BatchResponse is BatchResponse3 BatchResponseValue)
        {
            writer.WriteStartElement(null, "BtchRspn", xmlNamespace );
            BatchResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CardAcquisitionResponse is CardAcquisitionResponse2 CardAcquisitionResponseValue)
        {
            writer.WriteStartElement(null, "CardAcqstnRspn", xmlNamespace );
            CardAcquisitionResponseValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Rspn", xmlNamespace );
        Response.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ServiceResponse5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
