//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SettlementData2.  ISO2002 ID# _TJMjldp-Ed-ak6NoX_4Aeg_1219011122.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information on the settlement of a treasury trade.
/// </summary>
public partial record SettlementData2
     : IIsoXmlSerilizable<SettlementData2>
{
    #nullable enable
    
    /// <summary>
    /// Unique reference supplied by the trade processing system.
    /// </summary>
    public IsoMax35Text? CashFlowUniqueReference { get; init; } 
    /// <summary>
    /// Unique reference assigned by a settlement system.
    /// </summary>
    public IsoMax35Text? SettlementSystemUniqueReference { get; init; } 
    /// <summary>
    /// Original amount which should be settled. This information should be provided when the trade is partially settled or when the settlement is rejected.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAndAmount SettlementAmount { get; init; } 
    /// <summary>
    /// Funds which the trading side is expected to receive.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? SettledAmount { get; init; } 
    /// <summary>
    /// Amount that cannot be settled by a settlement system.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? RejectedAmount { get; init; } 
    /// <summary>
    /// Specifies the party that pays the settlement amount.
    /// </summary>
    public required PartyIdentification8Choice_ PayingParty { get; init; } 
    /// <summary>
    /// Specifies the party that receives the settlement amount.
    /// </summary>
    public required PartyIdentification8Choice_ ReceivingParty { get; init; } 
    /// <summary>
    /// Date on which the settlement is due to settle.
    /// </summary>
    public required IsoISODate SettlementDate { get; init; } 
    /// <summary>
    /// Specifies the status of a settlement eg rejected, settled or awaiting authorisation.
    /// </summary>
    public required SettlementStatus1Code SettlementStatus { get; init; } 
    /// <summary>
    /// Description of the status of the settlement of a trade when no coded form is available.
    /// </summary>
    public required IsoExtended350Code ExtendedSettlementStatus { get; init; } 
    /// <summary>
    /// Additional information about the cause of the rejection of a settlement.
    /// </summary>
    public IsoMax70Text? SettlementStatusSubType { get; init; } 
    /// <summary>
    /// Cash settlement is suspended.
    /// </summary>
    public required IsoYesNoIndicator Suspended { get; init; } 
    /// <summary>
    /// Cash settlement is pending.
    /// </summary>
    public required IsoYesNoIndicator Pending { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CashFlowUniqueReference is IsoMax35Text CashFlowUniqueReferenceValue)
        {
            writer.WriteStartElement(null, "CshFlowUnqRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CashFlowUniqueReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SettlementSystemUniqueReference is IsoMax35Text SettlementSystemUniqueReferenceValue)
        {
            writer.WriteStartElement(null, "SttlmSysUnqRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SettlementSystemUniqueReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(SettlementAmount)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (SettledAmount is IsoActiveOrHistoricCurrencyAndAmount SettledAmountValue)
        {
            writer.WriteStartElement(null, "SttldAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(SettledAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (RejectedAmount is IsoActiveOrHistoricCurrencyAndAmount RejectedAmountValue)
        {
            writer.WriteStartElement(null, "RjctdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(RejectedAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PngPty", xmlNamespace );
        PayingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RcvgPty", xmlNamespace );
        ReceivingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SttlmDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(SettlementDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SttlmSts", xmlNamespace );
        writer.WriteValue(SettlementStatus.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XtndedSttlmSts", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedSettlementStatus)); // data type Extended350Code System.String
        writer.WriteEndElement();
        if (SettlementStatusSubType is IsoMax70Text SettlementStatusSubTypeValue)
        {
            writer.WriteStartElement(null, "SttlmStsSubTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(SettlementStatusSubTypeValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Sspd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(Suspended)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Pdg", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(Pending)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static SettlementData2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
