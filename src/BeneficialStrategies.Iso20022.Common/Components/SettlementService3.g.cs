//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SettlementService3.  ISO2002 ID# _wGxUkSbUEeyhZIgCcGlTyA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Attributes of a settlement service.
/// </summary>
public partial record SettlementService3
     : IIsoXmlSerilizable<SettlementService3>
{
    #nullable enable
    
    /// <summary>
    /// Type of settlement service proposed.
    /// </summary>
    public SettlementServiceMode1? SettlementServiceProposed { get; init; } 
    /// <summary>
    /// Settlement service actually applied to the transaction.
    /// </summary>
    public SettlementServiceMode1? SettlementServiceApplied { get; init; } 
    /// <summary>
    /// Dates related to the settlement service related to the transaction.
    /// </summary>
    public SettlementServiceDate2? SettlementServiceDates { get; init; } 
    /// <summary>
    /// Entity in charge of the settlement reporting service.
    /// </summary>
    public SettlementReportingEntity1? SettlementReportingEntity { get; init; } 
    /// <summary>
    /// Additional Settlement Information.
    /// </summary>
    public AdditionalData1? AdditionalSettlementInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SettlementServiceProposed is SettlementServiceMode1 SettlementServiceProposedValue)
        {
            writer.WriteStartElement(null, "SttlmSvcPropsd", xmlNamespace );
            SettlementServiceProposedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementServiceApplied is SettlementServiceMode1 SettlementServiceAppliedValue)
        {
            writer.WriteStartElement(null, "SttlmSvcApld", xmlNamespace );
            SettlementServiceAppliedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementServiceDates is SettlementServiceDate2 SettlementServiceDatesValue)
        {
            writer.WriteStartElement(null, "SttlmSvcDts", xmlNamespace );
            SettlementServiceDatesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementReportingEntity is SettlementReportingEntity1 SettlementReportingEntityValue)
        {
            writer.WriteStartElement(null, "SttlmRptgNtty", xmlNamespace );
            SettlementReportingEntityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalSettlementInformation is AdditionalData1 AdditionalSettlementInformationValue)
        {
            writer.WriteStartElement(null, "AddtlSttlmInf", xmlNamespace );
            AdditionalSettlementInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SettlementService3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
