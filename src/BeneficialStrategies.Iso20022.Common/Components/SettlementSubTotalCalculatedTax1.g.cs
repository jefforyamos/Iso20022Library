//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SettlementSubTotalCalculatedTax1.  ISO2002 ID# _S0j3JQEcEeCQm6a_G2yO_w_-1391363136.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the subtotal calculated tax applicable for this settlement.
/// </summary>
public partial record SettlementSubTotalCalculatedTax1
     : IIsoXmlSerilizable<SettlementSubTotalCalculatedTax1>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax applied.
    /// </summary>
    public IsoMax4Text? TypeCode { get; init; } 
    /// <summary>
    /// Reference used to identify the nature of tax levied, such as Value Added Tax (VAT).
    /// </summary>
    public IsoMax4Text? CategoryCode { get; init; } 
    /// <summary>
    /// Monetary value resulting from the calculation of this tax, levy or duty.
    /// </summary>
    public IsoCurrencyAndAmount? CalculatedAmount { get; init; } 
    /// <summary>
    /// Monetary value used as the basis on which this tax, levy or duty is calculated.
    /// </summary>
    public IsoCurrencyAndAmount? BasisAmount { get; init; } 
    /// <summary>
    /// Rate used to calculate the amount of this tax, levy or duty.
    /// </summary>
    public IsoPercentageRate? CalculatedRate { get; init; } 
    /// <summary>
    /// Reason for a tax exemption.
    /// </summary>
    public TaxExemptionReason1? ExemptionReason { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TypeCode is IsoMax4Text TypeCodeValue)
        {
            writer.WriteStartElement(null, "TpCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4Text(TypeCodeValue)); // data type Max4Text System.String
            writer.WriteEndElement();
        }
        if (CategoryCode is IsoMax4Text CategoryCodeValue)
        {
            writer.WriteStartElement(null, "CtgyCd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4Text(CategoryCodeValue)); // data type Max4Text System.String
            writer.WriteEndElement();
        }
        if (CalculatedAmount is IsoCurrencyAndAmount CalculatedAmountValue)
        {
            writer.WriteStartElement(null, "ClctdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(CalculatedAmountValue)); // data type CurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (BasisAmount is IsoCurrencyAndAmount BasisAmountValue)
        {
            writer.WriteStartElement(null, "BsisAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(BasisAmountValue)); // data type CurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (CalculatedRate is IsoPercentageRate CalculatedRateValue)
        {
            writer.WriteStartElement(null, "ClctdRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(CalculatedRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (ExemptionReason is TaxExemptionReason1 ExemptionReasonValue)
        {
            writer.WriteStartElement(null, "XmptnRsn", xmlNamespace );
            ExemptionReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SettlementSubTotalCalculatedTax1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
