//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SettlementTax1.  ISO2002 ID# _S0j3LAEcEeCQm6a_G2yO_w_811596505.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Species the tax applicable for this settlement.
/// </summary>
public partial record SettlementTax1
     : IIsoXmlSerilizable<SettlementTax1>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax applied.
    /// </summary>
    public TaxTypeFormat1Choice_? TypeCode { get; init; } 
    /// <summary>
    /// Monetary value resulting from the calculation of this tax, levy or duty.
    /// </summary>
    public IsoCurrencyAndAmount? CalculatedAmount { get; init; } 
    /// <summary>
    /// Monetary value used as the basis on which this tax, levy or duty is calculated.
    /// </summary>
    public IsoCurrencyAndAmount? BasisAmount { get; init; } 
    /// <summary>
    /// Date of the tax point when this tax, levy or duty becomes applicable.
    /// </summary>
    public IsoISODate? TaxPointDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TypeCode is TaxTypeFormat1Choice_ TypeCodeValue)
        {
            writer.WriteStartElement(null, "TpCd", xmlNamespace );
            TypeCodeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CalculatedAmount is IsoCurrencyAndAmount CalculatedAmountValue)
        {
            writer.WriteStartElement(null, "ClctdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(CalculatedAmountValue)); // data type CurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (BasisAmount is IsoCurrencyAndAmount BasisAmountValue)
        {
            writer.WriteStartElement(null, "BsisAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoCurrencyAndAmount(BasisAmountValue)); // data type CurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TaxPointDate is IsoISODate TaxPointDateValue)
        {
            writer.WriteStartElement(null, "TaxPtDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(TaxPointDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
    }
    public static SettlementTax1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
