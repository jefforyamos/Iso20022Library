//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ShippingPackage2.  ISO2002 ID# _l2yNwZF_EeukDPgU2BMkjQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains the details of the package
/// </summary>
public partial record ShippingPackage2
     : IIsoXmlSerilizable<ShippingPackage2>
{
    #nullable enable
    
    /// <summary>
    /// Contains the identification number for the packages being shipped and is also used for pickup number. 
    /// </summary>
    public IsoMax70Text? TrackingNumber { get; init; } 
    /// <summary>
    /// Supplier or provider of the delivery services.
    /// </summary>
    public PartyIdentification260? Supplier { get; init; } 
    /// <summary>
    /// Contains the date the package is picked up.
    /// </summary>
    public IsoISODate? PickupDate { get; init; } 
    /// <summary>
    /// Contains the time the package is picked up.
    /// </summary>
    public IsoISOTime? PickupTime { get; init; } 
    /// <summary>
    /// Delivery information. 
    /// </summary>
    public DeliveryInformation4? Delivery { get; init; } 
    /// <summary>
    /// Weight details.
    /// </summary>
    public UnitOfMeasure2? Weight { get; init; } 
    /// <summary>
    /// Contains the product details.
    /// </summary>
    public Product7? Product { get; init; } 
    /// <summary>
    /// Indicates whether or not insurance was purchased. 
    /// </summary>
    public IsoTrueFalseIndicator? InsuranceIndicator { get; init; } 
    /// <summary>
    /// Amount of insurance.
    /// </summary>
    public IsoImpliedCurrencyAndAmount? InsuranceAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TrackingNumber is IsoMax70Text TrackingNumberValue)
        {
            writer.WriteStartElement(null, "TrckgNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(TrackingNumberValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (Supplier is PartyIdentification260 SupplierValue)
        {
            writer.WriteStartElement(null, "Spplr", xmlNamespace );
            SupplierValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PickupDate is IsoISODate PickupDateValue)
        {
            writer.WriteStartElement(null, "PckpDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(PickupDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (PickupTime is IsoISOTime PickupTimeValue)
        {
            writer.WriteStartElement(null, "PckpTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(PickupTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (Delivery is DeliveryInformation4 DeliveryValue)
        {
            writer.WriteStartElement(null, "Dlvry", xmlNamespace );
            DeliveryValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Weight is UnitOfMeasure2 WeightValue)
        {
            writer.WriteStartElement(null, "Wght", xmlNamespace );
            WeightValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Product is Product7 ProductValue)
        {
            writer.WriteStartElement(null, "Pdct", xmlNamespace );
            ProductValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InsuranceIndicator is IsoTrueFalseIndicator InsuranceIndicatorValue)
        {
            writer.WriteStartElement(null, "InsrncInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(InsuranceIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (InsuranceAmount is IsoImpliedCurrencyAndAmount InsuranceAmountValue)
        {
            writer.WriteStartElement(null, "InsrncAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(InsuranceAmountValue)); // data type ImpliedCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static ShippingPackage2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
