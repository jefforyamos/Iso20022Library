//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SignedData3.  ISO2002 ID# _SIFo4VW8EeOlEMHvp-ipJg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Digital signature of data, with an asymmetric key.
/// </summary>
public partial record SignedData3
     : IIsoXmlSerilizable<SignedData3>
{
    #nullable enable
    
    /// <summary>
    /// Version of the data structure.
    /// </summary>
    public IsoNumber? Version { get; init; } 
    /// <summary>
    /// Identification of a digest algorithm to apply before signature.
    /// </summary>
    public AlgorithmIdentification5? DigestAlgorithm { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _SS0SM1W8EeOlEMHvp-ipJg
    /// <summary>
    /// Data to sign.
    /// </summary>
    public required EncapsulatedContent2 EncapsulatedContent { get; init; } 
    /// <summary>
    /// Chain of X.509 certificates.
    /// </summary>
    public IsoMax3000Binary? Certificate { get; init; } 
    /// <summary>
    /// Entity who has signed the data.
    /// </summary>
    public Signer2? Signer { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _SS0SOVW8EeOlEMHvp-ipJg
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Version is IsoNumber VersionValue)
        {
            writer.WriteStartElement(null, "Vrsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(VersionValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        // Not sure how to serialize DigestAlgorithm, multiplicity Unknown
        writer.WriteStartElement(null, "NcpsltdCntt", xmlNamespace );
        EncapsulatedContent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Certificate is IsoMax3000Binary CertificateValue)
        {
            writer.WriteStartElement(null, "Cert", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax3000Binary(CertificateValue)); // data type Max3000Binary System.Byte[]
            writer.WriteEndElement();
        }
        // Not sure how to serialize Signer, multiplicity Unknown
    }
    public static SignedData3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
