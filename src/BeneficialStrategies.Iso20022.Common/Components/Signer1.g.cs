//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Signer1.  ISO2002 ID# _SwZI3gEcEeCQm6a_G2yO_w_1551867315.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Entity who has signed the data and its digital signature.
/// </summary>
public partial record Signer1
     : IIsoXmlSerilizable<Signer1>
{
    #nullable enable
    
    /// <summary>
    /// Version of the Cryptographic Message Syntax (CMS) data structure.
    /// </summary>
    public IsoNumber? Version { get; init; } 
    /// <summary>
    /// Identification of the entity who has signed the data.
    /// </summary>
    public required CertificateIdentifier1 SignerIdentification { get; init; } 
    /// <summary>
    /// Identification of a digest algorithm to apply before signature.
    /// </summary>
    public required AlgorithmIdentification1 DigestAlgorithm { get; init; } 
    /// <summary>
    /// Cryptographic digital signature algorithm.
    /// </summary>
    public required AlgorithmIdentification1 SignatureAlgorithm { get; init; } 
    /// <summary>
    /// Digital signature.
    /// </summary>
    public required IsoMax500Binary Signature { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Version is IsoNumber VersionValue)
        {
            writer.WriteStartElement(null, "Vrsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(VersionValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "SgnrId", xmlNamespace );
        SignerIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DgstAlgo", xmlNamespace );
        DigestAlgorithm.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SgntrAlgo", xmlNamespace );
        SignatureAlgorithm.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sgntr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax500Binary(Signature)); // data type Max500Binary System.Byte[]
        writer.WriteEndElement();
    }
    public static Signer1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
