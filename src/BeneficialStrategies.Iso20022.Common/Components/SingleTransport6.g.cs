//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SingleTransport6.  ISO2002 ID# _hmI9AdQwEeK0PPbKncCqzA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies individually each leg of a transport of goods.
/// </summary>
public partial record SingleTransport6
     : IIsoXmlSerilizable<SingleTransport6>
{
    #nullable enable
    
    /// <summary>
    /// Information related to the transportation of goods by air.
    /// </summary>
    public TransportByAir4? TransportByAir { get; init; } 
    /// <summary>
    /// Information related for the transportation of goods by sea.
    /// </summary>
    public TransportBySea5? TransportBySea { get; init; } 
    /// <summary>
    /// Moving of goods or people from one place to another by vehicle.
    /// </summary>
    public TransportByRoad4? TransportByRoad { get; init; } 
    /// <summary>
    /// Information related to the transportation of goods by rail.
    /// </summary>
    public TransportByRail4? TransportByRail { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TransportByAir is TransportByAir4 TransportByAirValue)
        {
            writer.WriteStartElement(null, "TrnsprtByAir", xmlNamespace );
            TransportByAirValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransportBySea is TransportBySea5 TransportBySeaValue)
        {
            writer.WriteStartElement(null, "TrnsprtBySea", xmlNamespace );
            TransportBySeaValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransportByRoad is TransportByRoad4 TransportByRoadValue)
        {
            writer.WriteStartElement(null, "TrnsprtByRoad", xmlNamespace );
            TransportByRoadValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransportByRail is TransportByRail4 TransportByRailValue)
        {
            writer.WriteStartElement(null, "TrnsprtByRail", xmlNamespace );
            TransportByRailValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SingleTransport6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
