//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for StandingOrder2.  ISO2002 ID# _7-RqxKMgEeCJ6YNENx4h-w_-305246324.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Defines the detailed attributes of a standing order.
/// </summary>
public partial record StandingOrder2
{
    #nullable enable
    
    /// <summary>
    /// Amount of money and currency to be transferred when a payment instruction is created as a result of a standing order.
    /// </summary>
    public required IAmount2Choice Amount { get; init; } 
    /// <summary>
    /// Specifies if the account is debited or credited by the standing order.
    /// </summary>
    public required CreditDebitCode CreditDebitIndicator { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification for a standing order, as assigned by the account servicer or the account owner.
    /// </summary>
    public ActiveCurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Type of the standing order.
    /// </summary>
    public IStandingOrderType1Choice? Type { get; init; } 
    /// <summary>
    /// Liquidity transfer origin or destination account within the pool of accounts under management of the requestor.
    /// </summary>
    public IAccountIdentification4Choice? AssociatedPoolAccount { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification for a standing order, as assigned by the account servicer or the account owner.
    /// </summary>
    public IsoMax35Text? Reference { get; init; } 
    /// <summary>
    /// Regularity with which payment instructions are to be created and processed as a result of the standing order, such as daily, weekly, or monthly.
    /// </summary>
    public Frequency2Code? Frequency { get; init; } 
    /// <summary>
    /// Dates during which the standing order is in effect.
    /// </summary>
    public DatePeriodDetails1? ValidityPeriod { get; init; } 
    /// <summary>
    /// Specifies if the account is debited or credited by the standing order.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? SystemMember { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification for the account between the account owner and the account servicer.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification5? ResponsibleParty { get; init; } 
    /// <summary>
    /// Unique identification to unambiguously identify the link set in which the standing order is defined. The link set is a collection of standing order defined in a specific sequence.
    /// </summary>
    public IsoMax35Text? LinkSetIdentification { get; init; } 
    /// <summary>
    /// Unique identification to unambiguously identify liquidity transfer standing order within the link set.
    /// </summary>
    public IsoMax35Text? LinkSetOrderIdentification { get; init; } 
    /// <summary>
    /// Specifies the sequence in which the system will execute the liquidity transfers standing order within the link set when additional liquidity is required.
    /// </summary>
    public IsoNumber? LinkSetOrderSequence { get; init; } 
    /// <summary>
    /// Defines whether the standing order is executed through a time-based or an event-based trigger.
    /// </summary>
    public IExecutionType1Choice? ExecutionType { get; init; } 
    /// <summary>
    /// Cash account credited from a standing order mechanism.
    /// </summary>
    public CashAccount24? CreditorAccount { get; init; } 
    /// <summary>
    /// Cash account debited from a standing order mechanism.
    /// </summary>
    public CashAccount24? DebtorAccount { get; init; } 
    /// <summary>
    /// Overall amount of "not yet executed" predefined liquidity transfer orders or "defined" by a system participant in its sphere of responsibility within the system.
    /// </summary>
    public StandingOrderTotalAmount1? TotalsPerStandingOrder { get; init; } 
    /// <summary>
    /// Indicates whether the liquidity transfer standing order is defined as a zero sweeping order. When true, the liquidity transfer standing order will transfer all amount of money out of the account so the resulting balance is zero.
    /// </summary>
    public IsoTrueFalseIndicator? ZeroSweepIndicator { get; init; } 
    
    #nullable disable
}
