//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for StandingOrder7.  ISO2002 ID# _parnIXXtEei3jO6riKEVXg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// New standing order values.
/// </summary>
[DataContract]
[XmlType]
public partial record StandingOrder7
{
    #nullable enable
    
    /// <summary>
    /// Amount of money and currency to be transferred when a payment instruction is created as a result of a standing order.
    /// </summary>
    [DataMember]
    public Amount2Choice_? Amount { get; init; } 
    /// <summary>
    /// Party to which an amount of money is due.
    /// </summary>
    [DataMember]
    public BranchAndFinancialInstitutionIdentification6? Creditor { get; init; } 
    /// <summary>
    /// Cash account credited from a standing order mechanism.
    /// </summary>
    [DataMember]
    public CashAccount38? CreditorAccount { get; init; } 
    /// <summary>
    /// Party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    [DataMember]
    public BranchAndFinancialInstitutionIdentification6? Debtor { get; init; } 
    /// <summary>
    /// Cash account debited from a standing order mechanism.
    /// </summary>
    [DataMember]
    public CashAccount38? DebtorAccount { get; init; } 
    /// <summary>
    /// Defines whether the standing order is executed through a time-based or an event-based trigger.
    /// </summary>
    [DataMember]
    public ExecutionType1Choice_? ExecutionType { get; init; } 
    /// <summary>
    /// Regularity with which payment instructions are to be created and processed as a result of the standing order, such as daily, weekly, or monthly.
    /// </summary>
    [DataMember]
    public Frequency2Code? Frequency { get; init; } 
    /// <summary>
    /// Dates during which the standing order is in effect.
    /// </summary>
    [DataMember]
    public DatePeriod2Choice_? ValidityPeriod { get; init; } 
    /// <summary>
    /// Indicates whether the standing order is defined as a zero sweeping order. When true, the liquidity transfer standing order will transfer all amount of money out of the account so the resulting balance is zero.
    /// </summary>
    [DataMember]
    public IsoTrueFalseIndicator? ZeroSweepIndicator { get; init; } 
    
    #nullable disable
}
