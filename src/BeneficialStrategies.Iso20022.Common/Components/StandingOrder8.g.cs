//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for StandingOrder8.  ISO2002 ID# _eQ74wdcZEeqRFcf2R4bPBw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// New standing order values.
/// </summary>
public partial record StandingOrder8
     : IIsoXmlSerilizable<StandingOrder8>
{
    #nullable enable
    
    /// <summary>
    /// Amount of money and currency to be transferred when a payment instruction is created as a result of a standing order.
    /// </summary>
    public Amount2Choice_? Amount { get; init; } 
    /// <summary>
    /// Party to which an amount of money is due.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? Creditor { get; init; } 
    /// <summary>
    /// Cash account credited from a standing order mechanism.
    /// </summary>
    public CashAccount40? CreditorAccount { get; init; } 
    /// <summary>
    /// Party that owes an amount of money to the (ultimate) creditor.
    /// </summary>
    public BranchAndFinancialInstitutionIdentification6? Debtor { get; init; } 
    /// <summary>
    /// Cash account debited from a standing order mechanism.
    /// </summary>
    public CashAccount40? DebtorAccount { get; init; } 
    /// <summary>
    /// Defines whether the standing order is executed through a time-based or an event-based trigger.
    /// </summary>
    public ExecutionType1Choice_? ExecutionType { get; init; } 
    /// <summary>
    /// Regularity with which payment instructions are to be created and processed as a result of the standing order, such as daily, weekly, or monthly.
    /// </summary>
    public Frequency2Code? Frequency { get; init; } 
    /// <summary>
    /// Dates during which the standing order is in effect.
    /// </summary>
    public DatePeriod2Choice_? ValidityPeriod { get; init; } 
    /// <summary>
    /// Indicates whether the standing order is defined as a zero sweeping order. When true, the liquidity transfer standing order will transfer all amount of money out of the account so the resulting balance is zero.
    /// </summary>
    public IsoTrueFalseIndicator? ZeroSweepIndicator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Amount is Amount2Choice_ AmountValue)
        {
            writer.WriteStartElement(null, "Amt", xmlNamespace );
            AmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Creditor is BranchAndFinancialInstitutionIdentification6 CreditorValue)
        {
            writer.WriteStartElement(null, "Cdtr", xmlNamespace );
            CreditorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CreditorAccount is CashAccount40 CreditorAccountValue)
        {
            writer.WriteStartElement(null, "CdtrAcct", xmlNamespace );
            CreditorAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Debtor is BranchAndFinancialInstitutionIdentification6 DebtorValue)
        {
            writer.WriteStartElement(null, "Dbtr", xmlNamespace );
            DebtorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DebtorAccount is CashAccount40 DebtorAccountValue)
        {
            writer.WriteStartElement(null, "DbtrAcct", xmlNamespace );
            DebtorAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExecutionType is ExecutionType1Choice_ ExecutionTypeValue)
        {
            writer.WriteStartElement(null, "ExctnTp", xmlNamespace );
            ExecutionTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Frequency is Frequency2Code FrequencyValue)
        {
            writer.WriteStartElement(null, "Frqcy", xmlNamespace );
            writer.WriteValue(FrequencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ValidityPeriod is DatePeriod2Choice_ ValidityPeriodValue)
        {
            writer.WriteStartElement(null, "VldtyPrd", xmlNamespace );
            ValidityPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ZeroSweepIndicator is IsoTrueFalseIndicator ZeroSweepIndicatorValue)
        {
            writer.WriteStartElement(null, "ZeroSweepInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ZeroSweepIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
    }
    public static StandingOrder8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
