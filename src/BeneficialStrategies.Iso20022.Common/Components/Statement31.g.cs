//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Statement31.  ISO2002 ID# _QllXWNp-Ed-ak6NoX_4Aeg_530575505.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides statement details such as the account owner identification (ie, the clearing member identification) and optionaly the non clearing member identification, the clearing account or the list of trade legs.
/// </summary>
public partial record Statement31
     : IIsoXmlSerilizable<Statement31>
{
    #nullable enable
    
    /// <summary>
    /// Identification that is common to all pages of a statement.
    /// </summary>
    public required IsoMax35Text StatementIdentification { get; init; } 
    /// <summary>
    /// Date of the statement.
    /// </summary>
    public required DateAndDateTimeChoice_ StatementDateAndTime { get; init; } 
    /// <summary>
    /// Indicates whether the statement is complete or contains changes only.
    /// </summary>
    public required StatementUpdateType1Code UpdateType { get; init; } 
    /// <summary>
    /// Frequency of the statement.
    /// </summary>
    public required EventFrequency6Code Frequency { get; init; } 
    /// <summary>
    /// Sequential number of the statement.
    /// </summary>
    public IsoExact5NumericText? ReportNumber { get; init; } 
    /// <summary>
    /// Indicates whether there is activity or information update reported in the statement.
    /// </summary>
    public required IsoYesNoIndicator ActivityIndicator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "StmtId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(StatementIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "StmtDtAndTm", xmlNamespace );
        StatementDateAndTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "UpdTp", xmlNamespace );
        writer.WriteValue(UpdateType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Frqcy", xmlNamespace );
        writer.WriteValue(Frequency.ToString()); // Enum value
        writer.WriteEndElement();
        if (ReportNumber is IsoExact5NumericText ReportNumberValue)
        {
            writer.WriteStartElement(null, "RptNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact5NumericText(ReportNumberValue)); // data type Exact5NumericText System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ActvtyInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ActivityIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static Statement31 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
