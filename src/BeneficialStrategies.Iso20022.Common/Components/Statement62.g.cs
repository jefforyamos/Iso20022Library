//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Statement62.  ISO2002 ID# _nocSUbPuEeelzbgsFa3sqQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Characteristics of the statement.
/// </summary>
public partial record Statement62
     : IIsoXmlSerilizable<Statement62>
{
    #nullable enable
    
    /// <summary>
    /// Identification assigned by the portfolio transfer counterpart to unambiguously identify a portfolio transfer notification.
    /// </summary>
    public IsoMax35Text? CounterpartyPortfolioTransferNotificationReference { get; init; } 
    /// <summary>
    /// Sequential number of the report.
    /// </summary>
    public Number3Choice_? ReportNumber { get; init; } 
    /// <summary>
    /// Reference common to all pages of a statement.
    /// </summary>
    public IsoMax35Text? StatementIdentification { get; init; } 
    /// <summary>
    /// Date and time of the statement.
    /// </summary>
    public required DateAndDateTime2Choice_ StatementDateTime { get; init; } 
    /// <summary>
    /// Indicates whether the statement is complete or contains changes only.
    /// </summary>
    public UpdateType15Choice_? UpdateType { get; init; } 
    /// <summary>
    /// Indicates whether there is activity or information update reported in the statement.
    /// </summary>
    public required IsoYesNoIndicator ActivityIndicator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CounterpartyPortfolioTransferNotificationReference is IsoMax35Text CounterpartyPortfolioTransferNotificationReferenceValue)
        {
            writer.WriteStartElement(null, "CtrPtyPrtflTrfNtfctnRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CounterpartyPortfolioTransferNotificationReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ReportNumber is Number3Choice_ ReportNumberValue)
        {
            writer.WriteStartElement(null, "RptNb", xmlNamespace );
            ReportNumberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatementIdentification is IsoMax35Text StatementIdentificationValue)
        {
            writer.WriteStartElement(null, "StmtId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(StatementIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StmtDtTm", xmlNamespace );
        StatementDateTime.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (UpdateType is UpdateType15Choice_ UpdateTypeValue)
        {
            writer.WriteStartElement(null, "UpdTp", xmlNamespace );
            UpdateTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ActvtyInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ActivityIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
    }
    public static Statement62 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
