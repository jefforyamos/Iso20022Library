//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Statement83.  ISO2002 ID# _xeRfEQzJEeuTPv2wqaotHg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Characteristics of the statement.
/// </summary>
public partial record Statement83
     : IIsoXmlSerilizable<Statement83>
{
    #nullable enable
    
    /// <summary>
    /// Date or period of the statement.
    /// </summary>
    public DateAndPeriod3Choice_? StatementDateOrPeriod { get; init; } 
    /// <summary>
    /// Frequency of the statement.
    /// </summary>
    public Frequency25Choice_? Frequency { get; init; } 
    /// <summary>
    /// Indicates whether the statement is complete or contains changes only.
    /// </summary>
    public UpdateType15Choice_? UpdateType { get; init; } 
    /// <summary>
    /// Type of balance on which the statement is prepared.
    /// </summary>
    public StatementBasis7Choice_? StatementBasis { get; init; } 
    /// <summary>
    /// Type of balance on which the statement is prepared.
    /// </summary>
    public StatementType5Choice_? StatementType { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (StatementDateOrPeriod is DateAndPeriod3Choice_ StatementDateOrPeriodValue)
        {
            writer.WriteStartElement(null, "StmtDtOrPrd", xmlNamespace );
            StatementDateOrPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Frequency is Frequency25Choice_ FrequencyValue)
        {
            writer.WriteStartElement(null, "Frqcy", xmlNamespace );
            FrequencyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UpdateType is UpdateType15Choice_ UpdateTypeValue)
        {
            writer.WriteStartElement(null, "UpdTp", xmlNamespace );
            UpdateTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatementBasis is StatementBasis7Choice_ StatementBasisValue)
        {
            writer.WriteStartElement(null, "StmtBsis", xmlNamespace );
            StatementBasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StatementType is StatementType5Choice_ StatementTypeValue)
        {
            writer.WriteStartElement(null, "StmtTp", xmlNamespace );
            StatementTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Statement83 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
