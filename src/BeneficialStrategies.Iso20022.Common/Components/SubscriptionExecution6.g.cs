//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SubscriptionExecution6.  ISO2002 ID# _R31pb9p-Ed-ak6NoX_4Aeg_775209894.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Execution of a subscription order.
/// </summary>
[DataContract]
[XmlType]
public partial record SubscriptionExecution6
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for an order, as assigned by the instructing party.
    /// </summary>
    [DataMember]
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of an order. This reference can typically be used in a hub scenario to give the reference of the order as assigned by the underlying client.
    /// </summary>
    [DataMember]
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for an order execution, as assigned by a confirming party.
    /// </summary>
    [DataMember]
    public required IsoMax35Text DealReference { get; init; } 
    /// <summary>
    /// Specifies the category of the investment fund order.
    /// </summary>
    [DataMember]
    public ValueList<FundOrderType3> OrderType { get; init; } = [];
    /// <summary>
    /// Investment fund class to which an investment fund order execution is related.
    /// </summary>
    [DataMember]
    public required FinancialInstrument10 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Subdivision of an account used to segregate specific holdings.
    /// </summary>
    [DataMember]
    public SubAccount1? SubAccountForHolding { get; init; } 
    /// <summary>
    /// Number of investment fund units subscribed.
    /// </summary>
    [DataMember]
    public required FinancialInstrumentQuantity1 UnitsNumber { get; init; } 
    /// <summary>
    /// Amount of money invested in a specific financial instrument by an investor, after deduction of charges, commissions and taxes.|[Quantity * Price].
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? NetAmount { get; init; } 
    /// <summary>
    /// Amount of money invested in a specific financial instrument by an investor, before deduction of charges, commissions, and taxes.|[(Quantity * Price) + (Charges + Commissions +Taxes)].
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? GrossAmount { get; init; } 
    /// <summary>
    /// Indicates the rounding direction applied to nearest unit.
    /// </summary>
    [DataMember]
    public RoundingDirection2Code? Rounding { get; init; } 
    /// <summary>
    /// Date and time at which a price is applied, according to the terms stated in the prospectus.
    /// </summary>
    [DataMember]
    public required DateAndDateTimeChoice_ TradeDateTime { get; init; } 
    /// <summary>
    /// Price at which the order was executed.
    /// </summary>
    [DataMember]
    public required UnitPrice10 DealingPriceDetails { get; init; } 
    /// <summary>
    /// Other quoted price than the one at which the order was executed.
    /// </summary>
    [DataMember]
    public ValueList<UnitPrice10> InformativePriceDetails { get; init; } = [];
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    [DataMember]
    public required IsoActiveCurrencyAndAmount SettlementAmount { get; init; } 
    /// <summary>
    /// Date on which cash is available.
    /// </summary>
    [DataMember]
    public IsoISODate? CashSettlementDate { get; init; } 
    /// <summary>
    /// Method by which the transaction is settled.
    /// </summary>
    [DataMember]
    public DeliveryReceiptType2Code? SettlementMethod { get; init; } 
    /// <summary>
    /// Indicates whether the order has been partially executed, ie, the confirmed quantity does not match the ordered quantity for a given financial instrument.
    /// </summary>
    [DataMember]
    public required IsoYesNoIndicator PartiallyExecutedIndicator { get; init; } 
    /// <summary>
    /// Specifies that the execution was subject to best execution rules as defined by MiFID.
    /// </summary>
    [DataMember]
    public BestExecution1Code? BestExecution { get; init; } 
    /// <summary>
    /// Indicates whether the dividend is included, ie, cum-dividend, in the executed price. When the dividend is not included, the price will be ex-dividend.
    /// </summary>
    [DataMember]
    public required IsoYesNoIndicator CumDividendIndicator { get; init; } 
    /// <summary>
    /// Part of the price deemed as accrued income or profit rather than capital. The interim profit amount is used for tax purposes.
    /// </summary>
    [DataMember]
    public ProfitAndLoss1Choice_? InterimProfitAmount { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// </summary>
    [DataMember]
    public ValueList<ForeignExchangeTerms7> ForeignExchangeDetails { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Dividend option chosen by the account owner based on the options offered in the prospectus.
    /// </summary>
    [DataMember]
    public IncomePreference1Code? IncomePreference { get; init; } 
    /// <summary>
    /// Reference of a letter of intent program, in which sales commissions are reduced based on the aggregate of a customer's actual purchase and anticipated purchases, over a specific period of time, and as agreed by the customer. A letter of intent program is mainly used in the US market.
    /// </summary>
    [DataMember]
    public IsoMax35Text? LetterIntentReference { get; init; } 
    /// <summary>
    /// Reference of an accumulation right program, in which sales commissions are based on a customer's present purchases of shares and the aggregate quantity previously purchased by the customer. An accumulation rights program is mainly used in the US market.
    /// </summary>
    [DataMember]
    public IsoMax35Text? AccumulationRightReference { get; init; } 
    /// <summary>
    /// Amount of money associated with a service.
    /// </summary>
    [DataMember]
    public TotalCharges3? ChargeGeneralDetails { get; init; } 
    /// <summary>
    /// Amount of money due to a party as compensation for a service.
    /// </summary>
    [DataMember]
    public TotalCommissions3? CommissionGeneralDetails { get; init; } 
    /// <summary>
    /// Tax related to an investment fund order.
    /// </summary>
    [DataMember]
    public TotalTaxes3? TaxGeneralDetails { get; init; } 
    /// <summary>
    /// Parameters used to execute the settlement of an investment fund order.
    /// </summary>
    [DataMember]
    public FundSettlementParameters3? SettlementAndCustodyDetails { get; init; } 
    /// <summary>
    /// Indicates whether the financial instrument is to be physically delivered.
    /// </summary>
    [DataMember]
    public required IsoYesNoIndicator PhysicalDeliveryIndicator { get; init; } 
    /// <summary>
    /// Information related to physical delivery of the securities.
    /// </summary>
    [DataMember]
    public DeliveryParameters3? PhysicalDeliveryDetails { get; init; } 
    /// <summary>
    /// Currency requested for settlement of cash proceeds.
    /// </summary>
    [DataMember]
    public ActiveCurrencyCode? RequestedSettlementCurrency { get; init; } 
    /// <summary>
    /// Currency to be used for pricing the fund. This currency must be among the set of currencies in which the price may be expressed, as stated in the prospectus.
    /// </summary>
    [DataMember]
    public ActiveOrHistoricCurrencyCode? RequestedNAVCurrency { get; init; } 
    /// <summary>
    /// Return of cash that has been overpaid for a subscription.
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? Refund { get; init; } 
    /// <summary>
    /// Interest received when a subscription amount is paid in advance and then invested by the fund.
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? SubscriptionInterest { get; init; } 
    /// <summary>
    /// Payment transaction resulting from the investment fund order execution.
    /// </summary>
    [DataMember]
    public PaymentTransaction24? CashSettlementDetails { get; init; } 
    /// <summary>
    /// Additional specific settlement information for non-regulated traded funds.
    /// </summary>
    [DataMember]
    public IsoMax350Text? NonStandardSettlementInformation { get; init; } 
    /// <summary>
    /// Percentage of units partially settled.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? PartialSettlementOfUnits { get; init; } 
    /// <summary>
    /// Percentage of cash partially settled.
    /// </summary>
    [DataMember]
    public IsoPercentageRate? PartialSettlementOfCash { get; init; } 
    /// <summary>
    /// Breakdown of the net amount per type of order.
    /// </summary>
    [DataMember]
    public ValueList<InvestmentFundsOrderBreakdown1> StaffClientBreakdown { get; init; } = [];
    /// <summary>
    /// Specifies if advice has been received from an independent financial advisor.
    /// </summary>
    [DataMember]
    public FinancialAdvice1Code? FinancialAdvice { get; init; } 
    /// <summary>
    /// Specifies whether the trade is negotiated.
    /// </summary>
    [DataMember]
    public NegotiatedTrade1Code? NegotiatedTrade { get; init; } 
    /// <summary>
    /// Specifies whether the order execution confirmation is late.
    /// </summary>
    [DataMember]
    public LateReport1Code? LateReport { get; init; } 
    /// <summary>
    /// Information about parties related to the transaction.
    /// </summary>
    [DataMember]
    public ValueList<Intermediary9> RelatedPartyDetails { get; init; } = [];
    /// <summary>
    /// Part of an investor's subscription amount that is held by the fund in order to pay incentive / performance fees at the end of the fiscal year.
    /// </summary>
    [DataMember]
    public Equalisation1? Equalisation { get; init; } 
    
    #nullable disable
}
