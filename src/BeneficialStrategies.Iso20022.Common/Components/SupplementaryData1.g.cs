//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SupplementaryData1.  ISO2002 ID# _Qn0zC9p-Ed-ak6NoX_4Aeg_468227563.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.Components.SupplementaryData1>;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Additional information that can not be captured in the structured fields and/or any other specific block.
/// </summary>
[DataContract(Namespace = "")]
[XmlType]
public partial record SupplementaryData1
     : IIsoXmlSerilizable<SupplementaryData1>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous reference to the location where the supplementary data must be inserted in the message instance.
    /// In the case of XML, this is expressed by a valid XPath.
    /// </summary>
    [DataMember]
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Technical element wrapping the supplementary data.
    /// </summary>
    [DataMember]
    public required SupplementaryDataEnvelope1 Envelope { get; init; } 
    
    #nullable disable
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Envlp", xmlNamespace );
        Envelope.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static SupplementaryData1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
