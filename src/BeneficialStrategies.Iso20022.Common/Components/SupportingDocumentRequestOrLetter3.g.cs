//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SupportingDocumentRequestOrLetter3.  ISO2002 ID# _r7UcEbGJEeuSTr8k0UEM8A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Currency control related document or letter supporting the contract registration.
/// </summary>
public partial record SupportingDocumentRequestOrLetter3
     : IIsoXmlSerilizable<SupportingDocumentRequestOrLetter3>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identification of the supporting document request or the letter.
    /// </summary>
    public required IsoMax35Text RequestOrLetterIdentification { get; init; } 
    /// <summary>
    /// Date of the supporting document request or the letter.
    /// </summary>
    public IsoISODate? Date { get; init; } 
    /// <summary>
    /// Sender of the request or letter.
    /// </summary>
    public Party40Choice_? Sender { get; init; } 
    /// <summary>
    /// Receiver of the request or letter.
    /// </summary>
    public Party40Choice_? Receiver { get; init; } 
    /// <summary>
    /// Provides the references of the original underlying message(s) for which supporting documents are requested or for which the letter is sent.
    /// </summary>
    public OriginalMessage4? OriginalReferences { get; init; } 
    /// <summary>
    /// Subject of the letter or supporting document.
    /// </summary>
    public required IsoMax140Text Subject { get; init; } 
    /// <summary>
    /// Provides the type of supporting document requested.
    /// </summary>
    public required SupportLetterType1Choice_ Type { get; init; } 
    /// <summary>
    /// Further free format description of the request.
    /// </summary>
    public IsoMax1025Text? Description { get; init; } 
    /// <summary>
    /// Flag to indicate whether a response is required or not.
    /// Usage: when the request is used to send a letter, there is no response required.
    /// </summary>
    public required IsoTrueFalseIndicator ResponseRequired { get; init; } 
    /// <summary>
    /// Date by which the response to the request is expected.
    /// </summary>
    public IsoISODate? DueDate { get; init; } 
    /// <summary>
    /// Documents provided as attachments to the supporting document request or letter.
    /// </summary>
    public DocumentGeneralInformation5? Attachment { get; init; } 
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    public SupplementaryData1? SupplementaryData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ReqOrLttrId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(RequestOrLetterIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (Date is IsoISODate DateValue)
        {
            writer.WriteStartElement(null, "Dt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Sender is Party40Choice_ SenderValue)
        {
            writer.WriteStartElement(null, "Sndr", xmlNamespace );
            SenderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Receiver is Party40Choice_ ReceiverValue)
        {
            writer.WriteStartElement(null, "Rcvr", xmlNamespace );
            ReceiverValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginalReferences is OriginalMessage4 OriginalReferencesValue)
        {
            writer.WriteStartElement(null, "OrgnlRefs", xmlNamespace );
            OriginalReferencesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Sbjt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax140Text(Subject)); // data type Max140Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Description is IsoMax1025Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax1025Text(DescriptionValue)); // data type Max1025Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RspnReqrd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ResponseRequired)); // data type TrueFalseIndicator System.String
        writer.WriteEndElement();
        if (DueDate is IsoISODate DueDateValue)
        {
            writer.WriteStartElement(null, "DueDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DueDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (Attachment is DocumentGeneralInformation5 AttachmentValue)
        {
            writer.WriteStartElement(null, "Attchmnt", xmlNamespace );
            AttachmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SupportingDocumentRequestOrLetter3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
