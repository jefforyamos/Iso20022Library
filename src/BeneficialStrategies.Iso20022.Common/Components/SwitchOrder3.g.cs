//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SwitchOrder3.  ISO2002 ID# _SM2QJdp-Ed-ak6NoX_4Aeg_1757620202.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Transfer from one investment fund/fund class to another investment fund or investment fund class by the investor. A switch is composed of one or several subscription legs, and one or several redemption legs.
/// </summary>
[DataContract]
[XmlType]
public partial record SwitchOrder3
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for a group of individual orders, as assigned by the instructing party. This identifier links the individual orders together.
    /// </summary>
    [DataMember]
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Date and time at which the order was placed by the investor.
    /// </summary>
    [DataMember]
    public IsoISODateTime? OrderDateTime { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for an order, as assigned by the instructing party.
    /// </summary>
    [DataMember]
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of an order. This reference can typically be used in a hub scenario to give the reference of the order as assigned by the underlying client.
    /// </summary>
    [DataMember]
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for an order cancellation, as assigned by the instructing party.
    /// </summary>
    [DataMember]
    public IsoMax35Text? CancellationReference { get; init; } 
    /// <summary>
    /// Account between an investor(s) and a fund manager or a fund. The account can contain holdings in any investment fund or investment fund class managed (or distributed) by the fund manager, within the same fund family.
    /// </summary>
    [DataMember]
    public InvestmentAccount21? InvestmentAccountDetails { get; init; } 
    /// <summary>
    /// Amount of money used to derive the quantity of investment fund units to be redeemed.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? TotalRedemptionAmount { get; init; } 
    /// <summary>
    /// Amount of money used to derive the quantity of investment fund units to be subscribed.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? TotalSubscriptionAmount { get; init; } 
    /// <summary>
    /// Future date at which the investor requests the order to be executed.|The specification of a requested future trade date is not allowed in some markets. The date must be a date in the future.
    /// </summary>
    [DataMember]
    public IsoISODate? RequestedFutureTradeDate { get; init; } 
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    /// <summary>
    /// Date on which cash is available.
    /// </summary>
    [DataMember]
    public IsoISODate? CashSettlementDate { get; init; } 
    /// <summary>
    /// Method by which the transaction is settled.
    /// </summary>
    [DataMember]
    public DeliveryReceiptType2Code? SettlementMethod { get; init; } 
    /// <summary>
    /// Date on which the order expires.
    /// </summary>
    [DataMember]
    public DateAndDateTimeChoice_? ExpiryDateTime { get; init; } 
    /// <summary>
    /// Additional amount of money paid by the investor in addition to the switch redemption amount.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? AdditionalCashIn { get; init; } 
    /// <summary>
    /// Amount of money that results from a switch-out, that is not reinvested in another investment fund, and is repaid to the investor.
    /// </summary>
    [DataMember]
    public IsoActiveOrHistoricCurrencyAndAmount? ResultingCashOut { get; init; } 
    /// <summary>
    /// Information about parties related to the transaction.
    /// </summary>
    [DataMember]
    public ValueList<Intermediary8> RelatedPartyDetails { get; init; } = [];
    /// <summary>
    /// Cancellation right of an investor with respect to an investment fund order.
    /// </summary>
    [DataMember]
    public CancellationRight1Code? CancellationRight { get; init; } 
    /// <summary>
    /// Cancellation right of an investor with respect to an investment fund order.
    /// </summary>
    [DataMember]
    public IsoExtended350Code? ExtendedCancellationRight { get; init; } 
    /// <summary>
    /// Part of an investment fund switch order that is a redemption.
    /// </summary>
    [DataMember]
    public ValueList<SwitchRedemptionLegOrder3> RedemptionLegDetails { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Part of an investment fund switch order that is a subscription.
    /// </summary>
    [DataMember]
    public ValueList<SwitchSubscriptionLegOrder3> SubscriptionLegDetails { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Payment processes required to transfer cash from the debtor to the creditor.
    /// </summary>
    [DataMember]
    public PaymentTransaction25? CashSettlementDetails { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// </summary>
    [DataMember]
    public ForeignExchangeTerms6? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Specifies if advice has been received from an independent financial advisor.
    /// </summary>
    [DataMember]
    public FinancialAdvice1Code? FinancialAdvice { get; init; } 
    /// <summary>
    /// Specifies whether the trade is negotiated.
    /// </summary>
    [DataMember]
    public NegotiatedTrade1Code? NegotiatedTrade { get; init; } 
    
    #nullable disable
}
