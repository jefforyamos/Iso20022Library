//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SwitchOrder7.  ISO2002 ID# _2qDsoTbsEead9bDRE_1DAQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Transfer from one investment fund/fund class to another investment fund or investment fund class by the investor. A switch is composed of one or several subscription legs, and one or several redemption legs.
/// </summary>
public partial record SwitchOrder7
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for a group of individual orders, as assigned by the instructing party. This identifier links the individual orders together.
    /// </summary>
    public IsoMax35Text? MasterReference { get; init; } 
    /// <summary>
    /// Date and time the order is placed by the investor or its agent.
    /// </summary>
    public IsoISODateTime? OrderDateTime { get; init; } 
    /// <summary>
    /// Market in which the advised trade transaction was executed.
    /// </summary>
    public IPlaceOfTradeIdentification1Choice? PlaceOfTrade { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the order, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text OrderReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of the order. This reference can typically be used in a hub scenario to give the reference of the order as assigned by the underlying client.
    /// </summary>
    public IsoMax35Text? ClientReference { get; init; } 
    /// <summary>
    /// Account impacted by the investment fund order.
    /// </summary>
    public InvestmentAccount58? InvestmentAccountDetails { get; init; } 
    /// <summary>
    /// Party related to the transaction.
    /// </summary>
    // public IReadOnlyCollection<Intermediary40> RelatedPartyDetails { get; init; }
    /// <summary>
    /// Future date at which the investor requests the order to be executed.|The specification of a requested future trade date is not allowed in some markets. The date must be a date in the future.
    /// </summary>
    public IsoISODate? RequestedFutureTradeDate { get; init; } 
    /// <summary>
    /// Total amount of money paid /to be paid or received in exchange for the financial instrument in the individual order.
    /// </summary>
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    /// <summary>
    /// Date on which cash is available.
    /// </summary>
    public IsoISODate? CashSettlementDate { get; init; } 
    /// <summary>
    /// Method by which the transaction is settled.
    /// </summary>
    public DeliveryReceiptType2Code? SettlementMethod { get; init; } 
    /// <summary>
    /// Choice between additional cash in or resulting cash out.
    /// </summary>
    public IAdditionalAmount1Choice? AdditionalAmount { get; init; } 
    /// <summary>
    /// Date on which the order expires.
    /// </summary>
    public IDateAndDateTimeChoice? ExpiryDateTime { get; init; } 
    /// <summary>
    /// Cancellation right of the investor with respect to the investment fund order.
    /// </summary>
    public ICancellationRight1Choice? CancellationRight { get; init; } 
    /// <summary>
    /// Part of the investment fund switch order that is a redemption.
    /// </summary>
    public SwitchRedemptionLegOrder6? RedemptionLegDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Part of the investment fund switch order that is a subscription.
    /// </summary>
    public SwitchSubscriptionLegOrder6? SubscriptionLegDetails { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Payment process for the transfer of cash from the debtor to the creditor.
    /// </summary>
    public PaymentTransaction71? CashSettlementDetails { get; init; } 
    /// <summary>
    /// Information needed to process a currency exchange or conversion.
    /// Information needed to process a currency exchange or conversion.
    /// How the exchange rate is expressed determines which currency is the Unit Currency and Quoted Currency. If the amounts concerned are EUR 1000 and USD 1300, the exchange rate may be expressed as per either of the following examples:
    /// EXAMPLE 1 
    /// UnitCurrency EUR
    /// QuotedCurrency USD
    /// ExchangeRate 1.300
    /// EXAMPLE 2
    /// UnitCurrency USD
    /// QuotedCurrency EUR
    /// ExchangeRate 0.769.
    /// </summary>
    public ForeignExchangeTerms32? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Specifies if advice has been received from an independent financial advisor.
    /// </summary>
    public FinancialAdvice1Code? FinancialAdvice { get; init; } 
    /// <summary>
    /// Specifies whether the trade is negotiated.
    /// </summary>
    public NegotiatedTrade1Code? NegotiatedTrade { get; init; } 
    /// <summary>
    /// Assessment of the customer’s behaviour at the time of the account opening application.
    /// </summary>
    public ICustomerConductClassification1Choice? CustomerConductClassification { get; init; } 
    /// <summary>
    /// Means by which the investor or account owner submits the open account form.
    /// </summary>
    public ITransactionChannelType1Choice? TransactionChannelType { get; init; } 
    /// <summary>
    /// Type of signature.
    /// </summary>
    public ISignatureType1Choice? SignatureType { get; init; } 
    /// <summary>
    /// Information about a non-standard order.
    /// </summary>
    public OrderWaiver1? OrderWaiverDetails { get; init; } 
    
    #nullable disable
}
