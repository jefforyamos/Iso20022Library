//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for SystemAvailabilityAndEvents3.  ISO2002 ID# _dk-8wXhkEeidzqjNEfehPg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the details about the system availability and the related system events that might impact the availability.
/// </summary>
public partial record SystemAvailabilityAndEvents3
     : IIsoXmlSerilizable<SystemAvailabilityAndEvents3>
{
    #nullable enable
    
    /// <summary>
    /// Currency which may be processed by the system. A system may process transactions in a single currency or in multiple currencies.
    /// </summary>
    public ActiveCurrencyCode? SystemCurrency { get; init; } 
    /// <summary>
    /// Time window of system activity.
    /// </summary>
    public TimePeriod1? SessionPeriod { get; init; } 
    /// <summary>
    /// Detailed information about an event occurring on a system, whether planned, such as the cut-off time for a specific type of eligible transfer, or unplanned (an unsolicited failure), as stipulated in the specifications of the system.
    /// </summary>
    public SystemEvent3? Event { get; init; } 
    /// <summary>
    /// Information regarding the closure time of a system.
    /// </summary>
    public SystemClosure2? ClosureInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (SystemCurrency is ActiveCurrencyCode SystemCurrencyValue)
        {
            writer.WriteStartElement(null, "SysCcy", xmlNamespace );
            writer.WriteValue(SystemCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SessionPeriod is TimePeriod1 SessionPeriodValue)
        {
            writer.WriteStartElement(null, "SsnPrd", xmlNamespace );
            SessionPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Event is SystemEvent3 EventValue)
        {
            writer.WriteStartElement(null, "Evt", xmlNamespace );
            EventValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClosureInformation is SystemClosure2 ClosureInformationValue)
        {
            writer.WriteStartElement(null, "ClsrInf", xmlNamespace );
            ClosureInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SystemAvailabilityAndEvents3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
