//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TMSAction2.  ISO2002 ID# _Y2MKQR3ZEeKKrOIoqWglDw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Single terminal management action to be performed by the point of interaction.
/// </summary>
public partial record TMSAction2
     : IIsoXmlSerilizable<TMSAction2>
{
    #nullable enable
    
    /// <summary>
    /// Types of action to be performed by a point of interaction (POI).
    /// </summary>
    public required TerminalManagementAction1Code Type { get; init; } 
    /// <summary>
    /// Communication parameters of the terminal management system to contact.
    /// </summary>
    public NetworkParameters1? Address { get; init; } 
    /// <summary>
    /// Data set on which the action has to be performed.
    /// </summary>
    public DataSetIdentification3? DataSetIdentification { get; init; } 
    /// <summary>
    /// Event on which the action has to be activated by the point of interaction (POI).
    /// </summary>
    public required TerminalManagementActionTrigger1Code Trigger { get; init; } 
    /// <summary>
    /// Additional process to perform before starting or after completing the action by the point of interaction (POI).
    /// </summary>
    public TerminalManagementAdditionalProcess1Code? AdditionalProcess { get; init; } 
    /// <summary>
    /// Date and time the action has to be performed.
    /// </summary>
    public ProcessTiming2? TimeCondition { get; init; } 
    /// <summary>
    /// Terminal manager challenge for cryptographic key injection.
    /// </summary>
    public IsoMax140Binary? TMChallenge { get; init; } 
    /// <summary>
    /// Certificate chain for the encryption of temporary transport key of the key to inject.
    /// </summary>
    public IsoMax5000Binary? KeyEnciphermentCertificate { get; init; } 
    /// <summary>
    /// Action to perform in case of error on the related action in progress.
    /// </summary>
    public ErrorAction2? ErrorAction { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        if (Address is NetworkParameters1 AddressValue)
        {
            writer.WriteStartElement(null, "Adr", xmlNamespace );
            AddressValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DataSetIdentification is DataSetIdentification3 DataSetIdentificationValue)
        {
            writer.WriteStartElement(null, "DataSetId", xmlNamespace );
            DataSetIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Trggr", xmlNamespace );
        writer.WriteValue(Trigger.ToString()); // Enum value
        writer.WriteEndElement();
        if (AdditionalProcess is TerminalManagementAdditionalProcess1Code AdditionalProcessValue)
        {
            writer.WriteStartElement(null, "AddtlPrc", xmlNamespace );
            writer.WriteValue(AdditionalProcessValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TimeCondition is ProcessTiming2 TimeConditionValue)
        {
            writer.WriteStartElement(null, "TmCond", xmlNamespace );
            TimeConditionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TMChallenge is IsoMax140Binary TMChallengeValue)
        {
            writer.WriteStartElement(null, "TMChllng", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Binary(TMChallengeValue)); // data type Max140Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (KeyEnciphermentCertificate is IsoMax5000Binary KeyEnciphermentCertificateValue)
        {
            writer.WriteStartElement(null, "KeyNcphrmntCert", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax5000Binary(KeyEnciphermentCertificateValue)); // data type Max5000Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (ErrorAction is ErrorAction2 ErrorActionValue)
        {
            writer.WriteStartElement(null, "ErrActn", xmlNamespace );
            ErrorActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TMSAction2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
