//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TargetMarket1.  ISO2002 ID# _z1KXQDQpEeifw8iDiyZLmQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Target market criteria.
/// </summary>
public partial record TargetMarket1
     : IIsoXmlSerilizable<TargetMarket1>
{
    #nullable enable
    
    /// <summary>
    /// Investor for which the financial instrument is targeted.
    /// </summary>
    public InvestorType1? InvestorType { get; init; } 
    /// <summary>
    /// Knowledge and/or experience of the investor.
    /// </summary>
    public InvestorKnowledge1? KnowledgeAndOrExperience { get; init; } 
    /// <summary>
    /// Investor’s ability to bear losses.
    /// </summary>
    public LossBearing1? AbilityToBearLosses { get; init; } 
    /// <summary>
    /// Investor’s tolerance to risk.
    /// </summary>
    public RiskTolerance1? RiskTolerance { get; init; } 
    /// <summary>
    /// Investor’s investment requirements.
    /// </summary>
    public InvestorRequirements1? ClientObjectivesAndNeeds { get; init; } 
    /// <summary>
    /// Other target market parameter.
    /// </summary>
    public OtherTargetMarket1? Other { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (InvestorType is InvestorType1 InvestorTypeValue)
        {
            writer.WriteStartElement(null, "InvstrTp", xmlNamespace );
            InvestorTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (KnowledgeAndOrExperience is InvestorKnowledge1 KnowledgeAndOrExperienceValue)
        {
            writer.WriteStartElement(null, "KnwldgAndOrExprnc", xmlNamespace );
            KnowledgeAndOrExperienceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AbilityToBearLosses is LossBearing1 AbilityToBearLossesValue)
        {
            writer.WriteStartElement(null, "AbltyToBearLosses", xmlNamespace );
            AbilityToBearLossesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RiskTolerance is RiskTolerance1 RiskToleranceValue)
        {
            writer.WriteStartElement(null, "RskTlrnce", xmlNamespace );
            RiskToleranceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClientObjectivesAndNeeds is InvestorRequirements1 ClientObjectivesAndNeedsValue)
        {
            writer.WriteStartElement(null, "ClntObjctvsAndNeeds", xmlNamespace );
            ClientObjectivesAndNeedsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Other is OtherTargetMarket1 OtherValue)
        {
            writer.WriteStartElement(null, "Othr", xmlNamespace );
            OtherValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TargetMarket1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
