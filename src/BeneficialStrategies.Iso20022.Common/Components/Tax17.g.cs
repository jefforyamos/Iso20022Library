//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Tax17.  ISO2002 ID# _Sl4bKdp-Ed-ak6NoX_4Aeg_1978788372.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Tax related to an investment fund order.
/// </summary>
public partial record Tax17
     : IIsoXmlSerilizable<Tax17>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax applied.
    /// </summary>
    public required TaxType12Code Type { get; init; } 
    /// <summary>
    /// Type of tax applied.
    /// </summary>
    public required IsoExtended350Code ExtendedType { get; init; } 
    /// <summary>
    /// Amount of money resulting from the calculation of the tax.
    /// </summary>
    public SimpleValueList<IsoActiveOrHistoricCurrencyAnd13DecimalAmount> Amount { get; init; } = [];
    /// <summary>
    /// Rate used to calculate the tax.
    /// </summary>
    public IsoPercentageRate? Rate { get; init; } 
    /// <summary>
    /// Country where the tax is due.
    /// </summary>
    public required CountryCode Country { get; init; } 
    /// <summary>
    /// Information used to calculate the tax.
    /// </summary>
    public TaxCalculationInformation4? TaxCalculationDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "XtndedTp", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedType)); // data type Extended350Code System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        Amount.Serialize(writer, xmlNamespace, "ActiveOrHistoricCurrencyAnd13DecimalAmount", SerializationFormatter.IsoActiveOrHistoricCurrencyAnd13DecimalAmount );
        writer.WriteEndElement();
        if (Rate is IsoPercentageRate RateValue)
        {
            writer.WriteStartElement(null, "Rate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(RateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Ctry", xmlNamespace );
        writer.WriteValue(Country.ToString()); // Enum value
        writer.WriteEndElement();
        if (TaxCalculationDetails is TaxCalculationInformation4 TaxCalculationDetailsValue)
        {
            writer.WriteStartElement(null, "TaxClctnDtls", xmlNamespace );
            TaxCalculationDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Tax17 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
