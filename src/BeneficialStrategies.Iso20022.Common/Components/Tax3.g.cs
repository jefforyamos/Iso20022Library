//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Tax3.  ISO2002 ID# _U5HCC9p-Ed-ak6NoX_4Aeg_-556148948.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money due to the government or tax authority, according to various pre-defined parameters such as thresholds or income.
/// </summary>
public partial record Tax3
     : IIsoXmlSerilizable<Tax3>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax applied.
    /// </summary>
    public required TaxTypeFormat2Choice_ Type { get; init; } 
    /// <summary>
    /// Amount of money resulting from the calculation of the tax.
    /// </summary>
    public required IsoActiveOrHistoricCurrencyAnd13DecimalAmount Amount { get; init; } 
    /// <summary>
    /// Basis used to determine the capital gain or loss, eg, the purchase price.
    /// </summary>
    public TaxationBasis2Code? Basis { get; init; } 
    /// <summary>
    /// Party that receives the tax. The recipient of, and the party entitled to, the tax may be two different parties.
    /// </summary>
    public PartyIdentification1Choice_? RecipientIdentification { get; init; } 
    /// <summary>
    /// Indicates whether a tax exemption applies.
    /// </summary>
    public required IsoYesNoIndicator ExemptionIndicator { get; init; } 
    /// <summary>
    /// Reason for a tax exemption.
    /// </summary>
    public TaxExemptionReasonFormatChoice_? ExemptionReason { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAnd13DecimalAmount(Amount)); // data type ActiveOrHistoricCurrencyAnd13DecimalAmount System.Decimal
        writer.WriteEndElement();
        if (Basis is TaxationBasis2Code BasisValue)
        {
            writer.WriteStartElement(null, "Bsis", xmlNamespace );
            writer.WriteValue(BasisValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RecipientIdentification is PartyIdentification1Choice_ RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XmptnInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExemptionIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (ExemptionReason is TaxExemptionReasonFormatChoice_ ExemptionReasonValue)
        {
            writer.WriteStartElement(null, "XmptnRsn", xmlNamespace );
            ExemptionReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Tax3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
