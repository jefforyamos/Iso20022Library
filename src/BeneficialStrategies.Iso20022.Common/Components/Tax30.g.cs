//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Tax30.  ISO2002 ID# _yAxHwTklEeapUO0vUIo9Xw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Tax related to an investment fund order.
/// </summary>
public partial record Tax30
     : IIsoXmlSerilizable<Tax30>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax.
    /// </summary>
    public required TaxType3Choice_ Type { get; init; } 
    /// <summary>
    /// Tax to be applied.
    /// </summary>
    public TaxAmountOrRate4Choice_? Tax { get; init; } 
    /// <summary>
    /// Country where the tax is due.
    /// </summary>
    public CountryCode? Country { get; init; } 
    /// <summary>
    /// Indicates whether a tax exemption applies.
    /// </summary>
    public required IsoYesNoIndicator ExemptionIndicator { get; init; } 
    /// <summary>
    /// Reason for the tax exemption.
    /// </summary>
    public ExemptionReason1Choice_? ExemptionReason { get; init; } 
    /// <summary>
    /// Party that receives the tax. The recipient of, and the party entitled to, the tax may be two different parties.
    /// </summary>
    public PartyIdentification113? RecipientIdentification { get; init; } 
    /// <summary>
    /// Information used to calculate the tax.
    /// </summary>
    public TaxCalculationInformation9? TaxCalculationDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Tax is TaxAmountOrRate4Choice_ TaxValue)
        {
            writer.WriteStartElement(null, "Tax", xmlNamespace );
            TaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Country is CountryCode CountryValue)
        {
            writer.WriteStartElement(null, "Ctry", xmlNamespace );
            writer.WriteValue(CountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "XmptnInd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ExemptionIndicator)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (ExemptionReason is ExemptionReason1Choice_ ExemptionReasonValue)
        {
            writer.WriteStartElement(null, "XmptnRsn", xmlNamespace );
            ExemptionReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RecipientIdentification is PartyIdentification113 RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxCalculationDetails is TaxCalculationInformation9 TaxCalculationDetailsValue)
        {
            writer.WriteStartElement(null, "TaxClctnDtls", xmlNamespace );
            TaxCalculationDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Tax30 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
