//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Tax31.  ISO2002 ID# __6VlRzbsEead9bDRE_1DAQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Tax related to an investment fund order.
/// </summary>
public partial record Tax31
     : IIsoXmlSerilizable<Tax31>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax.
    /// </summary>
    public required TaxType3Choice_ Type { get; init; } 
    /// <summary>
    /// Amount of money resulting from the calculation of the tax.
    /// </summary>
    public required IsoActiveCurrencyAndAmount AppliedAmount { get; init; } 
    /// <summary>
    /// Rate used to calculate the tax.
    /// </summary>
    public IsoPercentageRate? AppliedRate { get; init; } 
    /// <summary>
    /// Country where the tax is due.
    /// </summary>
    public CountryCode? Country { get; init; } 
    /// <summary>
    /// Party that receives the tax. The recipient of, and the party entitled to, the tax may be two different parties.
    /// </summary>
    public PartyIdentification113? RecipientIdentification { get; init; } 
    /// <summary>
    /// Information used to calculate the tax.
    /// </summary>
    public TaxCalculationInformation10? TaxCalculationDetails { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ApldAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(AppliedAmount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (AppliedRate is IsoPercentageRate AppliedRateValue)
        {
            writer.WriteStartElement(null, "ApldRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(AppliedRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (Country is CountryCode CountryValue)
        {
            writer.WriteStartElement(null, "Ctry", xmlNamespace );
            writer.WriteValue(CountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RecipientIdentification is PartyIdentification113 RecipientIdentificationValue)
        {
            writer.WriteStartElement(null, "RcptId", xmlNamespace );
            RecipientIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxCalculationDetails is TaxCalculationInformation10 TaxCalculationDetailsValue)
        {
            writer.WriteStartElement(null, "TaxClctnDtls", xmlNamespace );
            TaxCalculationDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Tax31 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
