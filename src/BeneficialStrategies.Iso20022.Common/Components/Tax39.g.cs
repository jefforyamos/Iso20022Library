//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Tax39.  ISO2002 ID# _75ERgSB_Eey8XKHwKquEQw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Description of tax.
/// </summary>
public partial record Tax39
     : IIsoXmlSerilizable<Tax39>
{
    #nullable enable
    
    /// <summary>
    /// Type of tax.
    /// </summary>
    public required AddendumTaxType2Code Type { get; init; } 
    /// <summary>
    /// Other type of tax. Describes the type of tax when Other, Other National, Other Private or Other Taxes Type is selected. 
    /// </summary>
    public IsoMax35Text? OtherType { get; init; } 
    /// <summary>
    /// Description of the tax.
    /// </summary>
    public IsoMax35Text? Description { get; init; } 
    /// <summary>
    /// Exemption for this type of tax.
    /// True: Exemption of tax
    /// False: No exemption of tax
    /// </summary>
    public IsoTrueFalseIndicator? TaxExemption { get; init; } 
    /// <summary>
    /// Reason for tax exemption.
    /// </summary>
    public IsoMax35Text? TaxExemptReason { get; init; } 
    /// <summary>
    /// Tax amount.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount Amount { get; init; } 
    /// <summary>
    /// Tax rate applied on original amount.
    /// </summary>
    public IsoPercentageRate? Rate { get; init; } 
    /// <summary>
    /// Indicate whether the Tax amount is included in total transaction amount
    /// </summary>
    public IsoTrueFalseIndicator? IncludedInTotalIndicator { get; init; } 
    /// <summary>
    /// A code to indicate the tax amount is credit or debit
    /// </summary>
    public CreditDebit3Code? CreditDebit { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        if (OtherType is IsoMax35Text OtherTypeValue)
        {
            writer.WriteStartElement(null, "OthrTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Description is IsoMax35Text DescriptionValue)
        {
            writer.WriteStartElement(null, "Desc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(DescriptionValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TaxExemption is IsoTrueFalseIndicator TaxExemptionValue)
        {
            writer.WriteStartElement(null, "TaxXmptn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(TaxExemptionValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (TaxExemptReason is IsoMax35Text TaxExemptReasonValue)
        {
            writer.WriteStartElement(null, "TaxXmptRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TaxExemptReasonValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(Amount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (Rate is IsoPercentageRate RateValue)
        {
            writer.WriteStartElement(null, "Rate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(RateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (IncludedInTotalIndicator is IsoTrueFalseIndicator IncludedInTotalIndicatorValue)
        {
            writer.WriteStartElement(null, "InclInTtlInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(IncludedInTotalIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (CreditDebit is CreditDebit3Code CreditDebitValue)
        {
            writer.WriteStartElement(null, "CdtDbt", xmlNamespace );
            writer.WriteValue(CreditDebitValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static Tax39 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
