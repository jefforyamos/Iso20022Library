//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TaxCalculationInformation10.  ISO2002 ID# _otJa8WVREeaL1uBLI51YHQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information used to calculate the tax.
/// </summary>
public partial record TaxCalculationInformation10
     : IIsoXmlSerilizable<TaxCalculationInformation10>
{
    #nullable enable
    
    /// <summary>
    /// Form of the rebate, for example, cash.
    /// </summary>
    public TaxBasis1Choice_? Basis { get; init; } 
    /// <summary>
    /// Amount of money on which the tax is charged.
    /// </summary>
    public required IsoActiveCurrencyAndAmount TaxableAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Basis is TaxBasis1Choice_ BasisValue)
        {
            writer.WriteStartElement(null, "Bsis", xmlNamespace );
            BasisValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TaxblAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(TaxableAmount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
    }
    public static TaxCalculationInformation10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
