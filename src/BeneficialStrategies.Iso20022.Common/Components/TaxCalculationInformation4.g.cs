//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TaxCalculationInformation4.  ISO2002 ID# _SlvRNtp-Ed-ak6NoX_4Aeg_-1975400876.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information used to calculate the tax.
/// </summary>
public partial record TaxCalculationInformation4
     : IIsoXmlSerilizable<TaxCalculationInformation4>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether capital gain is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public EUCapitalGain2Code? EUCapitalGain { get; init; } 
    /// <summary>
    /// Specifies whether capital gain is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public IsoExtended350Code? ExtendedEUCapitalGain { get; init; } 
    /// <summary>
    /// Percentage of the underlying assets of the funds that represents a debt and is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June).
    /// </summary>
    public IsoPercentageRate? PercentageOfDebtClaim { get; init; } 
    /// <summary>
    /// Percentage of grandfathered debt claim.
    /// </summary>
    public IsoPercentageRate? PercentageGrandfatheredDebt { get; init; } 
    /// <summary>
    /// Amount included in the dividend that corresponds to gains directly or indirectly derived from interest payment in the scope of the European Directive on taxation of savings income in the form of interest payments.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAnd13DecimalAmount? TaxableIncomePerDividend { get; init; } 
    /// <summary>
    /// Specifies whether dividend is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public EUDividendStatus1Code? EUDividendStatus { get; init; } 
    /// <summary>
    /// Specifies whether dividend is in the scope of the European directive on taxation of savings income in the form of interest payments (Council Directive 2003/48/EC 3 June), or an income realised upon sale, a refund or redemption of shares and units, etc.
    /// </summary>
    public IsoExtended350Code? ExtendedEUDividendStatus { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (EUCapitalGain is EUCapitalGain2Code EUCapitalGainValue)
        {
            writer.WriteStartElement(null, "EUCptlGn", xmlNamespace );
            writer.WriteValue(EUCapitalGainValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExtendedEUCapitalGain is IsoExtended350Code ExtendedEUCapitalGainValue)
        {
            writer.WriteStartElement(null, "XtndedEUCptlGn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedEUCapitalGainValue)); // data type Extended350Code System.String
            writer.WriteEndElement();
        }
        if (PercentageOfDebtClaim is IsoPercentageRate PercentageOfDebtClaimValue)
        {
            writer.WriteStartElement(null, "PctgOfDebtClm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PercentageOfDebtClaimValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (PercentageGrandfatheredDebt is IsoPercentageRate PercentageGrandfatheredDebtValue)
        {
            writer.WriteStartElement(null, "PctgGrdfthdDebt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(PercentageGrandfatheredDebtValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TaxableIncomePerDividend is IsoActiveOrHistoricCurrencyAnd13DecimalAmount TaxableIncomePerDividendValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerDvdd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAnd13DecimalAmount(TaxableIncomePerDividendValue)); // data type ActiveOrHistoricCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (EUDividendStatus is EUDividendStatus1Code EUDividendStatusValue)
        {
            writer.WriteStartElement(null, "EUDvddSts", xmlNamespace );
            writer.WriteValue(EUDividendStatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExtendedEUDividendStatus is IsoExtended350Code ExtendedEUDividendStatusValue)
        {
            writer.WriteStartElement(null, "XtndedEUDvddSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedEUDividendStatusValue)); // data type Extended350Code System.String
            writer.WriteEndElement();
        }
    }
    public static TaxCalculationInformation4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
