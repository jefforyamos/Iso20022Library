//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TaxCalculationInformation6.  ISO2002 ID# _SllgONp-Ed-ak6NoX_4Aeg_-2134024285.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information used to calculate the tax.
/// </summary>
public partial record TaxCalculationInformation6
     : IIsoXmlSerilizable<TaxCalculationInformation6>
{
    #nullable enable
    
    /// <summary>
    /// Basis used to determine the capital gain or loss, eg, the purchase price.
    /// </summary>
    public TaxationBasis2Code? Basis { get; init; } 
    /// <summary>
    /// Basis used to determine the capital gain or loss, eg, the purchase price.
    /// </summary>
    public IsoExtended350Code? ExtendedBasis { get; init; } 
    /// <summary>
    /// Amount of money that it is to be taxed.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? TaxableAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Basis is TaxationBasis2Code BasisValue)
        {
            writer.WriteStartElement(null, "Bsis", xmlNamespace );
            writer.WriteValue(BasisValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExtendedBasis is IsoExtended350Code ExtendedBasisValue)
        {
            writer.WriteStartElement(null, "XtndedBsis", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedBasisValue)); // data type Extended350Code System.String
            writer.WriteEndElement();
        }
        if (TaxableAmount is IsoActiveCurrencyAnd13DecimalAmount TaxableAmountValue)
        {
            writer.WriteStartElement(null, "TaxblAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(TaxableAmountValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static TaxCalculationInformation6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
