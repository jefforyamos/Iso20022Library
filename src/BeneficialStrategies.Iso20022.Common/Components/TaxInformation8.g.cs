//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TaxInformation8.  ISO2002 ID# _wuFOYf7IEeifc-yx3AlK3Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details about tax paid, or to be paid, to the government in accordance with the law, including pre-defined parameters such as thresholds and type of account.
/// </summary>
public partial record TaxInformation8
     : IIsoXmlSerilizable<TaxInformation8>
{
    #nullable enable
    
    /// <summary>
    /// Party on the credit side of the transaction to which the tax applies.
    /// </summary>
    public TaxParty1? Creditor { get; init; } 
    /// <summary>
    /// Party on the debit side of the transaction to which the tax applies.
    /// </summary>
    public TaxParty2? Debtor { get; init; } 
    /// <summary>
    /// Territorial part of a country to which the tax payment is related.
    /// </summary>
    public IsoMax35Text? AdministrationZone { get; init; } 
    /// <summary>
    /// Tax reference information that is specific to a taxing agency.
    /// </summary>
    public IsoMax140Text? ReferenceNumber { get; init; } 
    /// <summary>
    /// Method used to indicate the underlying business or how the tax is paid.
    /// </summary>
    public IsoMax35Text? Method { get; init; } 
    /// <summary>
    /// Total amount of money on which the tax is based.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalTaxableBaseAmount { get; init; } 
    /// <summary>
    /// Total amount of money as result of the calculation of the tax.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalTaxAmount { get; init; } 
    /// <summary>
    /// Date by which tax is due.
    /// </summary>
    public IsoISODate? Date { get; init; } 
    /// <summary>
    /// Sequential number of the tax report.
    /// </summary>
    public IsoNumber? SequenceNumber { get; init; } 
    /// <summary>
    /// Record of tax details.
    /// </summary>
    public TaxRecord2? Record { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (Creditor is TaxParty1 CreditorValue)
        {
            writer.WriteStartElement(null, "Cdtr", xmlNamespace );
            CreditorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Debtor is TaxParty2 DebtorValue)
        {
            writer.WriteStartElement(null, "Dbtr", xmlNamespace );
            DebtorValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdministrationZone is IsoMax35Text AdministrationZoneValue)
        {
            writer.WriteStartElement(null, "AdmstnZone", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AdministrationZoneValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ReferenceNumber is IsoMax140Text ReferenceNumberValue)
        {
            writer.WriteStartElement(null, "RefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax140Text(ReferenceNumberValue)); // data type Max140Text System.String
            writer.WriteEndElement();
        }
        if (Method is IsoMax35Text MethodValue)
        {
            writer.WriteStartElement(null, "Mtd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MethodValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TotalTaxableBaseAmount is IsoActiveOrHistoricCurrencyAndAmount TotalTaxableBaseAmountValue)
        {
            writer.WriteStartElement(null, "TtlTaxblBaseAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalTaxableBaseAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TotalTaxAmount is IsoActiveOrHistoricCurrencyAndAmount TotalTaxAmountValue)
        {
            writer.WriteStartElement(null, "TtlTaxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalTaxAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (Date is IsoISODate DateValue)
        {
            writer.WriteStartElement(null, "Dt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(DateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (SequenceNumber is IsoNumber SequenceNumberValue)
        {
            writer.WriteStartElement(null, "SeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(SequenceNumberValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (Record is TaxRecord2 RecordValue)
        {
            writer.WriteStartElement(null, "Rcrd", xmlNamespace );
            RecordValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TaxInformation8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
