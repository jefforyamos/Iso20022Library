//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TaxSD1.  ISO2002 ID# _1bBq5m99EeKuY41pq1-dog.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides extra tax details.
/// </summary>
public partial record TaxSD1
     : IIsoXmlSerilizable<TaxSD1>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous reference to the location where the supplementary data must be inserted in the message instance. 
    /// In the case of XML, this is expressed by a valid XPath.
    /// </summary>
    public IsoMax350Text? PlaceAndName { get; init; } 
    /// <summary>
    /// Amount of foreign tax credit per security.
    /// </summary>
    public IsoRestrictedFINActiveCurrencyAndAmount? ForeignTaxCreditAmount { get; init; } 
    /// <summary>
    /// Percent of foreign tax credit per security|.
    /// </summary>
    public IsoPercentageRate? ForeignTaxCreditRate { get; init; } 
    /// <summary>
    /// Amount of the dividend that is being paid out of income earned in a foreign jurisdiction.
    /// </summary>
    public IsoRestrictedFINActiveCurrencyAndAmount? ForeignSourceAmount { get; init; } 
    /// <summary>
    /// Percentage of the dividend that is being paid out of income earned in a foreign jurisdiction.
    /// </summary>
    public IsoPercentageRate? ForeignSourceRate { get; init; } 
    /// <summary>
    /// Form of tax advantage on the dividend.
    /// </summary>
    public TaxAdvantageType1Code? TaxAdvantageType { get; init; } 
    /// <summary>
    /// Amount of the tax advantage on the dividend.
    /// </summary>
    public IsoRestrictedFINActiveCurrencyAndAmount? TaxAdvantageAmount { get; init; } 
    /// <summary>
    /// Percent of the tax advantage on the dividend.
    /// </summary>
    public IsoPercentageRate? TaxAdvantageRate { get; init; } 
    /// <summary>
    /// Percentage of the amount of money related to taxable income that cannot be categorised.
    /// </summary>
    public IsoPercentageRate? SundryOrOtherRate { get; init; } 
    /// <summary>
    /// Percentage of the amount of income eligible for deferred taxation.
    /// </summary>
    public IsoPercentageRate? TaxDeferredRate { get; init; } 
    /// <summary>
    /// Percentage of the amount of money that has not been subject to taxation.
    /// </summary>
    public IsoPercentageRate? TaxFreeRate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceAndName is IsoMax350Text PlaceAndNameValue)
        {
            writer.WriteStartElement(null, "PlcAndNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PlaceAndNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ForeignTaxCreditAmount is IsoRestrictedFINActiveCurrencyAndAmount ForeignTaxCreditAmountValue)
        {
            writer.WriteStartElement(null, "FrgnTaxCdtAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINActiveCurrencyAndAmount(ForeignTaxCreditAmountValue)); // data type RestrictedFINActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ForeignTaxCreditRate is IsoPercentageRate ForeignTaxCreditRateValue)
        {
            writer.WriteStartElement(null, "FrgnTaxCdtRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(ForeignTaxCreditRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (ForeignSourceAmount is IsoRestrictedFINActiveCurrencyAndAmount ForeignSourceAmountValue)
        {
            writer.WriteStartElement(null, "FrgnSrcAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINActiveCurrencyAndAmount(ForeignSourceAmountValue)); // data type RestrictedFINActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (ForeignSourceRate is IsoPercentageRate ForeignSourceRateValue)
        {
            writer.WriteStartElement(null, "FrgnSrcRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(ForeignSourceRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TaxAdvantageType is TaxAdvantageType1Code TaxAdvantageTypeValue)
        {
            writer.WriteStartElement(null, "TaxAdvntgTp", xmlNamespace );
            writer.WriteValue(TaxAdvantageTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TaxAdvantageAmount is IsoRestrictedFINActiveCurrencyAndAmount TaxAdvantageAmountValue)
        {
            writer.WriteStartElement(null, "TaxAdvntgAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoRestrictedFINActiveCurrencyAndAmount(TaxAdvantageAmountValue)); // data type RestrictedFINActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TaxAdvantageRate is IsoPercentageRate TaxAdvantageRateValue)
        {
            writer.WriteStartElement(null, "TaxAdvntgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TaxAdvantageRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (SundryOrOtherRate is IsoPercentageRate SundryOrOtherRateValue)
        {
            writer.WriteStartElement(null, "SndryOrOthrRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(SundryOrOtherRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TaxDeferredRate is IsoPercentageRate TaxDeferredRateValue)
        {
            writer.WriteStartElement(null, "TaxDfrrdRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TaxDeferredRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (TaxFreeRate is IsoPercentageRate TaxFreeRateValue)
        {
            writer.WriteStartElement(null, "TaxFreeRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TaxFreeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
    }
    public static TaxSD1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
