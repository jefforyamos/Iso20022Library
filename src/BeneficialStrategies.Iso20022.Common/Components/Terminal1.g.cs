//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Terminal1.  ISO2002 ID# _O6I3sECOEeeXpbqDpLawug.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Payment terminal or ATM performing the transaction
/// </summary>
public partial record Terminal1
     : IIsoXmlSerilizable<Terminal1>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the terminal performing the transaction.
    /// </summary>
    public required TerminalIdentification1 TerminalIdentification { get; init; } 
    /// <summary>
    /// Type of terminal.
    /// </summary>
    public TerminalType1Code? Type { get; init; } 
    /// <summary>
    /// Other type of terminal.
    /// </summary>
    public IsoMax35Text? OtherType { get; init; } 
    /// <summary>
    /// Capabilities of the terminal
    /// </summary>
    public Capabilities1? Capabilities { get; init; } 
    /// <summary>
    /// Type of terminal integration at a point of service location.
    /// </summary>
    public TerminalIntegrationCategory1Code? TerminalIntegration { get; init; } 
    /// <summary>
    /// Indicates whether the terminal is operated outdoor or indoor at the point of service.
    /// True: The terminal is operated outdoor
    /// False: The terminal is operated indoor
    /// </summary>
    public IsoTrueFalseIndicator? OutdoorIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the terminal is operated on- or off-premises at the point of service.
    /// True: The terminal is operated off premises.
    /// False: The terminal is operated on premises.
    /// ISO 8583:93 bit 22-4, ISO 8583:2003 bit 22-3.
    /// </summary>
    public IsoTrueFalseIndicator? OffPremisesIndicator { get; init; } 
    /// <summary>
    /// Indicates whether the transaction was performed on board.
    /// True: The terminal is located on board.
    /// False: The terminal is not located on board.
    /// </summary>
    public IsoTrueFalseIndicator? OnBoardIndicator { get; init; } 
    /// <summary>
    /// Data related to the components of the POI (Point Of Interaction) performing the transactions.
    /// </summary>
    public PointOfInteractionComponent8? POIComponent { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TermnlId", xmlNamespace );
        TerminalIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Type is TerminalType1Code TypeValue)
        {
            writer.WriteStartElement(null, "Tp", xmlNamespace );
            writer.WriteValue(TypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OtherType is IsoMax35Text OtherTypeValue)
        {
            writer.WriteStartElement(null, "OthrTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Capabilities is Capabilities1 CapabilitiesValue)
        {
            writer.WriteStartElement(null, "Cpblties", xmlNamespace );
            CapabilitiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TerminalIntegration is TerminalIntegrationCategory1Code TerminalIntegrationValue)
        {
            writer.WriteStartElement(null, "TermnlIntgtn", xmlNamespace );
            writer.WriteValue(TerminalIntegrationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OutdoorIndicator is IsoTrueFalseIndicator OutdoorIndicatorValue)
        {
            writer.WriteStartElement(null, "OutdrInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OutdoorIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (OffPremisesIndicator is IsoTrueFalseIndicator OffPremisesIndicatorValue)
        {
            writer.WriteStartElement(null, "OffPrmissInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OffPremisesIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (OnBoardIndicator is IsoTrueFalseIndicator OnBoardIndicatorValue)
        {
            writer.WriteStartElement(null, "OnBrdInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(OnBoardIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (POIComponent is PointOfInteractionComponent8 POIComponentValue)
        {
            writer.WriteStartElement(null, "POICmpnt", xmlNamespace );
            POIComponentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Terminal1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
