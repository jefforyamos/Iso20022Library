//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TotalFeesAndTaxes42.  ISO2002 ID# _fzmwQZECEem7fvtoGpNpow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money associated with a service.
/// </summary>
[IsoId("_fzmwQZECEem7fvtoGpNpow")]
[DisplayName("Total Fees And Taxes")]
#if DECLARE_SERIALIZABLE
[Serializable]
#endif
#if DECLARE_DATACONTRACT
[DataContract]
#endif
public partial record TotalFeesAndTaxes42
{
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    // No constructor needed for NET8 and above.
    #else
    // No constructor needed for < NET8 because this type has no required members.
    #endif
    #nullable enable
    
    /// <summary>
    /// Total amount of overhead applied to the transaction that impacts the settlement amount.
    /// </summary>
    [IsoId("_gHZO9ZECEem7fvtoGpNpow")]
    [DisplayName("Total Overhead Applied")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="TtlOvrhdApld")]
    #endif
    [IsoXmlTag("TtlOvrhdApld")]
    [IsoSimpleType(IsoSimpleType.ActiveCurrencyAndAmount)]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoActiveCurrencyAndAmount? TotalOverheadApplied { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.Decimal? TotalOverheadApplied { get; init; } 
    #else
    public System.Decimal? TotalOverheadApplied { get; set; } 
    #endif
    
    /// <summary>
    /// Total amount of fees (charge/commissions) applied to the transaction that impacts the settlement amount.
    /// </summary>
    [IsoId("_gHZO95ECEem7fvtoGpNpow")]
    [DisplayName("Total Fees")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="TtlFees")]
    #endif
    [IsoXmlTag("TtlFees")]
    [IsoSimpleType(IsoSimpleType.ActiveCurrencyAndAmount)]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoActiveCurrencyAndAmount? TotalFees { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.Decimal? TotalFees { get; init; } 
    #else
    public System.Decimal? TotalFees { get; set; } 
    #endif
    
    /// <summary>
    /// Total amount of taxes applied to the transaction that impacts the settlement amount.
    /// </summary>
    [IsoId("_gHZO-ZECEem7fvtoGpNpow")]
    [DisplayName("Total Taxes")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="TtlTaxs")]
    #endif
    [IsoXmlTag("TtlTaxs")]
    [IsoSimpleType(IsoSimpleType.ActiveCurrencyAndAmount)]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoActiveCurrencyAndAmount? TotalTaxes { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.Decimal? TotalTaxes { get; init; } 
    #else
    public System.Decimal? TotalTaxes { get; set; } 
    #endif
    
    /// <summary>
    /// Reference to the agreement established between the fund and another party. This element, amongst others, defines the conditions of the commissions.
    /// </summary>
    [IsoId("_gHZO-5ECEem7fvtoGpNpow")]
    [DisplayName("Commercial Agreement Reference")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="ComrclAgrmtRef")]
    #endif
    [IsoXmlTag("ComrclAgrmtRef")]
    [IsoSimpleType(IsoSimpleType.Max35Text)]
    [StringLength(maximumLength: 35 ,MinimumLength = 1)]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax35Text? CommercialAgreementReference { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? CommercialAgreementReference { get; init; } 
    #else
    public System.String? CommercialAgreementReference { get; set; } 
    #endif
    
    /// <summary>
    /// Individual fee (charge/commission).
    /// </summary>
    [IsoId("_gHZO_ZECEem7fvtoGpNpow")]
    [DisplayName("Individual Fee")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="IndvFee")]
    #endif
    [IsoXmlTag("IndvFee")]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public Fee5? IndividualFee { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public Fee5? IndividualFee { get; init; } 
    #else
    public Fee5? IndividualFee { get; set; } 
    #endif
    
    /// <summary>
    /// Individual tax.
    /// </summary>
    [IsoId("_gHZO_5ECEem7fvtoGpNpow")]
    [DisplayName("Individual Tax")]
    #if DECLARE_DATACONTRACT
    [DataMember(Name="IndvTax")]
    #endif
    [IsoXmlTag("IndvTax")]
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public Tax35? IndividualTax { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public Tax35? IndividualTax { get; init; } 
    #else
    public Tax35? IndividualTax { get; set; } 
    #endif
    
    
    #nullable disable
    
}
