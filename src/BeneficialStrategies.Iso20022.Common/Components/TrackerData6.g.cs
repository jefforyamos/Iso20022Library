//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TrackerData6.  ISO2002 ID# _uu9vLVc8EeunQrLahSRvvA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the detailed information as provided by a payment tracking system.
/// </summary>
public partial record TrackerData6
     : IIsoXmlSerilizable<TrackerData6>
{
    #nullable enable
    
    /// <summary>
    /// Point in time when an update to the tracking system has been confirmed. 
    /// Usage: 
    /// This date can be the point in time when an agent provides a pending status update to the tracking system or when the creditor has been credited and can use the amount of money (as confirmed to the tracking system by the creditor agent).
    /// </summary>
    public required DateAndDateTime2Choice_ ConfirmedDate { get; init; } 
    /// <summary>
    /// Amount of money effectively credited to the creditor and confirmed to the tracking system by the agent.
    /// </summary>
    public required IsoActiveCurrencyAndAmount ConfirmedAmount { get; init; } 
    /// <summary>
    /// Amount of money remaining to be confirmed.
    /// </summary>
    public IsoActiveCurrencyAndAmount? RemainingToBeConfirmedAmount { get; init; } 
    /// <summary>
    /// Amount of money previously credited to the creditor and confirmed to the tracking system by the agent.
    /// </summary>
    public IsoActiveCurrencyAndAmount? PreviouslyConfirmedAmount { get; init; } 
    /// <summary>
    /// Point in time when the previous amount was confirmed.
    /// Usage: 
    /// This date provides the point in time when the last previous confirmed amount was provided to the tracker, in case of a partial confirmation.
    /// </summary>
    public DateAndDateTime2Choice_? PreviouslyConfirmedDate { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ConfdDt", xmlNamespace );
        ConfirmedDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ConfdAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(ConfirmedAmount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
        if (RemainingToBeConfirmedAmount is IsoActiveCurrencyAndAmount RemainingToBeConfirmedAmountValue)
        {
            writer.WriteStartElement(null, "RmngToBeConfdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(RemainingToBeConfirmedAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PreviouslyConfirmedAmount is IsoActiveCurrencyAndAmount PreviouslyConfirmedAmountValue)
        {
            writer.WriteStartElement(null, "PrevslyConfdAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(PreviouslyConfirmedAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (PreviouslyConfirmedDate is DateAndDateTime2Choice_ PreviouslyConfirmedDateValue)
        {
            writer.WriteStartElement(null, "PrevslyConfdDt", xmlNamespace );
            PreviouslyConfirmedDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TrackerData6 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
