//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Trade2.  ISO2002 ID# _yDLnEA2IEeSwB74WgTbh4Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the foreign exchange trade including spot\forward\NDF\swap that is confirmed.
/// </summary>
public partial record Trade2
     : IIsoXmlSerilizable<Trade2>
{
    #nullable enable
    
    /// <summary>
    /// Unique reference identification assigned to the trade by the instructing party. This reference will be used throughout the trade life cycle to identify the particular trade.
    /// </summary>
    public required IsoMax35Text TradeIdentification { get; init; } 
    /// <summary>
    /// Specifies the date on which the trade was executed.
    /// </summary>
    public required IsoISODate TradeDate { get; init; } 
    /// <summary>
    /// Specifies the underlying product type.
    /// </summary>
    public required UnderlyingProductIdentifier1Code ForeignExchangeTradeProduct { get; init; } 
    /// <summary>
    /// Specifies the ISO code of the trade currency.
    /// </summary>
    public CurrencyCode? TradingCurrency { get; init; } 
    /// <summary>
    /// Settlement currency of the trade, agreed by both sides of the trade.
    /// </summary>
    public CurrencyCode? SettlementCurrency { get; init; } 
    /// <summary>
    /// Identifies the type of trading method.
    /// </summary>
    public TradingMethodType1Code? TradingMethod { get; init; } 
    /// <summary>
    /// Identifies the type of the trade mode.
    /// </summary>
    public required TradingModeType1Code TradingMode { get; init; } 
    /// <summary>
    /// Clearing method of the trade, agreed by both sides of the trade.
    /// </summary>
    public required ClearingMethod1Code ClearingMethod { get; init; } 
    /// <summary>
    /// Symbol of the trade.
    /// </summary>
    public IsoMax35Text? Symbol { get; init; } 
    /// <summary>
    /// Infrastructure where the trade confirmation will take place.
    /// </summary>
    public IsoAnyBICIdentifier? PlaceOfConfirmation { get; init; } 
    /// <summary>
    /// Provides details of the foreign exchange trade including Spot Forward and NDF.
    /// </summary>
    public Trade3? ForeignExchangeDetails { get; init; } 
    /// <summary>
    /// Provides details about each leg of the multileg instrument (foreign exchange swap).
    /// </summary>
    public InstrumentLeg6? SwapLeg { get; init; } 
    /// <summary>
    /// Identification of the treasury trade product, as assigned under a formal or proprietary identification scheme.
    /// </summary>
    public SecurityIdentification22Choice_? ProductIdentification { get; init; } 
    /// <summary>
    /// Some associated trade reference needs to be specified.
    /// </summary>
    public IsoMax70Text? AssociatedTradeReference { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(TradeDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FXTradPdct", xmlNamespace );
        writer.WriteValue(ForeignExchangeTradeProduct.ToString()); // Enum value
        writer.WriteEndElement();
        if (TradingCurrency is CurrencyCode TradingCurrencyValue)
        {
            writer.WriteStartElement(null, "TradgCcy", xmlNamespace );
            writer.WriteValue(TradingCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SettlementCurrency is CurrencyCode SettlementCurrencyValue)
        {
            writer.WriteStartElement(null, "SttlmCcy", xmlNamespace );
            writer.WriteValue(SettlementCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (TradingMethod is TradingMethodType1Code TradingMethodValue)
        {
            writer.WriteStartElement(null, "TradgMtd", xmlNamespace );
            writer.WriteValue(TradingMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradgMd", xmlNamespace );
        writer.WriteValue(TradingMode.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ClrMtd", xmlNamespace );
        writer.WriteValue(ClearingMethod.ToString()); // Enum value
        writer.WriteEndElement();
        if (Symbol is IsoMax35Text SymbolValue)
        {
            writer.WriteStartElement(null, "Symb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SymbolValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (PlaceOfConfirmation is IsoAnyBICIdentifier PlaceOfConfirmationValue)
        {
            writer.WriteStartElement(null, "PlcOfConf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoAnyBICIdentifier(PlaceOfConfirmationValue)); // data type AnyBICIdentifier System.String
            writer.WriteEndElement();
        }
        if (ForeignExchangeDetails is Trade3 ForeignExchangeDetailsValue)
        {
            writer.WriteStartElement(null, "FXDtls", xmlNamespace );
            ForeignExchangeDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SwapLeg is InstrumentLeg6 SwapLegValue)
        {
            writer.WriteStartElement(null, "SwpLeg", xmlNamespace );
            SwapLegValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProductIdentification is SecurityIdentification22Choice_ ProductIdentificationValue)
        {
            writer.WriteStartElement(null, "PdctId", xmlNamespace );
            ProductIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AssociatedTradeReference is IsoMax70Text AssociatedTradeReferenceValue)
        {
            writer.WriteStartElement(null, "AssoctdTradRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AssociatedTradeReferenceValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static Trade2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
