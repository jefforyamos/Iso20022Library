//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeCounterpartyReport10.  ISO2002 ID# _zSqiYZQJEeiILOjNP8ro1w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to parties in the contract.
/// </summary>
public partial record TradeCounterpartyReport10
     : IIsoXmlSerilizable<TradeCounterpartyReport10>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the reporting counterparty.
    /// </summary>
    public required Counterparty27 ReportingCounterparty { get; init; } 
    /// <summary>
    /// Identification of the other counterparty in the transaction.
    /// </summary>
    public required Counterparty28 OtherCounterparty { get; init; } 
    /// <summary>
    /// Identification of the broker as an intermediary for the reporting counterparty.
    /// </summary>
    public OrganisationIdentification9Choice_? Broker { get; init; } 
    /// <summary>
    /// Identification of the submitting agent in the case where the reporting counterparty has delegated the submission of the report to a third party or to the other counterparty.
    /// </summary>
    public OrganisationIdentification9Choice_? SubmittingAgent { get; init; } 
    /// <summary>
    /// Identification of the clearing member in the case where the trade is cleared.
    /// </summary>
    public OrganisationIdentification9Choice_? ClearingMember { get; init; } 
    /// <summary>
    /// Identification of the beneficiary who is subject to the rights and obligations arising from the contract.
    /// </summary>
    public required OrganisationIdentification9Choice_ Beneficiary { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptgCtrPty", xmlNamespace );
        ReportingCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "OthrCtrPty", xmlNamespace );
        OtherCounterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Broker is OrganisationIdentification9Choice_ BrokerValue)
        {
            writer.WriteStartElement(null, "Brkr", xmlNamespace );
            BrokerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SubmittingAgent is OrganisationIdentification9Choice_ SubmittingAgentValue)
        {
            writer.WriteStartElement(null, "SubmitgAgt", xmlNamespace );
            SubmittingAgentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClearingMember is OrganisationIdentification9Choice_ ClearingMemberValue)
        {
            writer.WriteStartElement(null, "ClrMmb", xmlNamespace );
            ClearingMemberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Bnfcry", xmlNamespace );
        Beneficiary.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static TradeCounterpartyReport10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
