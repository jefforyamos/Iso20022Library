//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeCounterpartyReport20.  ISO2002 ID# _tqiloQz1Ee2YoLD-1vFj0g.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to parties in the contract.
/// </summary>
public partial record TradeCounterpartyReport20
{
    #nullable enable
    
    /// <summary>
    /// Identification of the counterparty to a derivative transaction who is fulfilling its reporting obligation in the present report.
    /// </summary>
    public required Counterparty45 ReportingCounterparty { get; init; } 
    /// <summary>
    /// Identification of the other counterparty to a derivative transaction.
    /// </summary>
    public required Counterparty46 OtherCounterparty { get; init; } 
    /// <summary>
    /// Identification of the entity [party] acting as an intermediary which [who] arranges the transaction for the reporting counterparty (“arranging broker”).
    /// </summary>
    public IOrganisationIdentification15Choice? Broker { get; init; } 
    /// <summary>
    /// Identification of the party that ultimately submits the report to the trade repository.
    /// </summary>
    public IOrganisationIdentification15Choice? SubmittingAgent { get; init; } 
    /// <summary>
    /// Identifies the clearing member through which a derivative transaction is cleared at a central counterparty (CCP).  The element applies to transactions under the agency clearing model and the principal clearing model.
    /// </summary>
    public IPartyIdentification248Choice? ClearingMember { get; init; } 
    /// <summary>
    /// Identification of the beneficiary of a derivative transaction, that is a party that is subject to the rights and obligations arising from the contract.
    /// ||Usage: In case of two occurances of beneficiary, the first iteration should always be the beneficiary 1 of the counterparty 1 and the second iteration is the beneficiary 2 of the counterparty 2. In case of single occurance of Beneficiary, RelationshipRecord should be provided.
    /// </summary>
    // public IReadOnlyCollection<IPartyIdentification248Choice> Beneficiary { get; init; }
    /// <summary>
    /// According to jurisdictional requirements, identification of the entity with the legal obligation or responsibility to report.
    /// </summary>
    public IOrganisationIdentification15Choice? EntityResponsibleForReport { get; init; } 
    /// <summary>
    /// Identification of the entity that executed the transaction on behalf of the counterparty, and binds the counterparty to the terms of the transaction, but is not a broker.
    /// Usage: In case of two occurances of ExecutionAgent, the first iteration should always be the execution agent 1 of the counterparty 1 and the second iteration is the execution agent 2 of the counterparty 2. In case of single occurance of ExecutionAgent, RelationshipRecord should be provided.
    /// </summary>
    // public IReadOnlyCollection<IOrganisationIdentification15Choice> ExecutionAgent { get; init; }
    /// <summary>
    /// Specifies the relationship record between two parties part of the transaction.
    /// </summary>
    public TradeCounterpartyRelationshipRecord1? RelationshipRecord { get; init;  } // Warning: Don't know multiplicity.
    
    #nullable disable
}
