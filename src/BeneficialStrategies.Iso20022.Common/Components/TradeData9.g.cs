//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeData9.  ISO2002 ID# _c_2KcR3dEeKXIbeXfdPzuw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides information on the status of a trade.
/// </summary>
public partial record TradeData9
     : IIsoXmlSerilizable<TradeData9>
{
    #nullable enable
    
    /// <summary>
    /// Reference to the unique system identification assigned to the trade by the central matching system.
    /// </summary>
    public required IsoMax35Text MatchingSystemUniqueReference { get; init; } 
    /// <summary>
    /// Reference to the unique matching identification assigned to the trade and to the matching trade from the counterparty by the central matching system.
    /// </summary>
    public IsoMax35Text? MatchingSystemMatchingReference { get; init; } 
    /// <summary>
    /// Unique reference from the central settlement system that allows the removal of alleged trades once the matched status notification for the matching side has been received.
    /// </summary>
    public IsoMax35Text? MatchingSystemMatchedSideReference { get; init; } 
    /// <summary>
    /// Party that assigned the status to the trade.
    /// </summary>
    public IsoMax35Text? StatusOriginator { get; init; } 
    /// <summary>
    /// Specifies the new status of the trade.
    /// </summary>
    public required StatusAndSubStatus1 CurrentStatus { get; init; } 
    /// <summary>
    /// Additional information about the current status of the trade.
    /// </summary>
    public StatusSubType1Code? CurrentStatusSubType { get; init; } 
    /// <summary>
    /// Specifies the date and time at which the current status was assigned.
    /// </summary>
    public IsoISODateTime? CurrentStatusDateTime { get; init; } 
    /// <summary>
    /// Specifies the previous status of the trade.
    /// </summary>
    public Status5Choice_? PreviousStatus { get; init; } 
    /// <summary>
    /// Specifies whether a trade is alleged or not.
    /// </summary>
    public IsoYesNoIndicator? AllegedTrade { get; init; } 
    /// <summary>
    /// Additional information on the previous status of a trade in a central system.
    /// </summary>
    public StatusSubType1Code? PreviousStatusSubType { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MtchgSysUnqRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(MatchingSystemUniqueReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (MatchingSystemMatchingReference is IsoMax35Text MatchingSystemMatchingReferenceValue)
        {
            writer.WriteStartElement(null, "MtchgSysMtchgRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MatchingSystemMatchingReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MatchingSystemMatchedSideReference is IsoMax35Text MatchingSystemMatchedSideReferenceValue)
        {
            writer.WriteStartElement(null, "MtchgSysMtchdSdRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MatchingSystemMatchedSideReferenceValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (StatusOriginator is IsoMax35Text StatusOriginatorValue)
        {
            writer.WriteStartElement(null, "StsOrgtr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(StatusOriginatorValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "CurSts", xmlNamespace );
        CurrentStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CurrentStatusSubType is StatusSubType1Code CurrentStatusSubTypeValue)
        {
            writer.WriteStartElement(null, "CurStsSubTp", xmlNamespace );
            writer.WriteValue(CurrentStatusSubTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CurrentStatusDateTime is IsoISODateTime CurrentStatusDateTimeValue)
        {
            writer.WriteStartElement(null, "CurStsDtTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(CurrentStatusDateTimeValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (PreviousStatus is Status5Choice_ PreviousStatusValue)
        {
            writer.WriteStartElement(null, "PrvsSts", xmlNamespace );
            PreviousStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AllegedTrade is IsoYesNoIndicator AllegedTradeValue)
        {
            writer.WriteStartElement(null, "AllgdTrad", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(AllegedTradeValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (PreviousStatusSubType is StatusSubType1Code PreviousStatusSubTypeValue)
        {
            writer.WriteStartElement(null, "PrvsStsSubTp", xmlNamespace );
            writer.WriteValue(PreviousStatusSubTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static TradeData9 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
