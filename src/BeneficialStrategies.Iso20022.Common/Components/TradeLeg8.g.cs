//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeLeg8.  ISO2002 ID# _0eGloS0qEeSRe9rElPHBfg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides the trade leg details.
/// </summary>
public partial record TradeLeg8
     : IIsoXmlSerilizable<TradeLeg8>
{
    #nullable enable
    
    /// <summary>
    /// Unambiguous identification of the transaction (that is the trade leg) as known by the instructing party.
    /// </summary>
    public required IsoMax35Text TradeLegIdentification { get; init; } 
    /// <summary>
    /// Reference allocated by the broker dealer.
    /// </summary>
    public IsoMax35Text? TradeIdentification { get; init; } 
    /// <summary>
    /// Unique reference assigned by the trading venue when the trade is executed.
    /// </summary>
    public required IsoMax35Text TradeExecutionIdentification { get; init; } 
    /// <summary>
    /// Identifies the order sent by the final investor to an intermediary in order to initiate a trade in the former's name. This identification is then matched with the equivalent trade by the clearing.
    /// </summary>
    public IsoMax35Text? OrderIdentification { get; init; } 
    /// <summary>
    /// Identifies the portion of assets within a determined trade that shall be allocated to different clients.
    /// </summary>
    public IsoMax35Text? AllocationIdentification { get; init; } 
    /// <summary>
    /// Provides the status of the trade leg.
    /// </summary>
    public Status5Code? Status { get; init; } 
    /// <summary>
    /// Provides the date and time of trade transaction.
    /// </summary>
    public required IsoISODateTime TradeDate { get; init; } 
    /// <summary>
    /// Date and time used to determine the price applicable to a trade. If the trade is registered "after market" hours, the trading price will the price of the day but the actual trade date will be the next working day.
    /// </summary>
    public IsoISODateTime? TransactionDateTime { get; init; } 
    /// <summary>
    /// Provides the contractual settlement date.
    /// </summary>
    public DateFormat15Choice_? SettlementDate { get; init; } 
    /// <summary>
    /// Provides details about the security identification.
    /// </summary>
    public required SecurityIdentification14 FinancialInstrumentIdentification { get; init; } 
    /// <summary>
    /// Specifies the ISO code of the trade currency.
    /// </summary>
    public CurrencyCode? TradingCurrency { get; init; } 
    /// <summary>
    /// Identifies the trade leg indicator which gives the trade side (buy or sell).
    /// </summary>
    public required Side1Code BuySellIndicator { get; init; } 
    /// <summary>
    /// Identifies the quantity of the trade leg.
    /// </summary>
    public required FinancialInstrumentQuantity1Choice_ TradeQuantity { get; init; } 
    /// <summary>
    /// Specifies the price of the traded financial instrument.
    /// </summary>
    public required Price4 DealPrice { get; init; } 
    /// <summary>
    /// Principal amount of a trade (price multiplied by quantity).
    /// </summary>
    public AmountAndDirection21? GrossAmount { get; init; } 
    /// <summary>
    /// Interest that has accumulated on a bond since the last interest payment up to, but not including, the settlement date.
    /// </summary>
    public AmountAndDirection21? AccruedInterestAmount { get; init; } 
    /// <summary>
    /// Place at which the security is traded.
    /// </summary>
    public required MarketIdentification84 PlaceOfTrade { get; init; } 
    /// <summary>
    /// Place at which the security is listed.
    /// </summary>
    public MarketIdentification85? PlaceOfListing { get; init; } 
    /// <summary>
    /// Identifies the type of trade transaction.
    /// </summary>
    public required TradeType1Code TradeType { get; init; } 
    /// <summary>
    /// Indicates that the trade is for settlement of an exercised derivatives contract.
    /// </summary>
    public IsoYesNoIndicator? DerivativeRelatedTrade { get; init; } 
    /// <summary>
    /// Party that identifies a broker when required (for example, authorised broker or prime broker).
    /// </summary>
    public PartyIdentificationAndAccount100? Broker { get; init; } 
    /// <summary>
    /// Provides the identification of the trading party.
    /// </summary>
    public required PartyIdentification35Choice_ TradingParty { get; init; } 
    /// <summary>
    /// Indicates in which session the transaction/operation was executed by the final investor or an intermediary.
    /// </summary>
    public IsoMax35Text? TradeRegistrationOrigin { get; init; } 
    /// <summary>
    /// Identifier of the trading participant's account at the trading venue using the venue's coding system.
    /// </summary>
    public SecuritiesAccount19? TradingPartyAccount { get; init; } 
    /// <summary>
    /// Specifies the role of the trading party in the transaction.
    /// </summary>
    public required TradingCapacity5Code TradingCapacity { get; init; } 
    /// <summary>
    /// Indicates how a trade is maintained in the clearing account.
    /// </summary>
    public TradePosting1Code? TradePostingCode { get; init; } 
    /// <summary>
    /// Place where the securities are safe-kept, physically or notionally. This place can be, for example, a local custodian, a Central Securities Depository (CSD) or an International Central Securities Depository (ICSD).
    /// </summary>
    public SafekeepingPlaceFormat7Choice_? SafekeepingPlace { get; init; } 
    /// <summary>
    /// Account to or from which a securities entry is made.
    /// </summary>
    public SecuritiesAccount19? SafekeepingAccount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradLegId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeLegIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (TradeIdentification is IsoMax35Text TradeIdentificationValue)
        {
            writer.WriteStartElement(null, "TradId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradExctnId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeExecutionIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (OrderIdentification is IsoMax35Text OrderIdentificationValue)
        {
            writer.WriteStartElement(null, "OrdrId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OrderIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AllocationIdentification is IsoMax35Text AllocationIdentificationValue)
        {
            writer.WriteStartElement(null, "AllcnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AllocationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Status is Status5Code StatusValue)
        {
            writer.WriteStartElement(null, "Sts", xmlNamespace );
            writer.WriteValue(StatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODateTime(TradeDate)); // data type ISODateTime System.DateTime
        writer.WriteEndElement();
        if (TransactionDateTime is IsoISODateTime TransactionDateTimeValue)
        {
            writer.WriteStartElement(null, "TxDtTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(TransactionDateTimeValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (SettlementDate is DateFormat15Choice_ SettlementDateValue)
        {
            writer.WriteStartElement(null, "SttlmDt", xmlNamespace );
            SettlementDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FinInstrmId", xmlNamespace );
        FinancialInstrumentIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TradingCurrency is CurrencyCode TradingCurrencyValue)
        {
            writer.WriteStartElement(null, "TradgCcy", xmlNamespace );
            writer.WriteValue(TradingCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "BuySellInd", xmlNamespace );
        writer.WriteValue(BuySellIndicator.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradQty", xmlNamespace );
        TradeQuantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DealPric", xmlNamespace );
        DealPrice.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (GrossAmount is AmountAndDirection21 GrossAmountValue)
        {
            writer.WriteStartElement(null, "GrssAmt", xmlNamespace );
            GrossAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccruedInterestAmount is AmountAndDirection21 AccruedInterestAmountValue)
        {
            writer.WriteStartElement(null, "AcrdIntrstAmt", xmlNamespace );
            AccruedInterestAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PlcOfTrad", xmlNamespace );
        PlaceOfTrade.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PlaceOfListing is MarketIdentification85 PlaceOfListingValue)
        {
            writer.WriteStartElement(null, "PlcOfListg", xmlNamespace );
            PlaceOfListingValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradTp", xmlNamespace );
        writer.WriteValue(TradeType.ToString()); // Enum value
        writer.WriteEndElement();
        if (DerivativeRelatedTrade is IsoYesNoIndicator DerivativeRelatedTradeValue)
        {
            writer.WriteStartElement(null, "DerivRltdTrad", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DerivativeRelatedTradeValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (Broker is PartyIdentificationAndAccount100 BrokerValue)
        {
            writer.WriteStartElement(null, "Brkr", xmlNamespace );
            BrokerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradgPty", xmlNamespace );
        TradingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TradeRegistrationOrigin is IsoMax35Text TradeRegistrationOriginValue)
        {
            writer.WriteStartElement(null, "TradRegnOrgn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeRegistrationOriginValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TradingPartyAccount is SecuritiesAccount19 TradingPartyAccountValue)
        {
            writer.WriteStartElement(null, "TradgPtyAcct", xmlNamespace );
            TradingPartyAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradgCpcty", xmlNamespace );
        writer.WriteValue(TradingCapacity.ToString()); // Enum value
        writer.WriteEndElement();
        if (TradePostingCode is TradePosting1Code TradePostingCodeValue)
        {
            writer.WriteStartElement(null, "TradPstngCd", xmlNamespace );
            writer.WriteValue(TradePostingCodeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (SafekeepingPlace is SafekeepingPlaceFormat7Choice_ SafekeepingPlaceValue)
        {
            writer.WriteStartElement(null, "SfkpgPlc", xmlNamespace );
            SafekeepingPlaceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SafekeepingAccount is SecuritiesAccount19 SafekeepingAccountValue)
        {
            writer.WriteStartElement(null, "SfkpgAcct", xmlNamespace );
            SafekeepingAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TradeLeg8 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
