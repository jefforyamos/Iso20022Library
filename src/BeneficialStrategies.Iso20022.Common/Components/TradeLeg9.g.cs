//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeLeg9.  ISO2002 ID# _bBw7kS6SEeSQQqw1BT_aMg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides the trade leg details.
/// </summary>
public partial record TradeLeg9
{
    #nullable enable
    
    /// <summary>
    /// Margin account where the negotiation and liquidation risks will be calculated.
    /// </summary>
    public SecuritiesAccount19? MarginAccount { get; init; } 
    /// <summary>
    /// Account opened by the central counterparty in the name of the clearing member or its settlement agent within the account structure, for settlement purposes (gives information about the clearing member/its settlement agent account at the central securities depository).
    /// </summary>
    public SecuritiesAccount19? DeliveryAccount { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transaction (that is the trade leg) as known by the instructing party.
    /// </summary>
    public required IsoMax35Text TradeLegIdentification { get; init; } 
    /// <summary>
    /// Reference allocated by the broker dealer.
    /// </summary>
    public IsoMax35Text? TradeIdentification { get; init; } 
    /// <summary>
    /// Unique reference assigned by the trading venue when the trade is executed.
    /// </summary>
    public required IsoMax35Text TradeExecutionIdentification { get; init; } 
    /// <summary>
    /// Identifies the order sent by the final investor to an intermediary in order to initiate a trade in the former's name. This identification is then matched with the equivalent trade by the clearing.
    /// </summary>
    public IsoMax35Text? OrderIdentification { get; init; } 
    /// <summary>
    /// Identifies the portion of assets within a determined trade that shall be allocated to different clients.
    /// </summary>
    public IsoMax35Text? AllocationIdentification { get; init; } 
    /// <summary>
    /// Provides details about the non clearing member identification and account.
    /// </summary>
    public PartyIdentificationAndAccount31? NonClearingMember { get; init; } 
    /// <summary>
    /// Provides the date and time of trade transaction.
    /// </summary>
    public required IsoISODateTime TradeDate { get; init; } 
    /// <summary>
    /// Date and time used to determine the price applicable to a trade. If the trade is registered "after market" hours, the trading price will the price of the day but the actual trade date will be the next working day.
    /// </summary>
    public IsoISODateTime? TransactionDateAndTime { get; init; } 
    /// <summary>
    /// Provides the contractual settlement date.
    /// </summary>
    public DateFormat15Choice_? SettlementDate { get; init; } 
    /// <summary>
    /// Provides details about the security identification.
    /// </summary>
    public required SecurityIdentification14 FinancialInstrumentIdentification { get; init; } 
    /// <summary>
    /// Specifies the ISO code of the trade currency.
    /// </summary>
    public CurrencyCode? TradingCurrency { get; init; } 
    /// <summary>
    /// Identifies the trade leg indicator which gives the trade side (buy or sell).
    /// </summary>
    public required Side1Code BuySellIndicator { get; init; } 
    /// <summary>
    /// Identifies the quantity of the trade leg.
    /// </summary>
    public required FinancialInstrumentQuantity1Choice_ TradeQuantity { get; init; } 
    /// <summary>
    /// Specifies the price of the traded financial instrument.
    /// </summary>
    public required Price4 DealPrice { get; init; } 
    /// <summary>
    /// Interest that has accumulated on a bond since the last interest payment up to, but not including, the settlement date.
    /// </summary>
    public AmountAndDirection21? AccruedInterestAmount { get; init; } 
    /// <summary>
    /// Place at which the security is traded.
    /// </summary>
    public required MarketIdentification84 PlaceOfTrade { get; init; } 
    /// <summary>
    /// Place at which the security is listed.
    /// </summary>
    public MarketIdentification85? PlaceOfListing { get; init; } 
    /// <summary>
    /// Identifies the type of trade transaction.
    /// </summary>
    public required TradeType1Code TradeType { get; init; } 
    /// <summary>
    /// Indicates that the trade is for settlement of an exercised derivatives contract.
    /// </summary>
    public IsoYesNoIndicator? DerivativeRelatedTrade { get; init; } 
    /// <summary>
    /// Party that identifies a broker when required (for example, authorised broker or prime broker).
    /// </summary>
    public PartyIdentificationAndAccount100? Broker { get; init; } 
    /// <summary>
    /// Provides the identification of the trading party.
    /// </summary>
    public required PartyIdentification35Choice_ TradingParty { get; init; } 
    /// <summary>
    /// Indicates in which session the transaction/operation was executed by the final investor or an intermediary.
    /// </summary>
    public IsoMax35Text? TradeRegistrationOrigin { get; init; } 
    /// <summary>
    /// Identifier of the trading participant's account at the trading venue using the venue's coding system.
    /// </summary>
    public SecuritiesAccount19? TradingPartyAccount { get; init; } 
    /// <summary>
    /// Specifies the role of the trading party in the transaction.
    /// </summary>
    public required TradingCapacity5Code TradingCapacity { get; init; } 
    /// <summary>
    /// Indicates how a trade is maintained in the clearing account.
    /// </summary>
    public TradePosting1Code? TradePostingCode { get; init; } 
    /// <summary>
    /// Place where the securities are safe-kept, physically or notionally. This place can be, for example, a local custodian, a Central Securities Depository (CSD) or an International Central Securities Depository (ICSD).
    /// </summary>
    public SafekeepingPlaceFormat7Choice_? SafekeepingPlace { get; init; } 
    /// <summary>
    /// Account to or from which a securities entry is made.
    /// </summary>
    public SecuritiesAccount19? SafekeepingAccount { get; init; } 
    /// <summary>
    /// Provides settlement details such as the settlement amount or the place of settlement.
    /// </summary>
    public Settlement1? SettlementDetails { get; init; } 
    /// <summary>
    /// Provides clearing details such as the non clearing member identification or the settlement netting (or not) eligibility code.
    /// </summary>
    public Clearing4? ClearingDetails { get; init; } 
    /// <summary>
    /// Principal amount of a trade (price multiplied by quantity).
    /// </summary>
    public AmountAndDirection21? GrossAmount { get; init; } 
    
    #nullable disable
}
