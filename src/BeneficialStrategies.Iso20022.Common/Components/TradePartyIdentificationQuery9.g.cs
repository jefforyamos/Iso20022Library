//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradePartyIdentificationQuery9.  ISO2002 ID# _wy740dLlEem1A4OOmCK97A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Query of a trade party based on the identification.
/// </summary>
public partial record TradePartyIdentificationQuery9
     : IIsoXmlSerilizable<TradePartyIdentificationQuery9>
{
    #nullable enable
    
    /// <summary>
    /// Legal entity identifier code used to recognise the counterparty of the reporting agent for the reported transaction.
    /// </summary>
    public IsoLEIIdentifier? LEI { get; init; } 
    /// <summary>
    /// Country where the registered office of the counterparty is located or country of residence in case that the counterparty is a natural person.
    /// </summary>
    public CountryCode? CountryCode { get; init; } 
    /// <summary>
    /// Business identifier code used to identify the trade party.
    /// </summary>
    public IsoAnyBICDec2014Identifier? AnyBIC { get; init; } 
    /// <summary>
    /// Unique and unambiguous identification of the client counterparty.
    /// </summary>
    public IsoMax50Text? ClientIdentification { get; init; } 
    /// <summary>
    /// Field can be queried for not reported value.
    /// </summary>
    public NotReported1Code? NotReported { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (LEI is IsoLEIIdentifier LEIValue)
        {
            writer.WriteStartElement(null, "LEI", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoLEIIdentifier(LEIValue)); // data type LEIIdentifier System.String
            writer.WriteEndElement();
        }
        if (CountryCode is CountryCode CountryCodeValue)
        {
            writer.WriteStartElement(null, "CtryCd", xmlNamespace );
            writer.WriteValue(CountryCodeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AnyBIC is IsoAnyBICDec2014Identifier AnyBICValue)
        {
            writer.WriteStartElement(null, "AnyBIC", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoAnyBICDec2014Identifier(AnyBICValue)); // data type AnyBICDec2014Identifier System.String
            writer.WriteEndElement();
        }
        if (ClientIdentification is IsoMax50Text ClientIdentificationValue)
        {
            writer.WriteStartElement(null, "ClntId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax50Text(ClientIdentificationValue)); // data type Max50Text System.String
            writer.WriteEndElement();
        }
        if (NotReported is NotReported1Code NotReportedValue)
        {
            writer.WriteStartElement(null, "NotRptd", xmlNamespace );
            writer.WriteValue(NotReportedValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static TradePartyIdentificationQuery9 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
