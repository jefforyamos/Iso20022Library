//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeRecurrentQuery3.  ISO2002 ID# _QH0wdYeAEei-Poi-FosJdw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Recurrent query criteria.
/// </summary>
public partial record TradeRecurrentQuery3
     : IIsoXmlSerilizable<TradeRecurrentQuery3>
{
    #nullable enable
    
    /// <summary>
    /// Defines the type of recurrent query which is requested.
    /// </summary>
    public required IsoMax1000Text QueryType { get; init; } 
    /// <summary>
    /// Defines the requested frequency of the recurrent query.
    /// </summary>
    public required TradeQueryExecutionFrequency1Choice_ Frequency { get; init; } 
    /// <summary>
    /// Defines the date until which the query will be executed.
    /// </summary>
    public required IsoISODate ValidUntil { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "QryTp", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax1000Text(QueryType)); // data type Max1000Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Frqcy", xmlNamespace );
        Frequency.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "VldUntil", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(ValidUntil)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
    }
    public static TradeRecurrentQuery3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
