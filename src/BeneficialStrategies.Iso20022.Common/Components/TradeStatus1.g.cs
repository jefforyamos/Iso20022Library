//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TradeStatus1.  ISO2002 ID# _Q7Ma8dp-Ed-ak6NoX_4Aeg_-931990425.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Specifies the status of a trade in a central settlement system.
/// </summary>
public partial record TradeStatus1
     : IIsoXmlSerilizable<TradeStatus1>
{
    #nullable enable
    
    /// <summary>
    /// Specifies whether a trade is alleged or not.
    /// </summary>
    public IsoYesNoIndicator? AllegedTrade { get; init; } 
    /// <summary>
    /// Reference to the unique identification assigned to a trade by a central matching system.
    /// </summary>
    public required IsoMax35Text MatchingSystemUniqueReference { get; init; } 
    /// <summary>
    /// Specifies the status of a trade.
    /// </summary>
    public TradeStatus1Code? Status { get; init; } 
    /// <summary>
    /// Description of the status of a trade when no coded form is available.
    /// </summary>
    public IsoExtended350Code? ExtendedStatus { get; init; } 
    /// <summary>
    /// Additional information on the status of a trade in a central system.
    /// </summary>
    public IsoMax70Text? StatusSubType { get; init; } 
    /// <summary>
    /// Specifies the time at which a status was assigned.
    /// </summary>
    public IsoISODateTime? StatusTime { get; init; } 
    /// <summary>
    /// Identifies the party which assigned a status to a treasury trade.
    /// </summary>
    public IsoMax35Text? StatusOriginator { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AllegedTrade is IsoYesNoIndicator AllegedTradeValue)
        {
            writer.WriteStartElement(null, "AllgdTrad", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(AllegedTradeValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "MtchgSysUnqRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(MatchingSystemUniqueReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (Status is TradeStatus1Code StatusValue)
        {
            writer.WriteStartElement(null, "Sts", xmlNamespace );
            writer.WriteValue(StatusValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ExtendedStatus is IsoExtended350Code ExtendedStatusValue)
        {
            writer.WriteStartElement(null, "XtndedSts", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExtended350Code(ExtendedStatusValue)); // data type Extended350Code System.String
            writer.WriteEndElement();
        }
        if (StatusSubType is IsoMax70Text StatusSubTypeValue)
        {
            writer.WriteStartElement(null, "StsSubTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(StatusSubTypeValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (StatusTime is IsoISODateTime StatusTimeValue)
        {
            writer.WriteStartElement(null, "StsTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(StatusTimeValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (StatusOriginator is IsoMax35Text StatusOriginatorValue)
        {
            writer.WriteStartElement(null, "StsOrgtr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(StatusOriginatorValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
    }
    public static TradeStatus1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
