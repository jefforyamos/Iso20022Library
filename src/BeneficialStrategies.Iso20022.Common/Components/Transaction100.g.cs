//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction100.  ISO2002 ID# _ZtxdcVWXEeeiG_nL4vgKnQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Key exchange activity transaction.
/// </summary>
public partial record Transaction100
     : IIsoXmlSerilizable<Transaction100>
{
    #nullable enable
    
    /// <summary>
    /// Type of key exchange function being performed.
    /// </summary>
    public required CardServiceType5Code KeyExchangeFunction { get; init; } 
    /// <summary>
    /// Other key exchange function being performed.
    /// </summary>
    public IsoMax35Text? OtherKeyExchangeFunction { get; init; } 
    /// <summary>
    /// Reason to send a key exchange message.
    /// ISO 8583:1993/2003 bit 25.
    /// The ISO 8583 maintenance agency (MA) manages this code list.
    /// </summary>
    public IsoExact4NumericText? MessageReason { get; init; } 
    /// <summary>
    /// Alternate reason to send a message.
    /// </summary>
    public IsoMax35Text? AlternateMessageReason { get; init; } 
    /// <summary>
    /// Identification of the transaction.
    /// </summary>
    public required TransactionIdentification12 TransactionIdentification { get; init; } 
    /// <summary>
    /// Defines the type of key being exchanged.
    /// </summary>
    public KeyType1Code? KeyExchangeType { get; init; } 
    /// <summary>
    /// Other type of key being exchanged.
    /// </summary>
    public IsoMax35Text? OtherKeyExchangeType { get; init; } 
    /// <summary>
    /// Contains information pertaining to a key exchange. 
    /// ISO 8583 bit 96
    /// </summary>
    public KeyExchangeData1? KeyExchangeData { get; init; } 
    /// <summary>
    /// Fees not included in the transaction amount but included in the settlement.
    /// </summary>
    public AdditionalFee1? AdditionalFees { get; init; } 
    /// <summary>
    /// Contains additional data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "KeyXchgFctn", xmlNamespace );
        writer.WriteValue(KeyExchangeFunction.ToString()); // Enum value
        writer.WriteEndElement();
        if (OtherKeyExchangeFunction is IsoMax35Text OtherKeyExchangeFunctionValue)
        {
            writer.WriteStartElement(null, "OthrKeyXchgFctn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherKeyExchangeFunctionValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MessageReason is IsoExact4NumericText MessageReasonValue)
        {
            writer.WriteStartElement(null, "MsgRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4NumericText(MessageReasonValue)); // data type Exact4NumericText System.String
            writer.WriteEndElement();
        }
        if (AlternateMessageReason is IsoMax35Text AlternateMessageReasonValue)
        {
            writer.WriteStartElement(null, "AltrnMsgRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AlternateMessageReasonValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (KeyExchangeType is KeyType1Code KeyExchangeTypeValue)
        {
            writer.WriteStartElement(null, "KeyXchgTp", xmlNamespace );
            writer.WriteValue(KeyExchangeTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OtherKeyExchangeType is IsoMax35Text OtherKeyExchangeTypeValue)
        {
            writer.WriteStartElement(null, "OthrKeyXchgTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherKeyExchangeTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (KeyExchangeData is KeyExchangeData1 KeyExchangeDataValue)
        {
            writer.WriteStartElement(null, "KeyXchgData", xmlNamespace );
            KeyExchangeDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalFees is AdditionalFee1 AdditionalFeesValue)
        {
            writer.WriteStartElement(null, "AddtlFees", xmlNamespace );
            AdditionalFeesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Transaction100 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
