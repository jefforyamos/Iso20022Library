//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction132.  ISO2002 ID# _nNkNAYv5EeumSPwlS1PkxQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Inquiry transaction
/// </summary>
[DataContract]
[XmlType]
public partial record Transaction132
{
    #nullable enable
    
    /// <summary>
    /// Type of transaction associated with the main service.
    /// For valid values, see "Transaction type codes" in ISO 8583 "Financial transaction card originated messages — Interchange message specifications"
    /// </summary>
    [DataMember]
    public required ISO8583TransactionTypeCode TransactionType { get; init; } 
    /// <summary>
    /// Further breakdown of the transaction type being performed.
    /// </summary>
    [DataMember]
    public IsoMax35Text? TransactionSubType { get; init; } 
    /// <summary>
    /// Additional functions or services to be performed in conjunction with the transaction.
    /// </summary>
    [DataMember]
    public ValueList<AdditionalService2> AdditionalService { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Data to qualify for incentive or other related programmes.
    /// </summary>
    [DataMember]
    public ValueList<SpecialProgrammeQualification1> SpecialProgrammeQualification { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Identification of the transaction.
    /// </summary>
    [DataMember]
    public required TransactionIdentification18 TransactionIdentification { get; init; } 
    /// <summary>
    /// Amount used for reconciliation. 
    /// Calculated based on the transaction amount, except when the transaction amount is absent. When transaction amount is absent, the reconciliation amount is calculated on the detailed amount field 
    /// </summary>
    [DataMember]
    public Amount15? ReconciliationAmount { get; init; } 
    /// <summary>
    /// Amounts that are not part of the transaction amount and not included in reconciliation.
    /// </summary>
    [DataMember]
    public ValueList<AdditionalAmounts3> AdditionalAmount { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Fees not included in the transaction amount but included in the settlement.
    /// </summary>
    [DataMember]
    public ValueList<AdditionalFee2> AdditionalFee { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Balance of an account.
    /// </summary>
    [DataMember]
    public ValueList<AccountBalance2> AccountBalance { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Account information of a statement of account.
    /// </summary>
    [DataMember]
    public ValueList<AccountStatementData2> AccountStatementData { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies a customer account or a relationship to its account affected for debit, inquiries and the source of funding for transfers.
    /// </summary>
    [DataMember]
    public AccountDetails3? AccountFrom { get; init; } 
    /// <summary>
    /// Transaction data related to programmes and services, content and format based on bilateral agreements.
    /// </summary>
    [DataMember]
    public IsoMax1000Text? TransactionDescription { get; init; } 
    /// <summary>
    /// Contains additional data.
    /// </summary>
    [DataMember]
    public ValueList<AdditionalData1> AdditionalData { get; init; } = []; // Warning: Don't know multiplicity.
    
    #nullable disable
}
