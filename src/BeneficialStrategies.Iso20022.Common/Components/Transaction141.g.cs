//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction141.  ISO2002 ID# _6Cj1gZMqEeuleeHpFMMhmQ.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Batch management transaction.
/// </summary>
public partial record Transaction141
{
    #nullable enable
    
    /// <summary>
    /// Identification of the batch management transaction.
    /// </summary>
    public TransactionIdentification12? TransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of a batch.
    /// All the messages included within the batch will have the same batch identification value.
    /// </summary>
    public IsoMax70Text? BatchIdentification { get; init; } 
    /// <summary>
    /// Identification of the original batch to answer.
    /// Mandatory when the batch response has not the same identification as the batch initiation.
    /// </summary>
    public IsoMax70Text? OriginalBatchIdentification { get; init; } 
    /// <summary>
    /// Number of messages.
    /// For a start of a collection, this is the number of expected messages in the collection if known. This is also the last expected message sequence number in the collection.
    /// For a start of a batch, this is the number of expected messages in the batch if known. This is also the last expected message sequence number in the batch.
    /// For a start of a batch acknowledgement, this is the maximum number of messages that can be received in the batch.
    /// For an intermediate acknowledgement, this is the last message sequence number received in sequence.
    /// For an intermediate checkpoint, this is the message sequence number of the last received message.
    /// For an end of batch this is the last message sequence number sent in the closing batch, equal to the number of messages sent in the batch.
    /// For an end of batch acknowledgement, this is the last sequence number received in the sequence.
    /// </summary>
    public IsoNumber? NumberOfMessages { get; init; } 
    /// <summary>
    /// Checksum of the series of messages received in the batch or until a checkpoint.
    /// </summary>
    public IsoMax35Binary? BatchChecksum { get; init; } 
    /// <summary>
    /// Indicator to request acknowledgement.
    /// True: Acknowledgement requested
    /// False: Acknowledgement not requested.
    /// </summary>
    public IsoTrueFalseIndicator? RequestAcknowledgement { get; init; } 
    /// <summary>
    /// Clearing data at batch level allowing clearing in different currencies.
    /// </summary>
    public ClearingBatchData2? ClearingBatchData { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Gross amount clearing totals.
    /// </summary>
    public ClearingControlTotals2? ClearingControlTotals { get; init; } 
    /// <summary>
    /// Information or instructions relevant for the agent in charge of the clearing.
    /// </summary>
    public AdditionalInformation21? AgentData { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Record in batch.
    /// </summary>
    public Record2? Record { get; init;  } // Warning: Don't know multiplicity.
    /// <summary>
    /// Contains additional data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init;  } // Warning: Don't know multiplicity.
    
    #nullable disable
}
