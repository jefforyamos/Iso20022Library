//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction142.  ISO2002 ID# _EyN00cL8EeujWbERHVYCew.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Contains transaction details.
/// </summary>
public partial record Transaction142
     : IIsoXmlSerilizable<Transaction142>
{
    #nullable enable
    
    /// <summary>
    /// Code that indicates the type of transaction being undertaken in accordance with ISO 8583, Transaction Type.
    /// </summary>
    public required ISO8583TransactionTypeCode TransactionType { get; init; } 
    /// <summary>
    /// Further breakdown of the transaction type being performed.
    /// </summary>
    public IsoMax35Text? TransactionSubType { get; init; } 
    /// <summary>
    /// Attribute of the transaction.
    /// ISO 8583:87 bit 25
    /// ISO 8583:2003 bit 22-3 & bit 24
    /// </summary>
    public TransactionAttribute2Code? TransactionAttribute { get; init; } 
    /// <summary>
    /// Other transaction attribute defined at national or private level.
    /// </summary>
    public IsoMax35Text? OtherTransactionAttribute { get; init; } 
    /// <summary>
    /// Reason or purpose to send the message.
    /// The ISO 8583 maintenance agency (MA) manages this code list.
    /// </summary>
    public ISO8583MessageReasonCode? MessageReason { get; init; } 
    /// <summary>
    /// Supports message reason codes that are not defined in external code list. 
    /// </summary>
    public IsoMax256Text? AlternateMessageReason { get; init; } 
    /// <summary>
    /// Contains the period (expressed in minutes) within which a merchant is expected to complete the transaction.
    /// ISO8583:1993 and ISO 8583:2003 Bit 57
    /// </summary>
    public IsoMax6NumericText? PreAuthorisationTimeLimit { get; init; } 
    /// <summary>
    /// Additional functions or services to be performed in conjunction with the transaction.
    /// </summary>
    public AdditionalService2? AdditionalService { get; init; } 
    /// <summary>
    /// Indicates that additional data will be provided in a separate addendum message.
    /// </summary>
    public IsoTrueFalseIndicator? AssociatedDataIndicator { get; init; } 
    /// <summary>
    /// Reference to additional transaction details to be conveyed separately from this message.
    /// </summary>
    public IsoMax70Text? AssociatedDataReference { get; init; } 
    /// <summary>
    /// Destination value to be used in the subsequent addendum message.
    /// </summary>
    public IsoMax35Text? AssociatedDataDestination { get; init; } 
    /// <summary>
    /// Data to qualify for incentive or other related programmes.
    /// </summary>
    public SpecialProgrammeQualification1? SpecialProgrammeQualification { get; init; } 
    /// <summary>
    /// Identification of the transaction.
    /// </summary>
    public required TransactionIdentification51 TransactionIdentification { get; init; } 
    /// <summary>
    /// Information about the dispute.
    /// </summary>
    public DisputeData3? DisputeData { get; init; } 
    /// <summary>
    /// Amounts of the card transaction.
    /// </summary>
    public required TransactionAmounts2 TransactionAmounts { get; init; } 
    /// <summary>
    /// Amounts that are not part of the transaction amount and not included in reconciliation.
    /// </summary>
    public AdditionalAmounts3? AdditionalAmount { get; init; } 
    /// <summary>
    /// Fees not included in the transaction amount.
    /// </summary>
    public AdditionalFee2? AdditionalFee { get; init; } 
    /// <summary>
    /// Fees not included in the original transaction amount.
    /// </summary>
    public AdditionalFee2? OriginalAdditionalFee { get; init; } 
    /// <summary>
    /// Contains ATM deposit details.
    /// </summary>
    public DepositDetails2? DepositDetails { get; init; } 
    /// <summary>
    /// Financial services related to the account.
    /// </summary>
    public FundingService2? FundsServices { get; init; } 
    /// <summary>
    /// Identifies a customer account or a relationship to its account affected for debit, inquiries and the source of funding for transfers.
    /// </summary>
    public AccountDetails3? AccountFrom { get; init; } 
    /// <summary>
    /// Identifies a customer account or a relationship to its account affected for credits, inquiries and the destination account for funds transfers.
    /// </summary>
    public AccountDetails3? AccountTo { get; init; } 
    /// <summary>
    /// Transaction data related to programmes and services, content and format based on bilateral agreements.
    /// ISO 8583:87/93 bit 104
    /// ISO 8583:2003 bit 104-71
    /// </summary>
    public IsoMax1000Text? TransactionDescription { get; init; } 
    /// <summary>
    /// Contains additional data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxTp", xmlNamespace );
        writer.WriteValue(TransactionType.ToString()); // Enum value
        writer.WriteEndElement();
        if (TransactionSubType is IsoMax35Text TransactionSubTypeValue)
        {
            writer.WriteStartElement(null, "TxSubTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TransactionSubTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TransactionAttribute is TransactionAttribute2Code TransactionAttributeValue)
        {
            writer.WriteStartElement(null, "TxAttr", xmlNamespace );
            writer.WriteValue(TransactionAttributeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OtherTransactionAttribute is IsoMax35Text OtherTransactionAttributeValue)
        {
            writer.WriteStartElement(null, "OthrTxAttr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(OtherTransactionAttributeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (MessageReason is ISO8583MessageReasonCode MessageReasonValue)
        {
            writer.WriteStartElement(null, "MsgRsn", xmlNamespace );
            writer.WriteValue(MessageReasonValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AlternateMessageReason is IsoMax256Text AlternateMessageReasonValue)
        {
            writer.WriteStartElement(null, "AltrnMsgRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax256Text(AlternateMessageReasonValue)); // data type Max256Text System.String
            writer.WriteEndElement();
        }
        if (PreAuthorisationTimeLimit is IsoMax6NumericText PreAuthorisationTimeLimitValue)
        {
            writer.WriteStartElement(null, "PreAuthstnTmLmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax6NumericText(PreAuthorisationTimeLimitValue)); // data type Max6NumericText System.String
            writer.WriteEndElement();
        }
        if (AdditionalService is AdditionalService2 AdditionalServiceValue)
        {
            writer.WriteStartElement(null, "AddtlSvc", xmlNamespace );
            AdditionalServiceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AssociatedDataIndicator is IsoTrueFalseIndicator AssociatedDataIndicatorValue)
        {
            writer.WriteStartElement(null, "AssoctdDataInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AssociatedDataIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AssociatedDataReference is IsoMax70Text AssociatedDataReferenceValue)
        {
            writer.WriteStartElement(null, "AssoctdDataRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AssociatedDataReferenceValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (AssociatedDataDestination is IsoMax35Text AssociatedDataDestinationValue)
        {
            writer.WriteStartElement(null, "AssoctdDataDstn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AssociatedDataDestinationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SpecialProgrammeQualification is SpecialProgrammeQualification1 SpecialProgrammeQualificationValue)
        {
            writer.WriteStartElement(null, "SpclPrgrmmQlfctn", xmlNamespace );
            SpecialProgrammeQualificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DisputeData is DisputeData3 DisputeDataValue)
        {
            writer.WriteStartElement(null, "DsptData", xmlNamespace );
            DisputeDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxAmts", xmlNamespace );
        TransactionAmounts.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AdditionalAmount is AdditionalAmounts3 AdditionalAmountValue)
        {
            writer.WriteStartElement(null, "AddtlAmt", xmlNamespace );
            AdditionalAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalFee is AdditionalFee2 AdditionalFeeValue)
        {
            writer.WriteStartElement(null, "AddtlFee", xmlNamespace );
            AdditionalFeeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginalAdditionalFee is AdditionalFee2 OriginalAdditionalFeeValue)
        {
            writer.WriteStartElement(null, "OrgnlAddtlFee", xmlNamespace );
            OriginalAdditionalFeeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DepositDetails is DepositDetails2 DepositDetailsValue)
        {
            writer.WriteStartElement(null, "DpstDtls", xmlNamespace );
            DepositDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (FundsServices is FundingService2 FundsServicesValue)
        {
            writer.WriteStartElement(null, "FndsSvcs", xmlNamespace );
            FundsServicesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountFrom is AccountDetails3 AccountFromValue)
        {
            writer.WriteStartElement(null, "AcctFr", xmlNamespace );
            AccountFromValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AccountTo is AccountDetails3 AccountToValue)
        {
            writer.WriteStartElement(null, "AcctTo", xmlNamespace );
            AccountToValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionDescription is IsoMax1000Text TransactionDescriptionValue)
        {
            writer.WriteStartElement(null, "TxDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax1000Text(TransactionDescriptionValue)); // data type Max1000Text System.String
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Transaction142 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
