//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction155.  ISO2002 ID# _g8sk0YgoEeu8-LhY4KPfWg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Error or rejection transaction.
/// </summary>
public partial record Transaction155
     : IIsoXmlSerilizable<Transaction155>
{
    #nullable enable
    
    /// <summary>
    /// Transaction Identification of the Error message.
    /// </summary>
    public required TransactionIdentification12 TransactionIdentification { get; init; } 
    /// <summary>
    /// Contains error details.
    ///  ISO 8583:2003, bit 18
    /// </summary>
    public ErrorDetails2? ErrorDetail { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _hCNW84goEeu8-LhY4KPfWg
    /// <summary>
    /// Original request that caused the party to reject it.
    /// </summary>
    public IsoMax100KBinary? OriginalMessage { get; init; } 
    /// <summary>
    /// Fees not included in the transaction amount but included in the settlement.
    /// </summary>
    public AdditionalFee2? AdditionalFee { get; init; } 
    /// <summary>
    /// Contains additional data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        // Not sure how to serialize ErrorDetail, multiplicity Unknown
        if (OriginalMessage is IsoMax100KBinary OriginalMessageValue)
        {
            writer.WriteStartElement(null, "OrgnlMsg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax100KBinary(OriginalMessageValue)); // data type Max100KBinary System.Byte[]
            writer.WriteEndElement();
        }
        if (AdditionalFee is AdditionalFee2 AdditionalFeeValue)
        {
            writer.WriteStartElement(null, "AddtlFee", xmlNamespace );
            AdditionalFeeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Transaction155 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
