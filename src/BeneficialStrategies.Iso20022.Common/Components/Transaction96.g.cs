//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transaction96.  ISO2002 ID# _3xcXwVA5EeedyPuM0kK2EQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Batch management transaction.
/// </summary>
public partial record Transaction96
     : IIsoXmlSerilizable<Transaction96>
{
    #nullable enable
    
    /// <summary>
    /// Identification of the batch management transaction.
    /// </summary>
    public TransactionIdentification10? TransactionIdentification { get; init; } 
    /// <summary>
    /// Identification of a batch.
    /// All the messages included within the batch will have the same batch identification value.
    /// </summary>
    public IsoMax70Text? BatchIdentification { get; init; } 
    /// <summary>
    /// Identification of the original batch to answer.
    /// Mandatory when the batch response has not the same identification as the batch initiation.
    /// </summary>
    public IsoMax70Text? OriginalBatchIdentification { get; init; } 
    /// <summary>
    /// Number of messages.
    /// For a start of a collection, this is the number of expected messages in the collection if known. This is also the last expected message sequence number in the collection.
    /// For a start of a batch, this is the number of expected messages in the batch if known. This is also the last expected message sequence number in the batch.
    /// For a start of a batch acknowledgement, this is the maximum number of messages that can be received in the batch.
    /// For an intermediate acknowledgement, this is the last message sequence number received in sequence.
    /// For an intermediate checkpoint, this is the message sequence number of the last received message.
    /// For an end of batch this is the last message sequence number sent in the closing batch, equal to the number of messages sent in the batch.
    /// For an end of batch acknowledgement, this is the last sequence number received in the sequence.
    /// </summary>
    public IsoNumber? NumberOfMessages { get; init; } 
    /// <summary>
    /// Checksum of the series of messages received in the batch or until a checkpoint.
    /// </summary>
    public IsoMax35Binary? BatchChecksum { get; init; } 
    /// <summary>
    /// Indicator to request acknowlegement.
    /// True: Acknowledgement requested
    /// False: Acknowledgement not requested.
    /// </summary>
    public IsoTrueFalseIndicator? RequestAcknowledgement { get; init; } 
    /// <summary>
    /// Clearing data at batch level allowing clearing in different currencies.
    /// </summary>
    public ClearingBatchData1? ClearingBatchData { get; init; } 
    /// <summary>
    /// Gross amount clearing totals.
    /// </summary>
    public ClearingControlTotals1? ClearingControlTotals { get; init; } 
    /// <summary>
    /// Information or instructions relevant for the agent in charge of the clearing.
    /// </summary>
    public AdditionalInformation21? AgentData { get; init; } 
    /// <summary>
    /// Record in batch.
    /// </summary>
    public Record1? Record { get; init; } 
    /// <summary>
    /// Contains additional data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TransactionIdentification is TransactionIdentification10 TransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "TxId", xmlNamespace );
            TransactionIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BatchIdentification is IsoMax70Text BatchIdentificationValue)
        {
            writer.WriteStartElement(null, "BtchId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(BatchIdentificationValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (OriginalBatchIdentification is IsoMax70Text OriginalBatchIdentificationValue)
        {
            writer.WriteStartElement(null, "OrgnlBtchId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(OriginalBatchIdentificationValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (NumberOfMessages is IsoNumber NumberOfMessagesValue)
        {
            writer.WriteStartElement(null, "NbOfMsgs", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(NumberOfMessagesValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (BatchChecksum is IsoMax35Binary BatchChecksumValue)
        {
            writer.WriteStartElement(null, "BtchChcksm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Binary(BatchChecksumValue)); // data type Max35Binary System.Byte[]
            writer.WriteEndElement();
        }
        if (RequestAcknowledgement is IsoTrueFalseIndicator RequestAcknowledgementValue)
        {
            writer.WriteStartElement(null, "ReqAck", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(RequestAcknowledgementValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ClearingBatchData is ClearingBatchData1 ClearingBatchDataValue)
        {
            writer.WriteStartElement(null, "ClrBtchData", xmlNamespace );
            ClearingBatchDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClearingControlTotals is ClearingControlTotals1 ClearingControlTotalsValue)
        {
            writer.WriteStartElement(null, "ClrCtrlTtls", xmlNamespace );
            ClearingControlTotalsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AgentData is AdditionalInformation21 AgentDataValue)
        {
            writer.WriteStartElement(null, "AgtData", xmlNamespace );
            AgentDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Record is Record1 RecordValue)
        {
            writer.WriteStartElement(null, "Rcrd", xmlNamespace );
            RecordValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Transaction96 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
