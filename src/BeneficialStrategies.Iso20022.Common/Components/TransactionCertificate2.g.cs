//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionCertificate2.  ISO2002 ID# _Oo0tENLiEeSdq5yU2aaSNw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Certificate in which all currency control transactions are registered.
/// </summary>
public partial record TransactionCertificate2
     : IIsoXmlSerilizable<TransactionCertificate2>
{
    #nullable enable
    
    /// <summary>
    /// Reference of the transaction, that is the underlying payment instruction or statement entry.
    /// </summary>
    public required CertificateReference1 ReferredDocument { get; init; } 
    /// <summary>
    /// Date of the underlying transaction.
    /// </summary>
    public required IsoISODate TransactionDate { get; init; } 
    /// <summary>
    /// Type of the transaction.
    /// </summary>
    public required IsoExact1NumericText TransactionType { get; init; } 
    /// <summary>
    /// User community specific instrument.
    /// Usage: This element is used to specify a local transaction type to further qualify the transaction type.
    /// </summary>
    public required IsoExact5NumericText LocalInstrument { get; init; } 
    /// <summary>
    /// Amount as provided in the transaction to be recorded under the contract.
    /// </summary>
    public required IsoActiveCurrencyAndAmount Amount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RfrdDoc", xmlNamespace );
        ReferredDocument.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TxDt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODate(TransactionDate)); // data type ISODate System.DateOnly
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TxTp", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExact1NumericText(TransactionType)); // data type Exact1NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "LclInstrm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoExact5NumericText(LocalInstrument)); // data type Exact5NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Amt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(Amount)); // data type ActiveCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
    }
    public static TransactionCertificate2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
