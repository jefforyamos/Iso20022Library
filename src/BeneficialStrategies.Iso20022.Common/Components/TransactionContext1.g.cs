//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionContext1.  ISO2002 ID# _N2aVEEbJEeeIjf8aP9KbJA.
//

using BeneficialStrategies.Iso20022.Choices;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Context of the card payment transaction.
/// </summary>
public partial record TransactionContext1
{
    #nullable enable
    
    /// <summary>
    /// Category code related to the type of services or goods the merchant provides for the transaction.
    /// ISO 8583:87 bit 18, ISO 8583:93 bit 18 & 26, ISO 8583:2003 bit 26
    /// ISO 18245
    /// </summary>
    public required IsoExact4NumericText MerchantCategoryCode { get; init; } 
    /// <summary>
    /// Further details about the merchant that is used in with the merchant category code (MCC) for the particular purchase.
    /// </summary>
    public IsoMax35Text? MerchantCategorySpecificData { get; init; } 
    /// <summary>
    /// Notifies the express consent of the customer for a given service (used in DCC, funds transfers, money lending, etc.).
    /// True: Explicit customer consent obtained
    /// False: Implicit customer consent obtained
    /// </summary>
    public IsoTrueFalseIndicator? CustomerConsent { get; init; } 
    /// <summary>
    /// Indicates a chip data fallback.
    /// True: Fallback
    /// False: No fallback
    /// Default: False
    /// </summary>
    public IsoTrueFalseIndicator? ICCFallbackIndicator { get; init; } 
    /// <summary>
    /// Indicates a magnetic stripe fallback.
    /// True: Fallback
    /// False: No fallback
    /// Default: False
    /// </summary>
    public IsoTrueFalseIndicator? MagneticStripeFallbackIndicator { get; init; } 
    /// <summary>
    /// Indicates a late presentment as defined by each specific implementation.
    /// True: Transaction was presented late
    /// False: Transaction was not presented late
    /// Default: False
    /// </summary>
    public IsoTrueFalseIndicator? LatePresentmentIndicator { get; init; } 
    /// <summary>
    /// Identifies final authorisation messages for the purpose of managing open-to buy or available balance. 
    /// </summary>
    public IsoTrueFalseIndicator? FinalAuthorisationIndicator { get; init; } 
    /// <summary>
    /// Indicates a deferred delivery as defined by each specific implementation.
    /// True: deferred delivery.
    /// False: Delivery is not identified as deffered.
    /// Default: False.
    /// </summary>
    public IsoTrueFalseIndicator? DeferredDeliveryIndicator { get; init; } 
    /// <summary>
    /// Identifies the transaction initiator.
    /// </summary>
    public TransactionInitiator1Code? TransactionInitiator { get; init; } 
    /// <summary>
    /// Card programme or brand related to the transaction.
    /// </summary>
    public CardProgramme1? CardProgramme { get; init; } 
    /// <summary>
    /// Type of settlement service for specific services requiring settlement.
    /// </summary>
    public SettlementService1? SettlementService { get; init; } 
    /// <summary>
    /// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
    /// </summary>
    public Reconciliation3? Reconciliation { get; init; } 
    /// <summary>
    /// Date the transaction was completed and captured.
    /// ISO 8583 bit 17
    /// </summary>
    public IsoISODate? CaptureDate { get; init; } 
    
    #nullable disable
}
