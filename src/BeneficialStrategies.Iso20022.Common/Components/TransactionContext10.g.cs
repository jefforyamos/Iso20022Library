//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionContext10.  ISO2002 ID# _K4fNUcVeEeuips4fuphvoQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Context of the card payment transaction
/// </summary>
public partial record TransactionContext10
     : IIsoXmlSerilizable<TransactionContext10>
{
    #nullable enable
    
    /// <summary>
    /// Card programme or brand related to the transaction.
    /// </summary>
    public CardProgrammeMode3? CardProgrammeApplied { get; init; } 
    /// <summary>
    /// Contains information that identifies or is specific to a transaction jurisdiction.
    /// </summary>
    public Jurisdiction2? Jurisdiction { get; init; } 
    /// <summary>
    /// Type of settlement service for specific services requiring settlement.
    /// </summary>
    public SettlementService4? SettlementService { get; init; } 
    /// <summary>
    /// Identification of the reconciliation period between the acquirer and the issuer or their respective agents.
    /// </summary>
    public Reconciliation3? Reconciliation { get; init; } 
    /// <summary>
    /// Additional transaction context data.
    /// </summary>
    public AdditionalData1? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CardProgrammeApplied is CardProgrammeMode3 CardProgrammeAppliedValue)
        {
            writer.WriteStartElement(null, "CardPrgrmmApld", xmlNamespace );
            CardProgrammeAppliedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Jurisdiction is Jurisdiction2 JurisdictionValue)
        {
            writer.WriteStartElement(null, "Jursdctn", xmlNamespace );
            JurisdictionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementService is SettlementService4 SettlementServiceValue)
        {
            writer.WriteStartElement(null, "SttlmSvc", xmlNamespace );
            SettlementServiceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Reconciliation is Reconciliation3 ReconciliationValue)
        {
            writer.WriteStartElement(null, "Rcncltn", xmlNamespace );
            ReconciliationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalData is AdditionalData1 AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            AdditionalDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TransactionContext10 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
