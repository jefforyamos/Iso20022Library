//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionDetails3.  ISO2002 ID# _S-6mMdp-Ed-ak6NoX_4Aeg_-160365271.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the transaction.
/// </summary>
[DataContract]
[XmlType]
public partial record TransactionDetails3
{
    #nullable enable
    
    /// <summary>
    /// Unique identification assigned to a trade. This is the reference generated by a firm or the reference allocated by the executing system if the trade was executed automatically.
    /// </summary>
    [DataMember]
    public required IsoMax70Text TradeReference { get; init; } 
    /// <summary>
    /// Reference that links to other trades that are/will be sent, eg for straddles where put and call legs need to be reported together.
    /// </summary>
    [DataMember]
    public ValueList<IsoMax70Text> AssociatedTradeReference { get; init; } = []; // Warning: Don't know multiplicity.
    /// <summary>
    /// Identifies the execution venue. In the case of an exchange or a Multilateral Trading Facility (MTF), this should be identified using a MIC code. In the case of a systematic internaliser, place of trade should be identified using a BIC code.
    /// </summary>
    [DataMember]
    public required PlaceOfTradeIdentification2Choice_ PlaceOfTrade { get; init; } 
    /// <summary>
    /// Specifies the date/time on which the trade was executed.
    /// </summary>
    [DataMember]
    public required IsoISODateTime TradeDateTime { get; init; } 
    /// <summary>
    /// Provides details of the financial instrument for which the transaction report is being sent.
    /// </summary>
    [DataMember]
    public required FinancialInstrument15 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Identifies whether the transaction was a buy or a sell from the perspective of the reporting firm.
    /// </summary>
    [DataMember]
    public required OrderDriverCode Side { get; init; } 
    /// <summary>
    /// Identifies the regulator(s) to whom the transaction report must be sent.
    /// </summary>
    [DataMember]
    public ValueList<PartyIdentification24Choice_> TransactionReportMarker { get; init; } = [];
    /// <summary>
    /// Provides details of the counterparty.
    /// </summary>
    [DataMember]
    public required PartyIdentification11Choice_ Counterparty { get; init; } 
    /// <summary>
    /// Provides details of the client.
    /// </summary>
    [DataMember]
    public PartyIdentification23? Client { get; init; } 
    /// <summary>
    /// Identifies the trading capacity of the firm reporting the transaction, eg Agent or Principal.
    /// </summary>
    [DataMember]
    public required TradingCapacity3Code Capacity { get; init; } 
    /// <summary>
    /// Specifies the currency and price at which the trade has been executed, excluding commission or accrued interest.
    /// </summary>
    [DataMember]
    public required PriceRateOrAmountChoice_ ExecutedTradePrice { get; init; } 
    /// <summary>
    /// Quantity of financial instrument executed by the trading party.
    /// </summary>
    [DataMember]
    public required UnitOrFaceAmountChoice_ ExecutedTradeQuantity { get; init; } 
    /// <summary>
    /// The total consideration or value.
    /// </summary>
    [DataMember]
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    /// <summary>
    /// Identifies the intended settlement date.
    /// </summary>
    [DataMember]
    public IsoISODateTime? SettlementDate { get; init; } 
    /// <summary>
    /// Provides details of the person/organisation that has the power of attorney.
    /// </summary>
    [DataMember]
    public PartyIdentification2Choice_? ProxyHolder { get; init; } 
    /// <summary>
    /// Additional domestic regulatory transaction information.
    /// </summary>
    [DataMember]
    public IsoMax350Text? AdditionalInformation { get; init; } 
    
    #nullable disable
}
