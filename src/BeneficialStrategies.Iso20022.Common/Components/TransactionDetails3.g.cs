//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionDetails3.  ISO2002 ID# _S-6mMdp-Ed-ak6NoX_4Aeg_-160365271.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the transaction.
/// </summary>
public partial record TransactionDetails3
     : IIsoXmlSerilizable<TransactionDetails3>
{
    #nullable enable
    
    /// <summary>
    /// Unique identification assigned to a trade. This is the reference generated by a firm or the reference allocated by the executing system if the trade was executed automatically.
    /// </summary>
    public required IsoMax70Text TradeReference { get; init; } 
    /// <summary>
    /// Reference that links to other trades that are/will be sent, eg for straddles where put and call legs need to be reported together.
    /// </summary>
    public IsoMax70Text? AssociatedTradeReference { get; init; } 
    /// <summary>
    /// Identifies the execution venue. In the case of an exchange or a Multilateral Trading Facility (MTF), this should be identified using a MIC code. In the case of a systematic internaliser, place of trade should be identified using a BIC code.
    /// </summary>
    public required PlaceOfTradeIdentification2Choice_ PlaceOfTrade { get; init; } 
    /// <summary>
    /// Specifies the date/time on which the trade was executed.
    /// </summary>
    public required IsoISODateTime TradeDateTime { get; init; } 
    /// <summary>
    /// Provides details of the financial instrument for which the transaction report is being sent.
    /// </summary>
    public required FinancialInstrument15 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Identifies whether the transaction was a buy or a sell from the perspective of the reporting firm.
    /// </summary>
    public required OrderDriverCode Side { get; init; } 
    /// <summary>
    /// Identifies the regulator(s) to whom the transaction report must be sent.
    /// </summary>
    public ValueList<PartyIdentification24Choice_> TransactionReportMarker { get; init; } = [];
    /// <summary>
    /// Provides details of the counterparty.
    /// </summary>
    public required PartyIdentification11Choice_ Counterparty { get; init; } 
    /// <summary>
    /// Provides details of the client.
    /// </summary>
    public PartyIdentification23? Client { get; init; } 
    /// <summary>
    /// Identifies the trading capacity of the firm reporting the transaction, eg Agent or Principal.
    /// </summary>
    public required TradingCapacity3Code Capacity { get; init; } 
    /// <summary>
    /// Specifies the currency and price at which the trade has been executed, excluding commission or accrued interest.
    /// </summary>
    public required PriceRateOrAmountChoice_ ExecutedTradePrice { get; init; } 
    /// <summary>
    /// Quantity of financial instrument executed by the trading party.
    /// </summary>
    public required UnitOrFaceAmountChoice_ ExecutedTradeQuantity { get; init; } 
    /// <summary>
    /// The total consideration or value.
    /// </summary>
    public IsoActiveCurrencyAndAmount? SettlementAmount { get; init; } 
    /// <summary>
    /// Identifies the intended settlement date.
    /// </summary>
    public IsoISODateTime? SettlementDate { get; init; } 
    /// <summary>
    /// Provides details of the person/organisation that has the power of attorney.
    /// </summary>
    public PartyIdentification2Choice_? ProxyHolder { get; init; } 
    /// <summary>
    /// Additional domestic regulatory transaction information.
    /// </summary>
    public IsoMax350Text? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax70Text(TradeReference)); // data type Max70Text System.String
        writer.WriteEndElement();
        if (AssociatedTradeReference is IsoMax70Text AssociatedTradeReferenceValue)
        {
            writer.WriteStartElement(null, "AssoctdTradRef", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AssociatedTradeReferenceValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "PlcOfTrad", xmlNamespace );
        PlaceOfTrade.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDtTm", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISODateTime(TradeDateTime)); // data type ISODateTime System.DateTime
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FinInstrmDtls", xmlNamespace );
        FinancialInstrumentDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sd", xmlNamespace );
        writer.WriteValue(Side.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TxRptMrkr", xmlNamespace );
        TransactionReportMarker.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CtrPty", xmlNamespace );
        Counterparty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Client is PartyIdentification23 ClientValue)
        {
            writer.WriteStartElement(null, "Clnt", xmlNamespace );
            ClientValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Cpcty", xmlNamespace );
        writer.WriteValue(Capacity.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ExctdTradPric", xmlNamespace );
        ExecutedTradePrice.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ExctdTradQty", xmlNamespace );
        ExecutedTradeQuantity.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SettlementAmount is IsoActiveCurrencyAndAmount SettlementAmountValue)
        {
            writer.WriteStartElement(null, "SttlmAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(SettlementAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (SettlementDate is IsoISODateTime SettlementDateValue)
        {
            writer.WriteStartElement(null, "SttlmDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODateTime(SettlementDateValue)); // data type ISODateTime System.DateTime
            writer.WriteEndElement();
        }
        if (ProxyHolder is PartyIdentification2Choice_ ProxyHolderValue)
        {
            writer.WriteStartElement(null, "PrxyHldr", xmlNamespace );
            ProxyHolderValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is IsoMax350Text AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(AdditionalInformationValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
    }
    public static TransactionDetails3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
