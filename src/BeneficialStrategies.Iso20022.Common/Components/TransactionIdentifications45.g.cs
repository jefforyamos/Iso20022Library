//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionIdentifications45.  ISO2002 ID# _HZc9IRIqEeyZaPkaPAzTvQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides unambiguous instruction or transaction identification information.
/// </summary>
public partial record TransactionIdentifications45
     : IIsoXmlSerilizable<TransactionIdentifications45>
{
    #nullable enable
    
    /// <summary>
    /// Unique reference identifying the collateral management instruction from the client's point of view. Identifies the potential match.
    /// </summary>
    public required IsoMax35Text ClientCollateralInstructionIdentification { get; init; } 
    /// <summary>
    /// Unique reference identifying the collateral management transaction from the client's point of view. Present in case of a decrease.
    /// </summary>
    public IsoMax35Text? ClientCollateralTransactionIdentification { get; init; } 
    /// <summary>
    /// Reference assigned to the instruction by the triparty-agent/service-provider.
    /// </summary>
    public IsoMax35Text? TripartyAgentServiceProviderCollateralInstructionIdentification { get; init; } 
    /// <summary>
    /// Unique reference identifying the triparty-agent/service-provider collateral management transaction from the triparty-agent's/service-provider's point of view.
    /// </summary>
    public IsoMax35Text? TripartyAgentServiceProviderCollateralTransactionIdentification { get; init; } 
    /// <summary>
    /// Unique identification (UTI) agreed upon by the two trade counterparties to identify the trade.
    /// </summary>
    public IsoMax52Text? CommonTransactionIdentification { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ClntCollInstrId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(ClientCollateralInstructionIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ClientCollateralTransactionIdentification is IsoMax35Text ClientCollateralTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "ClntCollTxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ClientCollateralTransactionIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TripartyAgentServiceProviderCollateralInstructionIdentification is IsoMax35Text TripartyAgentServiceProviderCollateralInstructionIdentificationValue)
        {
            writer.WriteStartElement(null, "TrptyAgtSvcPrvdrCollInstrId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TripartyAgentServiceProviderCollateralInstructionIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TripartyAgentServiceProviderCollateralTransactionIdentification is IsoMax35Text TripartyAgentServiceProviderCollateralTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "TrptyAgtSvcPrvdrCollTxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TripartyAgentServiceProviderCollateralTransactionIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CommonTransactionIdentification is IsoMax52Text CommonTransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "CmonTxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax52Text(CommonTransactionIdentificationValue)); // data type Max52Text System.String
            writer.WriteEndElement();
        }
    }
    public static TransactionIdentifications45 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
