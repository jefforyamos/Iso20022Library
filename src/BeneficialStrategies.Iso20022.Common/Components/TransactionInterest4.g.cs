//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionInterest4.  ISO2002 ID# _t6wQa66QEeexrtTFgmVD3Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provide further details on transaction specific interest information that applies to the underlying transaction.
/// </summary>
public partial record TransactionInterest4
     : IIsoXmlSerilizable<TransactionInterest4>
{
    #nullable enable
    
    /// <summary>
    /// Total amount of interests and taxes included in the entry amount.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAndAmount? TotalInterestAndTaxAmount { get; init; } 
    /// <summary>
    /// Individual interest record.
    /// </summary>
    public InterestRecord2? Record { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TotalInterestAndTaxAmount is IsoActiveOrHistoricCurrencyAndAmount TotalInterestAndTaxAmountValue)
        {
            writer.WriteStartElement(null, "TtlIntrstAndTaxAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAndAmount(TotalInterestAndTaxAmountValue)); // data type ActiveOrHistoricCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (Record is InterestRecord2 RecordValue)
        {
            writer.WriteStartElement(null, "Rcrd", xmlNamespace );
            RecordValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TransactionInterest4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
