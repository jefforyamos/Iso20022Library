//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionReconciliation3.  ISO2002 ID# _5HszwWl_EeSxgrJ0GX4SQQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Reconciliation transaction between an acceptor and an acquirer.
/// </summary>
public partial record TransactionReconciliation3
     : IIsoXmlSerilizable<TransactionReconciliation3>
{
    #nullable enable
    
    /// <summary>
    /// Indicates if the transaction requires a closure of the reconciliation period.
    /// </summary>
    public IsoTrueFalseIndicator? ClosePeriod { get; init; } 
    /// <summary>
    /// Unique identification of a reconciliation transaction.
    /// </summary>
    public required TransactionIdentifier1 ReconciliationTransactionIdentification { get; init; } 
    /// <summary>
    /// Unique identification of the reconciliation period between the acceptor and the acquirer.
    /// </summary>
    public required IsoMax35Text ReconciliationIdentification { get; init; } 
    /// <summary>
    /// Transaction totals during the reconciliation period for a certain type of transaction.
    /// </summary>
    public TransactionTotals3? TransactionTotals { get; init; } 
    /// <summary>
    /// Additional information related to the reconciliation transaction.
    /// </summary>
    public IsoMax70Text? AdditionalTransactionData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ClosePeriod is IsoTrueFalseIndicator ClosePeriodValue)
        {
            writer.WriteStartElement(null, "ClsPrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ClosePeriodValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RcncltnTxId", xmlNamespace );
        ReconciliationTransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RcncltnId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(ReconciliationIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (TransactionTotals is TransactionTotals3 TransactionTotalsValue)
        {
            writer.WriteStartElement(null, "TxTtls", xmlNamespace );
            TransactionTotalsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalTransactionData is IsoMax70Text AdditionalTransactionDataValue)
        {
            writer.WriteStartElement(null, "AddtlTxData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(AdditionalTransactionDataValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
    }
    public static TransactionReconciliation3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
