//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransactionTotals2.  ISO2002 ID# _9IBgASqPEeKu3rbsflh_TQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Transaction totals during the reconciliation period, for a certain type of transaction.
/// </summary>
public partial record TransactionTotals2
     : IIsoXmlSerilizable<TransactionTotals2>
{
    #nullable enable
    
    /// <summary>
    /// Identifier assigned by the merchant identifying a set of POI terminals performing some categories of transactions.
    /// </summary>
    public IsoMax35Text? POIGroupIdentification { get; init; } 
    /// <summary>
    /// Category of cards related the acceptance processing rules defined by the acquirer.
    /// </summary>
    public IsoExact4NumericText? CardProductProfile { get; init; } 
    /// <summary>
    /// Currency associated with the transaction totals.
    /// </summary>
    public CurrencyCode? Currency { get; init; } 
    /// <summary>
    /// Identification of the type of transaction.
    /// </summary>
    public required TypeTransactionTotals2Code Type { get; init; } 
    /// <summary>
    /// Total number of transactions during a reconciliation period.
    /// </summary>
    public required IsoMax35NumericText TotalNumber { get; init; } 
    /// <summary>
    /// Total amount of a collection of transactions.
    /// </summary>
    public required IsoImpliedCurrencyAndAmount CumulativeAmount { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (POIGroupIdentification is IsoMax35Text POIGroupIdentificationValue)
        {
            writer.WriteStartElement(null, "POIGrpId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(POIGroupIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (CardProductProfile is IsoExact4NumericText CardProductProfileValue)
        {
            writer.WriteStartElement(null, "CardPdctPrfl", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4NumericText(CardProductProfileValue)); // data type Exact4NumericText System.String
            writer.WriteEndElement();
        }
        if (Currency is CurrencyCode CurrencyValue)
        {
            writer.WriteStartElement(null, "Ccy", xmlNamespace );
            writer.WriteValue(CurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        writer.WriteValue(Type.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TtlNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35NumericText(TotalNumber)); // data type Max35NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CmltvAmt", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoImpliedCurrencyAndAmount(CumulativeAmount)); // data type ImpliedCurrencyAndAmount System.Decimal
        writer.WriteEndElement();
    }
    public static TransactionTotals2 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
