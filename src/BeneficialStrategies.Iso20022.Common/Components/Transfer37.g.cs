//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Transfer37.  ISO2002 ID# _5_9k4ZEBEem7fvtoGpNpow.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Parameters applied to the settlement of a security transfer.
/// </summary>
public partial record Transfer37
     : IIsoXmlSerilizable<Transfer37>
{
    #nullable enable
    
    /// <summary>
    /// Unique and unambiguous identifier for the transfer execution, as assigned by the confirming party.
    /// </summary>
    public required IsoMax35Text TransferConfirmationReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier for the transfer instruction, as assigned by the instructing party.
    /// </summary>
    public required IsoMax35Text TransferReference { get; init; } 
    /// <summary>
    /// Unique and unambiguous investor's identification of the transfer. This reference can typically be used in a hub scenario to give the reference of the transfer as assigned by the underlying client.
    /// </summary>
    public AdditionalReference10? ClientReference { get; init; } 
    /// <summary>
    /// Unambiguous identification of the transfer allocated by the counterparty.
    /// </summary>
    public AdditionalReference10? CounterpartyReference { get; init; } 
    /// <summary>
    /// Identifies the business process in which the actors are involved. This is important to trigger the right business process, according to the market business model, which may require matching instructions in a CSD environment (double leg process) or not (single leg process).
    /// </summary>
    public BusinessFlowType1Code? BusinessFlowType { get; init; } 
    /// <summary>
    /// Date and time at which the securities are to be exchanged at the International Central Securities Depository (ICSD) or Central Securities Depository (CSD).
    /// </summary>
    public IsoISODate? RequestedSettlementDate { get; init; } 
    /// <summary>
    /// Date and time at which the transfer was executed.
    /// </summary>
    public required DateAndDateTime2Choice_ EffectiveTransferDate { get; init; } 
    /// <summary>
    /// Date and time at which the securities were exchanged at the International Central Securities Depository (ICSD) or Central Securities Depository (CSD).
    /// </summary>
    public DateAndDateTime2Choice_? EffectiveSettlementDate { get; init; } 
    /// <summary>
    /// Date and time at which the transaction is completed and cleared, that is, securities are delivered.
    /// </summary>
    public DateAndDateTime2Choice_? TradeDate { get; init; } 
    /// <summary>
    /// Date on which the investor signed the transfer order form.
    /// </summary>
    public IsoISODate? TransferOrderDateForm { get; init; } 
    /// <summary>
    /// Reason for the transfer.
    /// </summary>
    public TransferReason1Choice_? TransferReason { get; init; } 
    /// <summary>
    /// Specifies information about investment plans included in the holding.
    /// </summary>
    public SimpleValueList<HoldingsPlanType1Code> HoldingsPlanType { get; init; } = [];
    /// <summary>
    /// Information related to the financial instrument transferred.
    /// </summary>
    public required FinancialInstrument88 FinancialInstrumentDetails { get; init; } 
    /// <summary>
    /// Number of units transferred.
    /// </summary>
    public required IsoDecimalNumber TotalUnitsNumber { get; init; } 
    /// <summary>
    /// Quantity of securities transferred as a percentage of the holding.
    /// </summary>
    public IsoPercentageRate? TransferRate { get; init; } 
    /// <summary>
    /// Breakdown of units transferred.
    /// </summary>
    public Unit12? UnitsDetails { get; init; } 
    /// <summary>
    /// Rounding direction applied to nearest unit.
    /// </summary>
    public RoundingDirection2Code? Rounding { get; init; } 
    /// <summary>
    /// Original amount paid for the asset at the point of purchase. May also be known as the book cost.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? OriginalCost { get; init; } 
    /// <summary>
    /// Weighted average price of the units in the account before the transfer was executed.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAnd13DecimalAmount? AveragePrice { get; init; } 
    /// <summary>
    /// Weighted average price of the units in the account after the transfer was executed.
    /// </summary>
    public IsoActiveOrHistoricCurrencyAnd13DecimalAmount? NewAveragePrice { get; init; } 
    /// <summary>
    /// Trade date of the average weighted data of units in the account before the transfer was executed.
    /// </summary>
    public IsoISODate? AverageDate { get; init; } 
    /// <summary>
    /// Trade date of the average weighted data of units in the account after the transfer was executed.
    /// </summary>
    public IsoISODate? NewAverageDate { get; init; } 
    /// <summary>
    /// Currency used to transfer the holdings. Some transfer agents register holdings grouped by currency in addition to using the ISIN for multi-currency fund shares.
    /// </summary>
    public ActiveOrHistoricCurrencyCode? TransferCurrency { get; init; } 
    /// <summary>
    /// Indicates whether the transfer results in a change of beneficial owner.
    /// </summary>
    public IsoYesNoIndicator? OwnAccountTransferIndicator { get; init; } 
    /// <summary>
    /// Additional specific settlement information for non-regulated traded funds.
    /// </summary>
    public IsoMax350Text? NonStandardSettlementInformation { get; init; } 
    /// <summary>
    /// Specifies how the payment of fees and taxes as a result of the transfer is covered, that is, whether by cash or the redemption of units.
    /// </summary>
    public ChargePaymentMethod1Choice_? TransferExpensesPaymentType { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TrfConfRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferConfirmationReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TrfRef", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TransferReference)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (ClientReference is AdditionalReference10 ClientReferenceValue)
        {
            writer.WriteStartElement(null, "ClntRef", xmlNamespace );
            ClientReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartyReference is AdditionalReference10 CounterpartyReferenceValue)
        {
            writer.WriteStartElement(null, "CtrPtyRef", xmlNamespace );
            CounterpartyReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BusinessFlowType is BusinessFlowType1Code BusinessFlowTypeValue)
        {
            writer.WriteStartElement(null, "BizFlowTp", xmlNamespace );
            writer.WriteValue(BusinessFlowTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (RequestedSettlementDate is IsoISODate RequestedSettlementDateValue)
        {
            writer.WriteStartElement(null, "ReqdSttlmDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(RequestedSettlementDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "FctvTrfDt", xmlNamespace );
        EffectiveTransferDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EffectiveSettlementDate is DateAndDateTime2Choice_ EffectiveSettlementDateValue)
        {
            writer.WriteStartElement(null, "FctvSttlmDt", xmlNamespace );
            EffectiveSettlementDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradeDate is DateAndDateTime2Choice_ TradeDateValue)
        {
            writer.WriteStartElement(null, "TradDt", xmlNamespace );
            TradeDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransferOrderDateForm is IsoISODate TransferOrderDateFormValue)
        {
            writer.WriteStartElement(null, "TrfOrdrDtForm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(TransferOrderDateFormValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (TransferReason is TransferReason1Choice_ TransferReasonValue)
        {
            writer.WriteStartElement(null, "TrfRsn", xmlNamespace );
            TransferReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "HldgsPlanTp", xmlNamespace );
        writer.WriteValue(HoldingsPlanType.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "FinInstrmDtls", xmlNamespace );
        FinancialInstrumentDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TtlUnitsNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoDecimalNumber(TotalUnitsNumber)); // data type DecimalNumber System.UInt64
        writer.WriteEndElement();
        if (TransferRate is IsoPercentageRate TransferRateValue)
        {
            writer.WriteStartElement(null, "TrfRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(TransferRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (UnitsDetails is Unit12 UnitsDetailsValue)
        {
            writer.WriteStartElement(null, "UnitsDtls", xmlNamespace );
            UnitsDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Rounding is RoundingDirection2Code RoundingValue)
        {
            writer.WriteStartElement(null, "Rndg", xmlNamespace );
            writer.WriteValue(RoundingValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OriginalCost is IsoActiveCurrencyAnd13DecimalAmount OriginalCostValue)
        {
            writer.WriteStartElement(null, "OrgnlCost", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(OriginalCostValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AveragePrice is IsoActiveOrHistoricCurrencyAnd13DecimalAmount AveragePriceValue)
        {
            writer.WriteStartElement(null, "AvrgPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAnd13DecimalAmount(AveragePriceValue)); // data type ActiveOrHistoricCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (NewAveragePrice is IsoActiveOrHistoricCurrencyAnd13DecimalAmount NewAveragePriceValue)
        {
            writer.WriteStartElement(null, "NewAvrgPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveOrHistoricCurrencyAnd13DecimalAmount(NewAveragePriceValue)); // data type ActiveOrHistoricCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AverageDate is IsoISODate AverageDateValue)
        {
            writer.WriteStartElement(null, "AvrgDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(AverageDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (NewAverageDate is IsoISODate NewAverageDateValue)
        {
            writer.WriteStartElement(null, "NewAvrgDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(NewAverageDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (TransferCurrency is ActiveOrHistoricCurrencyCode TransferCurrencyValue)
        {
            writer.WriteStartElement(null, "TrfCcy", xmlNamespace );
            writer.WriteValue(TransferCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (OwnAccountTransferIndicator is IsoYesNoIndicator OwnAccountTransferIndicatorValue)
        {
            writer.WriteStartElement(null, "OwnAcctTrfInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(OwnAccountTransferIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (NonStandardSettlementInformation is IsoMax350Text NonStandardSettlementInformationValue)
        {
            writer.WriteStartElement(null, "NonStdSttlmInf", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(NonStandardSettlementInformationValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (TransferExpensesPaymentType is ChargePaymentMethod1Choice_ TransferExpensesPaymentTypeValue)
        {
            writer.WriteStartElement(null, "TrfExpnssPmtTp", xmlNamespace );
            TransferExpensesPaymentTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Transfer37 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
