//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransparencyDataReport18.  ISO2002 ID# _GjQXQSe3Eei12pGEsJIAeQ.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides for reporting calculation results of non equity instruments as part of transparency.
/// </summary>
public partial record TransparencyDataReport18
     : IIsoXmlSerilizable<TransparencyDataReport18>
{
    #nullable enable
    
    /// <summary>
    /// Unique identifier of a record in a message used as part of error management and status advice messages.
    /// Usage:
    /// This identification will be used in the status advice report sent back.
    /// </summary>
    public IsoMax35Text? TechnicalRecordIdentification { get; init; } 
    /// <summary>
    /// Identifies the financial instrument using an ISIN.
    /// </summary>
    public required IsoISINOct2015Identifier Identification { get; init; } 
    /// <summary>
    /// Identification of non-equity financial instruments.
    /// </summary>
    public NonEquityInstrumentReportingClassification1Code? FinancialInstrumentClassification { get; init; } 
    /// <summary>
    /// Full name of the reporting entity.
    /// </summary>
    public IsoMax350Text? FullName { get; init; } 
    /// <summary>
    /// Segment MIC for the trading venue where applicable, otherwise the operational MIC.
    /// </summary>
    public IsoMICIdentifier? TradingVenue { get; init; } 
    /// <summary>
    /// Period to which the quantitative data fields relate.
    /// </summary>
    public Period4Choice_? ReportingPeriod { get; init; } 
    /// <summary>
    /// Flag to say if this ISIN is liquid or not post calculations.
    /// Usage:
    /// When not present, this field should be treated as not applicable.
    /// </summary>
    public IsoTrueFalseIndicator? Liquidity { get; init; } 
    /// <summary>
    /// The pre-trade Large in Scale threshold.
    /// </summary>
    public TonsOrCurrency2Choice_? PreTradeLargeInScaleThreshold { get; init; } 
    /// <summary>
    /// The post-trade Large in Scale threshold.
    /// </summary>
    public TonsOrCurrency2Choice_? PostTradeLargeInScaleThreshold { get; init; } 
    /// <summary>
    /// The pre-trade Size Specific to an Instrument threshold.
    /// </summary>
    public TonsOrCurrency2Choice_? PreTradeInstrumentSizeSpecificThreshold { get; init; } 
    /// <summary>
    /// The post-trade Size Specific to an Instrument threshold.
    /// </summary>
    public TonsOrCurrency2Choice_? PostTradeInstrumentSizeSpecificThreshold { get; init; } 
    /// <summary>
    /// Statistics for a financial instrument generated as part of transparency calculations.
    /// </summary>
    public StatisticsTransparency2? Statistics { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TechnicalRecordIdentification is IsoMax35Text TechnicalRecordIdentificationValue)
        {
            writer.WriteStartElement(null, "TechRcrdId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TechnicalRecordIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Id", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoISINOct2015Identifier(Identification)); // data type ISINOct2015Identifier System.String
        writer.WriteEndElement();
        if (FinancialInstrumentClassification is NonEquityInstrumentReportingClassification1Code FinancialInstrumentClassificationValue)
        {
            writer.WriteStartElement(null, "FinInstrmClssfctn", xmlNamespace );
            writer.WriteValue(FinancialInstrumentClassificationValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (FullName is IsoMax350Text FullNameValue)
        {
            writer.WriteStartElement(null, "FullNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(FullNameValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (TradingVenue is IsoMICIdentifier TradingVenueValue)
        {
            writer.WriteStartElement(null, "TradgVn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMICIdentifier(TradingVenueValue)); // data type MICIdentifier System.String
            writer.WriteEndElement();
        }
        if (ReportingPeriod is Period4Choice_ ReportingPeriodValue)
        {
            writer.WriteStartElement(null, "RptgPrd", xmlNamespace );
            ReportingPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Liquidity is IsoTrueFalseIndicator LiquidityValue)
        {
            writer.WriteStartElement(null, "Lqdty", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(LiquidityValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (PreTradeLargeInScaleThreshold is TonsOrCurrency2Choice_ PreTradeLargeInScaleThresholdValue)
        {
            writer.WriteStartElement(null, "PreTradLrgInScaleThrshld", xmlNamespace );
            PreTradeLargeInScaleThresholdValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PostTradeLargeInScaleThreshold is TonsOrCurrency2Choice_ PostTradeLargeInScaleThresholdValue)
        {
            writer.WriteStartElement(null, "PstTradLrgInScaleThrshld", xmlNamespace );
            PostTradeLargeInScaleThresholdValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PreTradeInstrumentSizeSpecificThreshold is TonsOrCurrency2Choice_ PreTradeInstrumentSizeSpecificThresholdValue)
        {
            writer.WriteStartElement(null, "PreTradInstrmSzSpcfcThrshld", xmlNamespace );
            PreTradeInstrumentSizeSpecificThresholdValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PostTradeInstrumentSizeSpecificThreshold is TonsOrCurrency2Choice_ PostTradeInstrumentSizeSpecificThresholdValue)
        {
            writer.WriteStartElement(null, "PstTradInstrmSzSpcfcThrshld", xmlNamespace );
            PostTradeInstrumentSizeSpecificThresholdValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Statistics is StatisticsTransparency2 StatisticsValue)
        {
            writer.WriteStartElement(null, "Sttstcs", xmlNamespace );
            StatisticsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TransparencyDataReport18 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
