//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransportByRail5.  ISO2002 ID# _hVLs4Yj7EeO0H4aqD2Yw9Q.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to the transportation of goods by rail.
/// </summary>
public partial record TransportByRail5
     : IIsoXmlSerilizable<TransportByRail5>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the location where the goods are received for transportation.
    /// </summary>
    public IsoMax35Text? PlaceOfReceipt { get; init; } 
    /// <summary>
    /// Identifies the location of delivery of the goods.
    /// </summary>
    public IsoMax35Text? PlaceOfDelivery { get; init;  } // Warning: Don't know multiplicity.
    // ID for the above is _hl1_E4j7EeO0H4aqD2Yw9Q
    /// <summary>
    /// Identifies the party that is responsible for the conveyance of the goods from one place to another.
    /// </summary>
    public IsoMax70Text? RailCarrierName { get; init; } 
    /// <summary>
    /// Country in which the carrier of the goods, for example, shipping company, is located or registered.
    /// </summary>
    public CountryCode? RailCarrierCountry { get; init; } 
    /// <summary>
    /// Name of the carrier's (for example, shipping company's) agent that acts on behalf of the carrier and may be the issuer of transport documents relating to the underlying shipment.
    /// </summary>
    public IsoMax70Text? CarrierAgentName { get; init; } 
    /// <summary>
    /// Country of registration of the carrier's (for example, shipping company's) agent that acts on behalf of the carrier and may be the issuer of transport documents relating to the underlying shipment.
    /// </summary>
    public CountryCode? CarrierAgentCountry { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PlaceOfReceipt is IsoMax35Text PlaceOfReceiptValue)
        {
            writer.WriteStartElement(null, "PlcOfRct", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PlaceOfReceiptValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        // Not sure how to serialize PlaceOfDelivery, multiplicity Unknown
        if (RailCarrierName is IsoMax70Text RailCarrierNameValue)
        {
            writer.WriteStartElement(null, "RailCrrierNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(RailCarrierNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (RailCarrierCountry is CountryCode RailCarrierCountryValue)
        {
            writer.WriteStartElement(null, "RailCrrierCtry", xmlNamespace );
            writer.WriteValue(RailCarrierCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CarrierAgentName is IsoMax70Text CarrierAgentNameValue)
        {
            writer.WriteStartElement(null, "CrrierAgtNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(CarrierAgentNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (CarrierAgentCountry is CountryCode CarrierAgentCountryValue)
        {
            writer.WriteStartElement(null, "CrrierAgtCtry", xmlNamespace );
            writer.WriteValue(CarrierAgentCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static TransportByRail5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
