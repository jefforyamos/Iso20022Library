//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for TransportByRoad4.  ISO2002 ID# _Nh2S0dQxEeK0PPbKncCqzA.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Information related to the transportation of goods by road.
/// </summary>
public partial record TransportByRoad4
     : IIsoXmlSerilizable<TransportByRoad4>
{
    #nullable enable
    
    /// <summary>
    /// Identifies the location where the goods are received for transportation.
    /// </summary>
    public required IsoMax35Text PlaceOfReceipt { get; init; } 
    /// <summary>
    /// Identifies the location of delivery of the goods.
    /// </summary>
    public required IsoMax35Text PlaceOfDelivery { get; init; } 
    /// <summary>
    /// Identifies the party that is responsible for the conveyance of the goods from one place to another.
    /// </summary>
    public IsoMax70Text? RoadCarrierName { get; init; } 
    /// <summary>
    /// Country in which the carrier of the goods, for example, shipping company, is located or registered.
    /// </summary>
    public CountryCode? RoadCarrierCountry { get; init; } 
    /// <summary>
    /// Name of the carrier's (for example, shipping company's) agent that acts on behalf of the carrier and may be the issuer of transport documents relating to the underlying shipment.
    /// </summary>
    public IsoMax70Text? CarrierAgentName { get; init; } 
    /// <summary>
    /// Country of registration of the carrier's (for example, shipping company's) agent that acts on behalf of the carrier and may be the issuer of transport documents relating to the underlying shipment.
    /// </summary>
    public CountryCode? CarrierAgentCountry { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "PlcOfRct", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(PlaceOfReceipt)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PlcOfDlvry", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(PlaceOfDelivery)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (RoadCarrierName is IsoMax70Text RoadCarrierNameValue)
        {
            writer.WriteStartElement(null, "RoadCrrierNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(RoadCarrierNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (RoadCarrierCountry is CountryCode RoadCarrierCountryValue)
        {
            writer.WriteStartElement(null, "RoadCrrierCtry", xmlNamespace );
            writer.WriteValue(RoadCarrierCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (CarrierAgentName is IsoMax70Text CarrierAgentNameValue)
        {
            writer.WriteStartElement(null, "CrrierAgtNm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(CarrierAgentNameValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (CarrierAgentCountry is CountryCode CarrierAgentCountryValue)
        {
            writer.WriteStartElement(null, "CrrierAgtCtry", xmlNamespace );
            writer.WriteValue(CarrierAgentCountryValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
    }
    public static TransportByRoad4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
