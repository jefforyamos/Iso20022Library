//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for UnderlyingAttributes4.  ISO2002 ID# _1RJ4sWp7EemmaZLSPtWX5A.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Provides additional details on the underlying. In securities financing deals, it is used to identify and provide information on the collateral.
/// </summary>
public partial record UnderlyingAttributes4
     : IIsoXmlSerilizable<UnderlyingAttributes4>
{
    #nullable enable
    
    /// <summary>
    /// Percent of the strike price that this underlying represents.
    /// </summary>
    public IsoPercentageRate? AllocationPercentage { get; init; } 
    /// <summary>
    /// Unit amount of the underlying security.
    /// </summary>
    public UnitOrFaceAmount1Choice_? Quantity { get; init; } 
    /// <summary>
    /// Indicates order settlement period for the underlying instrument. Represents the number of days until settlement; for example, 2 means T+1 settlement, 4 means T+3 settlement, 5 means T+4 settlement.
    /// </summary>
    public SettlementType3Choice_? SettlementType { get; init; } 
    /// <summary>
    /// Cash amount associated with the underlying component. Necessary for derivatives that deliver into more than one underlying instrument and one of the underlying's is a fixed cash value.
    /// </summary>
    public IsoActiveCurrencyAndAmount? CashAmount { get; init; } 
    /// <summary>
    /// Represents how the cash will be calculated. Indicates that the cash is either fixed or a difference value (difference between strike and current underlying price).
    /// </summary>
    public IsoMax35Text? CashType { get; init; } 
    /// <summary>
    /// In a financing deal, clean price (percent-of-par or per unit) of the underlying security or basket.
    /// </summary>
    public Price8? Price { get; init; } 
    /// <summary>
    /// In a financing deal, price (percent-of-par or per unit) of the underlying security or basket. "Dirty" means it includes accrued interest.
    /// </summary>
    public Price8? DirtyPrice { get; init; } 
    /// <summary>
    /// In a financing deal, price (percent-of-par or per unit) of the underlying security or basket at the end of the agreement.
    /// </summary>
    public Price8? EndPrice { get; init; } 
    /// <summary>
    /// Currency value attributed to this collateral at the start of the agreement.
    /// </summary>
    public IsoActiveCurrencyAndAmount? StartValue { get; init; } 
    /// <summary>
    /// Currency value currently attributed to this collateral.
    /// </summary>
    public IsoActiveCurrencyAndAmount? CurrentValue { get; init; } 
    /// <summary>
    /// Currency value attributed to this collateral at the end of the agreement.
    /// </summary>
    public IsoActiveCurrencyAndAmount? EndValue { get; init; } 
    /// <summary>
    /// Unit amount of the underlying security (shares) adjusted for pending corporate action not yet allocated.
    /// </summary>
    public UnitOrFaceAmount1Choice_? AdjustedQuantity { get; init; } 
    /// <summary>
    /// Foreign exchange rate used to compute the current value.
    /// </summary>
    public IsoPercentageRate? ExchangeRate { get; init; } 
    /// <summary>
    /// Maximum notional value for a financial instrument that is capped.
    /// </summary>
    public IsoActiveCurrencyAndAmount? CapValue { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AllocationPercentage is IsoPercentageRate AllocationPercentageValue)
        {
            writer.WriteStartElement(null, "AllcnPctg", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(AllocationPercentageValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (Quantity is UnitOrFaceAmount1Choice_ QuantityValue)
        {
            writer.WriteStartElement(null, "Qty", xmlNamespace );
            QuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementType is SettlementType3Choice_ SettlementTypeValue)
        {
            writer.WriteStartElement(null, "SttlmTp", xmlNamespace );
            SettlementTypeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashAmount is IsoActiveCurrencyAndAmount CashAmountValue)
        {
            writer.WriteStartElement(null, "CshAmt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(CashAmountValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (CashType is IsoMax35Text CashTypeValue)
        {
            writer.WriteStartElement(null, "CshTp", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(CashTypeValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (Price is Price8 PriceValue)
        {
            writer.WriteStartElement(null, "Pric", xmlNamespace );
            PriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DirtyPrice is Price8 DirtyPriceValue)
        {
            writer.WriteStartElement(null, "DrtyPric", xmlNamespace );
            DirtyPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EndPrice is Price8 EndPriceValue)
        {
            writer.WriteStartElement(null, "EndPric", xmlNamespace );
            EndPriceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (StartValue is IsoActiveCurrencyAndAmount StartValueValue)
        {
            writer.WriteStartElement(null, "StartVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(StartValueValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (CurrentValue is IsoActiveCurrencyAndAmount CurrentValueValue)
        {
            writer.WriteStartElement(null, "CurVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(CurrentValueValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (EndValue is IsoActiveCurrencyAndAmount EndValueValue)
        {
            writer.WriteStartElement(null, "EndVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(EndValueValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
        if (AdjustedQuantity is UnitOrFaceAmount1Choice_ AdjustedQuantityValue)
        {
            writer.WriteStartElement(null, "AdjstdQty", xmlNamespace );
            AdjustedQuantityValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ExchangeRate is IsoPercentageRate ExchangeRateValue)
        {
            writer.WriteStartElement(null, "XchgRate", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoPercentageRate(ExchangeRateValue)); // data type PercentageRate System.Decimal
            writer.WriteEndElement();
        }
        if (CapValue is IsoActiveCurrencyAndAmount CapValueValue)
        {
            writer.WriteStartElement(null, "CapVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAndAmount(CapValueValue)); // data type ActiveCurrencyAndAmount System.Decimal
            writer.WriteEndElement();
        }
    }
    public static UnderlyingAttributes4 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
