//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for UndertakingAdvice1.  ISO2002 ID# _-AMvZnltEeG7BsjMvd1mEw_-927366247.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Details of the advice for the issuance of an undertaking.
/// </summary>
public partial record UndertakingAdvice1
     : IIsoXmlSerilizable<UndertakingAdvice1>
{
    #nullable enable
    
    /// <summary>
    /// Contents of the related UndertakingIssuance message.
    /// </summary>
    public required UndertakingIssuanceMessage UndertakingIssuanceMessage { get; init; } 
    /// <summary>
    /// Additional information related to the first advising party.
    /// </summary>
    public AdvisingPartyAdditionalInformation1? FirstAdvisingPartyAdditionalInformation { get; init; } 
    /// <summary>
    /// Additional information related to the second advising party.
    /// </summary>
    public AdvisingPartyAdditionalInformation1? SecondAdvisingPartyAdditionalInformation { get; init; } 
    /// <summary>
    /// Details related to the confirmation of the undertaking.
    /// </summary>
    public UndertakingConfirmation1? ConfirmationDetails { get; init; } 
    /// <summary>
    /// Digital signature of the party providing additional undertaking advice details.
    /// </summary>
    public ValueList<PartyAndSignature2> DigitalSignature { get; init; } = [];
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "UdrtkgIssncMsg", xmlNamespace );
        UndertakingIssuanceMessage.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (FirstAdvisingPartyAdditionalInformation is AdvisingPartyAdditionalInformation1 FirstAdvisingPartyAdditionalInformationValue)
        {
            writer.WriteStartElement(null, "FrstAdvsgPtyAddtlInf", xmlNamespace );
            FirstAdvisingPartyAdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SecondAdvisingPartyAdditionalInformation is AdvisingPartyAdditionalInformation1 SecondAdvisingPartyAdditionalInformationValue)
        {
            writer.WriteStartElement(null, "ScndAdvsgPtyAddtlInf", xmlNamespace );
            SecondAdvisingPartyAdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConfirmationDetails is UndertakingConfirmation1 ConfirmationDetailsValue)
        {
            writer.WriteStartElement(null, "ConfDtls", xmlNamespace );
            ConfirmationDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "DgtlSgntr", xmlNamespace );
        DigitalSignature.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static UndertakingAdvice1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
