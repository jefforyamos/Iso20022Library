//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for UndertakingStatusAdvice1.  ISO2002 ID# _-DLK5XltEeG7BsjMvd1mEw_1047822406.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Undertaking status information.
/// </summary>
public partial record UndertakingStatusAdvice1
     : IIsoXmlSerilizable<UndertakingStatusAdvice1>
{
    #nullable enable
    
    /// <summary>
    /// Details related to the party that initiated the report.
    /// </summary>
    public required PartyIdentification43 InitiatingParty { get; init; } 
    /// <summary>
    /// Details related to the identification of the undertaking.
    /// </summary>
    public Undertaking8? UndertakingIdentification { get; init; } 
    /// <summary>
    /// Sequence number assigned by the issuer to each amendment of the undertaking.
    /// </summary>
    public IsoNumber? AmendmentSequenceNumber { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier assigned by the advising party to the undertaking.
    /// </summary>
    public IsoMax35Text? AdvisingPartyReferenceNumber { get; init; } 
    /// <summary>
    /// Unique and unambiguous identifier assigned by the confirmer to the undertaking.
    /// </summary>
    public IsoMax35Text? ConfirmerReferenceNumber { get; init; } 
    /// <summary>
    /// Specifies the category of the status.
    /// </summary>
    public required ExternalUndertakingStatusCategory1Code StatusCategory { get; init; } 
    /// <summary>
    /// Specifies the reported status.
    /// </summary>
    public required UndertakingStatus3Code Status { get; init; } 
    /// <summary>
    /// Set of elements used to provide detailed information on the status reason.
    /// </summary>
    public StatusReasonInformation8? StatusReason { get; init; } 
    /// <summary>
    /// Amount reported.
    /// </summary>
    public ReportedAmount1? ReportedAmount { get; init; } 
    /// <summary>
    /// Information concerning the original message to which the status report may be sent in response.
    /// </summary>
    public OriginalMessage1? OriginalMessageDetails { get; init; } 
    /// <summary>
    /// Document or template enclosed in the report.
    /// </summary>
    public Document9? EnclosedFile { get; init; } 
    /// <summary>
    /// Additional information related to the report.
    /// </summary>
    public SimpleValueList<IsoMax2000Text> AdditionalInformation { get; init; } = [];
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "InitgPty", xmlNamespace );
        InitiatingParty.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (UndertakingIdentification is Undertaking8 UndertakingIdentificationValue)
        {
            writer.WriteStartElement(null, "UdrtkgId", xmlNamespace );
            UndertakingIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AmendmentSequenceNumber is IsoNumber AmendmentSequenceNumberValue)
        {
            writer.WriteStartElement(null, "AmdmntSeqNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(AmendmentSequenceNumberValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (AdvisingPartyReferenceNumber is IsoMax35Text AdvisingPartyReferenceNumberValue)
        {
            writer.WriteStartElement(null, "AdvsgPtyRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AdvisingPartyReferenceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (ConfirmerReferenceNumber is IsoMax35Text ConfirmerReferenceNumberValue)
        {
            writer.WriteStartElement(null, "CnfrmrRefNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(ConfirmerReferenceNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StsCtgy", xmlNamespace );
        writer.WriteValue(StatusCategory.ToString()); // Enum value
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sts", xmlNamespace );
        writer.WriteValue(Status.ToString()); // Enum value
        writer.WriteEndElement();
        if (StatusReason is StatusReasonInformation8 StatusReasonValue)
        {
            writer.WriteStartElement(null, "StsRsn", xmlNamespace );
            StatusReasonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReportedAmount is ReportedAmount1 ReportedAmountValue)
        {
            writer.WriteStartElement(null, "RptdAmt", xmlNamespace );
            ReportedAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OriginalMessageDetails is OriginalMessage1 OriginalMessageDetailsValue)
        {
            writer.WriteStartElement(null, "OrgnlMsgDtls", xmlNamespace );
            OriginalMessageDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EnclosedFile is Document9 EnclosedFileValue)
        {
            writer.WriteStartElement(null, "NclsdFile", xmlNamespace );
            EnclosedFileValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
        AdditionalInformation.Serialize(writer, xmlNamespace, "Max2000Text", SerializationFormatter.IsoMax2000Text );
        writer.WriteEndElement();
    }
    public static UndertakingStatusAdvice1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
