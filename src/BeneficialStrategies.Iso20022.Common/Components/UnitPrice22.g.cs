//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for UnitPrice22.  ISO2002 ID# _-FuZYThfEeamLZQeccJa7w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Amount of money for which goods or services are offered, sold, or bought.
/// </summary>
public partial record UnitPrice22
     : IIsoXmlSerilizable<UnitPrice22>
{
    #nullable enable
    
    /// <summary>
    /// Type and information about a price.
    /// </summary>
    public required TypeOfPrice46Choice_ Type { get; init; } 
    /// <summary>
    /// Value of the price, for example, as a currency and value.
    /// </summary>
    public required PriceValue1 Value { get; init; } 
    /// <summary>
    /// Type of pricing calculation method.
    /// </summary>
    public PriceMethod1Code? PriceMethod { get; init; } 
    /// <summary>
    /// Specifies the number of days used for calculating the accrued interest amount.
    /// </summary>
    public IsoNumber? NumberOfDaysAccrued { get; init; } 
    /// <summary>
    /// Amount included in the NAV that corresponds to gains directly or indirectly derived from interest payment in the scope of the European Directive on taxation of savings income in the form of interest payments.
    /// </summary>
    public IsoActiveCurrencyAnd13DecimalAmount? TaxableIncomePerShare { get; init; } 
    /// <summary>
    /// Specifies whether the fund calculates a taxable interest per share (TIS).
    /// </summary>
    public TaxableIncomePerShareCalculated2Choice_? TaxableIncomePerShareCalculated { get; init; } 
    /// <summary>
    /// Reason why the price is different from the current market price.
    /// </summary>
    public IsoMax350Text? PriceDifferenceReason { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Tp", xmlNamespace );
        Type.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Val", xmlNamespace );
        Value.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PriceMethod is PriceMethod1Code PriceMethodValue)
        {
            writer.WriteStartElement(null, "PricMtd", xmlNamespace );
            writer.WriteValue(PriceMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (NumberOfDaysAccrued is IsoNumber NumberOfDaysAccruedValue)
        {
            writer.WriteStartElement(null, "NbOfDaysAcrd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(NumberOfDaysAccruedValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (TaxableIncomePerShare is IsoActiveCurrencyAnd13DecimalAmount TaxableIncomePerShareValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerShr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoActiveCurrencyAnd13DecimalAmount(TaxableIncomePerShareValue)); // data type ActiveCurrencyAnd13DecimalAmount System.Decimal
            writer.WriteEndElement();
        }
        if (TaxableIncomePerShareCalculated is TaxableIncomePerShareCalculated2Choice_ TaxableIncomePerShareCalculatedValue)
        {
            writer.WriteStartElement(null, "TaxblIncmPerShrClctd", xmlNamespace );
            TaxableIncomePerShareCalculatedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PriceDifferenceReason is IsoMax350Text PriceDifferenceReasonValue)
        {
            writer.WriteStartElement(null, "PricDiffRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(PriceDifferenceReasonValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
    }
    public static UnitPrice22 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
