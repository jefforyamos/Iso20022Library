//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for UpdatedAdditionalInformation5SD1.  ISO2002 ID# _y2PfPjYnEeGFarbLo5oXPg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.ComponentModel.DataAnnotations;
using System.Xml;
using System.Xml.Linq;

#if NET6_0_OR_GREATER // C# 10 
#else
using System.DateOnly=System.DateTime; // So data types will degrade gracefully
using System.TimeOnly=System.DateTime; // Same with this data type
#endif
namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Extension for updated additional information.
/// </summary>
[IsoId("_y2PfPjYnEeGFarbLo5oXPg")]
#if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
[DisplayName("Updated Additional Information 5 SD")]
#endif
#if DECLARE_SERIALIZABLE
[Serializable]
#endif
#if DECLARE_DATACONTRACT
[DataContract]
#endif
public partial record UpdatedAdditionalInformation5SD1
{
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    // No constructor needed for NET8 and above.
    #else
    // No constructor needed for < NET8 because this type has no required members.
    #endif
    #nullable enable
    
    /// <summary>
    /// Unambiguous reference to the location where the supplementary data must be inserted in the message instance. 
    /// In the case of XML, this is expressed by a valid XPath.
    /// </summary>
    [IsoId("_j0sx4FPIEeGs_NnqHXQZkw")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Place And Name")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [StringLength(maximumLength: 350 ,MinimumLength = 1)]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoMax350Text? PlaceAndName { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.String? PlaceAndName { get; init; } 
    #else
    public System.String? PlaceAndName { get; set; } 
    #endif
    
    /// <summary>
    /// Total distribution fund rate per share.
    /// 一株あたりの交付金先等の額.
    /// </summary>
    [IsoId("_uFsj9zalEeG9c_thMfkruA")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Distribution Amount Per Share")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public RateAndAmountFormat2Choice_? DistributionAmountPerShare { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public RateAndAmountFormat2Choice_? DistributionAmountPerShare { get; init; } 
    #else
    public RateAndAmountFormat2Choice_? DistributionAmountPerShare { get; set; } 
    #endif
    
    /// <summary>
    /// Rate information of how much net asset decrease happens as a result of the fund distribution.
    /// </summary>
    [IsoId("_6RimUDLiEeGkgP4mOiMAHQ")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Net Asset Decrease Ratio")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public IsoPercentageRate? NetAssetDecreaseRatio { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public System.Decimal? NetAssetDecreaseRatio { get; init; } 
    #else
    public System.Decimal? NetAssetDecreaseRatio { get; set; } 
    #endif
    
    /// <summary>
    /// Distribution amount of accumulated profit per share.
    /// 一株あたり利益剰余金の額.
    /// </summary>
    [IsoId("_hHelzzeEEeGlwqxdMVcVhg")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Accumulated Profit Per Share")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public RateAndAmountFormat2Choice_? AccumulatedProfitPerShare { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public RateAndAmountFormat2Choice_? AccumulatedProfitPerShare { get; init; } 
    #else
    public RateAndAmountFormat2Choice_? AccumulatedProfitPerShare { get; set; } 
    #endif
    
    /// <summary>
    /// Taxable distribution amount of dividend.
    /// 一株あたりみなし配当の額.
    /// </summary>
    [IsoId("_hfUeAzeEEeGlwqxdMVcVhg")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Deemed Dividend Per Share")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public RateAndAmountFormat2Choice_? DeemedDividendPerShare { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public RateAndAmountFormat2Choice_? DeemedDividendPerShare { get; init; } 
    #else
    public RateAndAmountFormat2Choice_? DeemedDividendPerShare { get; set; } 
    #endif
    
    /// <summary>
    /// Tax exempted distribution amount of dividend. 
    /// 一株あたりみなし譲渡収入の額.
    /// </summary>
    [IsoId("_h9uRWzeEEeGlwqxdMVcVhg")]
    #if NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    [DisplayName("Residual Distribution Amount Per Share")]
    #endif
    #if DECLARE_DATACONTRACT
    [DataMember]
    #endif
    #if NET8_0_OR_GREATER // C# 12 Global type alias
    public RateAndAmountFormat2Choice_? ResidualDistributionAmountPerShare { get; init; } 
    #elif NET5_0_OR_GREATER // C# 9 Records, init-only setters, data annotations native
    public RateAndAmountFormat2Choice_? ResidualDistributionAmountPerShare { get; init; } 
    #else
    public RateAndAmountFormat2Choice_? ResidualDistributionAmountPerShare { get; set; } 
    #endif
    
    
    #nullable disable
    
}
