//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for ValuationDealingProcessingCharacteristics3.  ISO2002 ID# _DovC8UlNEeiZP-CimVE7Hg.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Valuation dealing processing characteristics linked to the instrument, that is, not to the market.
/// </summary>
public partial record ValuationDealingProcessingCharacteristics3
     : IIsoXmlSerilizable<ValuationDealingProcessingCharacteristics3>
{
    #nullable enable
    
    /// <summary>
    /// Frequency of the valuation.
    /// </summary>
    public EventFrequency5Code? ValuationFrequency { get; init; } 
    /// <summary>
    /// Further details regarding the dealing frequency, for example, Tuesday (for weekly dealing) or last business day of the month.
    /// </summary>
    public IsoMax350Text? ValuationFrequencyDescription { get; init; } 
    /// <summary>
    /// Valuation time of the fund.
    /// </summary>
    public IsoISOTime? ValuationTime { get; init; } 
    /// <summary>
    /// Number of decimal places to which quantities of units/shares are rounded.
    /// </summary>
    public IsoNumber? DecimalisationUnits { get; init; } 
    /// <summary>
    /// Number of decimal places to which the price is rounded.
    /// </summary>
    public IsoNumber? DecimalisationPrice { get; init; } 
    /// <summary>
    /// Indicates whether the fund has two prices.
    /// </summary>
    public IsoYesNoIndicator? DualFundIndicator { get; init; } 
    /// <summary>
    /// Type of pricing calculation method.
    /// </summary>
    public PriceMethod1Code? PriceMethod { get; init; } 
    /// <summary>
    /// Currencies in which the prices for the investment fund class are published by the fund management company.
    /// </summary>
    public ActiveCurrencyCode? PriceCurrency { get; init; } 
    /// <summary>
    /// Additional information about the valuation dealing characteristics.
    /// </summary>
    public AdditionalInformation15? AdditionalInformation { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (ValuationFrequency is EventFrequency5Code ValuationFrequencyValue)
        {
            writer.WriteStartElement(null, "ValtnFrqcy", xmlNamespace );
            writer.WriteValue(ValuationFrequencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ValuationFrequencyDescription is IsoMax350Text ValuationFrequencyDescriptionValue)
        {
            writer.WriteStartElement(null, "ValtnFrqcyDesc", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(ValuationFrequencyDescriptionValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
        if (ValuationTime is IsoISOTime ValuationTimeValue)
        {
            writer.WriteStartElement(null, "ValtnTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(ValuationTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (DecimalisationUnits is IsoNumber DecimalisationUnitsValue)
        {
            writer.WriteStartElement(null, "DcmlstnUnits", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(DecimalisationUnitsValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (DecimalisationPrice is IsoNumber DecimalisationPriceValue)
        {
            writer.WriteStartElement(null, "DcmlstnPric", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(DecimalisationPriceValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (DualFundIndicator is IsoYesNoIndicator DualFundIndicatorValue)
        {
            writer.WriteStartElement(null, "DualFndInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(DualFundIndicatorValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (PriceMethod is PriceMethod1Code PriceMethodValue)
        {
            writer.WriteStartElement(null, "PricMtd", xmlNamespace );
            writer.WriteValue(PriceMethodValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (PriceCurrency is ActiveCurrencyCode PriceCurrencyValue)
        {
            writer.WriteStartElement(null, "PricCcy", xmlNamespace );
            writer.WriteValue(PriceCurrencyValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (AdditionalInformation is AdditionalInformation15 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ValuationDealingProcessingCharacteristics3 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
