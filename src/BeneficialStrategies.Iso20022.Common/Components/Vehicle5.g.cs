//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for Vehicle5.  ISO2002 ID# _EQmW3_iqEeiJaN6-Lf-c_w.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Attributes of a fleet vehicle.
/// </summary>
public partial record Vehicle5
     : IIsoXmlSerilizable<Vehicle5>
{
    #nullable enable
    
    /// <summary>
    /// Identification number assigned to the vehicle by the fleet operator. This may not be a legal registration.
    /// </summary>
    public IsoMax35NumericText? VehicleNumber { get; init; } 
    /// <summary>
    /// Number that uniquely identifies the vehicle as assigned by the vehicle manufacturer.
    /// </summary>
    public IsoMax35NumericText? VehicleIdentificationNumber { get; init; } 
    /// <summary>
    /// Fleet number.
    /// </summary>
    public IsoMax10Text? FleetNumber { get; init; } 
    /// <summary>
    /// Sub fleet number.
    /// </summary>
    public IsoMax35Text? SubFleetNumber { get; init; } 
    /// <summary>
    /// Identification of the unit number of the vehicle in the fleet.
    /// </summary>
    public IsoMax35NumericText? UnitNumber { get; init; } 
    /// <summary>
    /// Identification number assigned to the trailer.
    /// </summary>
    public IsoMax35NumericText? TrailerNumber { get; init; } 
    /// <summary>
    /// Registration tag of the vehicle.
    /// </summary>
    public IsoMax35Text? VehicleTag { get; init; } 
    /// <summary>
    /// Entry mode of the registration tag.
    /// </summary>
    public CardDataReading5Code? VehicleTagEntryMode { get; init; } 
    /// <summary>
    /// True indicates a replacement vehicle.
    /// </summary>
    public IsoTrueFalseIndicator? ReplacementVehicleIndicator { get; init; } 
    /// <summary>
    /// Odometer reading value indicating the distance travelled by the vehicle (for example, car, van, pickup truck, semi-truck portion of a tractor trailer unit).
    /// </summary>
    public IsoDecimalNumber? Odometer { get; init; } 
    /// <summary>
    /// Hubometer reading value indicating the distance travelled by the trailer (for example,  the semi-trailer portion of a tractor trailer unit).
    /// </summary>
    public IsoDecimalNumber? Hubometer { get; init; } 
    /// <summary>
    /// Identification assigned to the vehicle related to maintenance.
    /// </summary>
    public IsoMax35Text? MaintenanceIdentification { get; init; } 
    /// <summary>
    /// Data captured from on board diagnostic systems. 
    /// </summary>
    public OnBoardDiagnostics1? OnBoardDiagnostics { get; init; } 
    /// <summary>
    /// Additional information related to the vehicle.
    /// </summary>
    public Vehicle2? AdditionalVehicleData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (VehicleNumber is IsoMax35NumericText VehicleNumberValue)
        {
            writer.WriteStartElement(null, "VhclNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(VehicleNumberValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (VehicleIdentificationNumber is IsoMax35NumericText VehicleIdentificationNumberValue)
        {
            writer.WriteStartElement(null, "VhclIdNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(VehicleIdentificationNumberValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (FleetNumber is IsoMax10Text FleetNumberValue)
        {
            writer.WriteStartElement(null, "FleetNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax10Text(FleetNumberValue)); // data type Max10Text System.String
            writer.WriteEndElement();
        }
        if (SubFleetNumber is IsoMax35Text SubFleetNumberValue)
        {
            writer.WriteStartElement(null, "SubFleetNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SubFleetNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (UnitNumber is IsoMax35NumericText UnitNumberValue)
        {
            writer.WriteStartElement(null, "UnitNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(UnitNumberValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (TrailerNumber is IsoMax35NumericText TrailerNumberValue)
        {
            writer.WriteStartElement(null, "TrlrNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(TrailerNumberValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (VehicleTag is IsoMax35Text VehicleTagValue)
        {
            writer.WriteStartElement(null, "VhclTag", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(VehicleTagValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (VehicleTagEntryMode is CardDataReading5Code VehicleTagEntryModeValue)
        {
            writer.WriteStartElement(null, "VhclTagNtryMd", xmlNamespace );
            writer.WriteValue(VehicleTagEntryModeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        if (ReplacementVehicleIndicator is IsoTrueFalseIndicator ReplacementVehicleIndicatorValue)
        {
            writer.WriteStartElement(null, "RplcmntVhclInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(ReplacementVehicleIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (Odometer is IsoDecimalNumber OdometerValue)
        {
            writer.WriteStartElement(null, "Odmtr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(OdometerValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (Hubometer is IsoDecimalNumber HubometerValue)
        {
            writer.WriteStartElement(null, "Hbmtr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(HubometerValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (MaintenanceIdentification is IsoMax35Text MaintenanceIdentificationValue)
        {
            writer.WriteStartElement(null, "MntncId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(MaintenanceIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (OnBoardDiagnostics is OnBoardDiagnostics1 OnBoardDiagnosticsValue)
        {
            writer.WriteStartElement(null, "OnBrdDgnstcs", xmlNamespace );
            OnBoardDiagnosticsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalVehicleData is Vehicle2 AdditionalVehicleDataValue)
        {
            writer.WriteStartElement(null, "AddtlVhclData", xmlNamespace );
            AdditionalVehicleDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static Vehicle5 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
