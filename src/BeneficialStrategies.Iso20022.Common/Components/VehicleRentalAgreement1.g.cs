//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for VehicleRentalAgreement1.  ISO2002 ID# _R4nhWvSwEeife6veM7daYw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Agreement (contract) related to a vehicle rental service.
/// </summary>
public partial record VehicleRentalAgreement1
     : IIsoXmlSerilizable<VehicleRentalAgreement1>
{
    #nullable enable
    
    /// <summary>
    /// Contains the original vehicle rental agreement, invoice or contract number.
    /// </summary>
    public IsoMax35Text? AgreementNumber { get; init; } 
    /// <summary>
    /// Indicates that an adjustment was made to a vehicle rental charge (for example, additional charges added). 
    /// </summary>
    public IsoTrueFalseIndicator? AdjustedIndicator { get; init; } 
    /// <summary>
    /// Contains the vehicle rental location. 
    /// </summary>
    public Address1? RentalLocation { get; init; } 
    /// <summary>
    /// Used when different than rental location
    /// </summary>
    public Address1? PickupLocation { get; init; } 
    /// <summary>
    /// Date the vehicle was picked-up by the customer.  In the case of a no-show transaction or a prepaid transaction, this contains the scheduled pickup date.
    /// </summary>
    public IsoISODate? CheckOutDate { get; init; } 
    /// <summary>
    /// Time the vehicle was picked-up by the customer.  In the case of a no-show transaction or a prepaid transaction, this contains the scheduled pickup time.
    /// </summary>
    public IsoISOTime? CheckOutTime { get; init; } 
    /// <summary>
    /// Location to which vehicle was returned.
    /// </summary>
    public Address1? ReturnLocation { get; init; } 
    /// <summary>
    /// Date when the vehicle was returned to the rental agency.
    /// </summary>
    public IsoISODate? CheckInDate { get; init; } 
    /// <summary>
    /// Time when the vehicle was returned to the rental agency.
    /// </summary>
    public IsoISOTime? CheckInTime { get; init; } 
    /// <summary>
    /// Duration of rental in days.
    /// </summary>
    public IsoMax4NumericText? Duration { get; init; } 
    /// <summary>
    /// Contains the details of the vehicle classification.
    /// </summary>
    public Vehicle4? VehicleClassDetails { get; init; } 
    /// <summary>
    /// Distance travelled during vehicle rental.
    /// </summary>
    public Distance1? TravelDistance { get; init; } 
    /// <summary>
    /// Vehicle rental rate.
    /// </summary>
    public RentalRate1? RentalRate { get; init; } 
    /// <summary>
    /// Vehicle rental details.
    /// </summary>
    public RentalDetails1? RentalDetails { get; init; } 
    /// <summary>
    /// Registration number of vehicle.
    /// </summary>
    public IsoMax70Text? VehicleRegistrationNumber { get; init; } 
    /// <summary>
    /// Indicates whether or not insurance was purchased. 
    /// </summary>
    public IsoTrueFalseIndicator? InsuranceIndicator { get; init; } 
    /// <summary>
    /// Contains the details of additional amount for a specific vehicle rental service type. 
    /// </summary>
    public Amount9? AdditionalAmount { get; init; } 
    /// <summary>
    /// Taxes related to the products or services. 
    /// </summary>
    public Tax33? EstimatedTax { get; init; } 
    /// <summary>
    /// Discount applied to the vehicle rental.
    /// </summary>
    public Discount3? DiscountProgramme { get; init; } 
    /// <summary>
    /// Loyalty programme details.
    /// </summary>
    public LoyaltyProgramme1? LoyaltyProgramme { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (AgreementNumber is IsoMax35Text AgreementNumberValue)
        {
            writer.WriteStartElement(null, "AgrmtNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(AgreementNumberValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (AdjustedIndicator is IsoTrueFalseIndicator AdjustedIndicatorValue)
        {
            writer.WriteStartElement(null, "AdjstdInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AdjustedIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (RentalLocation is Address1 RentalLocationValue)
        {
            writer.WriteStartElement(null, "RntlLctn", xmlNamespace );
            RentalLocationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PickupLocation is Address1 PickupLocationValue)
        {
            writer.WriteStartElement(null, "PckpLctn", xmlNamespace );
            PickupLocationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CheckOutDate is IsoISODate CheckOutDateValue)
        {
            writer.WriteStartElement(null, "ChckOutDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CheckOutDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CheckOutTime is IsoISOTime CheckOutTimeValue)
        {
            writer.WriteStartElement(null, "ChckOutTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(CheckOutTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (ReturnLocation is Address1 ReturnLocationValue)
        {
            writer.WriteStartElement(null, "RtrLctn", xmlNamespace );
            ReturnLocationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CheckInDate is IsoISODate CheckInDateValue)
        {
            writer.WriteStartElement(null, "ChckInDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CheckInDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CheckInTime is IsoISOTime CheckInTimeValue)
        {
            writer.WriteStartElement(null, "ChckInTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(CheckInTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (Duration is IsoMax4NumericText DurationValue)
        {
            writer.WriteStartElement(null, "Drtn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4NumericText(DurationValue)); // data type Max4NumericText System.String
            writer.WriteEndElement();
        }
        if (VehicleClassDetails is Vehicle4 VehicleClassDetailsValue)
        {
            writer.WriteStartElement(null, "VhclClssDtls", xmlNamespace );
            VehicleClassDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TravelDistance is Distance1 TravelDistanceValue)
        {
            writer.WriteStartElement(null, "TrvlDstnc", xmlNamespace );
            TravelDistanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RentalRate is RentalRate1 RentalRateValue)
        {
            writer.WriteStartElement(null, "RntlRate", xmlNamespace );
            RentalRateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RentalDetails is RentalDetails1 RentalDetailsValue)
        {
            writer.WriteStartElement(null, "RntlDtls", xmlNamespace );
            RentalDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (VehicleRegistrationNumber is IsoMax70Text VehicleRegistrationNumberValue)
        {
            writer.WriteStartElement(null, "VhclRegnNb", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax70Text(VehicleRegistrationNumberValue)); // data type Max70Text System.String
            writer.WriteEndElement();
        }
        if (InsuranceIndicator is IsoTrueFalseIndicator InsuranceIndicatorValue)
        {
            writer.WriteStartElement(null, "InsrncInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(InsuranceIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AdditionalAmount is Amount9 AdditionalAmountValue)
        {
            writer.WriteStartElement(null, "AddtlAmt", xmlNamespace );
            AdditionalAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstimatedTax is Tax33 EstimatedTaxValue)
        {
            writer.WriteStartElement(null, "EstmtdTax", xmlNamespace );
            EstimatedTaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DiscountProgramme is Discount3 DiscountProgrammeValue)
        {
            writer.WriteStartElement(null, "DscntPrgrmm", xmlNamespace );
            DiscountProgrammeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (LoyaltyProgramme is LoyaltyProgramme1 LoyaltyProgrammeValue)
        {
            writer.WriteStartElement(null, "LltyPrgrmm", xmlNamespace );
            LoyaltyProgrammeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static VehicleRentalAgreement1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
