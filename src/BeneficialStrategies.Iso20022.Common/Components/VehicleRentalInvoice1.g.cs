//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for VehicleRentalInvoice1.  ISO2002 ID# _cYeOxvTZEeife6veM7daYw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Invoice related to a vehicle rental service.
/// </summary>
public partial record VehicleRentalInvoice1
     : IIsoXmlSerilizable<VehicleRentalInvoice1>
{
    #nullable enable
    
    /// <summary>
    /// Indicates that the cardholder failed to pick up the vehicle and was therefore charged a no-show fee; vehicle was not actually rented. 
    /// </summary>
    public IsoTrueFalseIndicator? NoShowIndicator { get; init; } 
    /// <summary>
    /// Indicates that an adjustment was made to a vehicle rental charge (for example, additional charges added). 
    /// </summary>
    public IsoTrueFalseIndicator? AdjustedIndicator { get; init; } 
    /// <summary>
    /// Location to which vehicle was returned.
    /// </summary>
    public Address1? ReturnLocation { get; init; } 
    /// <summary>
    /// Date the vehicle was picked-up by the customer.  In the case of a no-show transaction or a prepaid transaction, this contains the scheduled pickup date.
    /// </summary>
    public IsoISODate? CheckOutDate { get; init; } 
    /// <summary>
    /// Time the vehicle was picked-up by the customer.  In the case of a no-show transaction or a prepaid transaction, this contains the scheduled pickup time.
    /// </summary>
    public IsoISOTime? CheckOutTime { get; init; } 
    /// <summary>
    /// Date when the vehicle was returned to the rental agency.
    /// </summary>
    public IsoISODate? CheckInDate { get; init; } 
    /// <summary>
    /// Time when the vehicle was returned to the rental agency.
    /// </summary>
    public IsoISOTime? CheckInTime { get; init; } 
    /// <summary>
    /// Duration of rental in days.
    /// </summary>
    public IsoMax4NumericText? Duration { get; init; } 
    /// <summary>
    /// Contains the details of the vehicle class invoiced to the renter regardless of the class of vehicle actually provided. 
    /// </summary>
    public Vehicle4? VehicleClassInvoiced { get; init; } 
    /// <summary>
    /// Contains the details of the vehicle class of the vehicle actually provided to the renter at the time of vehicle pick-up. This may be an upgrade class of vehicle, above that invoiced to the renter. 
    /// </summary>
    public Vehicle4? VehicleClassProvided { get; init; } 
    /// <summary>
    /// Distance travelled during vehicle rental.
    /// </summary>
    public Distance1? TravelDistance { get; init; } 
    /// <summary>
    /// Vehicle rental charge.
    /// </summary>
    public RentalRate1? RentalCharge { get; init; } 
    /// <summary>
    /// Provides the identifier assigned by the card acceptor that best categorizes the items being purchased in a standardized commodity group.
    /// </summary>
    public IsoMax35Text? SummaryCommodityIdentification { get; init; } 
    /// <summary>
    /// Indicates whether or not insurance was purchased. 
    /// </summary>
    public IsoTrueFalseIndicator? InsuranceIndicator { get; init; } 
    /// <summary>
    /// Contains the details of additional amount for a specific vehicle rental service type. 
    /// </summary>
    public Amount9? AdditionalAmount { get; init; } 
    /// <summary>
    /// Taxes related to the products or services. 
    /// </summary>
    public Tax33? Tax { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (NoShowIndicator is IsoTrueFalseIndicator NoShowIndicatorValue)
        {
            writer.WriteStartElement(null, "NoShowInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(NoShowIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AdjustedIndicator is IsoTrueFalseIndicator AdjustedIndicatorValue)
        {
            writer.WriteStartElement(null, "AdjstdInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(AdjustedIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (ReturnLocation is Address1 ReturnLocationValue)
        {
            writer.WriteStartElement(null, "RtrLctn", xmlNamespace );
            ReturnLocationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CheckOutDate is IsoISODate CheckOutDateValue)
        {
            writer.WriteStartElement(null, "ChckOutDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CheckOutDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CheckOutTime is IsoISOTime CheckOutTimeValue)
        {
            writer.WriteStartElement(null, "ChckOutTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(CheckOutTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (CheckInDate is IsoISODate CheckInDateValue)
        {
            writer.WriteStartElement(null, "ChckInDt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISODate(CheckInDateValue)); // data type ISODate System.DateOnly
            writer.WriteEndElement();
        }
        if (CheckInTime is IsoISOTime CheckInTimeValue)
        {
            writer.WriteStartElement(null, "ChckInTm", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoISOTime(CheckInTimeValue)); // data type ISOTime System.TimeOnly
            writer.WriteEndElement();
        }
        if (Duration is IsoMax4NumericText DurationValue)
        {
            writer.WriteStartElement(null, "Drtn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax4NumericText(DurationValue)); // data type Max4NumericText System.String
            writer.WriteEndElement();
        }
        if (VehicleClassInvoiced is Vehicle4 VehicleClassInvoicedValue)
        {
            writer.WriteStartElement(null, "VhclClssInvcd", xmlNamespace );
            VehicleClassInvoicedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (VehicleClassProvided is Vehicle4 VehicleClassProvidedValue)
        {
            writer.WriteStartElement(null, "VhclClssPrvdd", xmlNamespace );
            VehicleClassProvidedValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TravelDistance is Distance1 TravelDistanceValue)
        {
            writer.WriteStartElement(null, "TrvlDstnc", xmlNamespace );
            TravelDistanceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RentalCharge is RentalRate1 RentalChargeValue)
        {
            writer.WriteStartElement(null, "RntlChrg", xmlNamespace );
            RentalChargeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SummaryCommodityIdentification is IsoMax35Text SummaryCommodityIdentificationValue)
        {
            writer.WriteStartElement(null, "SummryCmmdtyId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SummaryCommodityIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (InsuranceIndicator is IsoTrueFalseIndicator InsuranceIndicatorValue)
        {
            writer.WriteStartElement(null, "InsrncInd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoTrueFalseIndicator(InsuranceIndicatorValue)); // data type TrueFalseIndicator System.String
            writer.WriteEndElement();
        }
        if (AdditionalAmount is Amount9 AdditionalAmountValue)
        {
            writer.WriteStartElement(null, "AddtlAmt", xmlNamespace );
            AdditionalAmountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Tax is Tax33 TaxValue)
        {
            writer.WriteStartElement(null, "Tax", xmlNamespace );
            TaxValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static VehicleRentalInvoice1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
