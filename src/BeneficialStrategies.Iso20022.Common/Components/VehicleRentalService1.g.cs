//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by ComponentGenerator for VehicleRentalService1.  ISO2002 ID# _9dqxI_TdEeife6veM7daYw.
//

using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;

namespace BeneficialStrategies.Iso20022.Components;

/// <summary>
/// Vehicle rental service provides detailed vehicle rental information.
/// </summary>
public partial record VehicleRentalService1
     : IIsoXmlSerilizable<VehicleRentalService1>
{
    #nullable enable
    
    /// <summary>
    /// Company in charge of a vehicle rental service.
    /// </summary>
    public VehicleRentalCompany1? VehicleRentalCompany { get; init; } 
    /// <summary>
    /// Customer renting a vehicle.
    /// </summary>
    public VehicleRentalCustomer1? Customer { get; init; } 
    /// <summary>
    /// Provides the identifier assigned by the card acceptor that best categorizes the items being purchased in a standardized commodity group.
    /// </summary>
    public IsoMax35Text? SummaryCommodityIdentification { get; init; } 
    /// <summary>
    /// Agreement (contract) related to a vehicle rental service.
    /// </summary>
    public VehicleRentalAgreement1? RentalAgreement { get; init; } 
    /// <summary>
    /// Invoice related to a vehicle rental service.
    /// </summary>
    public VehicleRentalInvoice1? RentalInvoice { get; init; } 
    /// <summary>
    /// Additional user-defined data pertaining to the vehicle rental. 
    /// </summary>
    public IsoMax350Text? AdditionalData { get; init; } 
    
    #nullable disable
    
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (VehicleRentalCompany is VehicleRentalCompany1 VehicleRentalCompanyValue)
        {
            writer.WriteStartElement(null, "VhclRntlCpny", xmlNamespace );
            VehicleRentalCompanyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Customer is VehicleRentalCustomer1 CustomerValue)
        {
            writer.WriteStartElement(null, "Cstmr", xmlNamespace );
            CustomerValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SummaryCommodityIdentification is IsoMax35Text SummaryCommodityIdentificationValue)
        {
            writer.WriteStartElement(null, "SummryCmmdtyId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(SummaryCommodityIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (RentalAgreement is VehicleRentalAgreement1 RentalAgreementValue)
        {
            writer.WriteStartElement(null, "RntlAgrmt", xmlNamespace );
            RentalAgreementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RentalInvoice is VehicleRentalInvoice1 RentalInvoiceValue)
        {
            writer.WriteStartElement(null, "RntlInvc", xmlNamespace );
            RentalInvoiceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalData is IsoMax350Text AdditionalDataValue)
        {
            writer.WriteStartElement(null, "AddtlData", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax350Text(AdditionalDataValue)); // data type Max350Text System.String
            writer.WriteEndElement();
        }
    }
    public static VehicleRentalService1 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}
