//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by SerializationFormatterGenerator for .  ISO2002 ID# _9DmuQUNJEeGHJ_bHJRPaIQ.
//


namespace BeneficialStrategies.Iso20022.Framework;

public class SerializationFormatter
{
    /// <summary>
    /// Singleton instance of these settings. Serves as default for all message types.
    /// </summary>
    public static SerializationFormatter GlobalInstance { get; set; } = new SerializationFormatter();
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max35Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 35 characters.
    /// </summary>
    public Func<IsoMax35Text,string> IsoMax35Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max70Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 70characters.
    /// </summary>
    public Func<IsoMax70Text,string> IsoMax70Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max140Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 140 characters.
    /// </summary>
    public Func<IsoMax140Text,string> IsoMax140Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max350Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 350 characters.
    /// </summary>
    public Func<IsoMax350Text,string> IsoMax350Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max16Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 16 characters.
    /// </summary>
    public Func<IsoMax16Text,string> IsoMax16Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PhoneNumber.
    /// Characteristics of this type:
    /// The collection of information which identifies a specific phone or FAX number as defined by telecom services.|It consists of a "+" followed by the country code (from 1 to 3 characters) then a "-" and finally, any combination of numbers, "(", ")", "+" and "-" (up to 30 characters).
    /// </summary>
    public Func<IsoPhoneNumber,string> IsoPhoneNumber { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max256Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 256 characters.
    /// </summary>
    public Func<IsoMax256Text,string> IsoMax256Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2048Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 2048 characters.
    /// </summary>
    public Func<IsoMax2048Text,string> IsoMax2048Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Extended350Code.
    /// Characteristics of this type:
    /// Code and / or description for values that are not yet part of the related code list.
    /// </summary>
    public Func<IsoExtended350Code,string> IsoExtended350Code { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max8Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8 characters.
    /// </summary>
    public Func<IsoMax8Text,string> IsoMax8Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact4AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of 4 characters.
    /// </summary>
    public Func<IsoExact4AlphaNumericText,string> IsoExact4AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max3Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 3 characters.
    /// </summary>
    public Func<IsoMax3Text,string> IsoMax3Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max4AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 4 characters.
    /// </summary>
    public Func<IsoMax4AlphaNumericText,string> IsoMax4AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PreviousAll.
    /// Characteristics of this type:
    /// Indicates that the investment plan issued during all the previous years have to be transferred.
    /// </summary>
    public Func<IsoPreviousAll,string> IsoPreviousAll { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max3NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 3 digits.
    /// </summary>
    public Func<IsoMax3NumericText,string> IsoMax3NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 10 characters.
    /// </summary>
    public Func<IsoMax10Text,string> IsoMax10Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max34Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 34 characters.
    /// </summary>
    public Func<IsoMax34Text,string> IsoMax34Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 5 digits.
    /// </summary>
    public Func<IsoMax5NumericText,string> IsoMax5NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 20, 000 characters.
    /// </summary>
    public Func<IsoMax20000Text,string> IsoMax20000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max15NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 15 digits.
    /// </summary>
    public Func<IsoMax15NumericText,string> IsoMax15NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max210Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 210 characters.
    /// </summary>
    public Func<IsoMax210Text,string> IsoMax210Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax16Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 16 characters. It has a pattern that disables the use of characters that is not part of the character set X, that is, that is not a-z A-Z / - ? : ( ) . , ‘ + , and disable the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINXMax16Text,string> IsoRestrictedFINXMax16Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax35Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 35 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax35Text,string> IsoRestrictedFINXMax35Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax34Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 34 characters. It has a pattern that disables the use of characters that is not part of the character set X, that is, that is not a-z A-Z / - ? : ( ) . , ‘ + , and disable the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINXMax34Text,string> IsoRestrictedFINXMax34Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax210Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 210 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax210Text,string> IsoRestrictedFINXMax210Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact3NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of 3 digits.
    /// </summary>
    public Func<IsoExact3NumericText,string> IsoExact3NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISO20022MessageIdentificationText.
    /// Characteristics of this type:
    /// ISO 20022 Message identifier of an MX message.
    /// </summary>
    public Func<IsoISO20022MessageIdentificationText,string> IsoISO20022MessageIdentificationText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax140Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 140 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax140Text,string> IsoRestrictedFINXMax140Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax31Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 31 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax31Text,string> IsoRestrictedFINXMax31Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINExact2Text.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 2 characters that must has a pattern XX|TS.
    /// </summary>
    public Func<IsoRestrictedFINExact2Text,string> IsoRestrictedFINExact2Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax30Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 30 characters. It has a pattern that disables the use of characters that is not part of the character set X, that is, that is not a-z A-Z / - ? : ( ) . , ‘ + , and disable the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINXMax30Text,string> IsoRestrictedFINXMax30Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax350Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 350 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax350Text,string> IsoRestrictedFINXMax350Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax30Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 30 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax30Text,string> IsoRestrictedFINMax30Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax8Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax8Text,string> IsoRestrictedFINMax8Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINX2Max34Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 34 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINX2Max34Text,string> IsoRestrictedFINX2Max34Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax256Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 256 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax256Text,string> IsoRestrictedFINXMax256Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact3UpperCaseAlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an upper case alphanumeric string with a length of three characters.
    /// </summary>
    public Func<IsoExact3UpperCaseAlphaNumericText,string> IsoExact3UpperCaseAlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max30Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 30 characters.
    /// </summary>
    public Func<IsoMax30Text,string> IsoMax30Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max8000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8000 characters.
    /// </summary>
    public Func<IsoMax8000Text,string> IsoMax8000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax70Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 70 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax70Text,string> IsoRestrictedFINXMax70Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINZMax256Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 256 characters limited to character set Z that is, a-z A-Z / - ? : ( ) . , ‘ += ! “ % & * < > ; @ #  .
    /// </summary>
    public Func<IsoRestrictedFINZMax256Text,string> IsoRestrictedFINZMax256Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINZMax8000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8000 characters limited to character set Z, that is, a-z A-Z / - ? : ( ) . , ‘ += ! “ % & * < > ; @ #  .
    /// </summary>
    public Func<IsoRestrictedFINZMax8000Text,string> IsoRestrictedFINZMax8000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max6Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 6 characters.
    /// </summary>
    public Func<IsoMax6Text,string> IsoMax6Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max105Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 105 characters.
    /// </summary>
    public Func<IsoMax105Text,string> IsoMax105Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax35Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 35 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax35Text,string> IsoRestrictedFINMax35Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max60Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 60 characters.
    /// </summary>
    public Func<IsoMax60Text,string> IsoMax60Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact5NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of 5 digits.
    /// </summary>
    public Func<IsoExact5NumericText,string> IsoExact5NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact4NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of 4 digits.
    /// </summary>
    public Func<IsoExact4NumericText,string> IsoExact4NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax8Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax8Text,string> IsoRestrictedFINXMax8Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax24Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 24 characters. It has a pattern that disables the use of characters that is not part of the character set X, that is, that is not a-z A-Z / - ? : ( ) . , ‘ + , and disable the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINXMax24Text,string> IsoRestrictedFINXMax24Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max128Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 128 characters.
    /// </summary>
    public Func<IsoMax128Text,string> IsoMax128Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max4NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 4 digits.
    /// </summary>
    public Func<IsoMax4NumericText,string> IsoMax4NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max4Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 4 characters.
    /// </summary>
    public Func<IsoMax4Text,string> IsoMax4Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max15PlusSignedNumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 15 digits and may be prefixed with a plus sign.
    /// </summary>
    public Func<IsoMax15PlusSignedNumericText,string> IsoMax15PlusSignedNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Unlimited9Text.
    /// Characteristics of this type:
    /// String of characters equal to UNLIMITED.
    /// </summary>
    public Func<IsoUnlimited9Text,string> IsoUnlimited9Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max500Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 500 characters.
    /// </summary>
    public Func<IsoMax500Text,string> IsoMax500Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min8Max28NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a minimum length of 8 digits, and a maximum length of 28 digits.
    /// </summary>
    public Func<IsoMin8Max28NumericText,string> IsoMin8Max28NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min2Max3NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a minimum length of 2 digits, and a maximum length of 3 digits.
    /// </summary>
    public Func<IsoMin2Max3NumericText,string> IsoMin2Max3NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact1NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of1digit.
    /// </summary>
    public Func<IsoExact1NumericText,string> IsoExact1NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min3Max4NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a minimum length of 3 digits, and a maximum length of 4 digits.
    /// </summary>
    public Func<IsoMin3Max4NumericText,string> IsoMin3Max4NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ExternalLocalInstrumentCode_Obsolete.
    /// Characteristics of this type:
    /// Specifies the external local instrument code in the format of character string with a maximum length of 35 characters.|The list of valid codes is an external code list published separately.
    /// </summary>
    public Func<IsoExternalLocalInstrumentCode_Obsolete,string> IsoExternalLocalInstrumentCode_Obsolete { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max1025Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 1025 characters.
    /// </summary>
    public Func<IsoMax1025Text,string> IsoMax1025Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 2000 characters.
    /// </summary>
    public Func<IsoMax2000Text,string> IsoMax2000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Refused7Text.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of 7 characters and a fixed value of 'REFUSED'.
    /// </summary>
    public Func<IsoRefused7Text,string> IsoRefused7Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact42Text.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 42 characters.
    /// </summary>
    public Func<IsoExact42Text,string> IsoExact42Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 20 characters.
    /// </summary>
    public Func<IsoMax20Text,string> IsoMax20Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min3Max4Text.
    /// Characteristics of this type:
    /// Specifies a character string with a minimum length of 3 characters, and a maximum length of 4 characters.
    /// </summary>
    public Func<IsoMin3Max4Text,string> IsoMin3Max4Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max9NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 9 digits.
    /// </summary>
    public Func<IsoMax9NumericText,string> IsoMax9NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact10Text.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 10 characters.
    /// </summary>
    public Func<IsoExact10Text,string> IsoExact10Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max35NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 35 digits.
    /// </summary>
    public Func<IsoMax35NumericText,string> IsoMax35NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 2 digits.
    /// </summary>
    public Func<IsoMax2NumericText,string> IsoMax2NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max45Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 45 characters.
    /// </summary>
    public Func<IsoMax45Text,string> IsoMax45Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min6Max8Text.
    /// Characteristics of this type:
    /// Specifies a character string with a minimum length of 6 characters, and a maximum length of 8 characters.
    /// </summary>
    public Func<IsoMin6Max8Text,string> IsoMin6Max8Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max40Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 40 characters.
    /// </summary>
    public Func<IsoMax40Text,string> IsoMax40Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max12Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 12 characters.
    /// </summary>
    public Func<IsoMax12Text,string> IsoMax12Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedMS02MS03CodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted to MS02 and MS03 codes.
    /// </summary>
    public Func<IsoRestrictedMS02MS03CodeText,string> IsoRestrictedMS02MS03CodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedRR01CodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted RR01 code.
    /// </summary>
    public Func<IsoRestrictedRR01CodeText,string> IsoRestrictedRR01CodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedSEPACodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted SEPA code.
    /// </summary>
    public Func<IsoRestrictedSEPACodeText,string> IsoRestrictedSEPACodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedSMNDACodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted SMNDA code.
    /// </summary>
    public Func<IsoRestrictedSMNDACodeText,string> IsoRestrictedSMNDACodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedB2BCORECodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted to B2B or CORE code:|- CORE: Used to indicate that the SEPA Core Direct Debit Scheme rules apply.|- B2B: Used to indicate that the SEPA Business-to-Business Direct Debit Scheme rules apply.
    /// </summary>
    public Func<IsoRestrictedB2BCORECodeText,string> IsoRestrictedB2BCORECodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedRR01SL01CodeText.
    /// Characteristics of this type:
    /// EPC Technical validation subset restricted RR01 or SL01 code.
    /// </summary>
    public Func<IsoRestrictedRR01SL01CodeText,string> IsoRestrictedRR01SL01CodeText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax210Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 210 characters.
    /// </summary>
    public Func<IsoRestrictedFINMax210Text,string> IsoRestrictedFINMax210Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax16Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 16 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax16Text,string> IsoRestrictedFINMax16Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax34Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 34 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax34Text,string> IsoRestrictedFINMax34Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax23Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 23 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax23Text,string> IsoRestrictedFINMax23Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax15Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 15 characters.
    /// </summary>
    public Func<IsoRestrictedFINMax15Text,string> IsoRestrictedFINMax15Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax31Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 31 characters.
    /// </summary>
    public Func<IsoRestrictedFINMax31Text,string> IsoRestrictedFINMax31Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact7NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of 7 digits.
    /// </summary>
    public Func<IsoExact7NumericText,string> IsoExact7NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 10 digits.
    /// </summary>
    public Func<IsoMax10NumericText,string> IsoMax10NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact32AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of 32 characters.
    /// </summary>
    public Func<IsoExact32AlphaNumericText,string> IsoExact32AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max240Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 240 characters.
    /// </summary>
    public Func<IsoMax240Text,string> IsoMax240Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max50Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 50 characters.
    /// </summary>
    public Func<IsoMax50Text,string> IsoMax50Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 5 characters.
    /// </summary>
    public Func<IsoMax5AlphaNumericText,string> IsoMax5AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max450Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 450 characters.
    /// </summary>
    public Func<IsoMax450Text,string> IsoMax450Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max52Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 52 characters.
    /// </summary>
    public Func<IsoMax52Text,string> IsoMax52Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max15Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 15 characters.
    /// </summary>
    public Func<IsoMax15Text,string> IsoMax15Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max1000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 1000 characters.
    /// </summary>
    public Func<IsoMax1000Text,string> IsoMax1000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact3AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of exact 3 characters.
    /// </summary>
    public Func<IsoExact3AlphaNumericText,string> IsoExact3AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min2Max3AlphaText.
    /// Characteristics of this type:
    /// Specifies an alpha string with a minimum length of 2 characters and a maximum length of 3 characters.
    /// </summary>
    public Func<IsoMin2Max3AlphaText,string> IsoMin2Max3AlphaText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max25Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 25 characters.
    /// </summary>
    public Func<IsoMax25Text,string> IsoMax25Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max15AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 15 characters.
    /// </summary>
    public Func<IsoMax15AlphaNumericText,string> IsoMax15AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max104Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 104 characters.
    /// </summary>
    public Func<IsoMax104Text,string> IsoMax104Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max37Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 37 characters.
    /// </summary>
    public Func<IsoMax37Text,string> IsoMax37Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max76Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 76 characters.
    /// </summary>
    public Func<IsoMax76Text,string> IsoMax76Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max13AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 13 characters.
    /// </summary>
    public Func<IsoMax13AlphaNumericText,string> IsoMax13AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max14Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 14 characters.
    /// </summary>
    public Func<IsoMax14Text,string> IsoMax14Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max14AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 14 characters.
    /// </summary>
    public Func<IsoMax14AlphaNumericText,string> IsoMax14AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max64Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 64 characters.
    /// </summary>
    public Func<IsoMax64Text,string> IsoMax64Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 20 characters.
    /// </summary>
    public Func<IsoMax20AlphaNumericText,string> IsoMax20AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max100AlphaNumericUnderscoreText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 100 characters, which may contain underscores.
    /// </summary>
    public Func<IsoMax100AlphaNumericUnderscoreText,string> IsoMax100AlphaNumericUnderscoreText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max38AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a maximum length of 20 characters.
    /// </summary>
    public Func<IsoMax38AlphaNumericText,string> IsoMax38AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact2NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with an exact length of 2 digits.
    /// </summary>
    public Func<IsoExact2NumericText,string> IsoExact2NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 5 characters.
    /// </summary>
    public Func<IsoMax5Text,string> IsoMax5Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact2AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with an exact length of 2 characters.
    /// </summary>
    public Func<IsoExact2AlphaNumericText,string> IsoExact2AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RateSourceText.
    /// Characteristics of this type:
    /// Specifies a rate source.
    /// 
    /// The values to be used for the settlement rate source are published in Annex A of the 1998 FX and Currency
    /// Option Definitions (the FX definitions, as published by the International Swaps and Derivatives Association,
    /// Inc., the Emerging Markets Traders Association and the Foreign Exchange Committee) as amended and
    /// supplemented from time to time.
    /// </summary>
    public Func<IsoRateSourceText,string> IsoRateSourceText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max6AlphaText.
    /// Characteristics of this type:
    /// Specifies an alpha string between 1 and 6 characters.
    /// </summary>
    public Func<IsoMax6AlphaText,string> IsoMax6AlphaText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DateOffsetText.
    /// Characteristics of this type:
    /// Specifies a date offset in the form of an integer value of business days. Restricted to the values 0, -1 and -2.
    /// </summary>
    public Func<IsoDateOffsetText,string> IsoDateOffsetText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max1850Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 1850 characters.
    /// </summary>
    public Func<IsoMax1850Text,string> IsoMax1850Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact2UpperCaseAlphaText.
    /// Characteristics of this type:
    /// Specifies an upper case alphabetic non numeric string with an exact length of two characters.
    /// </summary>
    public Func<IsoExact2UpperCaseAlphaText,string> IsoExact2UpperCaseAlphaText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax52Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 52 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax52Text,string> IsoRestrictedFINXMax52Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax25Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 24 characters. It has a pattern that disables the use of characters that is not part of the character set X, that is, that is not a-z A-Z / - ? : ( ) . , ‘ + , and disable the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINXMax25Text,string> IsoRestrictedFINXMax25Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max19NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 19 digits.
    /// </summary>
    public Func<IsoMax19NumericText,string> IsoMax19NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max6NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 6 digits.
    /// </summary>
    public Func<IsoMax6NumericText,string> IsoMax6NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20KText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 20 000 characters.
    /// </summary>
    public Func<IsoMax20KText,string> IsoMax20KText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max12NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 12 digits
    /// </summary>
    public Func<IsoMax12NumericText,string> IsoMax12NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max8NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 8 digits.
    /// </summary>
    public Func<IsoMax8NumericText,string> IsoMax8NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact12Text.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 10 characters.
    /// </summary>
    public Func<IsoExact12Text,string> IsoExact12Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max23NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 23 digits
    /// </summary>
    public Func<IsoMax23NumericText,string> IsoMax23NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact15Text.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 15 characters.
    /// </summary>
    public Func<IsoExact15Text,string> IsoExact15Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max9999HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 9999 binary bytes (19998 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax9999HexBinaryText,string> IsoMax9999HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10KText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 10 000 characters.
    /// </summary>
    public Func<IsoMax10KText,string> IsoMax10KText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max99Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 99 characters.
    /// </summary>
    public Func<IsoMax99Text,string> IsoMax99Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max11NumericText.
    /// Characteristics of this type:
    /// Specifies a numeric string with a maximum length of 11 digits.
    /// </summary>
    public Func<IsoMax11NumericText,string> IsoMax11NumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact6AlphaNumericText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of 6 characters.
    /// </summary>
    public Func<IsoExact6AlphaNumericText,string> IsoExact6AlphaNumericText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max4000Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 4000 characters.
    /// </summary>
    public Func<IsoMax4000Text,string> IsoMax4000Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max32HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 32 binary bytes (64 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax32HexBinaryText,string> IsoMax32HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact1HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with an exact length of 1 binary bytes (2 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoExact1HexBinaryText,string> IsoExact1HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10KHexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 10000 binary bytes (20000 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax10KHexBinaryText,string> IsoMax10KHexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max8HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 8 binary bytes (16 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax8HexBinaryText,string> IsoMax8HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max19HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 19 binary bytes (38 hexadecimal text characters). 
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax19HexBinaryText,string> IsoMax19HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max16HexBinaryText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 16 binary bytes (32 hexadecimal text characters).
    /// 
    /// Used only for hex binary data only, supports only characters A-F and 0-9.
    /// </summary>
    public Func<IsoMax16HexBinaryText,string> IsoMax16HexBinaryText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINZMax2048Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 2048 characters limited to character set Z that is, a-z A-Z / - ? : ( ) . , ‘ += ! “ % & * < > ; @ #  .
    /// </summary>
    public Func<IsoRestrictedFINZMax2048Text,string> IsoRestrictedFINZMax2048Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max72Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 72 characters.
    /// </summary>
    public Func<IsoMax72Text,string> IsoMax72Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max100Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 100 characters.
    /// </summary>
    public Func<IsoMax100Text,string> IsoMax100Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINXMax520Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 140 characters limited to character set X, that is, a-z A-Z / - ? : ( ) . , ‘ + .
    /// </summary>
    public Func<IsoRestrictedFINXMax520Text,string> IsoRestrictedFINXMax520Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Exact4AlphaNumericUnderscoreText.
    /// Characteristics of this type:
    /// Specifies an alphanumeric string with a length of 4 characters, which may contain underscores. The string must not start with a underscore.
    /// </summary>
    public Func<IsoExact4AlphaNumericUnderscoreText,string> IsoExact4AlphaNumericUnderscoreText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINMax50Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 50 characters. It has a pattern ([^/]+/)+([^/]+)|([^/]*) that disables the use of slash "/" at the beginning and end of line and double slash "//" within the line.
    /// </summary>
    public Func<IsoRestrictedFINMax50Text,string> IsoRestrictedFINMax50Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max200Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 200 characters.
    /// </summary>
    public Func<IsoMax200Text,string> IsoMax200Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max512Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 512 characters.
    /// </summary>
    public Func<IsoMax512Text,string> IsoMax512Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max280Text.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 280 characters.
    /// </summary>
    public Func<IsoMax280Text,string> IsoMax280Text { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type GeographicPointInDecimalDegrees.
    /// Characteristics of this type:
    /// Identifies a geographic point or location by geographic coordinates expressed in latitude/longitude decimal degrees only.
    /// </summary>
    public Func<IsoGeographicPointInDecimalDegrees,string> IsoGeographicPointInDecimalDegrees { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10MbText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 10,000,000 characters.
    /// </summary>
    public Func<IsoMax10MbText,string> IsoMax10MbText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max40KText.
    /// Characteristics of this type:
    /// Specifies a character string with a maximum length of 40 000 characters.
    /// </summary>
    public Func<IsoMax40KText,string> IsoMax40KText { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISODateTime.
    /// Characteristics of this type:
    /// A particular point in the progression of time defined by a mandatory date and a mandatory time component, expressed in either UTC time format (YYYY-MM-DDThh:mm:ss.sssZ), local time with UTC offset format (YYYY-MM-DDThh:mm:ss.sss+/-hh:mm), or local time format (YYYY-MM-DDThh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.|Note on the time format:|1) beginning / end of calendar day|00:00:00 = the beginning of a calendar day|24:00:00 = the end of a calendar day|2) fractions of second in time format|Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
    /// </summary>
    public Func<IsoISODateTime,string> IsoISODateTime { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISONormalisedDateTime.
    /// Characteristics of this type:
    /// an ISODateTime whereby all timezoned dateTime values are UTC.
    /// </summary>
    public Func<IsoISONormalisedDateTime,string> IsoISONormalisedDateTime { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISODate.
    /// Characteristics of this type:
    /// A particular point in the progression of time in a calendar year expressed in the YYYY-MM-DD format. This representation is defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.
    /// </summary>
    public Func<IsoISODate,string> IsoISODate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISINIdentifier.
    /// Characteristics of this type:
    /// International Securities Identification Number (ISIN). A numbering system designed by the United Nation's International Organisation for Standardisation (ISO). The ISIN is composed of a 2-character prefix representing the country of issue, followed by the national security number (if one exists), and a check digit. Each country has a national numbering agency that assigns ISIN numbers for securities in that country.
    /// </summary>
    public Func<IsoISINIdentifier,string> IsoISINIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BICFIIdentifier.
    /// Characteristics of this type:
    /// Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBICFIIdentifier,string> IsoBICFIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BICIdentifier.
    /// Characteristics of this type:
    /// Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBICIdentifier,string> IsoBICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IBAN2007Identifier.
    /// Characteristics of this type:
    /// The International Bank Account Number is a code used internationally by financial institutions to uniquely identify the account of a customer at a financial institution as described in the 2007 edition of the ISO 13616 standard "Banking and related financial services - International Bank Account Number (IBAN)" and replaced by the more recent edition of the standard.
    /// </summary>
    public Func<IsoIBAN2007Identifier,string> IsoIBAN2007Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IBANIdentifier.
    /// Characteristics of this type:
    /// An identifier used internationally by financial institutions to uniquely identify the account of a customer at a financial institution, as described in the latest edition of the international standard ISO 13616. "Banking and related financial services - International Bank Account Number (IBAN)".
    /// </summary>
    public Func<IsoIBANIdentifier,string> IsoIBANIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BBANIdentifier.
    /// Characteristics of this type:
    /// Basic Bank Account Number (BBAN). Identifier used nationally by financial institutions, ie, in individual countries, generally as part of a National Account Numbering Scheme(s), which uniquely identifies the account of a customer.
    /// </summary>
    public Func<IsoBBANIdentifier,string> IsoBBANIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type UPICIdentifier.
    /// Characteristics of this type:
    /// Universal Payment Identification Code (UPIC). Identifier used by the New York Clearing House to mask confidential data, such as bank accounts and bank routing numbers. UPIC numbers remain with business customers, regardless of banking relationship changes.
    /// </summary>
    public Func<IsoUPICIdentifier,string> IsoUPICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type AnyBICIdentifier.
    /// Characteristics of this type:
    /// Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoAnyBICIdentifier,string> IsoAnyBICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RICIdentifier.
    /// Characteristics of this type:
    /// Reuters Identification Code (RIC). A numbering system used within the Reuters system to identify instruments worldwide. The RIC contains an X-character market specific code (can be the CUSIP or EPIC codes) followed by a full stop, then the two-digit ISO country code, for example, IBM in UK is IBM.UK.
    /// </summary>
    public Func<IsoRICIdentifier,string> IsoRICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type TickerIdentifier.
    /// Characteristics of this type:
    /// Letters that identify a stock traded on a stock exchange. The Ticker Symbol is a short and convenient way of identifying a stock, for example, RTR.L for Reuters quoted in London.
    /// </summary>
    public Func<IsoTickerIdentifier,string> IsoTickerIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BloombergIdentifier.
    /// Characteristics of this type:
    /// An identifier of a security assigned by the Bloomberg organisation.
    /// </summary>
    public Func<IsoBloombergIdentifier,string> IsoBloombergIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ConsolidatedTapeAssociationIdentifier.
    /// Characteristics of this type:
    /// Identifier of a security assigned by the Consolidated Tape Association.
    /// </summary>
    public Func<IsoConsolidatedTapeAssociationIdentifier,string> IsoConsolidatedTapeAssociationIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EuroclearClearstreamIdentifier.
    /// Characteristics of this type:
    /// Identifier of securities issued in Luxembourg. The common code is a 9-digit code that replaces the CEDEL (Clearstream) and Euroclear codes.
    /// </summary>
    public Func<IsoEuroclearClearstreamIdentifier,string> IsoEuroclearClearstreamIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CHIPSUniversalIdentifier.
    /// Characteristics of this type:
    /// (United States) Clearing House Interbank Payments System (CHIPS) Universal Identification (UID). Identifies entities that own accounts at CHIPS participating financial institutions, through which CHIPS payments are effected. The CHIPS UID is assigned by the New York Clearing House.
    /// </summary>
    public Func<IsoCHIPSUniversalIdentifier,string> IsoCHIPSUniversalIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NewZealandNCCIdentifier.
    /// Characteristics of this type:
    /// New Zealand Bank/Branch Code. Identifies New Zealand institutions on the New Zealand national clearing system. The code is assigned by the New Zealand Bankers' Association (NZBA).
    /// </summary>
    public Func<IsoNewZealandNCCIdentifier,string> IsoNewZealandNCCIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IrishNSCIdentifier.
    /// Characteristics of this type:
    /// Irish National Sorting Code. Identifies Irish financial institutions on the Irish national clearing system.
    /// </summary>
    public Func<IsoIrishNSCIdentifier,string> IsoIrishNSCIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type UKDomesticSortCodeIdentifier.
    /// Characteristics of this type:
    /// United Kingdom (UK) Sort Code. Identifies British financial institutions on the British national clearing systems. The sort code is assigned by the Association for Payments and Clearing Services (APACS).
    /// </summary>
    public Func<IsoUKDomesticSortCodeIdentifier,string> IsoUKDomesticSortCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CHIPSParticipantIdentifier.
    /// Characteristics of this type:
    /// (United States) Clearing House Interbank Payment System (CHIPS) Participant Identifier (ID). Identifies financial institutions participating on CHIPS. The CHIPS Participant ID is assigned by the New York Clearing House.
    /// </summary>
    public Func<IsoCHIPSParticipantIdentifier,string> IsoCHIPSParticipantIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SwissBCIdentifier.
    /// Characteristics of this type:
    /// Swiss Bank Code. Identifies Swiss institutions on the Swiss national clearing system.
    /// </summary>
    public Func<IsoSwissBCIdentifier,string> IsoSwissBCIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type FedwireRoutingNumberIdentifier.
    /// Characteristics of this type:
    /// Fedwire Routing Number. Identifies financial institutions, in the US, on the FedWire system. The routing number is assigned by the American Bankers Association (ABA).
    /// </summary>
    public Func<IsoFedwireRoutingNumberIdentifier,string> IsoFedwireRoutingNumberIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PortugueseNCCIdentifier.
    /// Characteristics of this type:
    /// Portuguese National Clearing Code. Identifies Portuguese financial institutions on the Portuguese national clearing system.
    /// </summary>
    public Func<IsoPortugueseNCCIdentifier,string> IsoPortugueseNCCIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RussianCentralBankIdentificationCodeIdentifier.
    /// Characteristics of this type:
    /// Russian Central Bank Identification Code. Identifies Russian financial institutions on the Russian national clearing system.
    /// </summary>
    public Func<IsoRussianCentralBankIdentificationCodeIdentifier,string> IsoRussianCentralBankIdentificationCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ItalianDomesticIdentifier.
    /// Characteristics of this type:
    /// Italian Domestic Identification Code. Identifies Italian financial institutions on the Italian national clearing system. The code is assigned by the Associazione Bancaria Italiana (ABI).
    /// </summary>
    public Func<IsoItalianDomesticIdentifier,string> IsoItalianDomesticIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type AustrianBankleitzahlIdentifier.
    /// Characteristics of this type:
    /// Austrian Bankleitzahl. Identifies Austrian financial institutions on the Austrian national clearing system.
    /// </summary>
    public Func<IsoAustrianBankleitzahlIdentifier,string> IsoAustrianBankleitzahlIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CanadianPaymentsARNIdentifier.
    /// Characteristics of this type:
    /// Canadian Payments Association Routing Number. Identifies Canadian financial institutions on the Canadian national clearing system.
    /// </summary>
    public Func<IsoCanadianPaymentsARNIdentifier,string> IsoCanadianPaymentsARNIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SwissSICIdentifier.
    /// Characteristics of this type:
    /// Swiss Interbank Clearing (SIC) Code. Identifies Swiss financial institutions domestically, on the Swiss national clearing system.
    /// </summary>
    public Func<IsoSwissSICIdentifier,string> IsoSwissSICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type GermanBankleitzahlIdentifier.
    /// Characteristics of this type:
    /// German Bankleitzahl. Identifies German financial institutions on the German national clearing systems.
    /// </summary>
    public Func<IsoGermanBankleitzahlIdentifier,string> IsoGermanBankleitzahlIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SpanishDomesticInterbankingIdentifier.
    /// Characteristics of this type:
    /// Spanish Domestic Interbanking Code. Identifies Spanish financial institutions on the Spanish national clearing system. The code is assigned by the Centro de Cooperacion Interbancaria (CCI).
    /// </summary>
    public Func<IsoSpanishDomesticInterbankingIdentifier,string> IsoSpanishDomesticInterbankingIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SouthAfricanNCCIdentifier.
    /// Characteristics of this type:
    /// South African National Clearing Code (NCC). Identifies South African financial institutions on the South African national clearing system. The code is assigned by the South African Bankers Services Company Ltd. (BankServ).
    /// </summary>
    public Func<IsoSouthAfricanNCCIdentifier,string> IsoSouthAfricanNCCIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type HongKongBankIdentifier.
    /// Characteristics of this type:
    /// Hong Kong Bank Code. Identifies Hong Kong financial institutions on the Hong Kong local clearing system.
    /// </summary>
    public Func<IsoHongKongBankIdentifier,string> IsoHongKongBankIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ExtensiveBranchNetworkIdentifier.
    /// Characteristics of this type:
    /// The extensive branch network list of the Australian Bank State Branch (BSB) Code. The codes are used for identifying Australian financial institutions, as assigned by the Australian Payments Clearing Association (APCA).
    /// </summary>
    public Func<IsoExtensiveBranchNetworkIdentifier,string> IsoExtensiveBranchNetworkIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SmallNetworkIdentifier.
    /// Characteristics of this type:
    /// The small network list of the Australian Bank State Branch (BSB) Code. The codes are used for identifying Australian financial institutions, as assigned by the Australian Payments Clearing Association (APCA).
    /// </summary>
    public Func<IsoSmallNetworkIdentifier,string> IsoSmallNetworkIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SEDOLIdentifier.
    /// Characteristics of this type:
    /// Stock Exchange Daily Official List (SEDOL) number. A code used by the London Stock Exchange to identify foreign stocks, especially those that aren't actively traded in the US and don't have a CUSIP number.
    /// </summary>
    public Func<IsoSEDOLIdentifier,string> IsoSEDOLIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CUSIPIdentifier.
    /// Characteristics of this type:
    /// Committee on Uniform Securities and Identification Procedures (CUSIP). The standards body that created and maintains the securities classification system in the US. Non-US securities have a similar number called the CINS number.
    /// </summary>
    public Func<IsoCUSIPIdentifier,string> IsoCUSIPIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type QUICKIdentifier.
    /// Characteristics of this type:
    /// Identifier of a security assigned by the Japanese QUICK identification scheme for financial instruments.
    /// </summary>
    public Func<IsoQUICKIdentifier,string> IsoQUICKIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type WertpapierIdentifier.
    /// Characteristics of this type:
    /// Wertpapier Kenn-nummer. A number issued in Germany by the Wertpapier Mitteilungen. The Wertpapier Kenn-nummer, sometimes called WPK, contains 6-digits, but no check digit. There are different ranges of numbers representing different classes of securities.
    /// </summary>
    public Func<IsoWertpapierIdentifier,string> IsoWertpapierIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DutchIdentifier.
    /// Characteristics of this type:
    /// Identifier for Dutch securities.
    /// </summary>
    public Func<IsoDutchIdentifier,string> IsoDutchIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ValorenIdentifier.
    /// Characteristics of this type:
    /// Identifier for Swiss securities assigned by Telekurs Financial, the Swiss numbering agency.
    /// </summary>
    public Func<IsoValorenIdentifier,string> IsoValorenIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SicovamIdentifier.
    /// Characteristics of this type:
    /// Identifier for French securities assigned by the Societe Interprofessionnelle Pour La Compensation des Valeurs Mobilieres in France. The Sicovam is composed of 5-digits.
    /// </summary>
    public Func<IsoSicovamIdentifier,string> IsoSicovamIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BelgianIdentifier.
    /// Characteristics of this type:
    /// Identifier for Belgian securities.
    /// </summary>
    public Func<IsoBelgianIdentifier,string> IsoBelgianIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EntryTypeIdentifier.
    /// Characteristics of this type:
    /// Identifier providing additional system specific information about the entry.
    /// </summary>
    public Func<IsoEntryTypeIdentifier,string> IsoEntryTypeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BICNonFIIdentifier.
    /// Characteristics of this type:
    /// Code allocated to a non-financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBICNonFIIdentifier,string> IsoBICNonFIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IBEIIdentifier.
    /// Characteristics of this type:
    /// International Business Entity Identifier to uniquely identify business entities playing a role in the lifecycle of and events related to a financial instrument. (tentative - to be confirmed).
    /// </summary>
    public Func<IsoIBEIIdentifier,string> IsoIBEIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BEIIdentifier.
    /// Characteristics of this type:
    /// Code allocated to a non-financial institution by the ISO 9362 Registration Authority as described in ISO 9362 "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBEIIdentifier,string> IsoBEIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EANGLNIdentifier.
    /// Characteristics of this type:
    /// Global Location Number. A non-significant reference number used to identify legal entities, functional entities or physical entities according to the European Association for Numbering (EAN) numbering scheme rules. The number is used to retrieve the detailed information linked to it.
    /// </summary>
    public Func<IsoEANGLNIdentifier,string> IsoEANGLNIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DunsIdentifier.
    /// Characteristics of this type:
    /// Data Universal Numbering System. A unique identification number provided by Dun & Bradstreet to identify an organization.
    /// </summary>
    public Func<IsoDunsIdentifier,string> IsoDunsIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type MICIdentifier.
    /// Characteristics of this type:
    /// Market Identifier Code. The identification of a financial market, as stipulated in the norm ISO 10383 'Codes for exchanges and market identifications'.
    /// </summary>
    public Func<IsoMICIdentifier,string> IsoMICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CFIIdentifier.
    /// Characteristics of this type:
    /// Classification type of the financial instrument, as per the ISO 10962 Classification of Financial Instrument (CFI) codification, eg, common share with voting rights, fully paid, or registered.
    /// </summary>
    public Func<IsoCFIIdentifier,string> IsoCFIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RatingValueIdentifier.
    /// Characteristics of this type:
    /// Identifies the rating values that may be assigned to a security by a rating agency.
    /// </summary>
    public Func<IsoRatingValueIdentifier,string> IsoRatingValueIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type LEIIdentifier.
    /// Characteristics of this type:
    /// Legal Entity Identifier is a code allocated to a party as described in ISO 17442 "Financial Services - Legal Entity Identifier (LEI)".
    /// </summary>
    public Func<IsoLEIIdentifier,string> IsoLEIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IndianFinancialSystemCodeIdentifier.
    /// Characteristics of this type:
    /// Indian Financial System Code Identifier. Identifies Indian financial institutions on the Indian national clearing system.
    /// </summary>
    public Func<IsoIndianFinancialSystemCodeIdentifier,string> IsoIndianFinancialSystemCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type HellenicBankIdentificationCodeIdentifier.
    /// Characteristics of this type:
    /// Hellenic Bank Identification Code Identifier. Identifies Greek financial institutions on the Greek national clearing system.
    /// </summary>
    public Func<IsoHellenicBankIdentificationCodeIdentifier,string> IsoHellenicBankIdentificationCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PolishNationalClearingCodeIdentifier.
    /// Characteristics of this type:
    /// Polish National Clearing Code Identifier. Identifies Polish financial institutions on the Polish national clearing system.
    /// </summary>
    public Func<IsoPolishNationalClearingCodeIdentifier,string> IsoPolishNationalClearingCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type SNA2008SectorIdentifier.
    /// Characteristics of this type:
    /// System of National Accounts (SNA) Sector. Hierarchical classification of the sectors, as defined in the System of National Accounts 2008, as published by the United Nations.
    /// </summary>
    public Func<IsoSNA2008SectorIdentifier,string> IsoSNA2008SectorIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EICIdentifier.
    /// Characteristics of this type:
    /// Energy identification coding scheme.
    /// </summary>
    public Func<IsoEICIdentifier,string> IsoEICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NACEDomainIdentifier.
    /// Characteristics of this type:
    /// Domain identifier for NACE (Nomenclature of Economic Activities which is the European statistical classification of economic activities).
    /// </summary>
    public Func<IsoNACEDomainIdentifier,string> IsoNACEDomainIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISINOct2015Identifier.
    /// Characteristics of this type:
    /// The International Securities Identification Number is a code allocated to financial instruments as well as referential instruments, as described in the ISO 6166 standard, associated with the minimum descriptive data.  The ISIN consists of a prefix using the alpha-2 country codes or reserved codes specified in ISO 3166 or other prefixes as may be determined by the Registration Authority for the ISO 6166 standard, a nine characters (alphanumeric) basic code and a check digit.
    /// </summary>
    public Func<IsoISINOct2015Identifier,string> IsoISINOct2015Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CFIOct2015Identifier.
    /// Characteristics of this type:
    /// Classification type of the financial instrument, as per the ISO 10962 Classification of Financial Instrument (CFI) codification, for example, common share with voting rights, fully paid, or registered.
    /// </summary>
    public Func<IsoCFIOct2015Identifier,string> IsoCFIOct2015Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Bloomberg2Identifier.
    /// Characteristics of this type:
    /// An identifier of a security assigned by the Bloomberg organisation.
    /// </summary>
    public Func<IsoBloomberg2Identifier,string> IsoBloomberg2Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type AnyBICDec2014Identifier.
    /// Characteristics of this type:
    /// Code allocated to a financial or non-financial institution by the ISO 9362 Registration Authority, as described in ISO 9362: 2014 - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoAnyBICDec2014Identifier,string> IsoAnyBICDec2014Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BICFIDec2014Identifier.
    /// Characteristics of this type:
    /// Code allocated to a financial institution by the ISO 9362 Registration Authority as described in ISO 9362: 2014 - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBICFIDec2014Identifier,string> IsoBICFIDec2014Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BICNonFIDec2014Identifier.
    /// Characteristics of this type:
    /// Code allocated to a non-financial institution by the ISO 9362 Registration Authority as described in ISO 9362: 2014 - "Banking - Banking telecommunication messages - Business identifier code (BIC)".
    /// </summary>
    public Func<IsoBICNonFIDec2014Identifier,string> IsoBICNonFIDec2014Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type UUIDv4Identifier.
    /// Characteristics of this type:
    /// Universally Unique IDentifier (UUID) version 4, as described in IETC RFC 4122 "Universally Unique IDentifier (UUID) URN Namespace".
    /// </summary>
    public Func<IsoUUIDv4Identifier,string> IsoUUIDv4Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ELFIdentifier.
    /// Characteristics of this type:
    /// Entity Legal Forms is a code allocated to a party as described in ISO 20275 "Financial services — Entity legal forms (ELF)". It specifies the type of entity that an organisation is considered to be within the legal or regulatory system under which it is formed.
    /// </summary>
    public Func<IsoELFIdentifier,string> IsoELFIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISICIdentifier.
    /// Characteristics of this type:
    /// Identifier of economic activities by ISIC (United Nations’ International Standard Industrial Classification of all Economic Activities).
    /// </summary>
    public Func<IsoISICIdentifier,string> IsoISICIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type MerchantCategoryCodeIdentifier.
    /// Characteristics of this type:
    /// Specifies the merchant category code, using the ISO 18245 defined for the assignment of Merchant Category Codes (MCC) in retail financial services.
    /// </summary>
    public Func<IsoMerchantCategoryCodeIdentifier,string> IsoMerchantCategoryCodeIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type UTIIdentifier.
    /// Characteristics of this type:
    /// Unique Transaction Identifier (UTI). Unique number allocated to a financial transaction as agreed among the parties and/or within the regulatory system under which it is formed. The UTI is described in the latest edition of the international standard ISO 23897:2020.
    /// </summary>
    public Func<IsoUTIIdentifier,string> IsoUTIIdentifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISIN2021Identifier.
    /// Characteristics of this type:
    /// International Securities Identification Number (ISIN). A numbering system designed by the United Nation's International Organisation for Standardisation (ISO). The ISIN is composed of a 2-character prefix representing the country of issue, followed by the national security number (if one exists), and a check digit. Each country has a national numbering agency that assigns ISIN numbers for securities in that country.
    /// </summary>
    public Func<IsoISIN2021Identifier,string> IsoISIN2021Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DTI2021Identifier.
    /// Characteristics of this type:
    /// The Digital Token Identifier (DTI) is an 8 character code assigned to fungible digital assets which uses distributed ledger technology for its issuance, storage, exchange, record of ownership or transaction validation and is not a currency (ISO 4217) as described in ISO 24165 - DTI. A check character, using the same character set as the base number, shall be calculated and added.
    /// </summary>
    public Func<IsoDTI2021Identifier,string> IsoDTI2021Identifier { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type YesNoIndicator.
    /// Characteristics of this type:
    /// Indicates a "Yes" or "No" type of answer for an element.
    /// </summary>
    public Func<IsoYesNoIndicator,string> IsoYesNoIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PlusOrMinusIndicator.
    /// Characteristics of this type:
    /// Indicates a positive or negative value.
    /// </summary>
    public Func<IsoPlusOrMinusIndicator,string> IsoPlusOrMinusIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RequestedIndicator.
    /// Characteristics of this type:
    /// Indicates if requested or not.
    /// </summary>
    public Func<IsoRequestedIndicator,string> IsoRequestedIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type TrueFalseIndicator.
    /// Characteristics of this type:
    /// A flag indicating a True or False value.
    /// </summary>
    public Func<IsoTrueFalseIndicator,string> IsoTrueFalseIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PaymentDirectionIndicator.
    /// Characteristics of this type:
    /// The direction of capital repayment for asset backed securities.
    /// </summary>
    public Func<IsoPaymentDirectionIndicator,string> IsoPaymentDirectionIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type AllOrNoneIndicator.
    /// Characteristics of this type:
    /// Indicates whether a round-lot market or limit-price order must be executed in its entirety or not at all.
    /// </summary>
    public Func<IsoAllOrNoneIndicator,string> IsoAllOrNoneIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ChargeIncludedIndicator.
    /// Characteristics of this type:
    /// Indicates whether charges have already been included.
    /// </summary>
    public Func<IsoChargeIncludedIndicator,string> IsoChargeIncludedIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BatchBookingIndicator.
    /// Characteristics of this type:
    /// Identifies whether the sending party requests a single debit or credit entry per individual transaction or a batch entry for the sum of the amounts of all transactions.
    /// </summary>
    public Func<IsoBatchBookingIndicator,string> IsoBatchBookingIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type GroupingIndicator.
    /// Characteristics of this type:
    /// A flag indicating a True or False value.
    /// </summary>
    public Func<IsoGroupingIndicator,string> IsoGroupingIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type GroupCancellationIndicator.
    /// Characteristics of this type:
    /// Indicates whether or not it is a group cancellation.
    /// </summary>
    public Func<IsoGroupCancellationIndicator,string> IsoGroupCancellationIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IdentificationVerificationIndicator.
    /// Characteristics of this type:
    /// Identifies whether or not the party and/or account identification information is correct.
    /// </summary>
    public Func<IsoIdentificationVerificationIndicator,string> IsoIdentificationVerificationIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type AMLIndicator.
    /// Characteristics of this type:
    /// Indicates the status of an anti-money laundering investigation.
    /// </summary>
    public Func<IsoAMLIndicator,string> IsoAMLIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type OverrideIndicator.
    /// Characteristics of this type:
    /// Indicates whether an arrangement has to be overridden or not.
    /// </summary>
    public Func<IsoOverrideIndicator,string> IsoOverrideIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DirectionIndicator.
    /// Characteristics of this type:
    /// Indicates up or down.
    /// </summary>
    public Func<IsoDirectionIndicator,string> IsoDirectionIndicator { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Number.
    /// Characteristics of this type:
    /// Number of objects represented as an integer.
    /// </summary>
    public Func<IsoNumber,string> IsoNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example 0.75 or 45.6.
    /// </summary>
    public Func<IsoDecimalNumber,string> IsoDecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max3Number.
    /// Characteristics of this type:
    /// Number (max 999) of objects represented as an integer.
    /// </summary>
    public Func<IsoMax3Number,string> IsoMax3Number { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINDecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example, 0.75 or 45.6.
    /// </summary>
    public Func<IsoRestrictedFINDecimalNumber,string> IsoRestrictedFINDecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NonNegativeDecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a non negative decimal number, for example, 0.75 or 45.6.
    /// </summary>
    public Func<IsoNonNegativeDecimalNumber,string> IsoNonNegativeDecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type LongDecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, eg, 0.75 or 45.6.
    /// </summary>
    public Func<IsoLongDecimalNumber,string> IsoLongDecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedMonthExact2Number.
    /// Characteristics of this type:
    /// Two digit restricted list for use representing calendar months.
    /// </summary>
    public Func<IsoRestrictedMonthExact2Number,string> IsoRestrictedMonthExact2Number { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PositiveNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a positive integer.
    /// </summary>
    public Func<IsoPositiveNumber,string> IsoPositiveNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5Number.
    /// Characteristics of this type:
    /// Number (max 99999) of objects represented as an integer.
    /// </summary>
    public Func<IsoMax5Number,string> IsoMax5Number { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max1Number.
    /// Characteristics of this type:
    /// Number (max 9) of objects represented as an integer.
    /// </summary>
    public Func<IsoMax1Number,string> IsoMax1Number { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DecimalNumberFraction5.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, eg, 0.75 or 45.6.
    /// </summary>
    public Func<IsoDecimalNumberFraction5,string> IsoDecimalNumberFraction5 { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type LongFraction21DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example 0.75 or 45.6.
    /// </summary>
    public Func<IsoLongFraction21DecimalNumber,string> IsoLongFraction21DecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NonNegativeFraction5DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number inclusive of zero, for example 0.75 or 45.6. Negative numbers cannot be reported.
    /// </summary>
    public Func<IsoNonNegativeFraction5DecimalNumber,string> IsoNonNegativeFraction5DecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NonNegativeNumber.
    /// Characteristics of this type:
    /// Non negative integer.
    /// </summary>
    public Func<IsoNonNegativeNumber,string> IsoNonNegativeNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20PositiveNumber.
    /// Characteristics of this type:
    /// Number of objects represented as an integer.
    /// </summary>
    public Func<IsoMax20PositiveNumber,string> IsoMax20PositiveNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20PositiveDecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, eg, 0.75 or 45.6.
    /// </summary>
    public Func<IsoMax20PositiveDecimalNumber,string> IsoMax20PositiveDecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max6NumberFraction2.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example, 1234.75 or 0.06
    /// </summary>
    public Func<IsoMax6NumberFraction2,string> IsoMax6NumberFraction2 { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10NumberFraction2.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example, 0.75 or 45.6.
    /// </summary>
    public Func<IsoMax10NumberFraction2,string> IsoMax10NumberFraction2 { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Fraction5DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example, 0.75 or 45.6.
    /// </summary>
    public Func<IsoFraction5DecimalNumber,string> IsoFraction5DecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2Fraction1NonNegativeNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a non negative decimal number, for example 1.1 or 8.0.
    /// </summary>
    public Func<IsoMax2Fraction1NonNegativeNumber,string> IsoMax2Fraction1NonNegativeNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type LongFraction19DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, such as 0.75 or 45.6.
    /// </summary>
    public Func<IsoLongFraction19DecimalNumber,string> IsoLongFraction19DecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type DayOfMonthNumber.
    /// Characteristics of this type:
    /// Day of the month in a numeric form, that is 3 is the third day of the month.
    /// </summary>
    public Func<IsoDayOfMonthNumber,string> IsoDayOfMonthNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max30DecimalNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a decimal number, for example 0.75 or 45.6 with a maximum of 30 digits and 29 fraction digits.
    /// </summary>
    public Func<IsoMax30DecimalNumber,string> IsoMax30DecimalNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5PositiveNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a positive integer.
    /// </summary>
    public Func<IsoMax5PositiveNumber,string> IsoMax5PositiveNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10PositiveNumber.
    /// Characteristics of this type:
    /// Number of objects represented as a positive integer.
    /// </summary>
    public Func<IsoMax10PositiveNumber,string> IsoMax10PositiveNumber { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CurrencyAndAmount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.|Note: A zero amount is considered a positive amount.
    /// </summary>
    public Func<IsoCurrencyAndAmount,string> IsoCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveCurrencyAndAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveCurrencyAndAmount,string> IsoActiveCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveCurrencyAnd13DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217. The number of fractional digits (or minor unit of currency) is not checked as per ISO 4217: It must be lesser than or equal to 13.|Note: The decimal separator is a dot.
    /// </summary>
    public Func<IsoActiveCurrencyAnd13DecimalAmount,string> IsoActiveCurrencyAnd13DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveOrHistoricCurrencyAndAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveOrHistoricCurrencyAndAmount,string> IsoActiveOrHistoricCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ImpliedCurrencyAndAmount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.|Note: a zero amount is considered a positive amount.
    /// </summary>
    public Func<IsoImpliedCurrencyAndAmount,string> IsoImpliedCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveOrHistoricCurrencyAnd13DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217. The number of fractional digits (or minor unit of currency) is not checked as per ISO 4217: It must be lesser than or equal to 13.|Note: The decimal separator is a dot.
    /// </summary>
    public Func<IsoActiveOrHistoricCurrencyAnd13DecimalAmount,string> IsoActiveOrHistoricCurrencyAnd13DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINImpliedCurrencyAndAmount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.|Note: a zero amount is considered a positive amount.
    /// </summary>
    public Func<IsoRestrictedFINImpliedCurrencyAndAmount,string> IsoRestrictedFINImpliedCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINActiveCurrencyAndAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoRestrictedFINActiveCurrencyAndAmount,string> IsoRestrictedFINActiveCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINActiveOrHistoricCurrencyAndAmount.
    /// Characteristics of this type:
    /// Number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoRestrictedFINActiveOrHistoricCurrencyAndAmount,string> IsoRestrictedFINActiveOrHistoricCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINActiveOrHistoricCurrencyAnd13DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217. The number of fractional digits (or minor unit of currency) is not checked as per ISO 4217: It must be lesser than or equal to 13.|Note: The decimal separator is a dot.
    /// </summary>
    public Func<IsoRestrictedFINActiveOrHistoricCurrencyAnd13DecimalAmount,string> IsoRestrictedFINActiveOrHistoricCurrencyAnd13DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type RestrictedFINActiveCurrencyAnd13DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217. The number of fractional digits (or minor unit of currency) is not checked as per ISO 4217: It must be lesser than or equal to 13.|Note: The decimal separator is a dot.
    /// </summary>
    public Func<IsoRestrictedFINActiveCurrencyAnd13DecimalAmount,string> IsoRestrictedFINActiveCurrencyAnd13DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EuroMax15Amount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency, where the unit of currency is the EUR and compliant with ISO 4217. The decimal separator is a dot, of maximum 15 digits before the dot and 2 after.|Note: A zero amount is not allowed.
    /// </summary>
    public Func<IsoEuroMax15Amount,string> IsoEuroMax15Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type EuroMax9Amount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency, where the unit of currency is the EUR and compliant with ISO 4217. The decimal separator is a dot, of maximum 9 digits before the dot and 2 after.|Note: A zero amount is not allowed.
    /// </summary>
    public Func<IsoEuroMax9Amount,string> IsoEuroMax9Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type CurrencyAnd30Amount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The decimal separator is a dot.|Note: A zero amount is considered a positive amount.|.
    /// </summary>
    public Func<IsoCurrencyAnd30Amount,string> IsoCurrencyAnd30Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveCurrencyAnd20Amount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveCurrencyAnd20Amount,string> IsoActiveCurrencyAnd20Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveOrHistoricCurrencyAnd20Amount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveOrHistoricCurrencyAnd20Amount,string> IsoActiveOrHistoricCurrencyAnd20Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ImpliedCurrencyAnd20Amount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency where the unit of currency is implied by the context and compliant with ISO 4217. The decimal separator is a dot.|Note: a zero amount is considered a positive amount.
    /// </summary>
    public Func<IsoImpliedCurrencyAnd20Amount,string> IsoImpliedCurrencyAnd20Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Restricted15DigitCurrencyAndAmount.
    /// Characteristics of this type:
    /// Number of monetary units specified in a currency, where the unit of currency is explicit and compliant with ISO 4217. The maximum number of digits must not exceed 15, including a maximum of 5 fractional digits.
    /// </summary>
    public Func<IsoRestricted15DigitCurrencyAndAmount,string> IsoRestricted15DigitCurrencyAndAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveCurrencyAnd24Amount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.  It allows up to 24 digits.
    /// </summary>
    public Func<IsoActiveCurrencyAnd24Amount,string> IsoActiveCurrencyAnd24Amount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveOrHistoricCurrencyAnd19DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveOrHistoricCurrencyAnd19DecimalAmount,string> IsoActiveOrHistoricCurrencyAnd19DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ActiveOrHistoricCurrencyAnd20DecimalAmount.
    /// Characteristics of this type:
    /// A number of monetary units specified in an active or a historic currency where the unit of currency is explicit and compliant with ISO 4217.
    /// </summary>
    public Func<IsoActiveOrHistoricCurrencyAnd20DecimalAmount,string> IsoActiveOrHistoricCurrencyAnd20DecimalAmount { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISOTime.
    /// Characteristics of this type:
    /// A particular point in the progression of time in a calendar day expressed in either UTC time format (hh:mm:ss.sssZ), local time with UTC offset format (hh:mm:ss.sss+/-hh:mm), or local time format (hh:mm:ss.sss). These representations are defined in "XML Schema Part 2: Datatypes Second Edition - W3C Recommendation 28 October 2004" which is aligned with ISO 8601.|Note on the time format:|1) beginning / end of calendar day|00:00:00 = the beginning of a calendar day|24:00:00 = the end of a calendar day|2) fractions of second in time format|Decimal fractions of seconds may be included. In this case, the involved parties shall agree on the maximum number of digits that are allowed.
    /// </summary>
    public Func<IsoISOTime,string> IsoISOTime { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PercentageRate.
    /// Characteristics of this type:
    /// Rate expressed as a percentage, that is, in hundredths, for example, 0.7 is 7/10 of a percent, and 7.0 is 7%.
    /// </summary>
    public Func<IsoPercentageRate,string> IsoPercentageRate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type PercentageBoundedRate.
    /// Characteristics of this type:
    /// Rate expressed as a percentage, ie, in hundredths, eg, 0.7 is 7/10 of a percent, and 7.0 is 7%.
    /// </summary>
    public Func<IsoPercentageBoundedRate,string> IsoPercentageBoundedRate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BaseOneRate.
    /// Characteristics of this type:
    /// Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
    /// </summary>
    public Func<IsoBaseOneRate,string> IsoBaseOneRate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BaseOne14Rate.
    /// Characteristics of this type:
    /// Rate expressed as a decimal, for example, 0.7 is 7/10 and 70% with 13 fractional digits maximum and 14 total digits.
    /// </summary>
    public Func<IsoBaseOne14Rate,string> IsoBaseOne14Rate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Percentage.
    /// Characteristics of this type:
    /// field representing a percentage (e.g. 0.05 represents 5% and 0.9525 represents 95.25%). Note the number of decimal places may vary.
    /// </summary>
    public Func<IsoPercentage,string> IsoPercentage { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BaseOne18Rate.
    /// Characteristics of this type:
    /// Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.
    /// </summary>
    public Func<IsoBaseOne18Rate,string> IsoBaseOne18Rate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type BaseOne25Rate.
    /// Characteristics of this type:
    /// Rate expressed as a decimal, for example, 0.7 is 7/10 and 70% with 13 fractional digits maximum and 25 total digits. May contain values larger than 1.
    /// </summary>
    public Func<IsoBaseOne25Rate,string> IsoBaseOne25Rate { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISOYearMonth.
    /// Characteristics of this type:
    /// Month within a particular calendar year represented by YYYY-MM (ISO 8601).
    /// </summary>
    public Func<IsoISOYearMonth,string> IsoISOYearMonth { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISOYear.
    /// Characteristics of this type:
    /// Year represented by YYYY (ISO 8601).
    /// </summary>
    public Func<IsoISOYear,string> IsoISOYear { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISORestrictedYear.
    /// Characteristics of this type:
    /// Year represented by YYYY (ISO 8601)
    /// </summary>
    public Func<IsoISORestrictedYear,string> IsoISORestrictedYear { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10KBinary.
    /// Characteristics of this type:
    /// Binary data of 10K maximum.
    /// </summary>
    public Func<IsoMax10KBinary,string> IsoMax10KBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2MBBinary.
    /// Characteristics of this type:
    /// Binary data of 2MB maximum.
    /// </summary>
    public Func<IsoMax2MBBinary,string> IsoMax2MBBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10000Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 10000 binary bytes.
    /// </summary>
    public Func<IsoMax10000Binary,string> IsoMax10000Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max3000Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 3000 binary bytes.
    /// </summary>
    public Func<IsoMax3000Binary,string> IsoMax3000Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max35Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 35 binary bytes.
    /// </summary>
    public Func<IsoMax35Binary,string> IsoMax35Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max500Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 500 binary bytes.
    /// </summary>
    public Func<IsoMax500Binary,string> IsoMax500Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max140Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 140 binary bytes.
    /// </summary>
    public Func<IsoMax140Binary,string> IsoMax140Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min5Max16Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a minimum length of 5 bytes, and a maximum length of 16 bytes.
    /// </summary>
    public Func<IsoMin5Max16Binary,string> IsoMin5Max16Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max5000Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 5000 binary bytes.
    /// </summary>
    public Func<IsoMax5000Binary,string> IsoMax5000Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max100KBinary.
    /// Characteristics of this type:
    /// Binary data of 100K maximum.
    /// </summary>
    public Func<IsoMax100KBinary,string> IsoMax100KBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max2KBinary.
    /// Characteristics of this type:
    /// Binary data of 2K maximum.
    /// </summary>
    public Func<IsoMax2KBinary,string> IsoMax2KBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max50Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a maximum length of 50 binary bytes.
    /// </summary>
    public Func<IsoMax50Binary,string> IsoMax50Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max4kBinary.
    /// Characteristics of this type:
    /// Binary data of 4k maximum.
    /// </summary>
    public Func<IsoMax4kBinary,string> IsoMax4kBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max1kBinary.
    /// Characteristics of this type:
    /// Binary data of 1k maximum.
    /// </summary>
    public Func<IsoMax1kBinary,string> IsoMax1kBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max10MbBinary.
    /// Characteristics of this type:
    /// Binary data of 10 megabytes (10 Mb) maximum.
    /// </summary>
    public Func<IsoMax10MbBinary,string> IsoMax10MbBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Min1Max256Binary.
    /// Characteristics of this type:
    /// Specifies a binary string with a minimum length of 1 byte, and a maximum length of 256 bytes.
    /// </summary>
    public Func<IsoMin1Max256Binary,string> IsoMin1Max256Binary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Max20MbBinary.
    /// Characteristics of this type:
    /// Binary data of 20 megabytes (20 Mb) maximum.
    /// </summary>
    public Func<IsoMax20MbBinary,string> IsoMax20MbBinary { get; } = value => value.ToString();
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type anySimpleType.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "anySimpleType".
    /// </summary>
    public Func<IsoanySimpleType,string> IsoanySimpleType { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type anyURI.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "anyURI".
    /// </summary>
    public Func<IsoanyURI,string> IsoanyURI { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type base64Binary.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "base64Binary".
    /// </summary>
    public Func<Isobase64Binary,string> Isobase64Binary { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type boolean.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "boolean".
    /// </summary>
    public Func<Isoboolean,string> Isoboolean { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type byte.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "byte".
    /// </summary>
    public Func<Isobyte,string> Isobyte { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type date.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "date".
    /// </summary>
    public Func<Isodate,string> Isodate { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type dateTime.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "dateTime".
    /// </summary>
    public Func<IsodateTime,string> IsodateTime { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type decimal.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "decimal".
    /// </summary>
    public Func<Isodecimal,string> Isodecimal { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type double.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "double".
    /// </summary>
    public Func<Isodouble,string> Isodouble { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type duration.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "duration".
    /// </summary>
    public Func<Isoduration,string> Isoduration { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ENTITIES.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "ENTITIES".
    /// </summary>
    public Func<IsoENTITIES,string> IsoENTITIES { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ENTITY.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "ENTITY".
    /// </summary>
    public Func<IsoENTITY,string> IsoENTITY { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type float.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "float".
    /// </summary>
    public Func<Isofloat,string> Isofloat { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type gDay.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "gDay".
    /// </summary>
    public Func<IsogDay,string> IsogDay { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type gMonth.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "gMonth".
    /// </summary>
    public Func<IsogMonth,string> IsogMonth { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type gMonthDay.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "gMonthDay".
    /// </summary>
    public Func<IsogMonthDay,string> IsogMonthDay { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type gYear.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "gYear".
    /// </summary>
    public Func<IsogYear,string> IsogYear { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type gYearMonth.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "gYearMonth".
    /// </summary>
    public Func<IsogYearMonth,string> IsogYearMonth { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type hexBinary.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "hexBinary".
    /// </summary>
    public Func<IsohexBinary,string> IsohexBinary { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ID.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "ID".
    /// </summary>
    public Func<IsoID,string> IsoID { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IDREF.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "IDREF".
    /// </summary>
    public Func<IsoIDREF,string> IsoIDREF { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type IDREFS.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "IDREFS".
    /// </summary>
    public Func<IsoIDREFS,string> IsoIDREFS { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type int.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "int".
    /// </summary>
    public Func<Isoint,string> Isoint { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type integer.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "integer".
    /// </summary>
    public Func<Isointeger,string> Isointeger { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type language.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "language".
    /// </summary>
    public Func<Isolanguage,string> Isolanguage { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type long.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "long".
    /// </summary>
    public Func<Isolong,string> Isolong { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type Name.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "Name".
    /// </summary>
    public Func<IsoName,string> IsoName { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NCName.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "NCName".
    /// </summary>
    public Func<IsoNCName,string> IsoNCName { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type negativeInteger.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "negativeInteger".
    /// </summary>
    public Func<IsonegativeInteger,string> IsonegativeInteger { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NMTOKEN.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "NMTOKEN".
    /// </summary>
    public Func<IsoNMTOKEN,string> IsoNMTOKEN { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type NMTOKENS.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "NMTOKENS".
    /// </summary>
    public Func<IsoNMTOKENS,string> IsoNMTOKENS { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type nonNegativeInteger.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "nonNegativeInteger".
    /// </summary>
    public Func<IsononNegativeInteger,string> IsononNegativeInteger { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type nonPositiveInteger.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "nonPositiveInteger".
    /// </summary>
    public Func<IsononPositiveInteger,string> IsononPositiveInteger { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type normalizedString.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "normalizedString".
    /// </summary>
    public Func<IsonormalizedString,string> IsonormalizedString { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type positiveInteger.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "positiveInteger".
    /// </summary>
    public Func<IsopositiveInteger,string> IsopositiveInteger { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type QName.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "QName".
    /// </summary>
    public Func<IsoQName,string> IsoQName { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type short.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "short".
    /// </summary>
    public Func<Isoshort,string> Isoshort { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type string.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "string".
    /// </summary>
    public Func<Isostring,string> Isostring { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type time.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "time".
    /// </summary>
    public Func<Isotime,string> Isotime { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type token.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "token".
    /// </summary>
    public Func<Isotoken,string> Isotoken { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type unsignedByte.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "unsignedByte".
    /// </summary>
    public Func<IsounsignedByte,string> IsounsignedByte { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type unsignedInt.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "unsignedInt".
    /// </summary>
    public Func<IsounsignedInt,string> IsounsignedInt { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type unsignedLong.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "unsignedLong".
    /// </summary>
    public Func<IsounsignedLong,string> IsounsignedLong { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type unsignedShort.
    /// Characteristics of this type:
    /// W3C XML Schema Built-in datatype "unsignedShort".
    /// </summary>
    public Func<IsounsignedShort,string> IsounsignedShort { get; } = value => value;
    
    /// <summary>
    /// Serialization formatter for ISO20022 Simple Type ISOMonth.
    /// Characteristics of this type:
    /// Month represented by MM (ISO 8601).
    /// </summary>
    public Func<IsoISOMonth,string> IsoISOMonth { get; } = value => value.ToString();
    
}
