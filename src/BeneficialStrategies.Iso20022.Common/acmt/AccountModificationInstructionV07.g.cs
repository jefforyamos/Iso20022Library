//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for AccountModificationInstructionV07.  ISO2002 ID# __kmtUUNDEeaknIuOb43xYQ.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.acmt.AccountModificationInstructionV07>;

namespace BeneficialStrategies.Iso20022.acmt;


/// <summary>
/// This record is an implementation of the acmt.003.001.07 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The AccountModificationInstruction message is sent by an account owner, for example, an investor or its designated agent to the account servicer, for example, a registrar, transfer agent, custodian bank or securities depository to modify, that is, create, update or delete specific details of an existing account.
/// Usage
/// The AccountModificationInstruction message is used to modify the details of an existing account.
/// The AccountModificationInstruction message can be used to:
/// - maintain/update any of the existing account details, for example, to update the address of the beneficiary or modify the preference to income from distribution to capitalisation, or,
/// - add/create specific details to the existing account when these details were not yet recorded at the time of account creation, for example, to add a second address or to establish new cash settlement standing instructions, or,
/// - delete specific account details, for example, delete cash standing instructions, or,
/// - instruct a change to the status of the account, for example, instruct the closure of the account.
/// The usage of this message may be subject to service level agreement (SLA) between the counterparties.
/// Execution of the AccountModificationInstruction is confirmed via an AccountDetailsConfirmation message.
/// </summary>
[Serializable]
[Description(@"Scope|The AccountModificationInstruction message is sent by an account owner, for example, an investor or its designated agent to the account servicer, for example, a registrar, transfer agent, custodian bank or securities depository to modify, that is, create, update or delete specific details of an existing account.|Usage|The AccountModificationInstruction message is used to modify the details of an existing account.|The AccountModificationInstruction message can be used to:|- maintain/update any of the existing account details, for example, to update the address of the beneficiary or modify the preference to income from distribution to capitalisation, or,|- add/create specific details to the existing account when these details were not yet recorded at the time of account creation, for example, to add a second address or to establish new cash settlement standing instructions, or,|- delete specific account details, for example, delete cash standing instructions, or,|- instruct a change to the status of the account, for example, instruct the closure of the account.|The usage of this message may be subject to service level agreement (SLA) between the counterparties.|Execution of the AccountModificationInstruction is confirmed via an AccountDetailsConfirmation message.")]
public partial record AccountModificationInstructionV07 : IOuterRecord<AccountModificationInstructionV07,AccountModificationInstructionV07Document>
    ,IIsoXmlSerilizable<AccountModificationInstructionV07>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "acmt.003.001.07";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "AcctModInstr";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => AccountModificationInstructionV07Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Reference that uniquely identifies the message from a business application standpoint.
    /// </summary>
    [IsoId("__kmtVUNDEeaknIuOb43xYQ")]
    [Description(@"Reference that uniquely identifies the message from a business application standpoint.")]
    [DataMember(Name="MsgId")]
    [XmlElement(ElementName="MsgId")]
    [Required]
    public required MessageIdentification1 MessageIdentification { get; init; }
    
    /// <summary>
    /// Reference to a linked message that was previously sent.
    /// </summary>
    [IsoId("__kmtV0NDEeaknIuOb43xYQ")]
    [Description(@"Reference to a linked message that was previously sent.")]
    [DataMember(Name="PrvsRef")]
    [XmlElement(ElementName="PrvsRef")]
    public AdditionalReference6? PreviousReference { get; init; }
    
    /// <summary>
    /// Information about the modification instruction.
    /// </summary>
    [IsoId("__kmtWUNDEeaknIuOb43xYQ")]
    [Description(@"Information about the modification instruction.")]
    [DataMember(Name="InstrDtls")]
    [XmlElement(ElementName="InstrDtls")]
    public InvestmentAccountModification3? InstructionDetails { get; init; }
    
    /// <summary>
    /// Identifies the account for which the information is modified.
    /// </summary>
    [IsoId("__kmtW0NDEeaknIuOb43xYQ")]
    [Description(@"Identifies the account for which the information is modified.")]
    [DataMember(Name="InvstmtAcctSelctn")]
    [XmlElement(ElementName="InvstmtAcctSelctn")]
    [Required]
    public required AccountSelection2Choice_ InvestmentAccountSelection { get; init; }
    
    /// <summary>
    /// Information related to general characteristics of the account to be inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtXUNDEeaknIuOb43xYQ")]
    [Description(@"Information related to general characteristics of the account to be inserted, updated or deleted.")]
    [DataMember(Name="ModfdInvstmtAcct")]
    [XmlElement(ElementName="ModfdInvstmtAcct")]
    public InvestmentAccount63? ModifiedInvestmentAccount { get; init; }
    
    /// <summary>
    /// Information related to an account party to be inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtX0NDEeaknIuOb43xYQ")]
    [Description(@"Information related to an account party to be inserted, updated or deleted.")]
    [DataMember(Name="ModfdAcctPties")]
    [XmlElement(ElementName="ModfdAcctPties")]
    public required ValueList<AccountParties16> ModifiedAccountParties { get; init; } = []; // Min=0, Max=10
    
    /// <summary>
    /// Information related to intermediaries to be inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtYUNDEeaknIuOb43xYQ")]
    [Description(@"Information related to intermediaries to be inserted, updated or deleted.")]
    [DataMember(Name="ModfdIntrmies")]
    [XmlElement(ElementName="ModfdIntrmies")]
    public required ValueList<ModificationScope38> ModifiedIntermediaries { get; init; } = []; // Min=0, Max=10
    
    /// <summary>
    /// Information related to referral information to be inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtY0NDEeaknIuOb43xYQ")]
    [Description(@"Information related to referral information to be inserted, updated or deleted.")]
    [DataMember(Name="ModfdPlcmnt")]
    [XmlElement(ElementName="ModfdPlcmnt")]
    public ModificationScope33? ModifiedPlacement { get; init; }
    
    /// <summary>
    /// Eligibility conditions related to allocation of new issues to be inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtZUNDEeaknIuOb43xYQ")]
    [Description(@"Eligibility conditions related to allocation of new issues to be inserted, updated or deleted.")]
    [DataMember(Name="ModfdIsseAllcn")]
    [XmlElement(ElementName="ModfdIsseAllcn")]
    public ModificationScope21? ModifiedIssueAllocation { get; init; }
    
    /// <summary>
    /// Information related to a savings plan to be either inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtZ0NDEeaknIuOb43xYQ")]
    [Description(@"Information related to a savings plan to be either inserted, updated or deleted.")]
    [DataMember(Name="ModfdSvgsInvstmtPlan")]
    [XmlElement(ElementName="ModfdSvgsInvstmtPlan")]
    public required ValueList<ModificationScope37> ModifiedSavingsInvestmentPlan { get; init; } = []; // Min=0, Max=50
    
    /// <summary>
    /// Information related to a withdrawal plan to be either inserted, updated or deleted.
    /// </summary>
    [IsoId("__kmtaUNDEeaknIuOb43xYQ")]
    [Description(@"Information related to a withdrawal plan to be either inserted, updated or deleted.")]
    [DataMember(Name="ModfdWdrwlInvstmtPlan")]
    [XmlElement(ElementName="ModfdWdrwlInvstmtPlan")]
    public required ValueList<ModificationScope37> ModifiedWithdrawalInvestmentPlan { get; init; } = []; // Min=0, Max=10
    
    /// <summary>
    /// Cash settlement standing instruction to be either inserted or deleted.
    /// </summary>
    [IsoId("__kmta0NDEeaknIuOb43xYQ")]
    [Description(@"Cash settlement standing instruction to be either inserted or deleted.")]
    [DataMember(Name="ModfdCshSttlm")]
    [XmlElement(ElementName="ModfdCshSttlm")]
    public required ValueList<CashSettlement2> ModifiedCashSettlement { get; init; } = []; // Min=0, Max=8
    
    /// <summary>
    /// Information related to documents to be added, deleted or updated.|.
    /// </summary>
    [IsoId("__kmtbUNDEeaknIuOb43xYQ")]
    [Description(@"Information related to documents to be added, deleted or updated.|.")]
    [DataMember(Name="ModfdSvcLvlAgrmt")]
    [XmlElement(ElementName="ModfdSvcLvlAgrmt")]
    public required ValueList<ModificationScope31> ModifiedServiceLevelAgreement { get; init; } = []; // Min=0, Max=30
    
    /// <summary>
    /// Information related to additional information to be added, deleted or updated.
    /// </summary>
    [IsoId("__kmtb0NDEeaknIuOb43xYQ")]
    [Description(@"Information related to additional information to be added, deleted or updated.")]
    [DataMember(Name="ModfdAddtlInf")]
    [XmlElement(ElementName="ModfdAddtlInf")]
    public ModificationScope35? ModifiedAdditionalInformation { get; init; }
    
    /// <summary>
    /// Identifies the market practice to which the message conforms.
    /// </summary>
    [IsoId("__kmtcUNDEeaknIuOb43xYQ")]
    [Description(@"Identifies the market practice to which the message conforms.")]
    [DataMember(Name="MktPrctcVrsn")]
    [XmlElement(ElementName="MktPrctcVrsn")]
    public MarketPracticeVersion1? MarketPracticeVersion { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("__kmtc0NDEeaknIuOb43xYQ")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="Xtnsn")]
    [XmlElement(ElementName="Xtnsn")]
    public Extension1? Extension { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="AccountModificationInstructionV07Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public AccountModificationInstructionV07Document ToDocument()
    {
        return new AccountModificationInstructionV07Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("AcctModInstr");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MsgId", xmlNamespace );
        MessageIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (PreviousReference is AdditionalReference6 PreviousReferenceValue)
        {
            writer.WriteStartElement(null, "PrvsRef", xmlNamespace );
            PreviousReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InstructionDetails is InvestmentAccountModification3 InstructionDetailsValue)
        {
            writer.WriteStartElement(null, "InstrDtls", xmlNamespace );
            InstructionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InvstmtAcctSelctn", xmlNamespace );
        InvestmentAccountSelection.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ModifiedInvestmentAccount is InvestmentAccount63 ModifiedInvestmentAccountValue)
        {
            writer.WriteStartElement(null, "ModfdInvstmtAcct", xmlNamespace );
            ModifiedInvestmentAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ModfdAcctPties", xmlNamespace );
        ModifiedAccountParties.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ModfdIntrmies", xmlNamespace );
        ModifiedIntermediaries.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ModifiedPlacement is ModificationScope33 ModifiedPlacementValue)
        {
            writer.WriteStartElement(null, "ModfdPlcmnt", xmlNamespace );
            ModifiedPlacementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ModifiedIssueAllocation is ModificationScope21 ModifiedIssueAllocationValue)
        {
            writer.WriteStartElement(null, "ModfdIsseAllcn", xmlNamespace );
            ModifiedIssueAllocationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ModfdSvgsInvstmtPlan", xmlNamespace );
        ModifiedSavingsInvestmentPlan.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ModfdWdrwlInvstmtPlan", xmlNamespace );
        ModifiedWithdrawalInvestmentPlan.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ModfdCshSttlm", xmlNamespace );
        ModifiedCashSettlement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ModfdSvcLvlAgrmt", xmlNamespace );
        ModifiedServiceLevelAgreement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ModifiedAdditionalInformation is ModificationScope35 ModifiedAdditionalInformationValue)
        {
            writer.WriteStartElement(null, "ModfdAddtlInf", xmlNamespace );
            ModifiedAdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MarketPracticeVersion is MarketPracticeVersion1 MarketPracticeVersionValue)
        {
            writer.WriteStartElement(null, "MktPrctcVrsn", xmlNamespace );
            MarketPracticeVersionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Extension is Extension1 ExtensionValue)
        {
            writer.WriteStartElement(null, "Xtnsn", xmlNamespace );
            ExtensionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AccountModificationInstructionV07 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="AccountModificationInstructionV07"/>.
/// </summary>
[Serializable]
public partial record AccountModificationInstructionV07Document : IOuterDocument<AccountModificationInstructionV07>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:acmt.003.001.07";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="AccountModificationInstructionV07"/> is required.
    /// </summary>
    [DataMember(Name=AccountModificationInstructionV07.XmlTag)]
    public required AccountModificationInstructionV07 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(AccountModificationInstructionV07.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
