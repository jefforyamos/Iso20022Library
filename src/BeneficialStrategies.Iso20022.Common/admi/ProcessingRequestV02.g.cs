//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ProcessingRequestV02.  ISO2002 ID# _1MsY4QR4Ee29PP19jELcvQ.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.admi.ProcessingRequestV02>;

namespace BeneficialStrategies.Iso20022.admi;


/// <summary>
/// This record is an implementation of the admi.017.001.02 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The Processing Request message is sent by a participant to a central system to request the initiation of a system process supported by a central system.
/// </summary>
[Serializable]
[Description(@"The Processing Request message is sent by a participant to a central system to request the initiation of a system process supported by a central system.")]
public partial record ProcessingRequestV02 : IOuterRecord<ProcessingRequestV02,ProcessingRequestV02Document>
    ,IIsoXmlSerilizable<ProcessingRequestV02>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "admi.017.001.02";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "PrcgReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ProcessingRequestV02Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Unique and unambiguous identifier for the message, as assigned by the sender.
    /// </summary>
    [IsoId("_1Ms_8QR4Ee29PP19jELcvQ")]
    [Description(@"Unique and unambiguous identifier for the message, as assigned by the sender.")]
    [DataMember(Name="MsgId")]
    [XmlElement(ElementName="MsgId")]
    [Required]
    public required IsoMax35Text MessageIdentification { get; init; }
    
    /// <summary>
    /// Indicates the requested CLS Settlement Session that the related trade is part of.
    /// </summary>
    [IsoId("_1Ms_8wR4Ee29PP19jELcvQ")]
    [Description(@"Indicates the requested CLS Settlement Session that the related trade is part of.")]
    [DataMember(Name="SttlmSsnIdr")]
    [XmlElement(ElementName="SttlmSsnIdr")]
    public IsoExact4AlphaNumericText? SettlementSessionIdentifier { get; init; }
    
    /// <summary>
    /// Contains the details of the processing request.
    /// </summary>
    [IsoId("_1Ms_9QR4Ee29PP19jELcvQ")]
    [Description(@"Contains the details of the processing request.")]
    [DataMember(Name="Req")]
    [XmlElement(ElementName="Req")]
    [Required]
    public required RequestDetails30 Request { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_36KEsQR4Ee29PP19jELcvQ")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ProcessingRequestV02Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ProcessingRequestV02Document ToDocument()
    {
        return new ProcessingRequestV02Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("PrcgReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MsgId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(MessageIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        if (SettlementSessionIdentifier is IsoExact4AlphaNumericText SettlementSessionIdentifierValue)
        {
            writer.WriteStartElement(null, "SttlmSsnIdr", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoExact4AlphaNumericText(SettlementSessionIdentifierValue)); // data type Exact4AlphaNumericText System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Req", xmlNamespace );
        Request.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ProcessingRequestV02 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ProcessingRequestV02"/>.
/// </summary>
[Serializable]
public partial record ProcessingRequestV02Document : IOuterDocument<ProcessingRequestV02>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:admi.017.001.02";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ProcessingRequestV02"/> is required.
    /// </summary>
    [DataMember(Name=ProcessingRequestV02.XmlTag)]
    public required ProcessingRequestV02 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ProcessingRequestV02.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
