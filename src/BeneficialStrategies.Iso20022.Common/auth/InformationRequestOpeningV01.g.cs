//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for InformationRequestOpeningV01.  ISO2002 ID# _ixVXwztbEeGg8InIPRjKog.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.auth.InformationRequestOpeningV01>;

namespace BeneficialStrategies.Iso20022.auth;


/// <summary>
/// This record is an implementation of the auth.001.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// This message is sent by the authorities (police, customs, tax authorities, enforcement authorities) to a financial institution to request account and other banking and financial information. Requested information can relate to accounts, their signatories and beneficiaries and co-owners as well as movements plus positions on these accounts.
/// 
/// Requests are underpinned by specific legal texts.
/// </summary>
[Serializable]
[Description(@"This message is sent by the authorities (police, customs, tax authorities, enforcement authorities) to a financial institution to request account and other banking and financial information. Requested information can relate to accounts, their signatories and beneficiaries and co-owners as well as movements plus positions on these accounts.||Requests are underpinned by specific legal texts.")]
public partial record InformationRequestOpeningV01 : IOuterRecord<InformationRequestOpeningV01,InformationRequestOpeningV01Document>
    ,IIsoXmlSerilizable<InformationRequestOpeningV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "auth.001.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "InfReqOpng";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => InformationRequestOpeningV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Unique identification for the specific investigation as known by the requesting party.
    /// </summary>
    [IsoId("_MvVY3zteEeGg8InIPRjKog")]
    [Description(@"Unique identification for the specific investigation as known by the requesting party.")]
    [DataMember(Name="InvstgtnId")]
    [XmlElement(ElementName="InvstgtnId")]
    [Required]
    public required IsoMax35Text InvestigationIdentification { get; init; }
    
    /// <summary>
    /// Provides details on the legal basis of the request.
    /// </summary>
    [IsoId("_Gh6K-0J9EeGuetKibuqsKw")]
    [Description(@"Provides details on the legal basis of the request.")]
    [DataMember(Name="LglMndtBsis")]
    [XmlElement(ElementName="LglMndtBsis")]
    [Required]
    public required LegalMandate1 LegalMandateBasis { get; init; }
    
    /// <summary>
    /// Specifies the confidentiality status of the investigation.
    /// </summary>
    [IsoId("_UdsRrz2NEeGG64_ngBNdUg")]
    [Description(@"Specifies the confidentiality status of the investigation.")]
    [DataMember(Name="CnfdtltySts")]
    [XmlElement(ElementName="CnfdtltySts")]
    [Required]
    public required IsoYesNoIndicator ConfidentialityStatus { get; init; }
    
    /// <summary>
    /// Specifies the date by when the financial institutiion needs to provide a response.
    /// </summary>
    [IsoId("_6Pv_70cVEeGlWcsEChp7QA")]
    [Description(@"Specifies the date by when the financial institutiion needs to provide a response.")]
    [DataMember(Name="DueDt")]
    [XmlElement(ElementName="DueDt")]
    public DueDate1? DueDate { get; init; }
    
    /// <summary>
    /// Specifies the dates between which period the authority requests that the financial institution provides a response to the information request.
    /// </summary>
    [IsoId("_VWAzXzwlEeGUCuI3g5RrVg")]
    [Description(@"Specifies the dates between which period the authority requests that the financial institution provides a response to the information request.")]
    [DataMember(Name="InvstgtnPrd")]
    [XmlElement(ElementName="InvstgtnPrd")]
    [Required]
    public required DateOrDateTimePeriodChoice_ InvestigationPeriod { get; init; }
    
    /// <summary>
    /// Specifies the the search criteria for the financial institution to perform the search on. The search criteria can be an account, a customer identification or a payment instrument type.
    /// </summary>
    [IsoId("_qpVADzthEeGg8InIPRjKog")]
    [Description(@"Specifies the the search criteria for the financial institution to perform the search on. The search criteria can be an account, a customer identification or a payment instrument type.")]
    [DataMember(Name="SchCrit")]
    [XmlElement(ElementName="SchCrit")]
    [Required]
    public required SearchCriteria1Choice_ SearchCriteria { get; init; }
    
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_O_AtrzwoEeGUCuI3g5RrVg")]
    [Description(@"Additional information that can not be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="InformationRequestOpeningV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public InformationRequestOpeningV01Document ToDocument()
    {
        return new InformationRequestOpeningV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("InfReqOpng");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "InvstgtnId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(InvestigationIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "LglMndtBsis", xmlNamespace );
        LegalMandateBasis.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CnfdtltySts", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(ConfidentialityStatus)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (DueDate is DueDate1 DueDateValue)
        {
            writer.WriteStartElement(null, "DueDt", xmlNamespace );
            DueDateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "InvstgtnPrd", xmlNamespace );
        InvestigationPeriod.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SchCrit", xmlNamespace );
        SearchCriteria.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static InformationRequestOpeningV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="InformationRequestOpeningV01"/>.
/// </summary>
[Serializable]
public partial record InformationRequestOpeningV01Document : IOuterDocument<InformationRequestOpeningV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:auth.001.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="InformationRequestOpeningV01"/> is required.
    /// </summary>
    [DataMember(Name=InformationRequestOpeningV01.XmlTag)]
    public required InformationRequestOpeningV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(InformationRequestOpeningV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
