//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for RegulatoryTransactionReportCancellationStatusV01.  ISO2002 ID# _gJrQAcIFEeGllrOKQRUTYA_-231568037.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.auth.RegulatoryTransactionReportCancellationStatusV01>;

namespace BeneficialStrategies.Iso20022.auth;


/// <summary>
/// This record is an implementation of the auth.011.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// A regulator or an intermediary sends the RegulatoryTransactionReportCancellationStatus to a reporting institution to provide the status of a RegulatoryTransactionReportCancellationRequest previously sent by the reporting institution.
/// Usage
/// The message definition may be used to provide a status for the entire report or to provide a status at the level of individual transactions within the report. One of the following statuses can be reported:
/// - Completed, or,
/// - Pending, or,
/// - Rejected.
/// If the status is rejected, then reason for the rejection must be specified.
/// </summary>
[Serializable]
[Description(@"Scope|A regulator or an intermediary sends the RegulatoryTransactionReportCancellationStatus to a reporting institution to provide the status of a RegulatoryTransactionReportCancellationRequest previously sent by the reporting institution.|Usage|The message definition may be used to provide a status for the entire report or to provide a status at the level of individual transactions within the report. One of the following statuses can be reported:|- Completed, or,|- Pending, or,|- Rejected.|If the status is rejected, then reason for the rejection must be specified.")]
public partial record RegulatoryTransactionReportCancellationStatusV01 : IOuterRecord<RegulatoryTransactionReportCancellationStatusV01,RegulatoryTransactionReportCancellationStatusV01Document>
    ,IIsoXmlSerilizable<RegulatoryTransactionReportCancellationStatusV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "auth.011.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "RgltryTxRptCxlStsV01";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => RegulatoryTransactionReportCancellationStatusV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identification of the RegulatoryTransactionReportCancellationStatus document.
    /// </summary>
    [IsoId("_gJrQAsIFEeGllrOKQRUTYA_1165719728")]
    [Description(@"Identification of the RegulatoryTransactionReportCancellationStatus document.")]
    [DataMember(Name="Id")]
    [XmlElement(ElementName="Id")]
    [Required]
    public required DocumentIdentification8 Identification { get; init; }
    
    /// <summary>
    /// Identification of the firm that executed the transaction.
    /// </summary>
    [IsoId("_gJrQA8IFEeGllrOKQRUTYA_1815879851")]
    [Description(@"Identification of the firm that executed the transaction.")]
    [DataMember(Name="RptgInstn")]
    [XmlElement(ElementName="RptgInstn")]
    [Required]
    public required PartyIdentification23Choice_ ReportingInstitution { get; init; }
    
    /// <summary>
    /// Provides the status of the entire RegulatoryTransactionReportCancellationRequest document that was previously sent by a reporting institution.||.
    /// </summary>
    [IsoId("_gJrQBMIFEeGllrOKQRUTYA_-1473248173")]
    [Description(@"Provides the status of the entire RegulatoryTransactionReportCancellationRequest document that was previously sent by a reporting institution.||.")]
    [DataMember(Name="RptCxlSts")]
    [XmlElement(ElementName="RptCxlSts")]
    [Required]
    public required ReportStatusAndReason2 ReportCancellationStatus { get; init; }
    
    /// <summary>
    /// Provides the cancellation status of one or more transactions within a RegulatoryTransactionReportCancellationRequest that was previously sent by a reporting institution.
    /// </summary>
    [IsoId("_gJrQBcIFEeGllrOKQRUTYA_-1483406141")]
    [Description(@"Provides the cancellation status of one or more transactions within a RegulatoryTransactionReportCancellationRequest that was previously sent by a reporting institution.")]
    [DataMember(Name="IndvTxCxlSts")]
    [XmlElement(ElementName="IndvTxCxlSts")]
    [Required]
    public required TradeTransactionStatusAndReason2 IndividualTransactionCancellationStatus { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="RegulatoryTransactionReportCancellationStatusV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public RegulatoryTransactionReportCancellationStatusV01Document ToDocument()
    {
        return new RegulatoryTransactionReportCancellationStatusV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("RgltryTxRptCxlStsV01");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptgInstn", xmlNamespace );
        ReportingInstitution.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptCxlSts", xmlNamespace );
        ReportCancellationStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "IndvTxCxlSts", xmlNamespace );
        IndividualTransactionCancellationStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
    }
    public static RegulatoryTransactionReportCancellationStatusV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="RegulatoryTransactionReportCancellationStatusV01"/>.
/// </summary>
[Serializable]
public partial record RegulatoryTransactionReportCancellationStatusV01Document : IOuterDocument<RegulatoryTransactionReportCancellationStatusV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:auth.011.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="RegulatoryTransactionReportCancellationStatusV01"/> is required.
    /// </summary>
    [DataMember(Name=RegulatoryTransactionReportCancellationStatusV01.XmlTag)]
    public required RegulatoryTransactionReportCancellationStatusV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(RegulatoryTransactionReportCancellationStatusV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
