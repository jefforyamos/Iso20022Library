//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for TripartyCollateralStatusAdviceV01.  ISO2002 ID# _2uaM6ys7EeySlt9bF77XfA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.colr.TripartyCollateralStatusAdviceV01>;

namespace BeneficialStrategies.Iso20022.colr;


/// <summary>
/// This record is an implementation of the colr.023.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope:
/// This message is sent by a triparty agent after the receipt of a collateral instruction from its client.
/// 
/// In this message, the Sender is the triparty agent and the Receiver is either the collateral taker or the collateral giver or their account servicer.
/// 
/// Usage:
/// This message provides valuation results as well as the status of the  proposed collateral movements (cash and securities).
/// </summary>
[Serializable]
[Description(@"Scope:|This message is sent by a triparty agent after the receipt of a collateral instruction from its client.||In this message, the Sender is the triparty agent and the Receiver is either the collateral taker or the collateral giver or their account servicer.||Usage:|This message provides valuation results as well as the status of the  proposed collateral movements (cash and securities).")]
public partial record TripartyCollateralStatusAdviceV01 : IOuterRecord<TripartyCollateralStatusAdviceV01,TripartyCollateralStatusAdviceV01Document>
    ,IIsoXmlSerilizable<TripartyCollateralStatusAdviceV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "colr.023.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "TrptyCollStsAdvc";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => TripartyCollateralStatusAdviceV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Provides unambiguous transaction identification information.
    /// </summary>
    [IsoId("_2uaM8ys7EeySlt9bF77XfA")]
    [Description(@"Provides unambiguous transaction identification information.|")]
    [DataMember(Name="TxInstrId")]
    [XmlElement(ElementName="TxInstrId")]
    [Required]
    public required TransactionIdentifications46 TransactionInstructionIdentification { get; init; }
    
    /// <summary>
    /// Page number of the message and continuation indicator to indicate that the multi-part preliminary advice is to continue or that the message is the last page of the multi-part preliminary advice.
    /// </summary>
    [IsoId("_2uaM9Ss7EeySlt9bF77XfA")]
    [Description(@"Page number of the message and continuation indicator to indicate that the multi-part preliminary advice is to continue or that the message is the last page of the multi-part preliminary advice.")]
    [DataMember(Name="Pgntn")]
    [XmlElement(ElementName="Pgntn")]
    [Required]
    public required Pagination1 Pagination { get; init; }
    
    /// <summary>
    /// Provides the status of allocation of collateral to cover the instruction.
    /// </summary>
    [IsoId("_2uaM9ys7EeySlt9bF77XfA")]
    [Description(@"Provides the status of allocation of collateral to cover the instruction.|")]
    [DataMember(Name="AllcnSts")]
    [XmlElement(ElementName="AllcnSts")]
    public AllocationStatus1Choice_? AllocationStatus { get; init; }
    
    /// <summary>
    /// Provides the status of settlement of the transaction or the instruction.
    /// </summary>
    [IsoId("_2uaM-Ss7EeySlt9bF77XfA")]
    [Description(@"Provides the status of settlement of the transaction or the instruction.")]
    [DataMember(Name="SttlmSts")]
    [XmlElement(ElementName="SttlmSts")]
    public SettlementStatus27Choice_? SettlementStatus { get; init; }
    
    /// <summary>
    /// Provides the collateral status of an instruction.
    /// </summary>
    [IsoId("_2uaM-ys7EeySlt9bF77XfA")]
    [Description(@"Provides the collateral status of an instruction.|")]
    [DataMember(Name="CollSts")]
    [XmlElement(ElementName="CollSts")]
    public CollateralStatus3Choice_? CollateralStatus { get; init; }
    
    /// <summary>
    /// provides general information about the instruction and collateral transaction the message refers to.
    /// </summary>
    [IsoId("_2uaM_Ss7EeySlt9bF77XfA")]
    [Description(@"provides general information about the instruction and collateral transaction the message refers to.|")]
    [DataMember(Name="GnlParams")]
    [XmlElement(ElementName="GnlParams")]
    [Required]
    public required CollateralParameters13 GeneralParameters { get; init; }
    
    /// <summary>
    /// Identifies the chain of collateral parties.
    /// </summary>
    [IsoId("_2uaM_ys7EeySlt9bF77XfA")]
    [Description(@"Identifies the chain of collateral parties.|")]
    [DataMember(Name="CollPties")]
    [XmlElement(ElementName="CollPties")]
    [Required]
    public required CollateralParties8 CollateralParties { get; init; }
    
    /// <summary>
    /// Specifies the information related to the deal.
    /// </summary>
    [IsoId("_2uaNASs7EeySlt9bF77XfA")]
    [Description(@"Specifies the information related to the deal.")]
    [DataMember(Name="DealTxDtls")]
    [XmlElement(ElementName="DealTxDtls")]
    [Required]
    public required DealTransactionDetails7 DealTransactionDetails { get; init; }
    
    /// <summary>
    /// Identifies the dates related to the triparty collateral instruction or transactions.
    /// </summary>
    [IsoId("_2uaNAys7EeySlt9bF77XfA")]
    [Description(@"Identifies the dates related to the triparty collateral instruction or transactions.|")]
    [DataMember(Name="DealTxDt")]
    [XmlElement(ElementName="DealTxDt")]
    [Required]
    public required CollateralDate2 DealTransactionDate { get; init; }
    
    /// <summary>
    /// Securities movements.
    /// </summary>
    [IsoId("_2uaNBSs7EeySlt9bF77XfA")]
    [Description(@"Securities movements.")]
    [DataMember(Name="SctiesMvmnt")]
    [XmlElement(ElementName="SctiesMvmnt")]
    public SecuritiesMovement8? SecuritiesMovement { get; init; }
    
    /// <summary>
    ///  Cash movement.
    /// </summary>
    [IsoId("_2uaNBys7EeySlt9bF77XfA")]
    [Description(@" Cash movement.")]
    [DataMember(Name="CshMvmnt")]
    [XmlElement(ElementName="CshMvmnt")]
    public CashMovement7? CashMovement { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_2uaNCSs7EeySlt9bF77XfA")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="TripartyCollateralStatusAdviceV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public TripartyCollateralStatusAdviceV01Document ToDocument()
    {
        return new TripartyCollateralStatusAdviceV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("TrptyCollStsAdvc");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxInstrId", xmlNamespace );
        TransactionInstructionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Pgntn", xmlNamespace );
        Pagination.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AllocationStatus is AllocationStatus1Choice_ AllocationStatusValue)
        {
            writer.WriteStartElement(null, "AllcnSts", xmlNamespace );
            AllocationStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SettlementStatus is SettlementStatus27Choice_ SettlementStatusValue)
        {
            writer.WriteStartElement(null, "SttlmSts", xmlNamespace );
            SettlementStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CollateralStatus is CollateralStatus3Choice_ CollateralStatusValue)
        {
            writer.WriteStartElement(null, "CollSts", xmlNamespace );
            CollateralStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "GnlParams", xmlNamespace );
        GeneralParameters.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CollPties", xmlNamespace );
        CollateralParties.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DealTxDtls", xmlNamespace );
        DealTransactionDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DealTxDt", xmlNamespace );
        DealTransactionDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SecuritiesMovement is SecuritiesMovement8 SecuritiesMovementValue)
        {
            writer.WriteStartElement(null, "SctiesMvmnt", xmlNamespace );
            SecuritiesMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashMovement is CashMovement7 CashMovementValue)
        {
            writer.WriteStartElement(null, "CshMvmnt", xmlNamespace );
            CashMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TripartyCollateralStatusAdviceV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="TripartyCollateralStatusAdviceV01"/>.
/// </summary>
[Serializable]
public partial record TripartyCollateralStatusAdviceV01Document : IOuterDocument<TripartyCollateralStatusAdviceV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:colr.023.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="TripartyCollateralStatusAdviceV01"/> is required.
    /// </summary>
    [DataMember(Name=TripartyCollateralStatusAdviceV01.XmlTag)]
    public required TripartyCollateralStatusAdviceV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(TripartyCollateralStatusAdviceV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
