//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for TripartyCollateralTransactionInstructionV01.  ISO2002 ID# _2uaNLSs7EeySlt9bF77XfA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.colr.TripartyCollateralTransactionInstructionV01>;

namespace BeneficialStrategies.Iso20022.colr;


/// <summary>
/// This record is an implementation of the colr.019.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope:
/// This message is sent by a trading party to its triparty agent to instruct the agent to perform a specific action on a collateral management transaction.
/// It is also sent by an account owner to an account servicer where the account servicer manages the account at the triparty agent on behalf of the trading party. The account owner may be a global custodian which manages an account with a triparty agent on behalf of their client or an investment management institution or a broker/dealer which has an account with their custodian.
/// 
/// Usage:
/// The triparty collateral management service is used by two trading parties at the agreement of a business transaction (for example, a repo, a securities loan, ... ) when they want to secure the transaction with collateral. The management of this collateral (that is, agreeing on quantity and type, marking to market, ... ) is done by a third party, the triparty collateral manager.
/// 
/// Before starting to use these services, the three parties will first sign a contract in which they stipulate the rules of the agreement.
/// </summary>
[Serializable]
[Description(@"Scope:|This message is sent by a trading party to its triparty agent to instruct the agent to perform a specific action on a collateral management transaction.|It is also sent by an account owner to an account servicer where the account servicer manages the account at the triparty agent on behalf of the trading party. The account owner may be a global custodian which manages an account with a triparty agent on behalf of their client or an investment management institution or a broker/dealer which has an account with their custodian.||Usage:|The triparty collateral management service is used by two trading parties at the agreement of a business transaction (for example, a repo, a securities loan, ... ) when they want to secure the transaction with collateral. The management of this collateral (that is, agreeing on quantity and type, marking to market, ... ) is done by a third party, the triparty collateral manager.||Before starting to use these services, the three parties will first sign a contract in which they stipulate the rules of the agreement.")]
public partial record TripartyCollateralTransactionInstructionV01 : IOuterRecord<TripartyCollateralTransactionInstructionV01,TripartyCollateralTransactionInstructionV01Document>
    ,IIsoXmlSerilizable<TripartyCollateralTransactionInstructionV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "colr.019.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "TrptyCollTxInstr";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => TripartyCollateralTransactionInstructionV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Unambiguous identification of the instruction or the transaction as known by the instructing  or the receiving party.
    /// </summary>
    [IsoId("_2uaNMSs7EeySlt9bF77XfA")]
    [Description(@"Unambiguous identification of the instruction or the transaction as known by the instructing  or the receiving party.|")]
    [DataMember(Name="TxInstrId")]
    [XmlElement(ElementName="TxInstrId")]
    [Required]
    public required TransactionIdentifications45 TransactionInstructionIdentification { get; init; }
    
    /// <summary>
    /// Link to another transaction (or instruction) that must be processed after, before or at the same time.
    /// </summary>
    [IsoId("_2uaNMys7EeySlt9bF77XfA")]
    [Description(@"Link to another transaction (or instruction) that must be processed after, before or at the same time.|")]
    [DataMember(Name="Lnkgs")]
    [XmlElement(ElementName="Lnkgs")]
    public Linkages58? Linkages { get; init; }
    
    /// <summary>
    /// Page number of the message and continuation indicator to indicate that the multi-part preliminary advice is to continue or that the message is the last page of the multi-part preliminary advice.
    /// </summary>
    [IsoId("_2uaNNSs7EeySlt9bF77XfA")]
    [Description(@"Page number of the message and continuation indicator to indicate that the multi-part preliminary advice is to continue or that the message is the last page of the multi-part preliminary advice.")]
    [DataMember(Name="Pgntn")]
    [XmlElement(ElementName="Pgntn")]
    [Required]
    public required Pagination1 Pagination { get; init; }
    
    /// <summary>
    /// Specifies the different parameters of the collateral transaction or instruction.
    /// </summary>
    [IsoId("_2uaNNys7EeySlt9bF77XfA")]
    [Description(@"Specifies the different parameters of the collateral transaction or instruction.")]
    [DataMember(Name="GnlParams")]
    [XmlElement(ElementName="GnlParams")]
    [Required]
    public required CollateralParameters10 GeneralParameters { get; init; }
    
    /// <summary>
    /// Identifies the chain of collateral parties.
    /// </summary>
    [IsoId("_2uaNOSs7EeySlt9bF77XfA")]
    [Description(@"Identifies the chain of collateral parties.|")]
    [DataMember(Name="CollPties")]
    [XmlElement(ElementName="CollPties")]
    [Required]
    public required CollateralParties10 CollateralParties { get; init; }
    
    /// <summary>
    /// Specifies the information related to the deal.
    /// </summary>
    [IsoId("_2uaNOys7EeySlt9bF77XfA")]
    [Description(@"Specifies the information related to the deal.|")]
    [DataMember(Name="DealTxDtls")]
    [XmlElement(ElementName="DealTxDtls")]
    [Required]
    public required DealTransactionDetails5 DealTransactionDetails { get; init; }
    
    /// <summary>
    /// Identifies the dates related to the triparty collateral instruction or transactions.
    /// </summary>
    [IsoId("_2uaNPSs7EeySlt9bF77XfA")]
    [Description(@"Identifies the dates related to the triparty collateral instruction or transactions.")]
    [DataMember(Name="DealTxDt")]
    [XmlElement(ElementName="DealTxDt")]
    [Required]
    public required CollateralDate2 DealTransactionDate { get; init; }
    
    /// <summary>
    /// Securities movements.
    /// </summary>
    [IsoId("_2uaNPys7EeySlt9bF77XfA")]
    [Description(@"Securities movements.")]
    [DataMember(Name="SctiesMvmnt")]
    [XmlElement(ElementName="SctiesMvmnt")]
    public SecuritiesMovement9? SecuritiesMovement { get; init; }
    
    /// <summary>
    /// Cash movements.
    /// </summary>
    [IsoId("_2uaNQSs7EeySlt9bF77XfA")]
    [Description(@"Cash movements.")]
    [DataMember(Name="CshMvmnt")]
    [XmlElement(ElementName="CshMvmnt")]
    public CashMovement8? CashMovement { get; init; }
    
    /// <summary>
    /// Other business parties relevant to the transaction.
    /// </summary>
    [IsoId("_2uaNQys7EeySlt9bF77XfA")]
    [Description(@"Other business parties relevant to the transaction.|")]
    [DataMember(Name="OthrPties")]
    [XmlElement(ElementName="OthrPties")]
    public OtherParties38? OtherParties { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_2uaNRSs7EeySlt9bF77XfA")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="TripartyCollateralTransactionInstructionV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public TripartyCollateralTransactionInstructionV01Document ToDocument()
    {
        return new TripartyCollateralTransactionInstructionV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("TrptyCollTxInstr");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TxInstrId", xmlNamespace );
        TransactionInstructionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Linkages is Linkages58 LinkagesValue)
        {
            writer.WriteStartElement(null, "Lnkgs", xmlNamespace );
            LinkagesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Pgntn", xmlNamespace );
        Pagination.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "GnlParams", xmlNamespace );
        GeneralParameters.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CollPties", xmlNamespace );
        CollateralParties.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DealTxDtls", xmlNamespace );
        DealTransactionDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "DealTxDt", xmlNamespace );
        DealTransactionDate.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SecuritiesMovement is SecuritiesMovement9 SecuritiesMovementValue)
        {
            writer.WriteStartElement(null, "SctiesMvmnt", xmlNamespace );
            SecuritiesMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashMovement is CashMovement8 CashMovementValue)
        {
            writer.WriteStartElement(null, "CshMvmnt", xmlNamespace );
            CashMovementValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherParties is OtherParties38 OtherPartiesValue)
        {
            writer.WriteStartElement(null, "OthrPties", xmlNamespace );
            OtherPartiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TripartyCollateralTransactionInstructionV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="TripartyCollateralTransactionInstructionV01"/>.
/// </summary>
[Serializable]
public partial record TripartyCollateralTransactionInstructionV01Document : IOuterDocument<TripartyCollateralTransactionInstructionV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:colr.019.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="TripartyCollateralTransactionInstructionV01"/> is required.
    /// </summary>
    [DataMember(Name=TripartyCollateralTransactionInstructionV01.XmlTag)]
    public required TripartyCollateralTransactionInstructionV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(TripartyCollateralTransactionInstructionV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
