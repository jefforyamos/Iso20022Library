//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForeignExchangeTradeCaptureReportRequestV01.  ISO2002 ID# _KgkR8oHHEeSY3ulMDfpmvA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.fxtr.ForeignExchangeTradeCaptureReportRequestV01>;

namespace BeneficialStrategies.Iso20022.fxtr;


/// <summary>
/// This record is an implementation of the fxtr.032.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForeignExchangeTradeCaptureReportRequest message is sent by a trading member to the trading system for inquiry of trade capture report. 
/// Usage
/// The request is sent by the trading member to the trading system to inquire trade capture report. 
/// Note a capture request could be rejected.
/// </summary>
[Serializable]
[Description(@"Scope|The ForeignExchangeTradeCaptureReportRequest message is sent by a trading member to the trading system for inquiry of trade capture report. |Usage|The request is sent by the trading member to the trading system to inquire trade capture report. |Note a capture request could be rejected.")]
public partial record ForeignExchangeTradeCaptureReportRequestV01 : IOuterRecord<ForeignExchangeTradeCaptureReportRequestV01,ForeignExchangeTradeCaptureReportRequestV01Document>
    ,IIsoXmlSerilizable<ForeignExchangeTradeCaptureReportRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "fxtr.032.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FXTradCaptrRptReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForeignExchangeTradeCaptureReportRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the capture request message.
    /// </summary>
    [IsoId("_VzU_oIHHEeSY3ulMDfpmvA")]
    [Description(@"Identifies the capture request message.")]
    [DataMember(Name="QryReqId")]
    [XmlElement(ElementName="QryReqId")]
    [Required]
    public required MessageIdentification1 QueryRequestIdentification { get; init; }
    
    /// <summary>
    /// Range of the trade for the inquire.
    /// </summary>
    [IsoId("_bTutIIHHEeSY3ulMDfpmvA")]
    [Description(@"Range of the trade for the inquire.")]
    [DataMember(Name="QryOrdrSts")]
    [XmlElement(ElementName="QryOrdrSts")]
    [Required]
    public required QueryOrderStatus1Code QueryOrderStatus { get; init; }
    
    /// <summary>
    /// Specifies the inquiry type of the data.
    /// </summary>
    [IsoId("_JCuBAKbAEeSxuMLA5o46jQ")]
    [Description(@"Specifies the inquiry type of the data.")]
    [DataMember(Name="QryTp")]
    [XmlElement(ElementName="QryTp")]
    public QueryDataType1Code? QueryType { get; init; }
    
    /// <summary>
    /// Start number in request result.
    /// </summary>
    [IsoId("_e_2ZkIHHEeSY3ulMDfpmvA")]
    [Description(@"Start number in request result.")]
    [DataMember(Name="QryStartNb")]
    [XmlElement(ElementName="QryStartNb")]
    [Required]
    public required IsoMax35NumericText QueryStartNumber { get; init; }
    
    /// <summary>
    /// Indicates whether the request is query trade for a period of time.
    /// </summary>
    [IsoId("_iSHbkIHHEeSY3ulMDfpmvA")]
    [Description(@"Indicates whether the request is query trade for a period of time.")]
    [DataMember(Name="QryByPrd")]
    [XmlElement(ElementName="QryByPrd")]
    [Required]
    public required IsoYesNoIndicator QueryByPeriod { get; init; }
    
    /// <summary>
    /// Period of the inquiry.
    /// </summary>
    [IsoId("_uLTQEIHHEeSY3ulMDfpmvA")]
    [Description(@"Period of the inquiry.")]
    [DataMember(Name="QryPrd")]
    [XmlElement(ElementName="QryPrd")]
    public Period4? QueryPeriod { get; init; }
    
    /// <summary>
    /// States the identification of the trade which the trading member inquires.
    /// </summary>
    [IsoId("_r0UKkIHHEeSY3ulMDfpmvA")]
    [Description(@"States the identification of the trade which the trading member inquires.")]
    [DataMember(Name="QryTradId")]
    [XmlElement(ElementName="QryTradId")]
    public IsoMax35Text? QueryTradeIdentification { get; init; }
    
    /// <summary>
    /// Identifies the end of the request result.
    /// </summary>
    [IsoId("_BOrPMKa7EeSxuMLA5o46jQ")]
    [Description(@"Identifies the end of the request result.")]
    [DataMember(Name="QryEndId")]
    [XmlElement(ElementName="QryEndId")]
    public IsoMax35Text? QueryEndIdentification { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_a2e2MKHhEeS69KkQis5bYg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    /// <summary>
    /// Largest number of request result.
    /// </summary>
    [IsoId("_eP9iMKa9EeSxuMLA5o46jQ")]
    [Description(@"Largest number of request result.")]
    [DataMember(Name="QryPgSz")]
    [XmlElement(ElementName="QryPgSz")]
    public IsoMax35NumericText? QueryPageSize { get; init; }
    
    /// <summary>
    /// Specifies the inquiry value of the parameter.
    /// </summary>
    [IsoId("_Ex-IEKbBEeSxuMLA5o46jQ")]
    [Description(@"Specifies the inquiry value of the parameter.")]
    [DataMember(Name="QryParamVal")]
    [XmlElement(ElementName="QryParamVal")]
    public IsoMax35Text? QueryParameterValue { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForeignExchangeTradeCaptureReportRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForeignExchangeTradeCaptureReportRequestV01Document ToDocument()
    {
        return new ForeignExchangeTradeCaptureReportRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FXTradCaptrRptReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "QryReqId", xmlNamespace );
        QueryRequestIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QryOrdrSts", xmlNamespace );
        writer.WriteValue(QueryOrderStatus.ToString()); // Enum value
        writer.WriteEndElement();
        if (QueryType is QueryDataType1Code QueryTypeValue)
        {
            writer.WriteStartElement(null, "QryTp", xmlNamespace );
            writer.WriteValue(QueryTypeValue.ToString()); // Enum value
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "QryStartNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35NumericText(QueryStartNumber)); // data type Max35NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QryByPrd", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(QueryByPeriod)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (QueryPeriod is Period4 QueryPeriodValue)
        {
            writer.WriteStartElement(null, "QryPrd", xmlNamespace );
            QueryPeriodValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (QueryTradeIdentification is IsoMax35Text QueryTradeIdentificationValue)
        {
            writer.WriteStartElement(null, "QryTradId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(QueryTradeIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (QueryEndIdentification is IsoMax35Text QueryEndIdentificationValue)
        {
            writer.WriteStartElement(null, "QryEndId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(QueryEndIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (QueryPageSize is IsoMax35NumericText QueryPageSizeValue)
        {
            writer.WriteStartElement(null, "QryPgSz", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35NumericText(QueryPageSizeValue)); // data type Max35NumericText System.String
            writer.WriteEndElement();
        }
        if (QueryParameterValue is IsoMax35Text QueryParameterValueValue)
        {
            writer.WriteStartElement(null, "QryParamVal", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(QueryParameterValueValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
    }
    public static ForeignExchangeTradeCaptureReportRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForeignExchangeTradeCaptureReportRequestV01"/>.
/// </summary>
[Serializable]
public partial record ForeignExchangeTradeCaptureReportRequestV01Document : IOuterDocument<ForeignExchangeTradeCaptureReportRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:fxtr.032.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForeignExchangeTradeCaptureReportRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=ForeignExchangeTradeCaptureReportRequestV01.XmlTag)]
    public required ForeignExchangeTradeCaptureReportRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForeignExchangeTradeCaptureReportRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
