//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForeignExchangeTradeCaptureReportV01.  ISO2002 ID# _OqvAMkRZEeSWxNI5mwqKGQ.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.fxtr.ForeignExchangeTradeCaptureReportV01>;

namespace BeneficialStrategies.Iso20022.fxtr;


/// <summary>
/// This record is an implementation of the fxtr.031.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForeignExchangeTradeCaptureReport message is sent by a trading system to a participant for notification and providing details of a treasury trade.
/// Usage
/// The report is sent by the trading system to the two trading parties after their trade has been executed. 
/// The report can also be sent by the trading system to a trading parties to respond their inquiry (TradeCaptureRequest). 
/// Note that multiple reports can be sent to respond one inquiry message.
/// The message may contains trade details and trading parties' information.
/// </summary>
[Serializable]
[Description(@"Scope|The ForeignExchangeTradeCaptureReport message is sent by a trading system to a participant for notification and providing details of a treasury trade.|Usage|The report is sent by the trading system to the two trading parties after their trade has been executed. |The report can also be sent by the trading system to a trading parties to respond their inquiry (TradeCaptureRequest). |Note that multiple reports can be sent to respond one inquiry message.|The message may contains trade details and trading parties' information.")]
public partial record ForeignExchangeTradeCaptureReportV01 : IOuterRecord<ForeignExchangeTradeCaptureReportV01,ForeignExchangeTradeCaptureReportV01Document>
    ,IIsoXmlSerilizable<ForeignExchangeTradeCaptureReportV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "fxtr.031.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FXTradCaptrRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForeignExchangeTradeCaptureReportV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Capture report message management information.
    /// </summary>
    [IsoId("_ZlYv4ERZEeSWxNI5mwqKGQ")]
    [Description(@"Capture report message management information.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required Header23 Header { get; init; }
    
    /// <summary>
    /// Identifies the capture report message.
    /// </summary>
    [IsoId("_gWVfQERZEeSWxNI5mwqKGQ")]
    [Description(@"Identifies the capture report message.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    public MessageIdentification1? ReportIdentification { get; init; }
    
    /// <summary>
    /// Specifies the trading side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_kvGPQERZEeSWxNI5mwqKGQ")]
    [Description(@"Specifies the trading side of the treasury trade which is captured.")]
    [DataMember(Name="TradgSdId")]
    [XmlElement(ElementName="TradgSdId")]
    public TradePartyIdentification7? TradingSideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the counterparty side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_t_XgwERZEeSWxNI5mwqKGQ")]
    [Description(@"Specifies the counterparty side of the treasury trade which is captured.")]
    [DataMember(Name="CtrPtySdId")]
    [XmlElement(ElementName="CtrPtySdId")]
    public TradePartyIdentification7? CounterpartySideIdentification { get; init; }
    
    /// <summary>
    /// Details of the treasury trade captured.
    /// </summary>
    [IsoId("_qakFwEU0EeS7YamWDFxbDA")]
    [Description(@"Details of the treasury trade captured.")]
    [DataMember(Name="TradDtl")]
    [XmlElement(ElementName="TradDtl")]
    public Trade1? TradeDetail { get; init; }
    
    /// <summary>
    /// Reference of the report.
    /// </summary>
    [IsoId("_yvuZ4EU0EeS7YamWDFxbDA")]
    [Description(@"Reference of the report.")]
    [DataMember(Name="Ref")]
    [XmlElement(ElementName="Ref")]
    public AdditionalReferences? Reference { get; init; }
    
    /// <summary>
    /// Indicates if this report is for responding to a capture request.
    /// </summary>
    [IsoId("__yMKoEU0EeS7YamWDFxbDA")]
    [Description(@"Indicates if this report is for responding to a capture request.")]
    [DataMember(Name="ReqRspndr")]
    [XmlElement(ElementName="ReqRspndr")]
    [Required]
    public required IsoYesNoIndicator RequestResponder { get; init; }
    
    /// <summary>
    /// Indicates if this report is a rejection report for responding to a capture request.
    /// </summary>
    [IsoId("_E2SWoEU1EeS7YamWDFxbDA")]
    [Description(@"Indicates if this report is a rejection report for responding to a capture request.")]
    [DataMember(Name="ReqRjctd")]
    [XmlElement(ElementName="ReqRjctd")]
    public IsoYesNoIndicator? RequestRejected { get; init; }
    
    /// <summary>
    /// Reason of rejection.
    /// </summary>
    [IsoId("_HyozAEU1EeS7YamWDFxbDA")]
    [Description(@"Reason of rejection.")]
    [DataMember(Name="QryRjctRsn")]
    [XmlElement(ElementName="QryRjctRsn")]
    public IsoMax35Text? QueryRejectReason { get; init; }
    
    /// <summary>
    /// Indicates the total number of trades.
    /// </summary>
    [IsoId("_4M2w8EU0EeS7YamWDFxbDA")]
    [Description(@"Indicates the total number of trades.")]
    [DataMember(Name="TtlNbTrds")]
    [XmlElement(ElementName="TtlNbTrds")]
    public IsoNumber? TotalNumberTrades { get; init; }
    
    /// <summary>
    /// Indicates if this report is the last report sent for responding to one capture request.
    /// </summary>
    [IsoId("_71d2YEU0EeS7YamWDFxbDA")]
    [Description(@"Indicates if this report is the last report sent for responding to one capture request.")]
    [DataMember(Name="LastRptReqd")]
    [XmlElement(ElementName="LastRptReqd")]
    public IsoYesNoIndicator? LastReportRequested { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_IoQyQKHhEeS69KkQis5bYg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForeignExchangeTradeCaptureReportV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForeignExchangeTradeCaptureReportV01Document ToDocument()
    {
        return new ForeignExchangeTradeCaptureReportV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FXTradCaptrRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ReportIdentification is MessageIdentification1 ReportIdentificationValue)
        {
            writer.WriteStartElement(null, "RptId", xmlNamespace );
            ReportIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradingSideIdentification is TradePartyIdentification7 TradingSideIdentificationValue)
        {
            writer.WriteStartElement(null, "TradgSdId", xmlNamespace );
            TradingSideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartySideIdentification is TradePartyIdentification7 CounterpartySideIdentificationValue)
        {
            writer.WriteStartElement(null, "CtrPtySdId", xmlNamespace );
            CounterpartySideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TradeDetail is Trade1 TradeDetailValue)
        {
            writer.WriteStartElement(null, "TradDtl", xmlNamespace );
            TradeDetailValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Reference is AdditionalReferences ReferenceValue)
        {
            writer.WriteStartElement(null, "Ref", xmlNamespace );
            ReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ReqRspndr", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(RequestResponder)); // data type YesNoIndicator System.String
        writer.WriteEndElement();
        if (RequestRejected is IsoYesNoIndicator RequestRejectedValue)
        {
            writer.WriteStartElement(null, "ReqRjctd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(RequestRejectedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (QueryRejectReason is IsoMax35Text QueryRejectReasonValue)
        {
            writer.WriteStartElement(null, "QryRjctRsn", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(QueryRejectReasonValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        if (TotalNumberTrades is IsoNumber TotalNumberTradesValue)
        {
            writer.WriteStartElement(null, "TtlNbTrds", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoNumber(TotalNumberTradesValue)); // data type Number System.UInt64
            writer.WriteEndElement();
        }
        if (LastReportRequested is IsoYesNoIndicator LastReportRequestedValue)
        {
            writer.WriteStartElement(null, "LastRptReqd", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoYesNoIndicator(LastReportRequestedValue)); // data type YesNoIndicator System.String
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ForeignExchangeTradeCaptureReportV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForeignExchangeTradeCaptureReportV01"/>.
/// </summary>
[Serializable]
public partial record ForeignExchangeTradeCaptureReportV01Document : IOuterDocument<ForeignExchangeTradeCaptureReportV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:fxtr.031.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForeignExchangeTradeCaptureReportV01"/> is required.
    /// </summary>
    [DataMember(Name=ForeignExchangeTradeCaptureReportV01.XmlTag)]
    public required ForeignExchangeTradeCaptureReportV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForeignExchangeTradeCaptureReportV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
