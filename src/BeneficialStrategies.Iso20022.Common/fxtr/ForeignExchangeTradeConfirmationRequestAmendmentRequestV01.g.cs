//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForeignExchangeTradeConfirmationRequestAmendmentRequestV01.  ISO2002 ID# _orQF4IHdEeSY3ulMDfpmvA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.fxtr.ForeignExchangeTradeConfirmationRequestAmendmentRequestV01>;

namespace BeneficialStrategies.Iso20022.fxtr;


/// <summary>
/// This record is an implementation of the fxtr.035.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForeignExchangeTradeConfirmationRequestAmendmentRequest message is sent from a market participant to a Central matching utility (CMU) to amend the ForeignExchangeTradeConfirmationRequest previously sent.
/// 
/// Usage
/// The request is sent by the market participants to the CMU after the confirmation is requested.
/// </summary>
[Serializable]
[Description(@"Scope|The ForeignExchangeTradeConfirmationRequestAmendmentRequest message is sent from a market participant to a Central matching utility (CMU) to amend the ForeignExchangeTradeConfirmationRequest previously sent.||Usage|The request is sent by the market participants to the CMU after the confirmation is requested.")]
public partial record ForeignExchangeTradeConfirmationRequestAmendmentRequestV01 : IOuterRecord<ForeignExchangeTradeConfirmationRequestAmendmentRequestV01,ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document>
    ,IIsoXmlSerilizable<ForeignExchangeTradeConfirmationRequestAmendmentRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "fxtr.035.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FXTradConfReqAmdmntReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Message management information.
    /// </summary>
    [IsoId("_yesV4IHdEeSY3ulMDfpmvA")]
    [Description(@"Message management information.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required Header23 Header { get; init; }
    
    /// <summary>
    /// Identifies the amendment request messge.
    /// </summary>
    [IsoId("_ywTqUIHdEeSY3ulMDfpmvA")]
    [Description(@"Identifies the amendment request messge.")]
    [DataMember(Name="AmdmntReqId")]
    [XmlElement(ElementName="AmdmntReqId")]
    [Required]
    public required MessageIdentification1 AmendmentRequestIdentification { get; init; }
    
    /// <summary>
    /// Specifies the trading side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_zF5f0IHdEeSY3ulMDfpmvA")]
    [Description(@"Specifies the trading side of the treasury trade which is captured.")]
    [DataMember(Name="TradgSdId")]
    [XmlElement(ElementName="TradgSdId")]
    public TradePartyIdentification7? TradingSideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the counterparty side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_aVIqwIdVEeS8A78Q2OnhsA")]
    [Description(@"Specifies the counterparty side of the treasury trade which is captured.")]
    [DataMember(Name="CtrPtySdId")]
    [XmlElement(ElementName="CtrPtySdId")]
    public TradePartyIdentification7? CounterpartySideIdentification { get; init; }
    
    /// <summary>
    /// Details of the treasury trade confirmed.
    /// </summary>
    [IsoId("_zpFFYIHdEeSY3ulMDfpmvA")]
    [Description(@"Details of the treasury trade confirmed.")]
    [DataMember(Name="TradDtl")]
    [XmlElement(ElementName="TradDtl")]
    [Required]
    public required Trade2 TradeDetail { get; init; }
    
    /// <summary>
    /// Period of the inquiry.
    /// </summary>
    [IsoId("_1bgsUIHdEeSY3ulMDfpmvA")]
    [Description(@"Period of the inquiry.")]
    [DataMember(Name="QryPrd")]
    [XmlElement(ElementName="QryPrd")]
    [Required]
    public required Period4 QueryPeriod { get; init; }
    
    /// <summary>
    /// Number which the query results will start from.
    /// </summary>
    [IsoId("_2S1V4IHdEeSY3ulMDfpmvA")]
    [Description(@"Number which the query results will start from.")]
    [DataMember(Name="QryStartNb")]
    [XmlElement(ElementName="QryStartNb")]
    [Required]
    public required IsoMax35NumericText QueryStartNumber { get; init; }
    
    /// <summary>
    /// Specifies the inquiry status of the trade.
    /// </summary>
    [IsoId("_ZbwkcKaeEeSR8qifggAitQ")]
    [Description(@"Specifies the inquiry status of the trade.")]
    [DataMember(Name="QryTradSts")]
    [XmlElement(ElementName="QryTradSts")]
    [Required]
    public required QueryTradeStatus1Code QueryTradeStatus { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_gyxZAKHiEeS69KkQis5bYg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document ToDocument()
    {
        return new ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FXTradConfReqAmdmntReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AmdmntReqId", xmlNamespace );
        AmendmentRequestIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TradingSideIdentification is TradePartyIdentification7 TradingSideIdentificationValue)
        {
            writer.WriteStartElement(null, "TradgSdId", xmlNamespace );
            TradingSideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartySideIdentification is TradePartyIdentification7 CounterpartySideIdentificationValue)
        {
            writer.WriteStartElement(null, "CtrPtySdId", xmlNamespace );
            CounterpartySideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradDtl", xmlNamespace );
        TradeDetail.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QryPrd", xmlNamespace );
        QueryPeriod.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QryStartNb", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35NumericText(QueryStartNumber)); // data type Max35NumericText System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "QryTradSts", xmlNamespace );
        writer.WriteValue(QueryTradeStatus.ToString()); // Enum value
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ForeignExchangeTradeConfirmationRequestAmendmentRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForeignExchangeTradeConfirmationRequestAmendmentRequestV01"/>.
/// </summary>
[Serializable]
public partial record ForeignExchangeTradeConfirmationRequestAmendmentRequestV01Document : IOuterDocument<ForeignExchangeTradeConfirmationRequestAmendmentRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:fxtr.035.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForeignExchangeTradeConfirmationRequestAmendmentRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=ForeignExchangeTradeConfirmationRequestAmendmentRequestV01.XmlTag)]
    public required ForeignExchangeTradeConfirmationRequestAmendmentRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForeignExchangeTradeConfirmationRequestAmendmentRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
