//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForeignExchangeTradeConfirmationRequestCancellationRequestV01.  ISO2002 ID# _NXUBUoHiEeSY3ulMDfpmvA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.fxtr.ForeignExchangeTradeConfirmationRequestCancellationRequestV01>;

namespace BeneficialStrategies.Iso20022.fxtr;


/// <summary>
/// This record is an implementation of the fxtr.036.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForeignExchangeTradeConfirmationRequestCancellationRequest message is sent from a market participant to a Central matching utility (CMU) to amend the ForeignExchangeTradeConfirmationRequest previously sent.
/// 
/// Usage
/// The request is sent by the market participants to the CMU after the confirmation is requested.
/// </summary>
[Serializable]
[Description(@"Scope|The ForeignExchangeTradeConfirmationRequestCancellationRequest message is sent from a market participant to a Central matching utility (CMU) to amend the ForeignExchangeTradeConfirmationRequest previously sent.||Usage|The request is sent by the market participants to the CMU after the confirmation is requested.")]
public partial record ForeignExchangeTradeConfirmationRequestCancellationRequestV01 : IOuterRecord<ForeignExchangeTradeConfirmationRequestCancellationRequestV01,ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document>
    ,IIsoXmlSerilizable<ForeignExchangeTradeConfirmationRequestCancellationRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "fxtr.036.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FXTradConfReqCxlReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Message management information.
    /// </summary>
    [IsoId("_vw3rcIHiEeSY3ulMDfpmvA")]
    [Description(@"Message management information.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required Header23 Header { get; init; }
    
    /// <summary>
    /// Identifies the cancellation request messge.
    /// </summary>
    [IsoId("_wBWXcIHiEeSY3ulMDfpmvA")]
    [Description(@"Identifies the cancellation request messge.")]
    [DataMember(Name="CxlReqId")]
    [XmlElement(ElementName="CxlReqId")]
    public MessageIdentification1? CancellationRequestIdentification { get; init; }
    
    /// <summary>
    /// Specifies the trading side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_wPAY8IHiEeSY3ulMDfpmvA")]
    [Description(@"Specifies the trading side of the treasury trade which is captured.")]
    [DataMember(Name="TradgSdId")]
    [XmlElement(ElementName="TradgSdId")]
    [Required]
    public required TradePartyIdentification7 TradingSideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the counterparty side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_wezIcIHiEeSY3ulMDfpmvA")]
    [Description(@"Specifies the counterparty side of the treasury trade which is captured.")]
    [DataMember(Name="CtrPtyRoleId")]
    [XmlElement(ElementName="CtrPtyRoleId")]
    [Required]
    public required TradePartyIdentification7 CounterpartyRoleIdentification { get; init; }
    
    /// <summary>
    /// Identifier of the trade that needs to be cancelled.
    /// </summary>
    [IsoId("_wvgd8IHiEeSY3ulMDfpmvA")]
    [Description(@"Identifier of the trade that needs to be cancelled.")]
    [DataMember(Name="TradId")]
    [XmlElement(ElementName="TradId")]
    [Required]
    public required IsoMax35Text TradeIdentification { get; init; }
    
    /// <summary>
    /// Specifies the underlying product type.
    /// </summary>
    [IsoId("_w_JccIHiEeSY3ulMDfpmvA")]
    [Description(@"Specifies the underlying product type.")]
    [DataMember(Name="UndrlygPdctTp")]
    [XmlElement(ElementName="UndrlygPdctTp")]
    [Required]
    public required UnderlyingProductIdentifier1Code UnderlyingProductType { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_m-4V8KHiEeS69KkQis5bYg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document ToDocument()
    {
        return new ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FXTradConfReqCxlReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CancellationRequestIdentification is MessageIdentification1 CancellationRequestIdentificationValue)
        {
            writer.WriteStartElement(null, "CxlReqId", xmlNamespace );
            CancellationRequestIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradgSdId", xmlNamespace );
        TradingSideIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CtrPtyRoleId", xmlNamespace );
        CounterpartyRoleIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradId", xmlNamespace );
        writer.WriteValue(SerializationFormatter.IsoMax35Text(TradeIdentification)); // data type Max35Text System.String
        writer.WriteEndElement();
        writer.WriteStartElement(null, "UndrlygPdctTp", xmlNamespace );
        writer.WriteValue(UnderlyingProductType.ToString()); // Enum value
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ForeignExchangeTradeConfirmationRequestCancellationRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForeignExchangeTradeConfirmationRequestCancellationRequestV01"/>.
/// </summary>
[Serializable]
public partial record ForeignExchangeTradeConfirmationRequestCancellationRequestV01Document : IOuterDocument<ForeignExchangeTradeConfirmationRequestCancellationRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:fxtr.036.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForeignExchangeTradeConfirmationRequestCancellationRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=ForeignExchangeTradeConfirmationRequestCancellationRequestV01.XmlTag)]
    public required ForeignExchangeTradeConfirmationRequestCancellationRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForeignExchangeTradeConfirmationRequestCancellationRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
