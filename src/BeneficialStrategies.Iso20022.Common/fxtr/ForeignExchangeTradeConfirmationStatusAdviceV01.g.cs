//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForeignExchangeTradeConfirmationStatusAdviceV01.  ISO2002 ID# _giUbEESAEeStEe_B2dcrqg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.fxtr.ForeignExchangeTradeConfirmationStatusAdviceV01>;

namespace BeneficialStrategies.Iso20022.fxtr;


/// <summary>
/// This record is an implementation of the fxtr.037.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForeignExchageTradeConfirmationStatusAdvice message is sent from a Central matching utility (CMU) to a market participant to advise the matching status of the trade. 
/// 
/// Usage
/// The confirmation status advice is sent by the CMU to the market participants after they received the confirmation request.
/// </summary>
[Serializable]
[Description(@"Scope|The ForeignExchageTradeConfirmationStatusAdvice message is sent from a Central matching utility (CMU) to a market participant to advise the matching status of the trade. ||Usage|The confirmation status advice is sent by the CMU to the market participants after they received the confirmation request.")]
public partial record ForeignExchangeTradeConfirmationStatusAdviceV01 : IOuterRecord<ForeignExchangeTradeConfirmationStatusAdviceV01,ForeignExchangeTradeConfirmationStatusAdviceV01Document>
    ,IIsoXmlSerilizable<ForeignExchangeTradeConfirmationStatusAdviceV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "fxtr.037.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FXTradConfStsAdvc";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForeignExchangeTradeConfirmationStatusAdviceV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Advice message management information.
    /// </summary>
    [IsoId("_SxWkUKbSEeSnSIf9q_Ahng")]
    [Description(@"Advice message management information.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required Header23 Header { get; init; }
    
    /// <summary>
    /// Identifies the advice message.
    /// </summary>
    [IsoId("_rREcwESAEeStEe_B2dcrqg")]
    [Description(@"Identifies the advice message.")]
    [DataMember(Name="AdvcId")]
    [XmlElement(ElementName="AdvcId")]
    public MessageIdentification1? AdviceIdentification { get; init; }
    
    /// <summary>
    /// Specifies the trading side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_vtpVwESAEeStEe_B2dcrqg")]
    [Description(@"Specifies the trading side of the treasury trade which is captured.")]
    [DataMember(Name="TradgSdId")]
    [XmlElement(ElementName="TradgSdId")]
    [Required]
    public required TradePartyIdentification7 TradingSideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the counterparty side of the treasury trade which is captured.
    /// </summary>
    [IsoId("_x6tqQESAEeStEe_B2dcrqg")]
    [Description(@"Specifies the counterparty side of the treasury trade which is captured.")]
    [DataMember(Name="CtrPtySdId")]
    [XmlElement(ElementName="CtrPtySdId")]
    [Required]
    public required TradePartyIdentification7 CounterpartySideIdentification { get; init; }
    
    /// <summary>
    /// Details of the treasury trade confirmed.
    /// </summary>
    [IsoId("_2CJZsESAEeStEe_B2dcrqg")]
    [Description(@"Details of the treasury trade confirmed.")]
    [DataMember(Name="TradDtl")]
    [XmlElement(ElementName="TradDtl")]
    [Required]
    public required Trade2 TradeDetail { get; init; }
    
    /// <summary>
    /// Details of the confirmation in the CMU.
    /// </summary>
    [IsoId("_4B8HMESAEeStEe_B2dcrqg")]
    [Description(@"Details of the confirmation in the CMU.")]
    [DataMember(Name="ConfInf")]
    [XmlElement(ElementName="ConfInf")]
    [Required]
    public required Confirmation1 ConfirmationInformation { get; init; }
    
    /// <summary>
    /// Additional reference of this message.
    /// </summary>
    [IsoId("_70VawESAEeStEe_B2dcrqg")]
    [Description(@"Additional reference of this message.")]
    [DataMember(Name="Ref")]
    [XmlElement(ElementName="Ref")]
    public AdditionalReferences? Reference { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_Ab9F4KHmEeS69KkQis5bYg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForeignExchangeTradeConfirmationStatusAdviceV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForeignExchangeTradeConfirmationStatusAdviceV01Document ToDocument()
    {
        return new ForeignExchangeTradeConfirmationStatusAdviceV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FXTradConfStsAdvc");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AdviceIdentification is MessageIdentification1 AdviceIdentificationValue)
        {
            writer.WriteStartElement(null, "AdvcId", xmlNamespace );
            AdviceIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradgSdId", xmlNamespace );
        TradingSideIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CtrPtySdId", xmlNamespace );
        CounterpartySideIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDtl", xmlNamespace );
        TradeDetail.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ConfInf", xmlNamespace );
        ConfirmationInformation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Reference is AdditionalReferences ReferenceValue)
        {
            writer.WriteStartElement(null, "Ref", xmlNamespace );
            ReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ForeignExchangeTradeConfirmationStatusAdviceV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForeignExchangeTradeConfirmationStatusAdviceV01"/>.
/// </summary>
[Serializable]
public partial record ForeignExchangeTradeConfirmationStatusAdviceV01Document : IOuterDocument<ForeignExchangeTradeConfirmationStatusAdviceV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:fxtr.037.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForeignExchangeTradeConfirmationStatusAdviceV01"/> is required.
    /// </summary>
    [DataMember(Name=ForeignExchangeTradeConfirmationStatusAdviceV01.XmlTag)]
    public required ForeignExchangeTradeConfirmationStatusAdviceV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForeignExchangeTradeConfirmationStatusAdviceV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
