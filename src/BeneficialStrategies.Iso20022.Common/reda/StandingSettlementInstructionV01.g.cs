//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for StandingSettlementInstructionV01.  ISO2002 ID# _UWnqsNQPEeKSSosHwGnjNw.
//
namespace BeneficialStrategies.Iso20022.reda;

/// <summary>
/// Scope
/// An instructing party sends the StandingSettlementInstruction (SSI) message to the receiver to create or update a standing cash or securities settlement instruction. The message can also be used to notify a counterparty of an SSI.
/// Usage
/// The instructing party (initiator) is:
/// •	An account servicer, for example, a global custodian or prime broker
/// •	A counterparty in a transaction, for example:
/// -	an investment manager (executing broker),
/// -	a global custodian (executing broker, prime broker)
/// •	A vendor’s application communicating on behalf of an account servicer or counterparty
/// The receiver is:
/// •	An account owner, for example, an investment manager, hedge fund administrator or a party to which SSI operations have been outsourced
/// •	A counterparty, for example:
/// -	an investment manager (executing broker)
/// -	a global custodian (executing broker, prime broker)
/// •	A vendor’s application communicating on behalf of the account owner or counterparty.
/// </summary>
[Serializable]
[DataContract(Name = XmlTag)]
[XmlType(TypeName = XmlTag)]
[Description(@"Scope|An instructing party sends the StandingSettlementInstruction (SSI) message to the receiver to create or update a standing cash or securities settlement instruction. The message can also be used to notify a counterparty of an SSI.||Usage|The instructing party (initiator) is:|•	An account servicer, for example, a global custodian or prime broker|•	A counterparty in a transaction, for example:|-	an investment manager (executing broker),|-	a global custodian (executing broker, prime broker)|•	A vendor’s application communicating on behalf of an account servicer or counterparty|The receiver is:|•	An account owner, for example, an investment manager, hedge fund administrator or a party to which SSI operations have been outsourced|•	A counterparty, for example:|-	an investment manager (executing broker)|-	a global custodian (executing broker, prime broker)|•	A vendor’s application communicating on behalf of the account owner or counterparty.")]
public partial record StandingSettlementInstructionV01 : IOuterRecord
{
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "StgSttlmInstr";
    
    /* ------------------------------------------ Underlying data types not ready yet
    public required string SomeProperty { get; init; }
    */
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="StandingSettlementInstructionV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public StandingSettlementInstructionV01Document ToDocument()
    {
        return new StandingSettlementInstructionV01Document { Message = this };
    }
}

/// <summary>
/// Scope
/// An instructing party sends the StandingSettlementInstruction (SSI) message to the receiver to create or update a standing cash or securities settlement instruction. The message can also be used to notify a counterparty of an SSI.
/// Usage
/// The instructing party (initiator) is:
/// •	An account servicer, for example, a global custodian or prime broker
/// •	A counterparty in a transaction, for example:
/// -	an investment manager (executing broker),
/// -	a global custodian (executing broker, prime broker)
/// •	A vendor’s application communicating on behalf of an account servicer or counterparty
/// The receiver is:
/// •	An account owner, for example, an investment manager, hedge fund administrator or a party to which SSI operations have been outsourced
/// •	A counterparty, for example:
/// -	an investment manager (executing broker)
/// -	a global custodian (executing broker, prime broker)
/// •	A vendor’s application communicating on behalf of the account owner or counterparty.
/// This is the outer document that contains <seealso cref="StandingSettlementInstructionV01"/>.
/// </summary>
[Serializable]
[DataContract(Name = DocumentElementName, Namespace = DocumentNamespace )]
[XmlRoot(ElementName = DocumentElementName, Namespace = DocumentNamespace )]
public partial record StandingSettlementInstructionV01Document : IOuterDocument<StandingSettlementInstructionV01>
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:reda.056.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="StandingSettlementInstructionV01"/> is required.
    /// </summary>
    public required StandingSettlementInstructionV01 Message { get; init; }
}
