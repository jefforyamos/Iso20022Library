//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for BuyInConfirmationV03.  ISO2002 ID# _xpFSkS0lEeSRe9rElPHBfg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.secl.BuyInConfirmationV03>;

namespace BeneficialStrategies.Iso20022.secl;


/// <summary>
/// This record is an implementation of the secl.009.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The Buy In Confirmation message is sent by the central counterparty (CCP) to the clearing member to confirm the details of the transaction resulting from the buy in.
/// 
/// The message definition is intended for use with the ISO 20022 Business Application Header.
/// 
/// Usage
/// The Buy In Confirmation message is sent by the central counterparty (CCP) to confirm the details of the buy in transaction.
/// </summary>
[Serializable]
[Description(@"Scope|The Buy In Confirmation message is sent by the central counterparty (CCP) to the clearing member to confirm the details of the transaction resulting from the buy in.||The message definition is intended for use with the ISO 20022 Business Application Header.||Usage|The Buy In Confirmation message is sent by the central counterparty (CCP) to confirm the details of the buy in transaction.")]
public partial record BuyInConfirmationV03 : IOuterRecord<BuyInConfirmationV03,BuyInConfirmationV03Document>
    ,IIsoXmlSerilizable<BuyInConfirmationV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "secl.009.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "BuyInConf";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => BuyInConfirmationV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Unambiguous identification of the transaction as known by the instructing party.
    /// </summary>
    [IsoId("_xpFSky0lEeSRe9rElPHBfg")]
    [Description(@"Unambiguous identification of the transaction as known by the instructing party.")]
    [DataMember(Name="TxId")]
    [XmlElement(ElementName="TxId")]
    public IsoMax35Text? TransactionIdentification { get; init; }
    
    /// <summary>
    /// Provides the identification of the clearing member (individual clearing member or general clearing member).
    /// </summary>
    [IsoId("_xpFSlS0lEeSRe9rElPHBfg")]
    [Description(@"Provides the identification of the clearing member (individual clearing member or general clearing member).")]
    [DataMember(Name="ClrMmb")]
    [XmlElement(ElementName="ClrMmb")]
    [Required]
    public required PartyIdentification35Choice_ ClearingMember { get; init; }
    
    /// <summary>
    /// Provides the buy-in details.
    /// </summary>
    [IsoId("_xpFSly0lEeSRe9rElPHBfg")]
    [Description(@"Provides the buy-in details.")]
    [DataMember(Name="BuyInDtls")]
    [XmlElement(ElementName="BuyInDtls")]
    [Required]
    public required BuyIn2 BuyInDetails { get; init; }
    
    /// <summary>
    /// Provides details about the original settlement obligation that did not settle and for which the buy in process will be launched.
    /// </summary>
    [IsoId("_xpFSmS0lEeSRe9rElPHBfg")]
    [Description(@"Provides details about the original settlement obligation that did not settle and for which the buy in process will be launched.")]
    [DataMember(Name="OrgnlSttlmOblgtn")]
    [XmlElement(ElementName="OrgnlSttlmOblgtn")]
    public SettlementObligation7? OriginalSettlementObligation { get; init; }
    
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_xpFSmy0lEeSRe9rElPHBfg")]
    [Description(@"Additional information that can not be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="BuyInConfirmationV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public BuyInConfirmationV03Document ToDocument()
    {
        return new BuyInConfirmationV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("BuyInConf");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (TransactionIdentification is IsoMax35Text TransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "TxId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(TransactionIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "ClrMmb", xmlNamespace );
        ClearingMember.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BuyInDtls", xmlNamespace );
        BuyInDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (OriginalSettlementObligation is SettlementObligation7 OriginalSettlementObligationValue)
        {
            writer.WriteStartElement(null, "OrgnlSttlmOblgtn", xmlNamespace );
            OriginalSettlementObligationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BuyInConfirmationV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="BuyInConfirmationV03"/>.
/// </summary>
[Serializable]
public partial record BuyInConfirmationV03Document : IOuterDocument<BuyInConfirmationV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:secl.009.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="BuyInConfirmationV03"/> is required.
    /// </summary>
    [DataMember(Name=BuyInConfirmationV03.XmlTag)]
    public required BuyInConfirmationV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(BuyInConfirmationV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
