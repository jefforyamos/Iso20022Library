//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for NetPositionV03.  ISO2002 ID# _9C7fsS0lEeSRe9rElPHBfg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.secl.NetPositionV03>;

namespace BeneficialStrategies.Iso20022.secl;


/// <summary>
/// This record is an implementation of the secl.004.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The Net Position Report message is sent by the central counterparty (CCP) to a clearing member to confirm the net position of all trade legs reported during the day.
/// 
/// The message definition is intended for use with the ISO 20022 Business Application Header.
/// 
/// Usage
/// The central counterparty (CCP) nets all the positions per clearing account and sends the Net Position report message to the Clearing member.
/// </summary>
[Serializable]
[Description(@"Scope|The Net Position Report message is sent by the central counterparty (CCP) to a clearing member to confirm the net position of all trade legs reported during the day.||The message definition is intended for use with the ISO 20022 Business Application Header.||Usage|The central counterparty (CCP) nets all the positions per clearing account and sends the Net Position report message to the Clearing member.")]
public partial record NetPositionV03 : IOuterRecord<NetPositionV03,NetPositionV03Document>
    ,IIsoXmlSerilizable<NetPositionV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "secl.004.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "NetPos";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => NetPositionV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Provides parameters of the margin report such as the creation date and time, the report currency or the calculation date and time.
    /// </summary>
    [IsoId("_9C7fsy0lEeSRe9rElPHBfg")]
    [Description(@"Provides parameters of the margin report such as the creation date and time, the report currency or the calculation date and time.")]
    [DataMember(Name="RptParams")]
    [XmlElement(ElementName="RptParams")]
    [Required]
    public required ReportParameters1 ReportParameters { get; init; }
    
    /// <summary>
    /// Provides information about the number of used pages.
    /// </summary>
    [IsoId("_9C7ftS0lEeSRe9rElPHBfg")]
    [Description(@"Provides information about the number of used pages.")]
    [DataMember(Name="Pgntn")]
    [XmlElement(ElementName="Pgntn")]
    [Required]
    public required Pagination Pagination { get; init; }
    
    /// <summary>
    /// Provides the identification of the account owner, that is the clearing member (individual clearing member or general clearing member).
    /// </summary>
    [IsoId("_9C7fty0lEeSRe9rElPHBfg")]
    [Description(@"Provides the identification of the account owner, that is the clearing member (individual clearing member or general clearing member).")]
    [DataMember(Name="ClrMmb")]
    [XmlElement(ElementName="ClrMmb")]
    [Required]
    public required PartyIdentification35Choice_ ClearingMember { get; init; }
    
    /// <summary>
    /// Clearing organisation that will clear the trade.
    /// Note: This field allows Clearing Member Firm to segregate flows coming from clearing counterparty's clearing system. Indeed, Clearing Member Firms receive messages from the same system (same sender) and this field allows them to know if the message is related to equities or derivatives.
    /// </summary>
    [IsoId("_9C7fuS0lEeSRe9rElPHBfg")]
    [Description(@"Clearing organisation that will clear the trade.||Note: This field allows Clearing Member Firm to segregate flows coming from clearing counterparty's clearing system. Indeed, Clearing Member Firms receive messages from the same system (same sender) and this field allows them to know if the message is related to equities or derivatives.")]
    [DataMember(Name="ClrSgmt")]
    [XmlElement(ElementName="ClrSgmt")]
    public PartyIdentification35Choice_? ClearingSegment { get; init; }
    
    /// <summary>
    /// Provides the net position details such as the average deal price and net quantity.
    /// </summary>
    [IsoId("_9C7fuy0lEeSRe9rElPHBfg")]
    [Description(@"Provides the net position details such as the average deal price and net quantity.")]
    [DataMember(Name="NetPosRpt")]
    [XmlElement(ElementName="NetPosRpt")]
    [Required]
    public required NetPosition3 NetPositionReport { get; init; }
    
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_9C7fvS0lEeSRe9rElPHBfg")]
    [Description(@"Additional information that can not be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="NetPositionV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public NetPositionV03Document ToDocument()
    {
        return new NetPositionV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("NetPos");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptParams", xmlNamespace );
        ReportParameters.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Pgntn", xmlNamespace );
        Pagination.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ClrMmb", xmlNamespace );
        ClearingMember.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ClearingSegment is PartyIdentification35Choice_ ClearingSegmentValue)
        {
            writer.WriteStartElement(null, "ClrSgmt", xmlNamespace );
            ClearingSegmentValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "NetPosRpt", xmlNamespace );
        NetPositionReport.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static NetPositionV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="NetPositionV03"/>.
/// </summary>
[Serializable]
public partial record NetPositionV03Document : IOuterDocument<NetPositionV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:secl.004.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="NetPositionV03"/> is required.
    /// </summary>
    [DataMember(Name=NetPositionV03.XmlTag)]
    public required NetPositionV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(NetPositionV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
