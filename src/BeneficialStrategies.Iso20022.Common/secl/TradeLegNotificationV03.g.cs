//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for TradeLegNotificationV03.  ISO2002 ID# _BjjyQS0mEeSRe9rElPHBfg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.secl.TradeLegNotificationV03>;

namespace BeneficialStrategies.Iso20022.secl;


/// <summary>
/// This record is an implementation of the secl.001.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The TradeLegNotification message is sent by the central counterparty (CCP) to a clearing member to report the trade that has been executed by the trading platform.
/// 
/// The message definition is intended for use with the ISO20022 Business Application Header.
/// 
/// Usage
/// The CCP reports both sides of the trade from the clearing member perspective. The CCP sends a message to the global clearing member of the seller and a message to the global clearing member of the buyer. Note: An individual clearing member only clear its own trades.
/// </summary>
[Serializable]
[Description(@"Scope|The TradeLegNotification message is sent by the central counterparty (CCP) to a clearing member to report the trade that has been executed by the trading platform.||The message definition is intended for use with the ISO20022 Business Application Header.||Usage|The CCP reports both sides of the trade from the clearing member perspective. The CCP sends a message to the global clearing member of the seller and a message to the global clearing member of the buyer. Note: An individual clearing member only clear its own trades.")]
public partial record TradeLegNotificationV03 : IOuterRecord<TradeLegNotificationV03,TradeLegNotificationV03Document>
    ,IIsoXmlSerilizable<TradeLegNotificationV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "secl.001.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "TradLegNtfctn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => TradeLegNotificationV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Provides the identification of the clearing member (individual clearing member or general clearing member).
    /// </summary>
    [IsoId("_BjjyRS0mEeSRe9rElPHBfg")]
    [Description(@"Provides the identification of the clearing member (individual clearing member or general clearing member).")]
    [DataMember(Name="ClrMmb")]
    [XmlElement(ElementName="ClrMmb")]
    [Required]
    public required PartyIdentification35Choice_ ClearingMember { get; init; }
    
    /// <summary>
    /// Identifies the clearing member account at the CCP through which the trade must be cleared (sometimes called position account).
    /// </summary>
    [IsoId("_BjjyRy0mEeSRe9rElPHBfg")]
    [Description(@"Identifies the clearing member account at the CCP through which the trade must be cleared (sometimes called position account).")]
    [DataMember(Name="ClrAcct")]
    [XmlElement(ElementName="ClrAcct")]
    [Required]
    public required SecuritiesAccount18 ClearingAccount { get; init; }
    
    /// <summary>
    /// An account opened by the central counterparty in the name of the clearing member or its settlement agent within the account structure, for settlement purposes (gives information about the clearing member/its settlement agent account at the central securities depository).
    /// </summary>
    [IsoId("_BjjySS0mEeSRe9rElPHBfg")]
    [Description(@"An account opened by the central counterparty in the name of the clearing member or its settlement agent within the account structure, for settlement purposes (gives information about the clearing member/its settlement agent account at the central securities depository).")]
    [DataMember(Name="DlvryAcct")]
    [XmlElement(ElementName="DlvryAcct")]
    public SecuritiesAccount19? DeliveryAccount { get; init; }
    
    /// <summary>
    /// Provides details about the non clearing member identification and account.
    /// </summary>
    [IsoId("_BjjySy0mEeSRe9rElPHBfg")]
    [Description(@"Provides details about the non clearing member identification and account.")]
    [DataMember(Name="NonClrMmb")]
    [XmlElement(ElementName="NonClrMmb")]
    public PartyIdentificationAndAccount31? NonClearingMember { get; init; }
    
    /// <summary>
    /// Provides clearing details such as the settlement netting (or not) eligibility code or the clearing segment.
    /// </summary>
    [IsoId("_BjjyTS0mEeSRe9rElPHBfg")]
    [Description(@"Provides clearing details such as the settlement netting (or not) eligibility code or the clearing segment.")]
    [DataMember(Name="ClrDtls")]
    [XmlElement(ElementName="ClrDtls")]
    public Clearing4? ClearingDetails { get; init; }
    
    /// <summary>
    /// Provides details about the trade leg such as the trade date, the settlement date or the trading currency.
    /// </summary>
    [IsoId("_BjjyTy0mEeSRe9rElPHBfg")]
    [Description(@"Provides details about the trade leg such as the trade date, the settlement date or the trading currency.")]
    [DataMember(Name="TradLegDtls")]
    [XmlElement(ElementName="TradLegDtls")]
    [Required]
    public required TradeLeg8 TradeLegDetails { get; init; }
    
    /// <summary>
    /// Provides details about the settlement details of the trade leg such the settlement amount or the place of settlement.
    /// </summary>
    [IsoId("_BjjyUS0mEeSRe9rElPHBfg")]
    [Description(@"Provides details about the settlement details of the trade leg such the settlement amount or the place of settlement.")]
    [DataMember(Name="SttlmDtls")]
    [XmlElement(ElementName="SttlmDtls")]
    [Required]
    public required Settlement1 SettlementDetails { get; init; }
    
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_BjjyUy0mEeSRe9rElPHBfg")]
    [Description(@"Additional information that can not be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="TradeLegNotificationV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public TradeLegNotificationV03Document ToDocument()
    {
        return new TradeLegNotificationV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("TradLegNtfctn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "ClrMmb", xmlNamespace );
        ClearingMember.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ClrAcct", xmlNamespace );
        ClearingAccount.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DeliveryAccount is SecuritiesAccount19 DeliveryAccountValue)
        {
            writer.WriteStartElement(null, "DlvryAcct", xmlNamespace );
            DeliveryAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (NonClearingMember is PartyIdentificationAndAccount31 NonClearingMemberValue)
        {
            writer.WriteStartElement(null, "NonClrMmb", xmlNamespace );
            NonClearingMemberValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ClearingDetails is Clearing4 ClearingDetailsValue)
        {
            writer.WriteStartElement(null, "ClrDtls", xmlNamespace );
            ClearingDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TradLegDtls", xmlNamespace );
        TradeLegDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SttlmDtls", xmlNamespace );
        SettlementDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TradeLegNotificationV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="TradeLegNotificationV03"/>.
/// </summary>
[Serializable]
public partial record TradeLegNotificationV03Document : IOuterDocument<TradeLegNotificationV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:secl.001.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="TradeLegNotificationV03"/> is required.
    /// </summary>
    [DataMember(Name=TradeLegNotificationV03.XmlTag)]
    public required TradeLegNotificationV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(TradeLegNotificationV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
