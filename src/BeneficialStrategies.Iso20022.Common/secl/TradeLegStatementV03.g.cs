//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for TradeLegStatementV03.  ISO2002 ID# _DlZHIS0mEeSRe9rElPHBfg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.secl.TradeLegStatementV03>;

namespace BeneficialStrategies.Iso20022.secl;


/// <summary>
/// This record is an implementation of the secl.003.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The TradeLegStatement message is sent by the central counterparty (CCP) to a clearing member to report all trades that have been executed by the trading platform.
/// 
/// The message definition is intended for use with the ISO20022 Business Application Header.
/// 
/// Usage
/// The TradeLegStatement message may be either sent:
/// - during the day (to report trades execution by batch) or
/// - as an end of day report.
/// </summary>
[Serializable]
[Description(@"Scope|The TradeLegStatement message is sent by the central counterparty (CCP) to a clearing member to report all trades that have been executed by the trading platform.||The message definition is intended for use with the ISO20022 Business Application Header.||Usage|The TradeLegStatement message may be either sent:|- during the day (to report trades execution by batch) or|- as an end of day report.")]
public partial record TradeLegStatementV03 : IOuterRecord<TradeLegStatementV03,TradeLegStatementV03Document>
    ,IIsoXmlSerilizable<TradeLegStatementV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "secl.003.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "TradLegStmt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => TradeLegStatementV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Provides various statement parameters such as the statement identification, the statement date and time or the statement frequency.
    /// </summary>
    [IsoId("_DlZuMS0mEeSRe9rElPHBfg")]
    [Description(@"Provides various statement parameters such as the statement identification, the statement date and time or the statement frequency.")]
    [DataMember(Name="StmtParams")]
    [XmlElement(ElementName="StmtParams")]
    [Required]
    public required Statement31 StatementParameters { get; init; }
    
    /// <summary>
    /// Page number of the message (within a statement) and continuation indicator to indicate that the statement is to continue or that the message is the last page of the statement.
    /// </summary>
    [IsoId("_DlZuMy0mEeSRe9rElPHBfg")]
    [Description(@"Page number of the message (within a statement) and continuation indicator to indicate that the statement is to continue or that the message is the last page of the statement.")]
    [DataMember(Name="Pgntn")]
    [XmlElement(ElementName="Pgntn")]
    [Required]
    public required Pagination Pagination { get; init; }
    
    /// <summary>
    /// Provides the identification of the account owner, that is the clearing member (individual clearing member or general clearing member).
    /// </summary>
    [IsoId("_DlZuNS0mEeSRe9rElPHBfg")]
    [Description(@"Provides the identification of the account owner, that is the clearing member (individual clearing member or general clearing member).")]
    [DataMember(Name="ClrMmb")]
    [XmlElement(ElementName="ClrMmb")]
    [Required]
    public required PartyIdentification35Choice_ ClearingMember { get; init; }
    
    /// <summary>
    /// Identifies the clearing member account at the Central counterparty through which the trade must be cleared (sometimes called position account).
    /// </summary>
    [IsoId("_DlZuNy0mEeSRe9rElPHBfg")]
    [Description(@"Identifies the clearing member account at the Central counterparty through which the trade must be cleared (sometimes called position account).")]
    [DataMember(Name="ClrAcct")]
    [XmlElement(ElementName="ClrAcct")]
    public SecuritiesAccount18? ClearingAccount { get; init; }
    
    /// <summary>
    /// Provides the statement details.
    /// </summary>
    [IsoId("_DlZuOS0mEeSRe9rElPHBfg")]
    [Description(@"Provides the statement details.")]
    [DataMember(Name="StmtDtls")]
    [XmlElement(ElementName="StmtDtls")]
    [Required]
    public required TradeLegStatement3 StatementDetails { get; init; }
    
    /// <summary>
    /// Additional information that can not be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_DlZuOy0mEeSRe9rElPHBfg")]
    [Description(@"Additional information that can not be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="TradeLegStatementV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public TradeLegStatementV03Document ToDocument()
    {
        return new TradeLegStatementV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("TradLegStmt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "StmtParams", xmlNamespace );
        StatementParameters.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Pgntn", xmlNamespace );
        Pagination.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ClrMmb", xmlNamespace );
        ClearingMember.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ClearingAccount is SecuritiesAccount18 ClearingAccountValue)
        {
            writer.WriteStartElement(null, "ClrAcct", xmlNamespace );
            ClearingAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "StmtDtls", xmlNamespace );
        StatementDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static TradeLegStatementV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="TradeLegStatementV03"/>.
/// </summary>
[Serializable]
public partial record TradeLegStatementV03Document : IOuterDocument<TradeLegStatementV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:secl.003.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="TradeLegStatementV03"/> is required.
    /// </summary>
    [DataMember(Name=TradeLegStatementV03.XmlTag)]
    public required TradeLegStatementV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(TradeLegStatementV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
