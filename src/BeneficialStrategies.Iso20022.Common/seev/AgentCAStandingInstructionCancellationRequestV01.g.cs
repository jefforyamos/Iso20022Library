//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for AgentCAStandingInstructionCancellationRequestV01.  ISO2002 ID# _TRx0NdEwEd-BzquC8wXy7w_608970881.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.seev.AgentCAStandingInstructionCancellationRequestV01>;

namespace BeneficialStrategies.Iso20022.seev;


/// <summary>
/// This record is an implementation of the seev.026.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// This message is sent by a CSD to the issuer agent to request the cancellation of a previously sent Agent Corporate Action Standing Instruction.
/// Usage
/// This message is used to request the cancellation of a standing instruction.
/// This message must contain the identification of the standing instruction to be cancelled. It may also contain details of the standing instruction to be cancelled, but this is not recommended.
/// </summary>
[Serializable]
[Description(@"Scope|This message is sent by a CSD to the issuer agent to request the cancellation of a previously sent Agent Corporate Action Standing Instruction.|Usage|This message is used to request the cancellation of a standing instruction.|This message must contain the identification of the standing instruction to be cancelled. It may also contain details of the standing instruction to be cancelled, but this is not recommended.")]
public partial record AgentCAStandingInstructionCancellationRequestV01 : IOuterRecord<AgentCAStandingInstructionCancellationRequestV01,AgentCAStandingInstructionCancellationRequestV01Document>
    ,IIsoXmlSerilizable<AgentCAStandingInstructionCancellationRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "seev.026.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "AgtCAStgInstrCxlReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => AgentCAStandingInstructionCancellationRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identification assigned by the Sender to unambiguously identify the cancellation request.
    /// </summary>
    [IsoId("_TRx0NtEwEd-BzquC8wXy7w_-454258628")]
    [Description(@"Identification assigned by the Sender to unambiguously identify the cancellation request.")]
    [DataMember(Name="Id")]
    [XmlElement(ElementName="Id")]
    [Required]
    public required DocumentIdentification8 Identification { get; init; }
    
    /// <summary>
    /// Identification of the Agent CA Standing Instruction Request to be cancelled.
    /// </summary>
    [IsoId("_TRx0N9EwEd-BzquC8wXy7w_-424704764")]
    [Description(@"Identification of the Agent CA Standing Instruction Request to be cancelled.")]
    [DataMember(Name="AgtCAStgInstrReqId")]
    [XmlElement(ElementName="AgtCAStgInstrReqId")]
    [Required]
    public required DocumentIdentification8 AgentCAStandingInstructionRequestIdentification { get; init; }
    
    /// <summary>
    /// General information about the standing instruction.
    /// </summary>
    [IsoId("_TRx0ONEwEd-BzquC8wXy7w_813068966")]
    [Description(@"General information about the standing instruction.")]
    [DataMember(Name="StgInstrGnlInf")]
    [XmlElement(ElementName="StgInstrGnlInf")]
    [Required]
    public required CorporateActionStandingInstructionGeneralInformation1 StandingInstructionGeneralInformation { get; init; }
    
    /// <summary>
    /// Information related to the standing instruction.
    /// </summary>
    [IsoId("_TRx0OdEwEd-BzquC8wXy7w_881408508")]
    [Description(@"Information related to the standing instruction.")]
    [DataMember(Name="StgInstrDtls")]
    [XmlElement(ElementName="StgInstrDtls")]
    public CorporateActionStandingInstruction1? StandingInstructionDetails { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="AgentCAStandingInstructionCancellationRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public AgentCAStandingInstructionCancellationRequestV01Document ToDocument()
    {
        return new AgentCAStandingInstructionCancellationRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("AgtCAStgInstrCxlReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AgtCAStgInstrReqId", xmlNamespace );
        AgentCAStandingInstructionRequestIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "StgInstrGnlInf", xmlNamespace );
        StandingInstructionGeneralInformation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (StandingInstructionDetails is CorporateActionStandingInstruction1 StandingInstructionDetailsValue)
        {
            writer.WriteStartElement(null, "StgInstrDtls", xmlNamespace );
            StandingInstructionDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static AgentCAStandingInstructionCancellationRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="AgentCAStandingInstructionCancellationRequestV01"/>.
/// </summary>
[Serializable]
public partial record AgentCAStandingInstructionCancellationRequestV01Document : IOuterDocument<AgentCAStandingInstructionCancellationRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:seev.026.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="AgentCAStandingInstructionCancellationRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=AgentCAStandingInstructionCancellationRequestV01.XmlTag)]
    public required AgentCAStandingInstructionCancellationRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(AgentCAStandingInstructionCancellationRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
