//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for MeetingEntitlementNotificationV09.  ISO2002 ID# _nIzHYTQ7Ee22Z83HpR5E8w.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.seev.MeetingEntitlementNotificationV09>;

namespace BeneficialStrategies.Iso20022.seev;


/// <summary>
/// This record is an implementation of the seev.003.001.09 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The MeetingEntitlementNotification is sent by an account servicer to the account owner to advise the entitlement in relation to a meeting.
/// Usage
/// This message is sent to advise the quantity of securities held by an account owner. The balance is specified for the securities for which the meeting is taking place. The message is also used to amend a previously sent MeetingEntitlementNotification. 
/// The MeetingEntitlementNotification message may be sent either before receiving a voting instruction to confirm the entitlement; or after having received a voting instruction to confirm details of the person attending the meeting. 
/// The message may also be used in place of an attendance card or to confirm entitlements in the case of bearer shares.
/// This message definition is intended for use with the Business Application Header (BAH).
/// </summary>
[Serializable]
[Description(@"Scope|The MeetingEntitlementNotification is sent by an account servicer to the account owner to advise the entitlement in relation to a meeting.|Usage|This message is sent to advise the quantity of securities held by an account owner. The balance is specified for the securities for which the meeting is taking place. The message is also used to amend a previously sent MeetingEntitlementNotification. |The MeetingEntitlementNotification message may be sent either before receiving a voting instruction to confirm the entitlement; or after having received a voting instruction to confirm details of the person attending the meeting. |The message may also be used in place of an attendance card or to confirm entitlements in the case of bearer shares.|This message definition is intended for use with the Business Application Header (BAH).")]
public partial record MeetingEntitlementNotificationV09 : IOuterRecord<MeetingEntitlementNotificationV09,MeetingEntitlementNotificationV09Document>
    ,IIsoXmlSerilizable<MeetingEntitlementNotificationV09>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "seev.003.001.09";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "MtgEntitlmntNtfctn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => MeetingEntitlementNotificationV09Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Type of notification.
    /// </summary>
    [IsoId("_nIzHazQ7Ee22Z83HpR5E8w")]
    [Description(@"Type of notification.")]
    [DataMember(Name="NtfctnTp")]
    [XmlElement(ElementName="NtfctnTp")]
    [Required]
    public required NotificationType2Code NotificationType { get; init; }
    
    /// <summary>
    /// Identification of the original meeting notification entitlement message which is amended.
    /// </summary>
    [IsoId("_nIzHczQ7Ee22Z83HpR5E8w")]
    [Description(@"Identification of the original meeting notification entitlement message which is amended.")]
    [DataMember(Name="PrvsEntitlmntNtfctnId")]
    [XmlElement(ElementName="PrvsEntitlmntNtfctnId")]
    public IsoMax35Text? PreviousEntitlementNotificationIdentification { get; init; }
    
    /// <summary>
    /// Set of elements to allow the unambiguous identification of a meeting.
    /// </summary>
    [IsoId("_nIzHdTQ7Ee22Z83HpR5E8w")]
    [Description(@"Set of elements to allow the unambiguous identification of a meeting.")]
    [DataMember(Name="MtgRef")]
    [XmlElement(ElementName="MtgRef")]
    [Required]
    public required MeetingReference10 MeetingReference { get; init; }
    
    /// <summary>
    /// Institution that is the issuer of the security to which the meeting applies.
    /// </summary>
    [IsoId("_nIzHdzQ7Ee22Z83HpR5E8w")]
    [Description(@"Institution that is the issuer of the security to which the meeting applies.")]
    [DataMember(Name="Issr")]
    [XmlElement(ElementName="Issr")]
    [Required]
    public required PartyIdentification129Choice_ Issuer { get; init; }
    
    /// <summary>
    /// Security for which the meeting is organised, the account and the positions of the security holder.
    /// </summary>
    [IsoId("_nIzHeTQ7Ee22Z83HpR5E8w")]
    [Description(@"Security for which the meeting is organised, the account and the positions of the security holder.")]
    [DataMember(Name="Scty")]
    [XmlElement(ElementName="Scty")]
    public required ValueList<SecurityPosition18> Security { get; init; } = []; // Min=1, Max=200
    
    /// <summary>
    /// Date determining eligibility.
    /// </summary>
    [IsoId("_nIzHezQ7Ee22Z83HpR5E8w")]
    [Description(@"Date determining eligibility.")]
    [DataMember(Name="Elgblty")]
    [XmlElement(ElementName="Elgblty")]
    [Required]
    public required EligibilityDates1 Eligibility { get; init; }
    
    /// <summary>
    /// Person physically attending the meeting as a natural or legal person.
    /// </summary>
    [IsoId("_nIzHfTQ7Ee22Z83HpR5E8w")]
    [Description(@"Person physically attending the meeting as a natural or legal person.")]
    [DataMember(Name="MtgAttndee")]
    [XmlElement(ElementName="MtgAttndee")]
    public PartyIdentification232Choice_? MeetingAttendee { get; init; }
    
    /// <summary>
    /// Third party agent assigned by the shareholder that is legally authorised to cast a vote on the shareholder's behalf at the general meeting.
    /// </summary>
    [IsoId("_nIzHfzQ7Ee22Z83HpR5E8w")]
    [Description(@"Third party agent assigned by the shareholder that is legally authorised to cast a vote on the shareholder's behalf at the general meeting.")]
    [DataMember(Name="Prxy")]
    [XmlElement(ElementName="Prxy")]
    public PartyIdentification232Choice_? Proxy { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_nIzHgTQ7Ee22Z83HpR5E8w")]
    [Description(@"Additional information that cannot be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="MeetingEntitlementNotificationV09Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public MeetingEntitlementNotificationV09Document ToDocument()
    {
        return new MeetingEntitlementNotificationV09Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("MtgEntitlmntNtfctn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "NtfctnTp", xmlNamespace );
        writer.WriteValue(NotificationType.ToString()); // Enum value
        writer.WriteEndElement();
        if (PreviousEntitlementNotificationIdentification is IsoMax35Text PreviousEntitlementNotificationIdentificationValue)
        {
            writer.WriteStartElement(null, "PrvsEntitlmntNtfctnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PreviousEntitlementNotificationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "MtgRef", xmlNamespace );
        MeetingReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Issr", xmlNamespace );
        Issuer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Scty", xmlNamespace );
        Security.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Elgblty", xmlNamespace );
        Eligibility.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (MeetingAttendee is PartyIdentification232Choice_ MeetingAttendeeValue)
        {
            writer.WriteStartElement(null, "MtgAttndee", xmlNamespace );
            MeetingAttendeeValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Proxy is PartyIdentification232Choice_ ProxyValue)
        {
            writer.WriteStartElement(null, "Prxy", xmlNamespace );
            ProxyValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MeetingEntitlementNotificationV09 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="MeetingEntitlementNotificationV09"/>.
/// </summary>
[Serializable]
public partial record MeetingEntitlementNotificationV09Document : IOuterDocument<MeetingEntitlementNotificationV09>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:seev.003.001.09";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="MeetingEntitlementNotificationV09"/> is required.
    /// </summary>
    [DataMember(Name=MeetingEntitlementNotificationV09.XmlTag)]
    public required MeetingEntitlementNotificationV09 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(MeetingEntitlementNotificationV09.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
