//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for MeetingNotificationV08.  ISO2002 ID# _sVpAIfEkEeqRfth943bvEA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.seev.MeetingNotificationV08>;

namespace BeneficialStrategies.Iso20022.seev;


/// <summary>
/// This record is an implementation of the seev.001.001.08 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The MeetingNotification message is sent by a notifying party, for example, an issuer, its agent or an intermediary to another intermediary, a party holding the right to vote, a registered security holder or to a beneficial holder to announce a meeting.
/// Usage
/// The MeetingNotification message is used to announce a meeting, for example, it provides information on the participation details and requirements for the meeting, the vote parameters and the resolutions. The MeetingNotification message may also be used to announce an update.
/// This message definition is intended for use with the Business Application Header (BAH).
/// </summary>
[Serializable]
[Description(@"Scope|The MeetingNotification message is sent by a notifying party, for example, an issuer, its agent or an intermediary to another intermediary, a party holding the right to vote, a registered security holder or to a beneficial holder to announce a meeting.|Usage|The MeetingNotification message is used to announce a meeting, for example, it provides information on the participation details and requirements for the meeting, the vote parameters and the resolutions. The MeetingNotification message may also be used to announce an update.|This message definition is intended for use with the Business Application Header (BAH).")]
public partial record MeetingNotificationV08 : IOuterRecord<MeetingNotificationV08,MeetingNotificationV08Document>
    ,IIsoXmlSerilizable<MeetingNotificationV08>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "seev.001.001.08";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "MtgNtfctn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => MeetingNotificationV08Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// General information about the event notification type and status.
    /// </summary>
    [IsoId("_sVpAMfEkEeqRfth943bvEA")]
    [Description(@"General information about the event notification type and status.")]
    [DataMember(Name="NtfctnGnlInf")]
    [XmlElement(ElementName="NtfctnGnlInf")]
    [Required]
    public required NotificationGeneralInformation2 NotificationGeneralInformation { get; init; }
    
    /// <summary>
    /// Information specific to notification amendment as for instance the identification to a previous meeting notification.
    /// </summary>
    [IsoId("_sVpAM_EkEeqRfth943bvEA")]
    [Description(@"Information specific to notification amendment as for instance the identification to a previous meeting notification.")]
    [DataMember(Name="NtfctnUpd")]
    [XmlElement(ElementName="NtfctnUpd")]
    public NotificationUpdate2? NotificationUpdate { get; init; }
    
    /// <summary>
    /// Identification of another meeting event that needs to be closely linked to the processing of the event notified in this meeting notification.
    /// </summary>
    [IsoId("_sVpANfEkEeqRfth943bvEA")]
    [Description(@"Identification of another meeting event that needs to be closely linked to the processing of the event notified in this meeting notification.")]
    [DataMember(Name="EvtsLkg")]
    [XmlElement(ElementName="EvtsLkg")]
    public MeetingEventReference1? EventsLinkage { get; init; }
    
    /// <summary>
    /// Information about the meeting like meeting identifications, various deadlines, contact persons, electronic and postal locations for accessing information and proxy assignment parameters.
    /// </summary>
    [IsoId("_sVpAN_EkEeqRfth943bvEA")]
    [Description(@"Information about the meeting like meeting identifications, various deadlines, contact persons, electronic and postal locations for accessing information and proxy assignment parameters.")]
    [DataMember(Name="Mtg")]
    [XmlElement(ElementName="Mtg")]
    [Required]
    public required MeetingNotice6 Meeting { get; init; }
    
    /// <summary>
    /// Dates and details of the shareholders meeting.
    /// </summary>
    [IsoId("_sVpAOfEkEeqRfth943bvEA")]
    [Description(@"Dates and details of the shareholders meeting.")]
    [DataMember(Name="MtgDtls")]
    [XmlElement(ElementName="MtgDtls")]
    public required ValueList<Meeting6> MeetingDetails { get; init; } = []; // Min=1, Max=5
    
    /// <summary>
    /// Institution that is the issuer of the security to which the meeting applies.
    /// </summary>
    [IsoId("_sVpAO_EkEeqRfth943bvEA")]
    [Description(@"Institution that is the issuer of the security to which the meeting applies.")]
    [DataMember(Name="Issr")]
    [XmlElement(ElementName="Issr")]
    [Required]
    public required IssuerInformation3 Issuer { get; init; }
    
    /// <summary>
    /// Agent of the issuer.
    /// </summary>
    [IsoId("_sVpAPfEkEeqRfth943bvEA")]
    [Description(@"Agent of the issuer.")]
    [DataMember(Name="IssrAgt")]
    [XmlElement(ElementName="IssrAgt")]
    public required ValueList<IssuerAgent3> IssuerAgent { get; init; } = []; // Min=0, Max=10
    
    /// <summary>
    /// Financial instrument identification and net position of a segregated holding, in a single security, within the overall position held in a securities account.
    /// </summary>
    [IsoId("_sVyKEfEkEeqRfth943bvEA")]
    [Description(@"Financial instrument identification and net position of a segregated holding, in a single security, within the overall position held in a securities account.")]
    [DataMember(Name="Scty")]
    [XmlElement(ElementName="Scty")]
    public required ValueList<SecurityPosition12> Security { get; init; } = []; // Min=1, Max=200
    
    /// <summary>
    /// Detailed information of a resolution proposed to the vote.
    /// </summary>
    [IsoId("_sVyKE_EkEeqRfth943bvEA")]
    [Description(@"Detailed information of a resolution proposed to the vote.")]
    [DataMember(Name="Rsltn")]
    [XmlElement(ElementName="Rsltn")]
    public required ValueList<Resolution5> Resolution { get; init; } = []; // Min=0, Max=1000
    
    /// <summary>
    /// Conditions for voting, the different voting methods and options, the voting deadlines and the parameters of the incentive premium.
    /// </summary>
    [IsoId("_sVyKFfEkEeqRfth943bvEA")]
    [Description(@"Conditions for voting, the different voting methods and options, the voting deadlines and the parameters of the incentive premium.")]
    [DataMember(Name="Vote")]
    [XmlElement(ElementName="Vote")]
    public VoteParameters6? Vote { get; init; }
    
    /// <summary>
    /// Information about the use of power of attorney.
    /// </summary>
    [IsoId("_sVyKF_EkEeqRfth943bvEA")]
    [Description(@"Information about the use of power of attorney.")]
    [DataMember(Name="PwrOfAttnyRqrmnts")]
    [XmlElement(ElementName="PwrOfAttnyRqrmnts")]
    public PowerOfAttorneyRequirements4? PowerOfAttorneyRequirements { get; init; }
    
    /// <summary>
    /// Additional narrative information about the meeting event.
    /// </summary>
    [IsoId("_sVyKGfEkEeqRfth943bvEA")]
    [Description(@"Additional narrative information about the meeting event.")]
    [DataMember(Name="AddtlInf")]
    [XmlElement(ElementName="AddtlInf")]
    public CorporateEventNarrative3? AdditionalInformation { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_sVyKG_EkEeqRfth943bvEA")]
    [Description(@"Additional information that cannot be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="MeetingNotificationV08Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public MeetingNotificationV08Document ToDocument()
    {
        return new MeetingNotificationV08Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("MtgNtfctn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "NtfctnGnlInf", xmlNamespace );
        NotificationGeneralInformation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (NotificationUpdate is NotificationUpdate2 NotificationUpdateValue)
        {
            writer.WriteStartElement(null, "NtfctnUpd", xmlNamespace );
            NotificationUpdateValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EventsLinkage is MeetingEventReference1 EventsLinkageValue)
        {
            writer.WriteStartElement(null, "EvtsLkg", xmlNamespace );
            EventsLinkageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "Mtg", xmlNamespace );
        Meeting.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "MtgDtls", xmlNamespace );
        MeetingDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Issr", xmlNamespace );
        Issuer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "IssrAgt", xmlNamespace );
        IssuerAgent.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Scty", xmlNamespace );
        Security.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rsltn", xmlNamespace );
        Resolution.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Vote is VoteParameters6 VoteValue)
        {
            writer.WriteStartElement(null, "Vote", xmlNamespace );
            VoteValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PowerOfAttorneyRequirements is PowerOfAttorneyRequirements4 PowerOfAttorneyRequirementsValue)
        {
            writer.WriteStartElement(null, "PwrOfAttnyRqrmnts", xmlNamespace );
            PowerOfAttorneyRequirementsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is CorporateEventNarrative3 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MeetingNotificationV08 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="MeetingNotificationV08"/>.
/// </summary>
[Serializable]
public partial record MeetingNotificationV08Document : IOuterDocument<MeetingNotificationV08>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:seev.001.001.08";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="MeetingNotificationV08"/> is required.
    /// </summary>
    [DataMember(Name=MeetingNotificationV08.XmlTag)]
    public required MeetingNotificationV08 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(MeetingNotificationV08.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
