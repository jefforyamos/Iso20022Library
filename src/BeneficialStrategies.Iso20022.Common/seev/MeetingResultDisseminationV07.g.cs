//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for MeetingResultDisseminationV07.  ISO2002 ID# _sV77T_EkEeqRfth943bvEA.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.seev.MeetingResultDisseminationV07>;

namespace BeneficialStrategies.Iso20022.seev;


/// <summary>
/// This record is an implementation of the seev.008.001.07 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The MeetingResultDissemination message is sent by an issuer, its agent or an intermediary to another intermediary, a party holding the right to vote, a registered security holder or to a beneficial holder to provide information on the voting results of a shareholders meeting.
/// Usage
/// The MeetingResultDissemination message is used to provide the vote results per resolution. It may also provide information on the level of participation.
/// This message is also used to notify an update or amendment to a previously sent MeetingResultDissemination message.
/// This message definition is intended for use with the Business Application Header (BAH).
/// </summary>
[Serializable]
[Description(@"Scope|The MeetingResultDissemination message is sent by an issuer, its agent or an intermediary to another intermediary, a party holding the right to vote, a registered security holder or to a beneficial holder to provide information on the voting results of a shareholders meeting.|Usage|The MeetingResultDissemination message is used to provide the vote results per resolution. It may also provide information on the level of participation.|This message is also used to notify an update or amendment to a previously sent MeetingResultDissemination message.|This message definition is intended for use with the Business Application Header (BAH).")]
public partial record MeetingResultDisseminationV07 : IOuterRecord<MeetingResultDisseminationV07,MeetingResultDisseminationV07Document>
    ,IIsoXmlSerilizable<MeetingResultDisseminationV07>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "seev.008.001.07";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "MtgRsltDssmntn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => MeetingResultDisseminationV07Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Type of dissemination report, that is, whether the report is new or a replacement.
    /// </summary>
    [IsoId("_sV77WfEkEeqRfth943bvEA")]
    [Description(@"Type of dissemination report, that is, whether the report is new or a replacement.")]
    [DataMember(Name="MtgRsltsDssmntnTp")]
    [XmlElement(ElementName="MtgRsltsDssmntnTp")]
    [Required]
    public required NotificationType2Code MeetingResultsDisseminationType { get; init; }
    
    /// <summary>
    /// Identification of the previously sent meeting result dissemination message.
    /// </summary>
    [IsoId("_sV77YfEkEeqRfth943bvEA")]
    [Description(@"Identification of the previously sent meeting result dissemination message.")]
    [DataMember(Name="PrvsMtgRsltsDssmntnId")]
    [XmlElement(ElementName="PrvsMtgRsltsDssmntnId")]
    public IsoMax35Text? PreviousMeetingResultsDisseminationIdentification { get; init; }
    
    /// <summary>
    /// Set of elements to allow the unambiguous identification of a meeting.
    /// </summary>
    [IsoId("_sV77Y_EkEeqRfth943bvEA")]
    [Description(@"Set of elements to allow the unambiguous identification of a meeting.")]
    [DataMember(Name="MtgRef")]
    [XmlElement(ElementName="MtgRef")]
    [Required]
    public required MeetingReference10 MeetingReference { get; init; }
    
    /// <summary>
    /// Securities for which the meeting is organised.
    /// </summary>
    [IsoId("_sV77ZfEkEeqRfth943bvEA")]
    [Description(@"Securities for which the meeting is organised.")]
    [DataMember(Name="Scty")]
    [XmlElement(ElementName="Scty")]
    public required ValueList<SecurityPosition12> Security { get; init; } = []; // Min=1, Max=200
    
    /// <summary>
    /// Results per resolution.
    /// </summary>
    [IsoId("_sV77Z_EkEeqRfth943bvEA")]
    [Description(@"Results per resolution.")]
    [DataMember(Name="VoteRslt")]
    [XmlElement(ElementName="VoteRslt")]
    public required ValueList<Vote16> VoteResult { get; init; } = []; // Min=1, Max=1000
    
    /// <summary>
    /// Information about the participation to the voting process.
    /// </summary>
    [IsoId("_sV77afEkEeqRfth943bvEA")]
    [Description(@"Information about the participation to the voting process.")]
    [DataMember(Name="Prtcptn")]
    [XmlElement(ElementName="Prtcptn")]
    public Participation5? Participation { get; init; }
    
    /// <summary>
    /// Information on where additional information can be received.
    /// </summary>
    [IsoId("_sV77a_EkEeqRfth943bvEA")]
    [Description(@"Information on where additional information can be received.")]
    [DataMember(Name="AddtlInf")]
    [XmlElement(ElementName="AddtlInf")]
    public CommunicationAddress11? AdditionalInformation { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured fields and/or any other specific block.
    /// </summary>
    [IsoId("_sV77bfEkEeqRfth943bvEA")]
    [Description(@"Additional information that cannot be captured in the structured fields and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="MeetingResultDisseminationV07Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public MeetingResultDisseminationV07Document ToDocument()
    {
        return new MeetingResultDisseminationV07Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("MtgRsltDssmntn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MtgRsltsDssmntnTp", xmlNamespace );
        writer.WriteValue(MeetingResultsDisseminationType.ToString()); // Enum value
        writer.WriteEndElement();
        if (PreviousMeetingResultsDisseminationIdentification is IsoMax35Text PreviousMeetingResultsDisseminationIdentificationValue)
        {
            writer.WriteStartElement(null, "PrvsMtgRsltsDssmntnId", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax35Text(PreviousMeetingResultsDisseminationIdentificationValue)); // data type Max35Text System.String
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "MtgRef", xmlNamespace );
        MeetingReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Scty", xmlNamespace );
        Security.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "VoteRslt", xmlNamespace );
        VoteResult.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (Participation is Participation5 ParticipationValue)
        {
            writer.WriteStartElement(null, "Prtcptn", xmlNamespace );
            ParticipationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (AdditionalInformation is CommunicationAddress11 AdditionalInformationValue)
        {
            writer.WriteStartElement(null, "AddtlInf", xmlNamespace );
            AdditionalInformationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static MeetingResultDisseminationV07 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="MeetingResultDisseminationV07"/>.
/// </summary>
[Serializable]
public partial record MeetingResultDisseminationV07Document : IOuterDocument<MeetingResultDisseminationV07>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:seev.008.001.07";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="MeetingResultDisseminationV07"/> is required.
    /// </summary>
    [DataMember(Name=MeetingResultDisseminationV07.XmlTag)]
    public required MeetingResultDisseminationV07 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(MeetingResultDisseminationV07.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
