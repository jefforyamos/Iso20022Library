//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for SecuritiesBalanceTransparencyReportStatusAdviceV01.  ISO2002 ID# _yMxXsbvVEeOgOuxYpBEzKg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.semt.SecuritiesBalanceTransparencyReportStatusAdviceV01>;

namespace BeneficialStrategies.Iso20022.semt;


/// <summary>
/// This record is an implementation of the semt.042.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// SCOPE
/// 
/// An account owner, such as a custodian, central securities depository, international securities depository or transfer agent, sends the SecuritiesBalanceTransparencyReportStatusAdvice message in response to a SecuritiesBalanceTransparencyReport, to accept or reject the statement of holdings as sent in a SecuritiesBalanceTransparencyReport.
/// 
/// USAGE
/// The SecuritiesBalanceTransparencyReportStatusAdvice is used to accept (Accepted), partially accept (Accepted With Exception) or reject (Rejected) a previously received SecuritiesBalanceTransparencyReport.
/// </summary>
[Serializable]
[Description(@"SCOPE||An account owner, such as a custodian, central securities depository, international securities depository or transfer agent, sends the SecuritiesBalanceTransparencyReportStatusAdvice message in response to a SecuritiesBalanceTransparencyReport, to accept or reject the statement of holdings as sent in a SecuritiesBalanceTransparencyReport.||USAGE|The SecuritiesBalanceTransparencyReportStatusAdvice is used to accept (Accepted), partially accept (Accepted With Exception) or reject (Rejected) a previously received SecuritiesBalanceTransparencyReport.")]
public partial record SecuritiesBalanceTransparencyReportStatusAdviceV01 : IOuterRecord<SecuritiesBalanceTransparencyReportStatusAdviceV01,SecuritiesBalanceTransparencyReportStatusAdviceV01Document>
    ,IIsoXmlSerilizable<SecuritiesBalanceTransparencyReportStatusAdviceV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "semt.042.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "SctiesBalTrnsprncyRptStsAdvc";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => SecuritiesBalanceTransparencyReportStatusAdviceV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Unique and unambiguous identification of the status advice message.
    /// </summary>
    [IsoId("_mBk7IU1qEeSvz4A_x0ui8g")]
    [Description(@"Unique and unambiguous identification of the status advice message.")]
    [DataMember(Name="MsgId")]
    [XmlElement(ElementName="MsgId")]
    [Required]
    public required MessageIdentification1 MessageIdentification { get; init; }
    
    /// <summary>
    /// Identification of the party that is the sender of the status advice message.
    /// </summary>
    [IsoId("_pGGcEk1qEeSvz4A_x0ui8g")]
    [Description(@"Identification of the party that is the sender of the status advice message.")]
    [DataMember(Name="SndrId")]
    [XmlElement(ElementName="SndrId")]
    [Required]
    public required PartyIdentification100 SenderIdentification { get; init; }
    
    /// <summary>
    /// Identification of the party that is the receiver of the status advice message.
    /// </summary>
    [IsoId("_pGGcE01qEeSvz4A_x0ui8g")]
    [Description(@"Identification of the party that is the receiver of the status advice message.")]
    [DataMember(Name="RcvrId")]
    [XmlElement(ElementName="RcvrId")]
    public PartyIdentification100? ReceiverIdentification { get; init; }
    
    /// <summary>
    /// Reference of the statement for which the status advice has been issued.
    /// </summary>
    [IsoId("_x8GCwk4iEeSGlfauTkCKIA")]
    [Description(@"Reference of the statement for which the status advice has been issued.")]
    [DataMember(Name="RltdStmt")]
    [XmlElement(ElementName="RltdStmt")]
    [Required]
    public required StatementReference1 RelatedStatement { get; init; }
    
    /// <summary>
    /// Status of the referenced statement.
    /// </summary>
    [IsoId("_SOA1Ir3PEeO2FLWuu_JIqg")]
    [Description(@"Status of the referenced statement.")]
    [DataMember(Name="Sts")]
    [XmlElement(ElementName="Sts")]
    [Required]
    public required ReportItemStatus1Choice_ Status { get; init; }
    
    /// <summary>
    /// Number of items for each identical transaction status.
    /// </summary>
    [IsoId("_2EcUQUioEeSlHoYg_EudVQ")]
    [Description(@"Number of items for each identical transaction status.")]
    [DataMember(Name="NbOfItmsPerSts")]
    [XmlElement(ElementName="NbOfItmsPerSts")]
    public required ValueList<NumberOfItemsPerStatus1> NumberOfItemsPerStatus { get; init; } = []; // Min=0, Max=2
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_SOA1I73PEeO2FLWuu_JIqg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="SecuritiesBalanceTransparencyReportStatusAdviceV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public SecuritiesBalanceTransparencyReportStatusAdviceV01Document ToDocument()
    {
        return new SecuritiesBalanceTransparencyReportStatusAdviceV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("SctiesBalTrnsprncyRptStsAdvc");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "MsgId", xmlNamespace );
        MessageIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SndrId", xmlNamespace );
        SenderIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ReceiverIdentification is PartyIdentification100 ReceiverIdentificationValue)
        {
            writer.WriteStartElement(null, "RcvrId", xmlNamespace );
            ReceiverIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "RltdStmt", xmlNamespace );
        RelatedStatement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sts", xmlNamespace );
        Status.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "NbOfItmsPerSts", xmlNamespace );
        NumberOfItemsPerStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SecuritiesBalanceTransparencyReportStatusAdviceV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="SecuritiesBalanceTransparencyReportStatusAdviceV01"/>.
/// </summary>
[Serializable]
public partial record SecuritiesBalanceTransparencyReportStatusAdviceV01Document : IOuterDocument<SecuritiesBalanceTransparencyReportStatusAdviceV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:semt.042.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="SecuritiesBalanceTransparencyReportStatusAdviceV01"/> is required.
    /// </summary>
    [DataMember(Name=SecuritiesBalanceTransparencyReportStatusAdviceV01.XmlTag)]
    public required SecuritiesBalanceTransparencyReportStatusAdviceV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(SecuritiesBalanceTransparencyReportStatusAdviceV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
