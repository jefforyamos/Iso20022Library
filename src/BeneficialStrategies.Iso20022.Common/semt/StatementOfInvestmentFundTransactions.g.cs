//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for StatementOfInvestmentFundTransactions.  ISO2002 ID# _MXrQa9FSEd-BzquC8wXy7w_1518243761.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.semt.StatementOfInvestmentFundTransactions>;

namespace BeneficialStrategies.Iso20022.semt;


/// <summary>
/// This record is an implementation of the semt.006.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The StatementOfInvestmentFundTransactions is sent by an account servicer to the account owner or the account owner's designated agent. The account servicer may be a fund administrator or fund intermediary, trustee or registrar.
/// This message provides the details of increases and decreases of holdings which occurred during a specified period.
/// This message can also be used for information purposes, eg, tax information.
/// Usage
/// The StatementOfInvestmentFundTransactions message can be sent:
/// - At a frequency agreed bi-laterally between the Sender and the Receiver and/or
/// - As a response to a request for statement sent by the account owner.
/// The StatementOfInvestmentFundTransactions message can only be used to list the transactions of a single (master) account. However, it is possible to break down these transactions into one or several sub-accounts. Therefore, the message can be used to either specify transactions at
/// - the main account level, or
/// - the sub-account level.
/// This message must not be used in place of confirmation messages.
/// Since a SWIFT message as sent is restricted to the maximum input message length, several messages may be needed to accommodate all the information.
/// </summary>
[Serializable]
[Description(@"Scope|The StatementOfInvestmentFundTransactions is sent by an account servicer to the account owner or the account owner's designated agent. The account servicer may be a fund administrator or fund intermediary, trustee or registrar.|This message provides the details of increases and decreases of holdings which occurred during a specified period.|This message can also be used for information purposes, eg, tax information.|Usage|The StatementOfInvestmentFundTransactions message can be sent:|- At a frequency agreed bi-laterally between the Sender and the Receiver and/or|- As a response to a request for statement sent by the account owner.|The StatementOfInvestmentFundTransactions message can only be used to list the transactions of a single (master) account. However, it is possible to break down these transactions into one or several sub-accounts. Therefore, the message can be used to either specify transactions at|- the main account level, or|- the sub-account level.|This message must not be used in place of confirmation messages.|Since a SWIFT message as sent is restricted to the maximum input message length, several messages may be needed to accommodate all the information.")]
public partial record StatementOfInvestmentFundTransactions : IOuterRecord<StatementOfInvestmentFundTransactions,StatementOfInvestmentFundTransactionsDocument>
    ,IIsoXmlSerilizable<StatementOfInvestmentFundTransactions>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "semt.006.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "semt.006.001.01";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => StatementOfInvestmentFundTransactionsDocument.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Reference to a linked message that was previously sent.
    /// </summary>
    [IsoId("_MXrQbNFSEd-BzquC8wXy7w_1597856875")]
    [Description(@"Reference to a linked message that was previously sent.")]
    [DataMember(Name="PrvsRef")]
    [XmlElement(ElementName="PrvsRef")]
    public AdditionalReference2? PreviousReference { get; init; }
    
    /// <summary>
    /// Reference to a linked message that was previously received.
    /// </summary>
    [IsoId("_MXrQbdFSEd-BzquC8wXy7w_1600624521")]
    [Description(@"Reference to a linked message that was previously received.")]
    [DataMember(Name="RltdRef")]
    [XmlElement(ElementName="RltdRef")]
    public AdditionalReference2? RelatedReference { get; init; }
    
    /// <summary>
    /// Pagination of the message.
    /// </summary>
    [IsoId("_MX0aUNFSEd-BzquC8wXy7w_1926109415")]
    [Description(@"Pagination of the message.")]
    [DataMember(Name="MsgPgntn")]
    [XmlElement(ElementName="MsgPgntn")]
    [Required]
    public required Pagination MessagePagination { get; init; }
    
    /// <summary>
    /// General information related to the investment fund statement of transactions.
    /// </summary>
    [IsoId("_MX0aUdFSEd-BzquC8wXy7w_-406122479")]
    [Description(@"General information related to the investment fund statement of transactions.")]
    [DataMember(Name="StmtGnlDtls")]
    [XmlElement(ElementName="StmtGnlDtls")]
    [Required]
    public required Statement5 StatementGeneralDetails { get; init; }
    
    /// <summary>
    /// Information related to an investment account.
    /// </summary>
    [IsoId("_MX0aUtFSEd-BzquC8wXy7w_-1794049021")]
    [Description(@"Information related to an investment account.")]
    [DataMember(Name="InvstmtAcctDtls")]
    [XmlElement(ElementName="InvstmtAcctDtls")]
    [Required]
    public required InvestmentAccount12 InvestmentAccountDetails { get; init; }
    
    /// <summary>
    /// Creation/cancellation of investment units on the books of the fund or its designated agent, as a result of executing an investment fund order.
    /// </summary>
    [IsoId("_MX0aU9FSEd-BzquC8wXy7w_-591358864")]
    [Description(@"Creation/cancellation of investment units on the books of the fund or its designated agent, as a result of executing an investment fund order.")]
    [DataMember(Name="TxOnAcct")]
    [XmlElement(ElementName="TxOnAcct")]
    public InvestmentFundTransactionsByFund1? TransactionOnAccount { get; init; }
    
    /// <summary>
    /// The sub-account of the safekeeping or investment account.
    /// </summary>
    [IsoId("_MX0aVNFSEd-BzquC8wXy7w_-645201789")]
    [Description(@"The sub-account of the safekeeping or investment account.")]
    [DataMember(Name="SubAcctDtls")]
    [XmlElement(ElementName="SubAcctDtls")]
    public SubAccountIdentification4? SubAccountDetails { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_MX0aVdFSEd-BzquC8wXy7w_364441815")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="Xtnsn")]
    [XmlElement(ElementName="Xtnsn")]
    public Extension1? Extension { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="StatementOfInvestmentFundTransactionsDocument"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public StatementOfInvestmentFundTransactionsDocument ToDocument()
    {
        return new StatementOfInvestmentFundTransactionsDocument { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("semt.006.001.01");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (PreviousReference is AdditionalReference2 PreviousReferenceValue)
        {
            writer.WriteStartElement(null, "PrvsRef", xmlNamespace );
            PreviousReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RelatedReference is AdditionalReference2 RelatedReferenceValue)
        {
            writer.WriteStartElement(null, "RltdRef", xmlNamespace );
            RelatedReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "MsgPgntn", xmlNamespace );
        MessagePagination.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "StmtGnlDtls", xmlNamespace );
        StatementGeneralDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "InvstmtAcctDtls", xmlNamespace );
        InvestmentAccountDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TransactionOnAccount is InvestmentFundTransactionsByFund1 TransactionOnAccountValue)
        {
            writer.WriteStartElement(null, "TxOnAcct", xmlNamespace );
            TransactionOnAccountValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SubAccountDetails is SubAccountIdentification4 SubAccountDetailsValue)
        {
            writer.WriteStartElement(null, "SubAcctDtls", xmlNamespace );
            SubAccountDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Extension is Extension1 ExtensionValue)
        {
            writer.WriteStartElement(null, "Xtnsn", xmlNamespace );
            ExtensionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static StatementOfInvestmentFundTransactions Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="StatementOfInvestmentFundTransactions"/>.
/// </summary>
[Serializable]
public partial record StatementOfInvestmentFundTransactionsDocument : IOuterDocument<StatementOfInvestmentFundTransactions>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:semt.006.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="StatementOfInvestmentFundTransactions"/> is required.
    /// </summary>
    [DataMember(Name=StatementOfInvestmentFundTransactions.XmlTag)]
    public required StatementOfInvestmentFundTransactions Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(StatementOfInvestmentFundTransactions.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
