//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for OrderInstructionStatusReportV02.  ISO2002 ID# _jH1s-NE7Ed-BzquC8wXy7w_1853868190.
//
namespace BeneficialStrategies.Iso20022.setr;

/// <summary>
/// Scope
/// The OrderInstructionStatusReport is sent by an executing party, eg, a transfer agent, to an instructing party, eg, an investment manager or its authorised representative. There may be one or more intermediary parties between the executing party and the instructing party. The intermediary party is, for example, an intermediary or a concentrator.
/// This message reports the status of an order from the time the executing party receives the order until the order is executed.
/// Usage
/// The OrderInstructionStatusReport message is sent by an executing party to the instructing party to report on the status of a subscription, redemption or a switch order.
/// The message can be used to report one of the following:
/// - a received status, or
/// - an accepted status, or
/// - a sent to next party status, or
/// - an already executed status, or
/// - a cancelled status, or
/// - a conditionally accepted status, or
/// - a rejected status, or
/// - a suspended status, or
/// - an in-repair status (at the individual order level only), or
/// - repaired conditions (at the individual order level only).
/// For subscription and redemption orders, the OrderInstructionStatusReport message covers both bulk and multiple categories of orders, and this message may provide the status either at the bulk or at the individual level.
/// For a switch order, this message provides the status of the whole order, ie, it is not possible to accept one leg and to reject the other leg, the entire switch order has to be rejected. In order to identify which leg within the switch is causing a problem, the redemption or subscription leg identification is used.
/// </summary>
[Serializable]
[DataContract(Name = XmlTag)]
[XmlType(TypeName = XmlTag)]
[Description(@"Scope|The OrderInstructionStatusReport is sent by an executing party, eg, a transfer agent, to an instructing party, eg, an investment manager or its authorised representative. There may be one or more intermediary parties between the executing party and the instructing party. The intermediary party is, for example, an intermediary or a concentrator.|This message reports the status of an order from the time the executing party receives the order until the order is executed.|Usage|The OrderInstructionStatusReport message is sent by an executing party to the instructing party to report on the status of a subscription, redemption or a switch order.|The message can be used to report one of the following:|- a received status, or|- an accepted status, or|- a sent to next party status, or|- an already executed status, or|- a cancelled status, or|- a conditionally accepted status, or|- a rejected status, or|- a suspended status, or|- an in-repair status (at the individual order level only), or|- repaired conditions (at the individual order level only).|For subscription and redemption orders, the OrderInstructionStatusReport message covers both bulk and multiple categories of orders, and this message may provide the status either at the bulk or at the individual level.|For a switch order, this message provides the status of the whole order, ie, it is not possible to accept one leg and to reject the other leg, the entire switch order has to be rejected. In order to identify which leg within the switch is causing a problem, the redemption or subscription leg identification is used.")]
public partial record OrderInstructionStatusReportV02 : IOuterRecord
{
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "setr.016.001.02";
    
    /* ------------------------------------------ Underlying data types not ready yet
    /// <summary>
    /// Reference to a linked message sent in a proprietary way or reference of a system.
    /// </summary>
    [IsoId("_jH1s-dE7Ed-BzquC8wXy7w_-220954983")]
    [Description(@"Reference to a linked message sent in a proprietary way or reference of a system.")]
    [DataMember(Name="OthrRef")]
    [XmlElement(ElementName="OthrRef")]
    public required IReadonlyCollection<AdditionalReference3> OtherReference { get; init; } // Min=1, Max=2
    
    /// <summary>
    /// Reference to a linked message that was previously received.
    /// </summary>
    [IsoId("_jH1s-tE7Ed-BzquC8wXy7w_81957477")]
    [Description(@"Reference to a linked message that was previously received.")]
    [DataMember(Name="RltdRef")]
    [XmlElement(ElementName="RltdRef")]
    public required IReadonlyCollection<AdditionalReference3> RelatedReference { get; init; } // Min=1, Max=2
    
    /// <summary>
    /// Reference to a multiple order or bulk order that represents the common reference of several individual orders.
    /// </summary>
    [IsoId("_jH1s-9E7Ed-BzquC8wXy7w_-293915217")]
    [Description(@"Reference to a multiple order or bulk order that represents the common reference of several individual orders.")]
    [DataMember(Name="MstrRef")]
    [XmlElement(ElementName="MstrRef")]
    public AdditionalReference3? MasterReference { get; init; }
    
    /// <summary>
    /// Status report details of a bulk or multiple or switch order that was previously received.
    /// </summary>
    [IsoId("_jH_d8NE7Ed-BzquC8wXy7w_178929891")]
    [Description(@"Status report details of a bulk or multiple or switch order that was previously received.")]
    [DataMember(Name="OrdrDtlsRpt")]
    [XmlElement(ElementName="OrdrDtlsRpt")]
    [Required]
    public required OrderStatusAndReason3 OrderDetailsReport { get; init; }
    
    /// <summary>
    /// Status report details of the individual orders of a bulk or multiple order that was previously received.
    /// </summary>
    [IsoId("_jH_d8dE7Ed-BzquC8wXy7w_289696390")]
    [Description(@"Status report details of the individual orders of a bulk or multiple order that was previously received.")]
    [DataMember(Name="IndvOrdrDtlsRpt")]
    [XmlElement(ElementName="IndvOrdrDtlsRpt")]
    [Required]
    public required IndividualOrderStatusAndReason1 IndividualOrderDetailsReport { get; init; }
    
    */
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="OrderInstructionStatusReportV02Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public OrderInstructionStatusReportV02Document ToDocument()
    {
        return new OrderInstructionStatusReportV02Document { Message = this };
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="OrderInstructionStatusReportV02"/>.
/// </summary>
[Serializable]
[DataContract(Name = DocumentElementName, Namespace = DocumentNamespace )]
[XmlRoot(ElementName = DocumentElementName, Namespace = DocumentNamespace )]
public partial record OrderInstructionStatusReportV02Document : IOuterDocument<OrderInstructionStatusReportV02>
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:setr.016.001.02";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="OrderInstructionStatusReportV02"/> is required.
    /// </summary>
    public required OrderInstructionStatusReportV02 Message { get; init; }
}
