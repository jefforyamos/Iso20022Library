//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for SecuritiesTradeConfirmationStatusAdviceV01.  ISO2002 ID# _R0gNheQXEeCGktPI9k4Dlw_2456602.
//
namespace BeneficialStrategies.Iso20022.setr;

/// <summary>
/// Scope
/// This message is sent from Central Matching Utility (CMU) to an executing party or an instructing party to advise the status of the SecuritiesTradeConfirmation message previously sent by the party. The status may be a processing, pending processing, affirmed or disaffirmed, cancel or replacement by an instructing party, a custodian or an affirming party, internal matching, and/or matching status.
/// The instructing party is typically the investment manager or an intermediary system/vendor communicating on behalf of the investment manager or of other categories of investors. The executing party is typically the broker/dealer or an intermediary system/vendor communicating on behalf of the broker/dealer.
/// The ISO 20022 Business Application Header must be used
/// Usage
/// Initiator: In central matching the Initiator is the Central Matching Utility.
/// Respondent: no response is needed by the recipient of the message.
/// </summary>
[Serializable]
[DataContract(Name = XmlTag)]
[XmlType(TypeName = XmlTag)]
[Description(@"Scope|This message is sent from Central Matching Utility (CMU) to an executing party or an instructing party to advise the status of the SecuritiesTradeConfirmation message previously sent by the party. The status may be a processing, pending processing, affirmed or disaffirmed, cancel or replacement by an instructing party, a custodian or an affirming party, internal matching, and/or matching status.|The instructing party is typically the investment manager or an intermediary system/vendor communicating on behalf of the investment manager or of other categories of investors. The executing party is typically the broker/dealer or an intermediary system/vendor communicating on behalf of the broker/dealer.|The ISO 20022 Business Application Header must be used|Usage|Initiator: In central matching the Initiator is the Central Matching Utility.|Respondent: no response is needed by the recipient of the message.")]
public partial record SecuritiesTradeConfirmationStatusAdviceV01 : IOuterRecord
{
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "SctiesTradConfStsAdvc";
    
    /* ------------------------------------------ Underlying data types not ready yet
    /// <summary>
    /// Information that unambiguously identifies an SecuritiesTradeConfirmationStatusAdvice message as known by the account owner (or the instructing party acting on its behalf).
    /// </summary>
    [IsoId("_R0gNhuQXEeCGktPI9k4Dlw_1519100634")]
    [Description(@"Information that unambiguously identifies an SecuritiesTradeConfirmationStatusAdvice message as known by the account owner (or the instructing party acting on its behalf).")]
    [DataMember(Name="Id")]
    [XmlElement(ElementName="Id")]
    [Required]
    public required SomeIdentificationRecord Identification { get; init; }
    
    /// <summary>
    /// Link to another transaction that must be processed after, before or at the same time.
    /// </summary>
    [IsoId("_R0gNh-QXEeCGktPI9k4Dlw_1063314509")]
    [Description(@"Link to another transaction that must be processed after, before or at the same time.")]
    [DataMember(Name="Refs")]
    [XmlElement(ElementName="Refs")]
    [Required]
    public required SomeReferencesRecord References { get; init; }
    
    /// <summary>
    /// Provides details on the affitrmation status of a trade.
    /// </summary>
    [IsoId("_R0p-gOQXEeCGktPI9k4Dlw_1323761257")]
    [Description(@"Provides details on the affitrmation status of a trade.")]
    [DataMember(Name="AffirmSts")]
    [XmlElement(ElementName="AffirmSts")]
    public SomeAffirmationStatusRecord? AffirmationStatus { get; init; }
    
    /// <summary>
    /// Provides the processing status of a trade.
    /// </summary>
    [IsoId("_R0p-geQXEeCGktPI9k4Dlw_-1888119231")]
    [Description(@"Provides the processing status of a trade.")]
    [DataMember(Name="PrcgSts")]
    [XmlElement(ElementName="PrcgSts")]
    public SomeProcessingStatusRecord? ProcessingStatus { get; init; }
    
    /// <summary>
    /// Provides details on the matching status of a trade.
    /// </summary>
    [IsoId("_R0p-guQXEeCGktPI9k4Dlw_336194724")]
    [Description(@"Provides details on the matching status of a trade.")]
    [DataMember(Name="MtchgSts")]
    [XmlElement(ElementName="MtchgSts")]
    public SomeMatchingStatusRecord? MatchingStatus { get; init; }
    
    /// <summary>
    /// Provides the replacement processing status of a trade.
    /// </summary>
    [IsoId("_R0p-g-QXEeCGktPI9k4Dlw_-1103109076")]
    [Description(@"Provides the replacement processing status of a trade.")]
    [DataMember(Name="RplcmntPrcgSts")]
    [XmlElement(ElementName="RplcmntPrcgSts")]
    public SomeReplacementProcessingStatusRecord? ReplacementProcessingStatus { get; init; }
    
    /// <summary>
    /// Provides details on the cancellation status of a trade.
    /// </summary>
    [IsoId("_R0p-hOQXEeCGktPI9k4Dlw_-1182200619")]
    [Description(@"Provides details on the cancellation status of a trade.")]
    [DataMember(Name="CxlPrcgSts")]
    [XmlElement(ElementName="CxlPrcgSts")]
    public SomeCancellationProcessingStatusRecord? CancellationProcessingStatus { get; init; }
    
    /// <summary>
    /// Details of the trading party.
    /// </summary>
    [IsoId("_R0p-heQXEeCGktPI9k4Dlw_1766193623")]
    [Description(@"Details of the trading party.")]
    [DataMember(Name="PtyTradgDtls")]
    [XmlElement(ElementName="PtyTradgDtls")]
    public SomePartyTradingDetailsRecord? PartyTradingDetails { get; init; }
    
    /// <summary>
    /// Details of the trading counterparty.
    /// </summary>
    [IsoId("_R0zvgOQXEeCGktPI9k4Dlw_1093600034")]
    [Description(@"Details of the trading counterparty.")]
    [DataMember(Name="CtrPtyTradgDtls")]
    [XmlElement(ElementName="CtrPtyTradgDtls")]
    public SomeCounterpartyTradingDetailsRecord? CounterpartyTradingDetails { get; init; }
    
    /// <summary>
    /// Parties used for acting parties that applies either to the whole message or to individual sides.
    /// </summary>
    [IsoId("_R0zvgeQXEeCGktPI9k4Dlw_660966103")]
    [Description(@"Parties used for acting parties that applies either to the whole message or to individual sides.")]
    [DataMember(Name="ConfPties")]
    [XmlElement(ElementName="ConfPties")]
    public SomeConfirmationPartiesRecord? ConfirmationParties { get; init; }
    
    /// <summary>
    /// Identifies the chain of delivering settlement parties.
    /// </summary>
    [IsoId("_R0zvguQXEeCGktPI9k4Dlw_-390382216")]
    [Description(@"Identifies the chain of delivering settlement parties.")]
    [DataMember(Name="DlvrgSttlmPties")]
    [XmlElement(ElementName="DlvrgSttlmPties")]
    public SomeDeliveringSettlementPartiesRecord? DeliveringSettlementParties { get; init; }
    
    /// <summary>
    /// Identifies the chain of receiving settlement parties.
    /// </summary>
    [IsoId("_R0zvg-QXEeCGktPI9k4Dlw_1254885219")]
    [Description(@"Identifies the chain of receiving settlement parties.")]
    [DataMember(Name="RcvgSttlmPties")]
    [XmlElement(ElementName="RcvgSttlmPties")]
    public SomeReceivingSettlementPartiesRecord? ReceivingSettlementParties { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_R0zvhOQXEeCGktPI9k4Dlw_1454821028")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SomeSupplementaryDataRecord? SupplementaryData { get; init; }
    
    */
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="SecuritiesTradeConfirmationStatusAdviceV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public SecuritiesTradeConfirmationStatusAdviceV01Document ToDocument()
    {
        return new SecuritiesTradeConfirmationStatusAdviceV01Document { Message = this };
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="SecuritiesTradeConfirmationStatusAdviceV01"/>.
/// </summary>
[Serializable]
[DataContract(Name = DocumentElementName, Namespace = DocumentNamespace )]
[XmlRoot(ElementName = DocumentElementName, Namespace = DocumentNamespace )]
public partial record SecuritiesTradeConfirmationStatusAdviceV01Document : IOuterDocument<SecuritiesTradeConfirmationStatusAdviceV01>
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:setr.044.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="SecuritiesTradeConfirmationStatusAdviceV01"/> is required.
    /// </summary>
    public required SecuritiesTradeConfirmationStatusAdviceV01 Message { get; init; }
}
