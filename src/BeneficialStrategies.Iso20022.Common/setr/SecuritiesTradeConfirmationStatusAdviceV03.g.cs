//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for SecuritiesTradeConfirmationStatusAdviceV03.  ISO2002 ID# _upGFgANmEe2P7e2qGFFOGg.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.setr.SecuritiesTradeConfirmationStatusAdviceV03>;

namespace BeneficialStrategies.Iso20022.setr;


/// <summary>
/// This record is an implementation of the setr.044.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// This message is sent from Central Matching Utility (CMU) to an executing party or an instructing party to advise the status of the SecuritiesTradeConfirmation message previously sent by the party. The status may be a processing, pending processing, affirmed or disaffirmed, cancel or replacement by an instructing party, a custodian or an affirming party, internal matching, and/or matching status.
/// The instructing party is typically the investment manager or an intermediary system/vendor communicating on behalf of the investment manager or of other categories of investors. The executing party is typically the broker/dealer or an intermediary system/vendor communicating on behalf of the broker/dealer.
/// The ISO 20022 Business Application Header must be used
/// Usage
/// Initiator: In central matching the Initiator is the Central Matching Utility.
/// Respondent: no response is needed by the recipient of the message.
/// </summary>
[Serializable]
[Description(@"Scope|This message is sent from Central Matching Utility (CMU) to an executing party or an instructing party to advise the status of the SecuritiesTradeConfirmation message previously sent by the party. The status may be a processing, pending processing, affirmed or disaffirmed, cancel or replacement by an instructing party, a custodian or an affirming party, internal matching, and/or matching status.|The instructing party is typically the investment manager or an intermediary system/vendor communicating on behalf of the investment manager or of other categories of investors. The executing party is typically the broker/dealer or an intermediary system/vendor communicating on behalf of the broker/dealer.|The ISO 20022 Business Application Header must be used|Usage|Initiator: In central matching the Initiator is the Central Matching Utility.|Respondent: no response is needed by the recipient of the message.")]
public partial record SecuritiesTradeConfirmationStatusAdviceV03 : IOuterRecord<SecuritiesTradeConfirmationStatusAdviceV03,SecuritiesTradeConfirmationStatusAdviceV03Document>
    ,IIsoXmlSerilizable<SecuritiesTradeConfirmationStatusAdviceV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "setr.044.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "SctiesTradConfStsAdvc";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => SecuritiesTradeConfirmationStatusAdviceV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Information that unambiguously identifies an SecuritiesTradeConfirmationStatusAdvice message as known by the account owner (or the instructing party acting on its behalf).
    /// </summary>
    [IsoId("_upGFigNmEe2P7e2qGFFOGg")]
    [Description(@"Information that unambiguously identifies an SecuritiesTradeConfirmationStatusAdvice message as known by the account owner (or the instructing party acting on its behalf).")]
    [DataMember(Name="Id")]
    [XmlElement(ElementName="Id")]
    [Required]
    public required TransactiontIdentification4 Identification { get; init; }
    
    /// <summary>
    /// Link to another transaction that must be processed after, before or at the same time.
    /// </summary>
    [IsoId("_upGFjANmEe2P7e2qGFFOGg")]
    [Description(@"Link to another transaction that must be processed after, before or at the same time.")]
    [DataMember(Name="Refs")]
    [XmlElement(ElementName="Refs")]
    [Required]
    public required Linkages72 References { get; init; }
    
    /// <summary>
    /// Provides details on the affitrmation status of a trade.
    /// </summary>
    [IsoId("_upGFjgNmEe2P7e2qGFFOGg")]
    [Description(@"Provides details on the affitrmation status of a trade.")]
    [DataMember(Name="AffirmSts")]
    [XmlElement(ElementName="AffirmSts")]
    public AffirmationStatus11Choice_? AffirmationStatus { get; init; }
    
    /// <summary>
    /// Provides the processing status of a trade.
    /// </summary>
    [IsoId("_upGFkANmEe2P7e2qGFFOGg")]
    [Description(@"Provides the processing status of a trade.")]
    [DataMember(Name="PrcgSts")]
    [XmlElement(ElementName="PrcgSts")]
    public ProcessingStatus98Choice_? ProcessingStatus { get; init; }
    
    /// <summary>
    /// Provides details on the matching status of a trade.
    /// </summary>
    [IsoId("_upGFkgNmEe2P7e2qGFFOGg")]
    [Description(@"Provides details on the matching status of a trade.")]
    [DataMember(Name="MtchgSts")]
    [XmlElement(ElementName="MtchgSts")]
    public MatchingStatus35Choice_? MatchingStatus { get; init; }
    
    /// <summary>
    /// Provides the replacement processing status of a trade.
    /// </summary>
    [IsoId("_upGFlANmEe2P7e2qGFFOGg")]
    [Description(@"Provides the replacement processing status of a trade.")]
    [DataMember(Name="RplcmntPrcgSts")]
    [XmlElement(ElementName="RplcmntPrcgSts")]
    public ReplacementProcessingStatus10Choice_? ReplacementProcessingStatus { get; init; }
    
    /// <summary>
    /// Provides details on the cancellation status of a trade.
    /// </summary>
    [IsoId("_upGFlgNmEe2P7e2qGFFOGg")]
    [Description(@"Provides details on the cancellation status of a trade.")]
    [DataMember(Name="CxlPrcgSts")]
    [XmlElement(ElementName="CxlPrcgSts")]
    public CancellationProcessingStatus10Choice_? CancellationProcessingStatus { get; init; }
    
    /// <summary>
    /// Details of the trading party.
    /// </summary>
    [IsoId("_upGFmANmEe2P7e2qGFFOGg")]
    [Description(@"Details of the trading party.")]
    [DataMember(Name="PtyTradgDtls")]
    [XmlElement(ElementName="PtyTradgDtls")]
    public Order23? PartyTradingDetails { get; init; }
    
    /// <summary>
    /// Details of the trading counterparty.
    /// </summary>
    [IsoId("_upGFmgNmEe2P7e2qGFFOGg")]
    [Description(@"Details of the trading counterparty.")]
    [DataMember(Name="CtrPtyTradgDtls")]
    [XmlElement(ElementName="CtrPtyTradgDtls")]
    public Order23? CounterpartyTradingDetails { get; init; }
    
    /// <summary>
    /// Parties used for acting parties that applies either to the whole message or to individual sides.
    /// </summary>
    [IsoId("_upGFnANmEe2P7e2qGFFOGg")]
    [Description(@"Parties used for acting parties that applies either to the whole message or to individual sides.")]
    [DataMember(Name="ConfPties")]
    [XmlElement(ElementName="ConfPties")]
    public ConfirmationParties9? ConfirmationParties { get; init; }
    
    /// <summary>
    /// Identifies the chain of delivering settlement parties.
    /// </summary>
    [IsoId("_upGFngNmEe2P7e2qGFFOGg")]
    [Description(@"Identifies the chain of delivering settlement parties.")]
    [DataMember(Name="DlvrgSttlmPties")]
    [XmlElement(ElementName="DlvrgSttlmPties")]
    public SettlementParties121? DeliveringSettlementParties { get; init; }
    
    /// <summary>
    /// Identifies the chain of receiving settlement parties.
    /// </summary>
    [IsoId("_upGFoANmEe2P7e2qGFFOGg")]
    [Description(@"Identifies the chain of receiving settlement parties.")]
    [DataMember(Name="RcvgSttlmPties")]
    [XmlElement(ElementName="RcvgSttlmPties")]
    public SettlementParties121? ReceivingSettlementParties { get; init; }
    
    /// <summary>
    /// Additional information that cannot be captured in the structured elements and/or any other specific block.
    /// </summary>
    [IsoId("_upGFogNmEe2P7e2qGFFOGg")]
    [Description(@"Additional information that cannot be captured in the structured elements and/or any other specific block.")]
    [DataMember(Name="SplmtryData")]
    [XmlElement(ElementName="SplmtryData")]
    public SupplementaryData1? SupplementaryData { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="SecuritiesTradeConfirmationStatusAdviceV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public SecuritiesTradeConfirmationStatusAdviceV03Document ToDocument()
    {
        return new SecuritiesTradeConfirmationStatusAdviceV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("SctiesTradConfStsAdvc");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Id", xmlNamespace );
        Identification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Refs", xmlNamespace );
        References.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AffirmationStatus is AffirmationStatus11Choice_ AffirmationStatusValue)
        {
            writer.WriteStartElement(null, "AffirmSts", xmlNamespace );
            AffirmationStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ProcessingStatus is ProcessingStatus98Choice_ ProcessingStatusValue)
        {
            writer.WriteStartElement(null, "PrcgSts", xmlNamespace );
            ProcessingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (MatchingStatus is MatchingStatus35Choice_ MatchingStatusValue)
        {
            writer.WriteStartElement(null, "MtchgSts", xmlNamespace );
            MatchingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReplacementProcessingStatus is ReplacementProcessingStatus10Choice_ ReplacementProcessingStatusValue)
        {
            writer.WriteStartElement(null, "RplcmntPrcgSts", xmlNamespace );
            ReplacementProcessingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CancellationProcessingStatus is CancellationProcessingStatus10Choice_ CancellationProcessingStatusValue)
        {
            writer.WriteStartElement(null, "CxlPrcgSts", xmlNamespace );
            CancellationProcessingStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (PartyTradingDetails is Order23 PartyTradingDetailsValue)
        {
            writer.WriteStartElement(null, "PtyTradgDtls", xmlNamespace );
            PartyTradingDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartyTradingDetails is Order23 CounterpartyTradingDetailsValue)
        {
            writer.WriteStartElement(null, "CtrPtyTradgDtls", xmlNamespace );
            CounterpartyTradingDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ConfirmationParties is ConfirmationParties9 ConfirmationPartiesValue)
        {
            writer.WriteStartElement(null, "ConfPties", xmlNamespace );
            ConfirmationPartiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DeliveringSettlementParties is SettlementParties121 DeliveringSettlementPartiesValue)
        {
            writer.WriteStartElement(null, "DlvrgSttlmPties", xmlNamespace );
            DeliveringSettlementPartiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (ReceivingSettlementParties is SettlementParties121 ReceivingSettlementPartiesValue)
        {
            writer.WriteStartElement(null, "RcvgSttlmPties", xmlNamespace );
            ReceivingSettlementPartiesValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SupplementaryData is SupplementaryData1 SupplementaryDataValue)
        {
            writer.WriteStartElement(null, "SplmtryData", xmlNamespace );
            SupplementaryDataValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static SecuritiesTradeConfirmationStatusAdviceV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="SecuritiesTradeConfirmationStatusAdviceV03"/>.
/// </summary>
[Serializable]
public partial record SecuritiesTradeConfirmationStatusAdviceV03Document : IOuterDocument<SecuritiesTradeConfirmationStatusAdviceV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:setr.044.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="SecuritiesTradeConfirmationStatusAdviceV03"/> is required.
    /// </summary>
    [DataMember(Name=SecuritiesTradeConfirmationStatusAdviceV03.XmlTag)]
    public required SecuritiesTradeConfirmationStatusAdviceV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(SecuritiesTradeConfirmationStatusAdviceV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
