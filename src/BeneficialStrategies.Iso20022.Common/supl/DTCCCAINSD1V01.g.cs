//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for DTCCCAINSD1V01.  ISO2002 ID# _1Mz5EDL3EeKU9IrkkToqcw_1438480682.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.supl.DTCCCAINSD1V01>;

namespace BeneficialStrategies.Iso20022.supl;


/// <summary>
/// This record is an implementation of the supl.008.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The DTCCCAINSD1 message extends ISO corporate action instruction message with DTCC corporate action elements not covered in the standard message.
/// </summary>
[Serializable]
[Description(@"The DTCCCAINSD1 message extends ISO corporate action instruction message with DTCC corporate action elements not covered in the standard message.")]
public partial record DTCCCAINSD1V01 : IOuterRecord<DTCCCAINSD1V01,DTCCCAINSD1V01Document>
    ,IIsoXmlSerilizable<DTCCCAINSD1V01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "supl.008.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "DTCCCAINSD1";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => DTCCCAINSD1V01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// DTC (The Depository Trust Corporation) Optional Dividend service election.
    /// </summary>
    [IsoId("_1Mz5ETL3EeKU9IrkkToqcw_-868730910")]
    [Description(@"DTC (The Depository Trust Corporation) Optional Dividend service election.")]
    [DataMember(Name="OptnlDvdd")]
    [XmlElement(ElementName="OptnlDvdd")]
    public OptionalDividendAccountQuantitySD1? OptionalDividend { get; init; }
    
    /// <summary>
    /// DTC (The Depository Trust Corporation) Tax Exempt service election.
    /// </summary>
    [IsoId("_1Mz5EjL3EeKU9IrkkToqcw_1039926111")]
    [Description(@"DTC (The Depository Trust Corporation) Tax Exempt service election.")]
    [DataMember(Name="TaxXmpt")]
    [XmlElement(ElementName="TaxXmpt")]
    public TaxExemptQuantitySD1? TaxExempt { get; init; }
    
    /// <summary>
    /// DTC (The Depository Trust Corporation) Foreign Currency Payment service wire payment instruction.
    /// </summary>
    [IsoId("_1Mz5EzL3EeKU9IrkkToqcw_-2087888194")]
    [Description(@"DTC (The Depository Trust Corporation) Foreign Currency Payment service wire payment instruction.")]
    [DataMember(Name="WireInstr")]
    [XmlElement(ElementName="WireInstr")]
    public WireInstructionSD1? WireInstruction { get; init; }
    
    /// <summary>
    /// DTC (The Depository Trust Corporation) Tax Relief service election.
    /// </summary>
    [IsoId("_1Mz5FDL3EeKU9IrkkToqcw_-1885590787")]
    [Description(@"DTC (The Depository Trust Corporation) Tax Relief service election.")]
    [DataMember(Name="DTCTaxRlf")]
    [XmlElement(ElementName="DTCTaxRlf")]
    public DTCTaxReliefSD2? DTCTaxRelief { get; init; }
    
    /// <summary>
    /// U.S. Tax Withholding elections.
    /// </summary>
    [IsoId("_1Mz5FTL3EeKU9IrkkToqcw_-63987189")]
    [Description(@"U.S. Tax Withholding elections.")]
    [DataMember(Name="USTaxWhldg")]
    [XmlElement(ElementName="USTaxWhldg")]
    public USTaxWithholdingSD1? USTaxWithholding { get; init; }
    
    /// <summary>
    /// DTC (The Depository Trust Corporation) Cash In Lieu service election.
    /// </summary>
    [IsoId("_1Mz5FjL3EeKU9IrkkToqcw_1321235420")]
    [Description(@"DTC (The Depository Trust Corporation) Cash In Lieu service election.")]
    [DataMember(Name="CshInLieu")]
    [XmlElement(ElementName="CshInLieu")]
    public CashInLieuSD1? CashInLieu { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="DTCCCAINSD1V01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public DTCCCAINSD1V01Document ToDocument()
    {
        return new DTCCCAINSD1V01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("DTCCCAINSD1");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (OptionalDividend is OptionalDividendAccountQuantitySD1 OptionalDividendValue)
        {
            writer.WriteStartElement(null, "OptnlDvdd", xmlNamespace );
            OptionalDividendValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TaxExempt is TaxExemptQuantitySD1 TaxExemptValue)
        {
            writer.WriteStartElement(null, "TaxXmpt", xmlNamespace );
            TaxExemptValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (WireInstruction is WireInstructionSD1 WireInstructionValue)
        {
            writer.WriteStartElement(null, "WireInstr", xmlNamespace );
            WireInstructionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (DTCTaxRelief is DTCTaxReliefSD2 DTCTaxReliefValue)
        {
            writer.WriteStartElement(null, "DTCTaxRlf", xmlNamespace );
            DTCTaxReliefValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (USTaxWithholding is USTaxWithholdingSD1 USTaxWithholdingValue)
        {
            writer.WriteStartElement(null, "USTaxWhldg", xmlNamespace );
            USTaxWithholdingValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CashInLieu is CashInLieuSD1 CashInLieuValue)
        {
            writer.WriteStartElement(null, "CshInLieu", xmlNamespace );
            CashInLieuValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DTCCCAINSD1V01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="DTCCCAINSD1V01"/>.
/// </summary>
[Serializable]
public partial record DTCCCAINSD1V01Document : IOuterDocument<DTCCCAINSD1V01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:supl.008.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="DTCCCAINSD1V01"/> is required.
    /// </summary>
    [DataMember(Name=DTCCCAINSD1V01.XmlTag)]
    public required DTCCCAINSD1V01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(DTCCCAINSD1V01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
