//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for DTCCCANOCustodianSD1V03.  ISO2002 ID# _1LBwZjL3EeKU9IrkkToqcw_-1345555435.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.supl.DTCCCANOCustodianSD1V03>;

namespace BeneficialStrategies.Iso20022.supl;


/// <summary>
/// This record is an implementation of the supl.004.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The DTCCCANOCustodianSD1 message extends ISO corporate action notification (CANO) message with DTCC validation custodian service specific data elements that are not covered by the standard message.
/// </summary>
[Serializable]
[Description(@"The DTCCCANOCustodianSD1 message extends ISO corporate action notification (CANO) message with DTCC validation custodian service specific data elements that are not covered by the standard message.")]
public partial record DTCCCANOCustodianSD1V03 : IOuterRecord<DTCCCANOCustodianSD1V03,DTCCCANOCustodianSD1V03Document>
    ,IIsoXmlSerilizable<DTCCCANOCustodianSD1V03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "supl.004.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "DTCCCANOCtdnSD1";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => DTCCCANOCustodianSD1V03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Information to be extended as custodian details supplementary data to corporate action notification.
    /// </summary>
    [IsoId("_1LBwZzL3EeKU9IrkkToqcw_764430494")]
    [Description(@"Information to be extended as custodian details supplementary data to corporate action notification.")]
    [DataMember(Name="CtdnDtls")]
    [XmlElement(ElementName="CtdnDtls")]
    public CustodianDetailsSD1? CustodianDetails { get; init; }
    
    /// <summary>
    /// Information to be extended as custodian service supplementary data to option details.
    /// </summary>
    [IsoId("_1LK6UDL3EeKU9IrkkToqcw_780588655")]
    [Description(@"Information to be extended as custodian service supplementary data to option details.")]
    [DataMember(Name="CtdnOptnDtDtls")]
    [XmlElement(ElementName="CtdnOptnDtDtls")]
    public CustodianOptionDateDetailsSD1? CustodianOptionDateDetails { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="DTCCCANOCustodianSD1V03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public DTCCCANOCustodianSD1V03Document ToDocument()
    {
        return new DTCCCANOCustodianSD1V03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("DTCCCANOCtdnSD1");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        if (CustodianDetails is CustodianDetailsSD1 CustodianDetailsValue)
        {
            writer.WriteStartElement(null, "CtdnDtls", xmlNamespace );
            CustodianDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CustodianOptionDateDetails is CustodianOptionDateDetailsSD1 CustodianOptionDateDetailsValue)
        {
            writer.WriteStartElement(null, "CtdnOptnDtDtls", xmlNamespace );
            CustodianOptionDateDetailsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DTCCCANOCustodianSD1V03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="DTCCCANOCustodianSD1V03"/>.
/// </summary>
[Serializable]
public partial record DTCCCANOCustodianSD1V03Document : IOuterDocument<DTCCCANOCustodianSD1V03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:supl.004.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="DTCCCANOCustodianSD1V03"/> is required.
    /// </summary>
    [DataMember(Name=DTCCCANOCustodianSD1V03.XmlTag)]
    public required DTCCCANOCustodianSD1V03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(DTCCCANOCustodianSD1V03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
