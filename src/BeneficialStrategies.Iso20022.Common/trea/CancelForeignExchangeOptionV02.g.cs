//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for CancelForeignExchangeOptionV02.  ISO2002 ID# _KP1cKNE8Ed-BzquC8wXy7w_-352671200.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.trea.CancelForeignExchangeOptionV02>;

namespace BeneficialStrategies.Iso20022.trea;


/// <summary>
/// This record is an implementation of the trea.011.001.02 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The CancelForeignExchangeOption message is sent by a participant to a central system or to a counterparty to notify the cancellation of a foreign currency option contract.
/// Usage
/// The message will contain a Related Reference to link it to the previously sent notification. It may contain a reason for cancellation.
/// This message is only suitable for Simple (i.e. not Barrier) Vanilla (i.e. not Binary, Digital, Notouch) Foreign Exchange Options.
/// </summary>
[Serializable]
[Description(@"Scope|The CancelForeignExchangeOption message is sent by a participant to a central system or to a counterparty to notify the cancellation of a foreign currency option contract.|Usage|The message will contain a Related Reference to link it to the previously sent notification. It may contain a reason for cancellation.|This message is only suitable for Simple (i.e. not Barrier) Vanilla (i.e. not Binary, Digital, Notouch) Foreign Exchange Options.")]
public partial record CancelForeignExchangeOptionV02 : IOuterRecord<CancelForeignExchangeOptionV02,CancelForeignExchangeOptionV02Document>
    ,IIsoXmlSerilizable<CancelForeignExchangeOptionV02>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "trea.011.001.02";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "CclFXOptnV02";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => CancelForeignExchangeOptionV02Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Provides reference and date of the foreign exchange option trade which is cancelled.
    /// </summary>
    [IsoId("_KP1cKdE8Ed-BzquC8wXy7w_1862314429")]
    [Description(@"Provides reference and date of the foreign exchange option trade which is cancelled.")]
    [DataMember(Name="TradInf")]
    [XmlElement(ElementName="TradInf")]
    [Required]
    public required TradeAgreement2 TradeInformation { get; init; }
    
    /// <summary>
    /// Specifies the trading side of the currency option trade which is cancelled.
    /// </summary>
    [IsoId("_KP1cKtE8Ed-BzquC8wXy7w_-332565898")]
    [Description(@"Specifies the trading side of the currency option trade which is cancelled.")]
    [DataMember(Name="TradgSdId")]
    [XmlElement(ElementName="TradgSdId")]
    public TradePartyIdentification4? TradingSideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the counterparty of the currency option trade which is cancelled.
    /// </summary>
    [IsoId("_KP1cK9E8Ed-BzquC8wXy7w_-131240239")]
    [Description(@"Specifies the counterparty of the currency option trade which is cancelled.")]
    [DataMember(Name="CtrPtySdId")]
    [XmlElement(ElementName="CtrPtySdId")]
    public TradePartyIdentification4? CounterpartySideIdentification { get; init; }
    
    /// <summary>
    /// Specifies the parameters of the currency option which is bought by the trading side.
    /// </summary>
    [IsoId("_KP1cLNE8Ed-BzquC8wXy7w_-743534321")]
    [Description(@"Specifies the parameters of the currency option which is bought by the trading side.")]
    [DataMember(Name="Optn")]
    [XmlElement(ElementName="Optn")]
    public Option3? Option { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="CancelForeignExchangeOptionV02Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public CancelForeignExchangeOptionV02Document ToDocument()
    {
        return new CancelForeignExchangeOptionV02Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("CclFXOptnV02");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "TradInf", xmlNamespace );
        TradeInformation.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TradingSideIdentification is TradePartyIdentification4 TradingSideIdentificationValue)
        {
            writer.WriteStartElement(null, "TradgSdId", xmlNamespace );
            TradingSideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CounterpartySideIdentification is TradePartyIdentification4 CounterpartySideIdentificationValue)
        {
            writer.WriteStartElement(null, "CtrPtySdId", xmlNamespace );
            CounterpartySideIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (Option is Option3 OptionValue)
        {
            writer.WriteStartElement(null, "Optn", xmlNamespace );
            OptionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static CancelForeignExchangeOptionV02 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="CancelForeignExchangeOptionV02"/>.
/// </summary>
[Serializable]
public partial record CancelForeignExchangeOptionV02Document : IOuterDocument<CancelForeignExchangeOptionV02>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:trea.011.001.02";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="CancelForeignExchangeOptionV02"/> is required.
    /// </summary>
    [DataMember(Name=CancelForeignExchangeOptionV02.XmlTag)]
    public required CancelForeignExchangeOptionV02 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(CancelForeignExchangeOptionV02.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
