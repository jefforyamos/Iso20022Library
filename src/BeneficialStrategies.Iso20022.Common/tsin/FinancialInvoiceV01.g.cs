//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for FinancialInvoiceV01.  ISO2002 ID# _BU_0In1LEeCF8NjrBemJWQ_-1866907401.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsin.FinancialInvoiceV01>;

namespace BeneficialStrategies.Iso20022.tsin;


/// <summary>
/// This record is an implementation of the tsin.004.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The FinancialInvoice message is used to support the provision of financial and related services where there is a requirement to exchange invoice information.
/// Usage
/// While the prime function of the FinancialInvoice message is as a request from the seller to the buyer for payment, the FinancialInvoice message can also serve to evidence an invoice in support of a financial service such as invoice factoring, letters of credit, and bank payment obligations, to enable Web based services such as electronic bill payment and presentment, and as the basis to transfer invoice information via third parties such as e-invoicing service providers.
/// A consequence of the receipt of an invoice by the buyer is that it acts as a trigger for the use of related messages that are already defined in ISO 20022, notably where the information contained in the Financial Invoice enables payment for the goods or services received, and/or is provided in support of a request for invoice financing. While certain of these related messages, such as the CreditTransfer and PaymentInitiation messages, are shown in the sequence diagram they are out of scope. They are shown only to illustrate a given scenario and to place the invoice in the context of the financial banking processes that might be conducted between different financial institutions.
/// The use of self-billing by the buyer to the seller, where the buyer acts as the invoice issuer or the process of handling an incorrect invoice, is not in scope.
/// </summary>
[Serializable]
[Description(@"Scope|The FinancialInvoice message is used to support the provision of financial and related services where there is a requirement to exchange invoice information.|Usage|While the prime function of the FinancialInvoice message is as a request from the seller to the buyer for payment, the FinancialInvoice message can also serve to evidence an invoice in support of a financial service such as invoice factoring, letters of credit, and bank payment obligations, to enable Web based services such as electronic bill payment and presentment, and as the basis to transfer invoice information via third parties such as e-invoicing service providers.|A consequence of the receipt of an invoice by the buyer is that it acts as a trigger for the use of related messages that are already defined in ISO 20022, notably where the information contained in the Financial Invoice enables payment for the goods or services received, and/or is provided in support of a request for invoice financing. While certain of these related messages, such as the CreditTransfer and PaymentInitiation messages, are shown in the sequence diagram they are out of scope. They are shown only to illustrate a given scenario and to place the invoice in the context of the financial banking processes that might be conducted between different financial institutions.|The use of self-billing by the buyer to the seller, where the buyer acts as the invoice issuer or the process of handling an incorrect invoice, is not in scope.")]
public partial record FinancialInvoiceV01 : IOuterRecord<FinancialInvoiceV01,FinancialInvoiceV01Document>
    ,IIsoXmlSerilizable<FinancialInvoiceV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsin.004.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FinInvc";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => FinancialInvoiceV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Collection of data that is exchanged between two or more parties in written, printed or electronic form. It contains general data relevant to the main body of the invoice such as date of issue, currency code and identification number.
    /// </summary>
    [IsoId("_BU_0I31LEeCF8NjrBemJWQ_-1198026434")]
    [Description(@"Collection of data that is exchanged between two or more parties in written, printed or electronic form. It contains general data relevant to the main body of the invoice such as date of issue, currency code and identification number.")]
    [DataMember(Name="InvcHdr")]
    [XmlElement(ElementName="InvcHdr")]
    [Required]
    public required InvoiceHeader1 InvoiceHeader { get; init; }
    
    /// <summary>
    /// Commercial information such as terms of commerce, parties, and documentation, related to the trading agreement under which this invoice is issued.
    /// </summary>
    [IsoId("_BU_0JH1LEeCF8NjrBemJWQ_-1506571269")]
    [Description(@"Commercial information such as terms of commerce, parties, and documentation, related to the trading agreement under which this invoice is issued.")]
    [DataMember(Name="TradAgrmt")]
    [XmlElement(ElementName="TradAgrmt")]
    [Required]
    public required TradeAgreement6 TradeAgreement { get; init; }
    
    /// <summary>
    /// Supply chain shipping arrangements for delivery of invoiced products and/or services.
    /// </summary>
    [IsoId("_BU_0JX1LEeCF8NjrBemJWQ_-1892382855")]
    [Description(@"Supply chain shipping arrangements for delivery of invoiced products and/or services.")]
    [DataMember(Name="TradDlvry")]
    [XmlElement(ElementName="TradDlvry")]
    [Required]
    public required TradeDelivery1 TradeDelivery { get; init; }
    
    /// <summary>
    /// Settlement information that enables the financial reconciliation and payment of this invoice.
    /// </summary>
    [IsoId("_BU_0Jn1LEeCF8NjrBemJWQ_1308887526")]
    [Description(@"Settlement information that enables the financial reconciliation and payment of this invoice.|")]
    [DataMember(Name="TradSttlm")]
    [XmlElement(ElementName="TradSttlm")]
    [Required]
    public required TradeSettlement1 TradeSettlement { get; init; }
    
    /// <summary>
    /// Unit of information in this invoice showning the related provision of products and/or services and monetary summations reported as a discrete line item.
    /// </summary>
    [IsoId("_BU_0J31LEeCF8NjrBemJWQ_-1744265877")]
    [Description(@"Unit of information in this invoice showning the related provision of products and/or services and monetary summations reported as a discrete line item.|||")]
    [DataMember(Name="LineItm")]
    [XmlElement(ElementName="LineItm")]
    public LineItem10? LineItem { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="FinancialInvoiceV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public FinancialInvoiceV01Document ToDocument()
    {
        return new FinancialInvoiceV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FinInvc");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "InvcHdr", xmlNamespace );
        InvoiceHeader.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradAgrmt", xmlNamespace );
        TradeAgreement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradDlvry", xmlNamespace );
        TradeDelivery.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TradSttlm", xmlNamespace );
        TradeSettlement.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (LineItem is LineItem10 LineItemValue)
        {
            writer.WriteStartElement(null, "LineItm", xmlNamespace );
            LineItemValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FinancialInvoiceV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="FinancialInvoiceV01"/>.
/// </summary>
[Serializable]
public partial record FinancialInvoiceV01Document : IOuterDocument<FinancialInvoiceV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsin.004.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="FinancialInvoiceV01"/> is required.
    /// </summary>
    [DataMember(Name=FinancialInvoiceV01.XmlTag)]
    public required FinancialInvoiceV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(FinancialInvoiceV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
