//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for PartyRegistrationAndGuaranteeNotificationV01.  ISO2002 ID# _OTgzNDg0-AOSNFX-8224506.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsin.PartyRegistrationAndGuaranteeNotificationV01>;

namespace BeneficialStrategies.Iso20022.tsin;


/// <summary>
/// This record is an implementation of the tsin.011.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The PartyRegistrationAndGuaranteeNotification message is sent by a factoring client or a financial service to a trade partner and, optionally, to an interested party in order to notify the status of a requested financial service agreement. The trade partner is given information to explain the consequences of a financial service agreement, for instance, the trade partner must pay the financial institution and must use the electronic address to inform it and pay it using the bank account given.
/// The message may reference related messages and may include referenced data.
/// The message can carry digital signatures if required by context.
/// </summary>
[Serializable]
[Description(@"The PartyRegistrationAndGuaranteeNotification message is sent by a factoring client or a financial service to a trade partner and, optionally, to an interested party in order to notify the status of a requested financial service agreement. The trade partner is given information to explain the consequences of a financial service agreement, for instance, the trade partner must pay the financial institution and must use the electronic address to inform it and pay it using the bank account given.|The message may reference related messages and may include referenced data.|The message can carry digital signatures if required by context.")]
public partial record PartyRegistrationAndGuaranteeNotificationV01 : IOuterRecord<PartyRegistrationAndGuaranteeNotificationV01,PartyRegistrationAndGuaranteeNotificationV01Document>
    ,IIsoXmlSerilizable<PartyRegistrationAndGuaranteeNotificationV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsin.011.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "PtyRegnAndGrntNtfctn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => PartyRegistrationAndGuaranteeNotificationV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Set of characteristics that unambiguously identify the notification, common parameters, documents and identifications.
    /// </summary>
    [IsoId("_OTgzNDg1-AOSNFX-8224506")]
    [Description(@"Set of characteristics that unambiguously identify the notification, common parameters, documents and identifications.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required BusinessLetter1 Header { get; init; }
    
    /// <summary>
    /// List of otifications.
    /// </summary>
    [IsoId("_OTgzNDg2-AOSNFX-8224506")]
    [Description(@"List of otifications.")]
    [DataMember(Name="NtfctnList")]
    [XmlElement(ElementName="NtfctnList")]
    [Required]
    public required FinancingAgreementList1 NotificationList { get; init; }
    
    /// <summary>
    /// Number of notification lists as control value.
    /// </summary>
    [IsoId("_OTgzNDg3-AOSNFX-8224506")]
    [Description(@"Number of notification lists as control value.")]
    [DataMember(Name="NtfctnCnt")]
    [XmlElement(ElementName="NtfctnCnt")]
    public IsoMax15NumericText? NotificationCount { get; init; }
    
    /// <summary>
    /// Total number of individual items in all lists.
    /// </summary>
    [IsoId("_OTgzNDg4-AOSNFX-8224506")]
    [Description(@"Total number of individual items in all lists.")]
    [DataMember(Name="ItmCnt")]
    [XmlElement(ElementName="ItmCnt")]
    public IsoMax15NumericText? ItemCount { get; init; }
    
    /// <summary>
    /// Total of all individual amounts included in all lists, irrespective of currencies or direction.
    /// </summary>
    [IsoId("_OTgzNDg5-AOSNFX-8224506")]
    [Description(@"Total of all individual amounts included in all lists, irrespective of currencies or direction.")]
    [DataMember(Name="CtrlSum")]
    [XmlElement(ElementName="CtrlSum")]
    public IsoDecimalNumber? ControlSum { get; init; }
    
    /// <summary>
    /// Referenced or related business message.
    /// </summary>
    [IsoId("_OTgzNDkw-AOSNFX-8224506")]
    [Description(@"Referenced or related business message.")]
    [DataMember(Name="AttchdMsg")]
    [XmlElement(ElementName="AttchdMsg")]
    public EncapsulatedBusinessMessage1? AttachedMessage { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="PartyRegistrationAndGuaranteeNotificationV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public PartyRegistrationAndGuaranteeNotificationV01Document ToDocument()
    {
        return new PartyRegistrationAndGuaranteeNotificationV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("PtyRegnAndGrntNtfctn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "NtfctnList", xmlNamespace );
        NotificationList.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (NotificationCount is IsoMax15NumericText NotificationCountValue)
        {
            writer.WriteStartElement(null, "NtfctnCnt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15NumericText(NotificationCountValue)); // data type Max15NumericText System.String
            writer.WriteEndElement();
        }
        if (ItemCount is IsoMax15NumericText ItemCountValue)
        {
            writer.WriteStartElement(null, "ItmCnt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15NumericText(ItemCountValue)); // data type Max15NumericText System.String
            writer.WriteEndElement();
        }
        if (ControlSum is IsoDecimalNumber ControlSumValue)
        {
            writer.WriteStartElement(null, "CtrlSum", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(ControlSumValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (AttachedMessage is EncapsulatedBusinessMessage1 AttachedMessageValue)
        {
            writer.WriteStartElement(null, "AttchdMsg", xmlNamespace );
            AttachedMessageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PartyRegistrationAndGuaranteeNotificationV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="PartyRegistrationAndGuaranteeNotificationV01"/>.
/// </summary>
[Serializable]
public partial record PartyRegistrationAndGuaranteeNotificationV01Document : IOuterDocument<PartyRegistrationAndGuaranteeNotificationV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsin.011.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="PartyRegistrationAndGuaranteeNotificationV01"/> is required.
    /// </summary>
    [DataMember(Name=PartyRegistrationAndGuaranteeNotificationV01.XmlTag)]
    public required PartyRegistrationAndGuaranteeNotificationV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(PartyRegistrationAndGuaranteeNotificationV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
