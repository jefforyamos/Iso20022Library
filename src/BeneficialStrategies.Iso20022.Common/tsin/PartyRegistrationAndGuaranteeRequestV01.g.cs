//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for PartyRegistrationAndGuaranteeRequestV01.  ISO2002 ID# _OTgzNDYz-AOSNFX-8224506.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsin.PartyRegistrationAndGuaranteeRequestV01>;

namespace BeneficialStrategies.Iso20022.tsin;


/// <summary>
/// This record is an implementation of the tsin.009.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The message PartyRegistrationAndGuaranteeRequest is sent by a factoring client either to a financial service or a guarantee issuer. The message can also be sent from a financial service to a guarantee issuer. Furthermore, the message can be sent to an interested party for example a fiscal authority. When the message is sent to a guarantee issuer, the factoring client or financial service provider requests a guarantee for the factoring agreement concerning the indicated trade party. When the message is sent to a financial service, the financial client requests an agreement to execute assignments of financial items. The financial client may request the guarantee amount to be obtained in case of insolvency of the trade partner for a corresponding account receivable directly from the financial service. Alternatively and depending on the contractual and product definition, the financial client may be required to include a copy of a guarantee status received from a guarantee issuer.
/// The message can carry digital signatures if required by context.
/// </summary>
[Serializable]
[Description(@"The message PartyRegistrationAndGuaranteeRequest is sent by a factoring client either to a financial service or a guarantee issuer. The message can also be sent from a financial service to a guarantee issuer. Furthermore, the message can be sent to an interested party for example a fiscal authority. When the message is sent to a guarantee issuer, the factoring client or financial service provider requests a guarantee for the factoring agreement concerning the indicated trade party. When the message is sent to a financial service, the financial client requests an agreement to execute assignments of financial items. The financial client may request the guarantee amount to be obtained in case of insolvency of the trade partner for a corresponding account receivable directly from the financial service. Alternatively and depending on the contractual and product definition, the financial client may be required to include a copy of a guarantee status received from a guarantee issuer.|The message can carry digital signatures if required by context.")]
public partial record PartyRegistrationAndGuaranteeRequestV01 : IOuterRecord<PartyRegistrationAndGuaranteeRequestV01,PartyRegistrationAndGuaranteeRequestV01Document>
    ,IIsoXmlSerilizable<PartyRegistrationAndGuaranteeRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsin.009.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "PtyRegnAndGrntReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => PartyRegistrationAndGuaranteeRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Set of characteristics that unambiguously identify the request, common parameters, documents and identifications.
    /// </summary>
    [IsoId("_OTgzNDY0-AOSNFX-8224506")]
    [Description(@"Set of characteristics that unambiguously identify the request, common parameters, documents and identifications.")]
    [DataMember(Name="Hdr")]
    [XmlElement(ElementName="Hdr")]
    [Required]
    public required BusinessLetter1 Header { get; init; }
    
    /// <summary>
    /// List of agreements.
    /// </summary>
    [IsoId("_OTgzNDY1-AOSNFX-8224506")]
    [Description(@"List of agreements.")]
    [DataMember(Name="AgrmtList")]
    [XmlElement(ElementName="AgrmtList")]
    [Required]
    public required FinancingAgreementList1 AgreementList { get; init; }
    
    /// <summary>
    /// Number of agreement lists as control value.
    /// </summary>
    [IsoId("_OTgzNDY2-AOSNFX-8224506")]
    [Description(@"Number of agreement lists as control value.")]
    [DataMember(Name="AgrmtCnt")]
    [XmlElement(ElementName="AgrmtCnt")]
    public IsoMax15NumericText? AgreementCount { get; init; }
    
    /// <summary>
    /// Total number of individual items in all lists.
    /// </summary>
    [IsoId("_OTgzNDY3-AOSNFX-8224506")]
    [Description(@"Total number of individual items in all lists.")]
    [DataMember(Name="ItmCnt")]
    [XmlElement(ElementName="ItmCnt")]
    public IsoMax15NumericText? ItemCount { get; init; }
    
    /// <summary>
    /// Total of all individual amounts included in all lists, irrespective of currencies or direction.
    /// </summary>
    [IsoId("_OTgzNDY4-AOSNFX-8224506")]
    [Description(@"Total of all individual amounts included in all lists, irrespective of currencies or direction.")]
    [DataMember(Name="CtrlSum")]
    [XmlElement(ElementName="CtrlSum")]
    public IsoDecimalNumber? ControlSum { get; init; }
    
    /// <summary>
    /// Referenced or related business message.
    /// </summary>
    [IsoId("_OTgzNDY5-AOSNFX-8224506")]
    [Description(@"Referenced or related business message.")]
    [DataMember(Name="AttchdMsg")]
    [XmlElement(ElementName="AttchdMsg")]
    public EncapsulatedBusinessMessage1? AttachedMessage { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="PartyRegistrationAndGuaranteeRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public PartyRegistrationAndGuaranteeRequestV01Document ToDocument()
    {
        return new PartyRegistrationAndGuaranteeRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("PtyRegnAndGrntReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "Hdr", xmlNamespace );
        Header.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "AgrmtList", xmlNamespace );
        AgreementList.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (AgreementCount is IsoMax15NumericText AgreementCountValue)
        {
            writer.WriteStartElement(null, "AgrmtCnt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15NumericText(AgreementCountValue)); // data type Max15NumericText System.String
            writer.WriteEndElement();
        }
        if (ItemCount is IsoMax15NumericText ItemCountValue)
        {
            writer.WriteStartElement(null, "ItmCnt", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoMax15NumericText(ItemCountValue)); // data type Max15NumericText System.String
            writer.WriteEndElement();
        }
        if (ControlSum is IsoDecimalNumber ControlSumValue)
        {
            writer.WriteStartElement(null, "CtrlSum", xmlNamespace );
            writer.WriteValue(SerializationFormatter.IsoDecimalNumber(ControlSumValue)); // data type DecimalNumber System.UInt64
            writer.WriteEndElement();
        }
        if (AttachedMessage is EncapsulatedBusinessMessage1 AttachedMessageValue)
        {
            writer.WriteStartElement(null, "AttchdMsg", xmlNamespace );
            AttachedMessageValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static PartyRegistrationAndGuaranteeRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="PartyRegistrationAndGuaranteeRequestV01"/>.
/// </summary>
[Serializable]
public partial record PartyRegistrationAndGuaranteeRequestV01Document : IOuterDocument<PartyRegistrationAndGuaranteeRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsin.009.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="PartyRegistrationAndGuaranteeRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=PartyRegistrationAndGuaranteeRequestV01.XmlTag)]
    public required PartyRegistrationAndGuaranteeRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(PartyRegistrationAndGuaranteeRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
