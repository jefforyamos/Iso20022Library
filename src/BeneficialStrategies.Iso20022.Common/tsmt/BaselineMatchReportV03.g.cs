//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for BaselineMatchReportV03.  ISO2002 ID# _lhzYiNE8Ed-BzquC8wXy7w_-1930237011.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.BaselineMatchReportV03>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.010.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The BaselineMatchReport message is sent by the matching application to the parties involved in the establishment of a transaction.
/// The message is used to inform about either the successful establishment of a transaction (baseline) or the mis-matches found between two baseline initiation messages.
/// Usage
/// The BaselineMatchReport message can be sent by the matching application to
/// - the parties involved in the establishment of a transaction in the push-through mode, that is the senders of InitialBaselineSubmission and BaselineReSubmission messages including the instruction push-through. In the outlined scenario the message is used to inform either about the successful establishment of a transaction in the matching application or about mis-matches found between two baseline initiation messages,or
/// - the party establishing a transaction in the lodge mode, that is the sender of an InitialBaselineSubmission message including the instruction lodge. In the outlined scenario the message is used to inform about the successful establishment of a transaction in the matching application.
/// </summary>
[Serializable]
[Description(@"Scope|The BaselineMatchReport message is sent by the matching application to the parties involved in the establishment of a transaction.|The message is used to inform about either the successful establishment of a transaction (baseline) or the mis-matches found between two baseline initiation messages.|Usage|The BaselineMatchReport message can be sent by the matching application to|- the parties involved in the establishment of a transaction in the push-through mode, that is the senders of InitialBaselineSubmission and BaselineReSubmission messages including the instruction push-through. In the outlined scenario the message is used to inform either about the successful establishment of a transaction in the matching application or about mis-matches found between two baseline initiation messages,or|- the party establishing a transaction in the lodge mode, that is the sender of an InitialBaselineSubmission message including the instruction lodge. In the outlined scenario the message is used to inform about the successful establishment of a transaction in the matching application.")]
public partial record BaselineMatchReportV03 : IOuterRecord<BaselineMatchReportV03,BaselineMatchReportV03Document>
    ,IIsoXmlSerilizable<BaselineMatchReportV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.010.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "BaselnMtchRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => BaselineMatchReportV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the report.
    /// </summary>
    [IsoId("_lh9JgNE8Ed-BzquC8wXy7w_-1930236671")]
    [Description(@"Identifies the report.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    [Required]
    public required MessageIdentification1 ReportIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.
    /// </summary>
    [IsoId("_lh9JgdE8Ed-BzquC8wXy7w_-1930237000")]
    [Description(@"Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.")]
    [DataMember(Name="TxId")]
    [XmlElement(ElementName="TxId")]
    [Required]
    public required SimpleIdentificationInformation TransactionIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the baseline when it is established.
    /// </summary>
    [IsoId("_lh9JgtE8Ed-BzquC8wXy7w_-1930236517")]
    [Description(@"Unique identification assigned by the matching application to the baseline when it is established.")]
    [DataMember(Name="EstblishdBaselnId")]
    [XmlElement(ElementName="EstblishdBaselnId")]
    public DocumentIdentification3? EstablishedBaselineIdentification { get; init; }
    
    /// <summary>
    /// Identifies the status of the transaction by means of a code.
    /// </summary>
    [IsoId("_lh9Jg9E8Ed-BzquC8wXy7w_-1930236979")]
    [Description(@"Identifies the status of the transaction by means of a code.")]
    [DataMember(Name="TxSts")]
    [XmlElement(ElementName="TxSts")]
    [Required]
    public required TransactionStatus4 TransactionStatus { get; init; }
    
    /// <summary>
    /// Reference to the transaction for each financial institution which is a party to the transaction.
    /// </summary>
    [IsoId("_lh9JhNE8Ed-BzquC8wXy7w_-1930236548")]
    [Description(@"Reference to the transaction for each financial institution which is a party to the transaction.")]
    [DataMember(Name="UsrTxRef")]
    [XmlElement(ElementName="UsrTxRef")]
    public required ValueList<DocumentIdentification5> UserTransactionReference { get; init; } = []; // Min=0, Max=2
    
    /// <summary>
    /// Party that buys goods or services, or a financial instrument.
    /// </summary>
    [IsoId("_lh9JhdE8Ed-BzquC8wXy7w_-1930236093")]
    [Description(@"Party that buys goods or services, or a financial instrument.")]
    [DataMember(Name="Buyr")]
    [XmlElement(ElementName="Buyr")]
    [Required]
    public required PartyIdentification26 Buyer { get; init; }
    
    /// <summary>
    /// Party that sells goods or services, or a financial instrument.
    /// </summary>
    [IsoId("_lh9JhtE8Ed-BzquC8wXy7w_-1930236208")]
    [Description(@"Party that sells goods or services, or a financial instrument.")]
    [DataMember(Name="Sellr")]
    [XmlElement(ElementName="Sellr")]
    [Required]
    public required PartyIdentification26 Seller { get; init; }
    
    /// <summary>
    /// The financial institution of the buyer, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_lh9Jh9E8Ed-BzquC8wXy7w_-1930236154")]
    [Description(@"The financial institution of the buyer, uniquely identified by its BIC.")]
    [DataMember(Name="BuyrBk")]
    [XmlElement(ElementName="BuyrBk")]
    [Required]
    public required BICIdentification1 BuyerBank { get; init; }
    
    /// <summary>
    /// The financial institution of the seller, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_liGTcNE8Ed-BzquC8wXy7w_-1930236123")]
    [Description(@"The financial institution of the seller, uniquely identified by its BIC.")]
    [DataMember(Name="SellrBk")]
    [XmlElement(ElementName="SellrBk")]
    [Required]
    public required BICIdentification1 SellerBank { get; init; }
    
    /// <summary>
    /// Specifies the number of matching trials for a baseline.
    /// </summary>
    [IsoId("_liGTcdE8Ed-BzquC8wXy7w_-1930236609")]
    [Description(@"Specifies the number of matching trials for a baseline.")]
    [DataMember(Name="BaselnEstblishmtTrils")]
    [XmlElement(ElementName="BaselnEstblishmtTrils")]
    [Required]
    public required Limit1 BaselineEstablishmentTrials { get; init; }
    
    /// <summary>
    /// Identifies the two baselines compared in this report.
    /// </summary>
    [IsoId("_liGTctE8Ed-BzquC8wXy7w_-1930236239")]
    [Description(@"Identifies the two baselines compared in this report.")]
    [DataMember(Name="CmpardDocRef")]
    [XmlElement(ElementName="CmpardDocRef")]
    public required ValueList<DocumentIdentification4> ComparedDocumentReference { get; init; } = []; // Min=2, Max=2
    
    /// <summary>
    /// Description of the differences between the two proposed baselines.
    /// </summary>
    [IsoId("_liGTc9E8Ed-BzquC8wXy7w_-1930236947")]
    [Description(@"Description of the differences between the two proposed baselines.")]
    [DataMember(Name="Rpt")]
    [XmlElement(ElementName="Rpt")]
    [Required]
    public required MisMatchReport3 Report { get; init; }
    
    /// <summary>
    /// Information on the next processing step required.
    /// </summary>
    [IsoId("_liGTdNE8Ed-BzquC8wXy7w_-1930236640")]
    [Description(@"Information on the next processing step required.")]
    [DataMember(Name="ReqForActn")]
    [XmlElement(ElementName="ReqForActn")]
    public PendingActivity2? RequestForAction { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="BaselineMatchReportV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public BaselineMatchReportV03Document ToDocument()
    {
        return new BaselineMatchReportV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("BaselnMtchRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptId", xmlNamespace );
        ReportIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EstablishedBaselineIdentification is DocumentIdentification3 EstablishedBaselineIdentificationValue)
        {
            writer.WriteStartElement(null, "EstblishdBaselnId", xmlNamespace );
            EstablishedBaselineIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxSts", xmlNamespace );
        TransactionStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "UsrTxRef", xmlNamespace );
        UserTransactionReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Buyr", xmlNamespace );
        Buyer.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Sellr", xmlNamespace );
        Seller.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BuyrBk", xmlNamespace );
        BuyerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SellrBk", xmlNamespace );
        SellerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BaselnEstblishmtTrils", xmlNamespace );
        BaselineEstablishmentTrials.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CmpardDocRef", xmlNamespace );
        ComparedDocumentReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Rpt", xmlNamespace );
        Report.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RequestForAction is PendingActivity2 RequestForActionValue)
        {
            writer.WriteStartElement(null, "ReqForActn", xmlNamespace );
            RequestForActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static BaselineMatchReportV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="BaselineMatchReportV03"/>.
/// </summary>
[Serializable]
public partial record BaselineMatchReportV03Document : IOuterDocument<BaselineMatchReportV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.010.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="BaselineMatchReportV03"/> is required.
    /// </summary>
    [DataMember(Name=BaselineMatchReportV03.XmlTag)]
    public required BaselineMatchReportV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(BaselineMatchReportV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
