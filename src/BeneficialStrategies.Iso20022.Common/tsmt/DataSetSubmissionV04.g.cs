//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for DataSetSubmissionV04.  ISO2002 ID# _zXROkdQrEeK0PPbKncCqzA.
//
namespace BeneficialStrategies.Iso20022.tsmt;

/// <summary>
/// Scope
/// The DataSetSubmission message is sent by a party involved in the transaction to the matching application.
/// This message is used to trigger either a match or a pre-match of the information submitted with the message.
/// Usage
/// The DataSetSubmission message can be sent by either party with the instruction pre-match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to the requester of the data set pre-match by sending a DataSetMatchReport message.
/// or
/// The DataSetSubmission message can be sent by the party specified in the baseline as data set submitter with the instruction match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to
/// - the parties involved in a transaction established in the push-through mode, or
/// - the initiator of a transaction established in the lodge mode.
/// The DataSetSubmission message can be used to submit multiple data sets for multiple transactions (baselines) at the same time. However, all transactions (baselines) covered by the message must be for the same parties, that is transaction initiator and counterparty, as well as for the same buyer and seller.
/// The DataSetSubmission message consists of data reflecting trade information related to the purchasing agreement covered by the transaction(s), for example shipment date, invoice amount.
/// </summary>
[Serializable]
[DataContract(Name = XmlTag)]
[XmlType(TypeName = XmlTag)]
[Description(@"Scope|The DataSetSubmission message is sent by a party involved in the transaction to the matching application.|This message is used to trigger either a match or a pre-match of the information submitted with the message.|Usage|The DataSetSubmission message can be sent by either party with the instruction pre-match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to the requester of the data set pre-match by sending a DataSetMatchReport message.|or|The DataSetSubmission message can be sent by the party specified in the baseline as data set submitter with the instruction match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to|- the parties involved in a transaction established in the push-through mode, or|- the initiator of a transaction established in the lodge mode.|The DataSetSubmission message can be used to submit multiple data sets for multiple transactions (baselines) at the same time. However, all transactions (baselines) covered by the message must be for the same parties, that is transaction initiator and counterparty, as well as for the same buyer and seller.|The DataSetSubmission message consists of data reflecting trade information related to the purchasing agreement covered by the transaction(s), for example shipment date, invoice amount.")]
public partial record DataSetSubmissionV04 : IOuterRecord
{
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "DataSetSubmissn";
    
    /* ------------------------------------------ Underlying data types not ready yet
    /// <summary>
    /// Identifies the submitted information.
    /// </summary>
    [IsoId("_zXROk9QrEeK0PPbKncCqzA")]
    [Description(@"Identifies the submitted information.")]
    [DataMember(Name="SubmissnId")]
    [XmlElement(ElementName="SubmissnId")]
    [Required]
    public required SomeSubmissionIdentificationRecord SubmissionIdentification { get; init; }
    
    /// <summary>
    /// Identifies the transactions that this submission relates to and provides associated information.
    /// </summary>
    [IsoId("_zXROldQrEeK0PPbKncCqzA")]
    [Description(@"Identifies the transactions that this submission relates to and provides associated information.")]
    [DataMember(Name="RltdTxRefs")]
    [XmlElement(ElementName="RltdTxRefs")]
    [Required]
    public required SomeRelatedTransactionReferencesRecord RelatedTransactionReferences { get; init; }
    
    /// <summary>
    /// This reference must be used for all data sets belonging to the same submission group.
    /// </summary>
    [IsoId("_zXROl9QrEeK0PPbKncCqzA")]
    [Description(@"This reference must be used for all data sets belonging to the same submission group.")]
    [DataMember(Name="CmonSubmissnRef")]
    [XmlElement(ElementName="CmonSubmissnRef")]
    [Required]
    public required SomeCommonSubmissionReferenceRecord CommonSubmissionReference { get; init; }
    
    /// <summary>
    /// Specifies the instruction given by the submitter.
    /// </summary>
    [IsoId("_zXROmdQrEeK0PPbKncCqzA")]
    [Description(@"Specifies the instruction given by the submitter.")]
    [DataMember(Name="Instr")]
    [XmlElement(ElementName="Instr")]
    [Required]
    public required SomeInstructionRecord Instruction { get; init; }
    
    /// <summary>
    /// The financial institution of the buyer, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_zXROm9QrEeK0PPbKncCqzA")]
    [Description(@"The financial institution of the buyer, uniquely identified by its BIC.")]
    [DataMember(Name="BuyrBk")]
    [XmlElement(ElementName="BuyrBk")]
    [Required]
    public required SomeBuyerBankRecord BuyerBank { get; init; }
    
    /// <summary>
    /// The financial institution of the seller, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_zXROndQrEeK0PPbKncCqzA")]
    [Description(@"The financial institution of the seller, uniquely identified by its BIC.")]
    [DataMember(Name="SellrBk")]
    [XmlElement(ElementName="SellrBk")]
    [Required]
    public required SomeSellerBankRecord SellerBank { get; init; }
    
    /// <summary>
    /// Commercial information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_zXROn9QrEeK0PPbKncCqzA")]
    [Description(@"Commercial information that is submitted to the matching application for processing.")]
    [DataMember(Name="ComrclDataSet")]
    [XmlElement(ElementName="ComrclDataSet")]
    public SomeCommercialDataSetRecord? CommercialDataSet { get; init; }
    
    /// <summary>
    /// Transport information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_zXROodQrEeK0PPbKncCqzA")]
    [Description(@"Transport information that is submitted to the matching application for processing.")]
    [DataMember(Name="TrnsprtDataSet")]
    [XmlElement(ElementName="TrnsprtDataSet")]
    public SomeTransportDataSetRecord? TransportDataSet { get; init; }
    
    /// <summary>
    /// Insurance information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_zXROo9QrEeK0PPbKncCqzA")]
    [Description(@"Insurance information that is submitted to the matching application for processing.")]
    [DataMember(Name="InsrncDataSet")]
    [XmlElement(ElementName="InsrncDataSet")]
    public SomeInsuranceDataSetRecord? InsuranceDataSet { get; init; }
    
    /// <summary>
    /// Certificate information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_zXROpdQrEeK0PPbKncCqzA")]
    [Description(@"Certificate information that is submitted to the matching application for processing.")]
    [DataMember(Name="CertDataSet")]
    [XmlElement(ElementName="CertDataSet")]
    public SomeCertificateDataSetRecord? CertificateDataSet { get; init; }
    
    /// <summary>
    /// Other certificate information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_zXROp9QrEeK0PPbKncCqzA")]
    [Description(@"Other certificate information that is submitted to the matching application for processing.")]
    [DataMember(Name="OthrCertDataSet")]
    [XmlElement(ElementName="OthrCertDataSet")]
    public SomeOtherCertificateDataSetRecord? OtherCertificateDataSet { get; init; }
    
    */
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="DataSetSubmissionV04Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public DataSetSubmissionV04Document ToDocument()
    {
        return new DataSetSubmissionV04Document { Message = this };
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="DataSetSubmissionV04"/>.
/// </summary>
[Serializable]
[DataContract(Name = DocumentElementName, Namespace = DocumentNamespace )]
[XmlRoot(ElementName = DocumentElementName, Namespace = DocumentNamespace )]
public partial record DataSetSubmissionV04Document : IOuterDocument<DataSetSubmissionV04>
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.014.001.04";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="DataSetSubmissionV04"/> is required.
    /// </summary>
    public required DataSetSubmissionV04 Message { get; init; }
}
