//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for DataSetSubmissionV05.  ISO2002 ID# _h2S-cQgGEeSeS5xdjFfOTw.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.DataSetSubmissionV05>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.014.001.05 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The DataSetSubmission message is sent by a party involved in the transaction to the matching application.
/// This message is used to trigger either a match or a pre-match of the information submitted with the message.
/// Usage
/// The DataSetSubmission message can be sent by either party with the instruction pre-match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to the requester of the data set pre-match by sending a DataSetMatchReport message.
/// or
/// The DataSetSubmission message can be sent by the party specified in the baseline as data set submitter with the instruction match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to
/// - the parties involved in a transaction established in the push-through mode, or
/// - the initiator of a transaction established in the lodge mode.
/// The DataSetSubmission message can be used to submit multiple data sets for multiple transactions (baselines) at the same time. However, all transactions (baselines) covered by the message must be for the same parties, that is transaction initiator and counterparty, as well as for the same buyer and seller.
/// The DataSetSubmission message consists of data reflecting trade information related to the purchasing agreement covered by the transaction(s), for example shipment date, invoice amount.
/// </summary>
[Serializable]
[Description(@"Scope|The DataSetSubmission message is sent by a party involved in the transaction to the matching application.|This message is used to trigger either a match or a pre-match of the information submitted with the message.|Usage|The DataSetSubmission message can be sent by either party with the instruction pre-match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to the requester of the data set pre-match by sending a DataSetMatchReport message.|or|The DataSetSubmission message can be sent by the party specified in the baseline as data set submitter with the instruction match. In the outlined scenario, the matching application will compare the data set(s) conveyed by the DataSetSubmission message with the established baseline and report the matching result to|- the parties involved in a transaction established in the push-through mode, or|- the initiator of a transaction established in the lodge mode.|The DataSetSubmission message can be used to submit multiple data sets for multiple transactions (baselines) at the same time. However, all transactions (baselines) covered by the message must be for the same parties, that is transaction initiator and counterparty, as well as for the same buyer and seller.|The DataSetSubmission message consists of data reflecting trade information related to the purchasing agreement covered by the transaction(s), for example shipment date, invoice amount.")]
public partial record DataSetSubmissionV05 : IOuterRecord<DataSetSubmissionV05,DataSetSubmissionV05Document>
    ,IIsoXmlSerilizable<DataSetSubmissionV05>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.014.001.05";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "DataSetSubmissn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => DataSetSubmissionV05Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the submitted information.
    /// </summary>
    [IsoId("_h2S-dQgGEeSeS5xdjFfOTw")]
    [Description(@"Identifies the submitted information.")]
    [DataMember(Name="SubmissnId")]
    [XmlElement(ElementName="SubmissnId")]
    [Required]
    public required MessageIdentification1 SubmissionIdentification { get; init; }
    
    /// <summary>
    /// Identifies the transactions that this submission relates to and provides associated information.
    /// </summary>
    [IsoId("_h2S-dwgGEeSeS5xdjFfOTw")]
    [Description(@"Identifies the transactions that this submission relates to and provides associated information.")]
    [DataMember(Name="RltdTxRefs")]
    [XmlElement(ElementName="RltdTxRefs")]
    [Required]
    public required DataSetSubmissionReferences3 RelatedTransactionReferences { get; init; }
    
    /// <summary>
    /// This reference must be used for all data sets belonging to the same submission group.
    /// </summary>
    [IsoId("_h2S-eQgGEeSeS5xdjFfOTw")]
    [Description(@"This reference must be used for all data sets belonging to the same submission group.")]
    [DataMember(Name="CmonSubmissnRef")]
    [XmlElement(ElementName="CmonSubmissnRef")]
    [Required]
    public required SimpleIdentificationInformation CommonSubmissionReference { get; init; }
    
    /// <summary>
    /// Specifies the instruction given by the submitter.
    /// </summary>
    [IsoId("_h2S-ewgGEeSeS5xdjFfOTw")]
    [Description(@"Specifies the instruction given by the submitter.")]
    [DataMember(Name="Instr")]
    [XmlElement(ElementName="Instr")]
    [Required]
    public required InstructionType3 Instruction { get; init; }
    
    /// <summary>
    /// The financial institution of the buyer, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_h2S-fQgGEeSeS5xdjFfOTw")]
    [Description(@"The financial institution of the buyer, uniquely identified by its BIC.")]
    [DataMember(Name="BuyrBk")]
    [XmlElement(ElementName="BuyrBk")]
    [Required]
    public required BICIdentification1 BuyerBank { get; init; }
    
    /// <summary>
    /// The financial institution of the seller, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_h2S-fwgGEeSeS5xdjFfOTw")]
    [Description(@"The financial institution of the seller, uniquely identified by its BIC.")]
    [DataMember(Name="SellrBk")]
    [XmlElement(ElementName="SellrBk")]
    [Required]
    public required BICIdentification1 SellerBank { get; init; }
    
    /// <summary>
    /// Commercial information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_h2S-gQgGEeSeS5xdjFfOTw")]
    [Description(@"Commercial information that is submitted to the matching application for processing.")]
    [DataMember(Name="ComrclDataSet")]
    [XmlElement(ElementName="ComrclDataSet")]
    public CommercialDataSet5? CommercialDataSet { get; init; }
    
    /// <summary>
    /// Transport information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_h2S-gwgGEeSeS5xdjFfOTw")]
    [Description(@"Transport information that is submitted to the matching application for processing.")]
    [DataMember(Name="TrnsprtDataSet")]
    [XmlElement(ElementName="TrnsprtDataSet")]
    public TransportDataSet5? TransportDataSet { get; init; }
    
    /// <summary>
    /// Insurance information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_h2S-hQgGEeSeS5xdjFfOTw")]
    [Description(@"Insurance information that is submitted to the matching application for processing.")]
    [DataMember(Name="InsrncDataSet")]
    [XmlElement(ElementName="InsrncDataSet")]
    public InsuranceDataSet1? InsuranceDataSet { get; init; }
    
    /// <summary>
    /// Certificate information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_h2S-hwgGEeSeS5xdjFfOTw")]
    [Description(@"Certificate information that is submitted to the matching application for processing.")]
    [DataMember(Name="CertDataSet")]
    [XmlElement(ElementName="CertDataSet")]
    public CertificateDataSet2? CertificateDataSet { get; init; }
    
    /// <summary>
    /// Other certificate information that is submitted to the matching application for processing.
    /// </summary>
    [IsoId("_h2S-iQgGEeSeS5xdjFfOTw")]
    [Description(@"Other certificate information that is submitted to the matching application for processing.")]
    [DataMember(Name="OthrCertDataSet")]
    [XmlElement(ElementName="OthrCertDataSet")]
    public OtherCertificateDataSet2? OtherCertificateDataSet { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="DataSetSubmissionV05Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public DataSetSubmissionV05Document ToDocument()
    {
        return new DataSetSubmissionV05Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("DataSetSubmissn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "SubmissnId", xmlNamespace );
        SubmissionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RltdTxRefs", xmlNamespace );
        RelatedTransactionReferences.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CmonSubmissnRef", xmlNamespace );
        CommonSubmissionReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Instr", xmlNamespace );
        Instruction.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BuyrBk", xmlNamespace );
        BuyerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SellrBk", xmlNamespace );
        SellerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CommercialDataSet is CommercialDataSet5 CommercialDataSetValue)
        {
            writer.WriteStartElement(null, "ComrclDataSet", xmlNamespace );
            CommercialDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransportDataSet is TransportDataSet5 TransportDataSetValue)
        {
            writer.WriteStartElement(null, "TrnsprtDataSet", xmlNamespace );
            TransportDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InsuranceDataSet is InsuranceDataSet1 InsuranceDataSetValue)
        {
            writer.WriteStartElement(null, "InsrncDataSet", xmlNamespace );
            InsuranceDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificateDataSet is CertificateDataSet2 CertificateDataSetValue)
        {
            writer.WriteStartElement(null, "CertDataSet", xmlNamespace );
            CertificateDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherCertificateDataSet is OtherCertificateDataSet2 OtherCertificateDataSetValue)
        {
            writer.WriteStartElement(null, "OthrCertDataSet", xmlNamespace );
            OtherCertificateDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static DataSetSubmissionV05 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="DataSetSubmissionV05"/>.
/// </summary>
[Serializable]
public partial record DataSetSubmissionV05Document : IOuterDocument<DataSetSubmissionV05>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.014.001.05";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="DataSetSubmissionV05"/> is required.
    /// </summary>
    [DataMember(Name=DataSetSubmissionV05.XmlTag)]
    public required DataSetSubmissionV05 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(DataSetSubmissionV05.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
