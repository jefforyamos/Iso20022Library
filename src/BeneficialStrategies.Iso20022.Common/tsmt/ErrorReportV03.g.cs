//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ErrorReportV03.  ISO2002 ID# _oHDjhdE8Ed-BzquC8wXy7w_-1687018808.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.ErrorReportV03>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.016.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ErrorReport message is sent by the matching application to the party from which it received a message.
/// This message is used to inform about the inability of the matching application to process a received message.
/// Usage
/// The ErrorReport message can be sent to a party from which the matching application received a message to inform about its inability to process the received message because
/// - the syntax of the message is incorrect,or
/// - the message content is inconsistent,or
/// - according to the workflow implemented in the matching application, it did not expect the received message.
/// </summary>
[Serializable]
[Description(@"Scope|The ErrorReport message is sent by the matching application to the party from which it received a message.|This message is used to inform about the inability of the matching application to process a received message.|Usage|The ErrorReport message can be sent to a party from which the matching application received a message to inform about its inability to process the received message because|- the syntax of the message is incorrect,or|- the message content is inconsistent,or|- according to the workflow implemented in the matching application, it did not expect the received message.")]
public partial record ErrorReportV03 : IOuterRecord<ErrorReportV03,ErrorReportV03Document>
    ,IIsoXmlSerilizable<ErrorReportV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.016.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "ErrRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ErrorReportV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the report.
    /// </summary>
    [IsoId("_oHDjhtE8Ed-BzquC8wXy7w_-1686098714")]
    [Description(@"Identifies the report.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    [Required]
    public required MessageIdentification1 ReportIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.|.
    /// </summary>
    [IsoId("_oHDjh9E8Ed-BzquC8wXy7w_-1686098652")]
    [Description(@"Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.|.")]
    [DataMember(Name="TxId")]
    [XmlElement(ElementName="TxId")]
    public SimpleIdentificationInformation? TransactionIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the baseline when it is established.
    /// </summary>
    [IsoId("_oHDjiNE8Ed-BzquC8wXy7w_-1686098591")]
    [Description(@"Unique identification assigned by the matching application to the baseline when it is established.")]
    [DataMember(Name="EstblishdBaselnId")]
    [XmlElement(ElementName="EstblishdBaselnId")]
    public DocumentIdentification3? EstablishedBaselineIdentification { get; init; }
    
    /// <summary>
    /// Identifies the status of the transaction by means of a code.
    /// </summary>
    [IsoId("_oHDjidE8Ed-BzquC8wXy7w_-1686098560")]
    [Description(@"Identifies the status of the transaction by means of a code.")]
    [DataMember(Name="TxSts")]
    [XmlElement(ElementName="TxSts")]
    public TransactionStatus4? TransactionStatus { get; init; }
    
    /// <summary>
    /// Reference to the transaction for the financial institution which is the sender of the rejected message.
    /// </summary>
    [IsoId("_oHDjitE8Ed-BzquC8wXy7w_-1686098745")]
    [Description(@"Reference to the transaction for the financial institution which is the sender of the rejected message.")]
    [DataMember(Name="UsrTxRef")]
    [XmlElement(ElementName="UsrTxRef")]
    public DocumentIdentification5? UserTransactionReference { get; init; }
    
    /// <summary>
    /// Reference to the identification of the rejected message.
    /// </summary>
    [IsoId("_oHDji9E8Ed-BzquC8wXy7w_-1686098683")]
    [Description(@"Reference to the identification of the rejected message.")]
    [DataMember(Name="RjctdMsgRef")]
    [XmlElement(ElementName="RjctdMsgRef")]
    public MessageIdentification1? RejectedMessageReference { get; init; }
    
    /// <summary>
    /// Specifies the total number of errors identified in the rejected message.
    /// </summary>
    [IsoId("_oHNUgNE8Ed-BzquC8wXy7w_-1687018798")]
    [Description(@"Specifies the total number of errors identified in the rejected message.")]
    [DataMember(Name="NbOfErrs")]
    [XmlElement(ElementName="NbOfErrs")]
    [Required]
    public required Count1 NumberOfErrors { get; init; }
    
    /// <summary>
    /// Describes the error that is the cause of the rejection.
    /// </summary>
    [IsoId("_oHNUgdE8Ed-BzquC8wXy7w_-1686098797")]
    [Description(@"Describes the error that is the cause of the rejection.")]
    [DataMember(Name="ErrDesc")]
    [XmlElement(ElementName="ErrDesc")]
    [Required]
    public required ValidationResult3 ErrorDescription { get; init; }
    
    /// <summary>
    /// Information on the next processing step required.
    /// </summary>
    [IsoId("_oHNUgtE8Ed-BzquC8wXy7w_-1686098530")]
    [Description(@"Information on the next processing step required.")]
    [DataMember(Name="ReqForActn")]
    [XmlElement(ElementName="ReqForActn")]
    public PendingActivity2? RequestForAction { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ErrorReportV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ErrorReportV03Document ToDocument()
    {
        return new ErrorReportV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("ErrRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptId", xmlNamespace );
        ReportIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (TransactionIdentification is SimpleIdentificationInformation TransactionIdentificationValue)
        {
            writer.WriteStartElement(null, "TxId", xmlNamespace );
            TransactionIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (EstablishedBaselineIdentification is DocumentIdentification3 EstablishedBaselineIdentificationValue)
        {
            writer.WriteStartElement(null, "EstblishdBaselnId", xmlNamespace );
            EstablishedBaselineIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransactionStatus is TransactionStatus4 TransactionStatusValue)
        {
            writer.WriteStartElement(null, "TxSts", xmlNamespace );
            TransactionStatusValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (UserTransactionReference is DocumentIdentification5 UserTransactionReferenceValue)
        {
            writer.WriteStartElement(null, "UsrTxRef", xmlNamespace );
            UserTransactionReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RejectedMessageReference is MessageIdentification1 RejectedMessageReferenceValue)
        {
            writer.WriteStartElement(null, "RjctdMsgRef", xmlNamespace );
            RejectedMessageReferenceValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "NbOfErrs", xmlNamespace );
        NumberOfErrors.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "ErrDesc", xmlNamespace );
        ErrorDescription.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (RequestForAction is PendingActivity2 RequestForActionValue)
        {
            writer.WriteStartElement(null, "ReqForActn", xmlNamespace );
            RequestForActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ErrorReportV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ErrorReportV03"/>.
/// </summary>
[Serializable]
public partial record ErrorReportV03Document : IOuterDocument<ErrorReportV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.016.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ErrorReportV03"/> is required.
    /// </summary>
    [DataMember(Name=ErrorReportV03.XmlTag)]
    public required ErrorReportV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ErrorReportV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
