//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ForwardDataSetSubmissionReportV05.  ISO2002 ID# _kTZ6EQgGEeSeS5xdjFfOTw.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.ForwardDataSetSubmissionReportV05>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.017.001.05 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The ForwardDataSetSubmissionReport message is sent by the matching application to the counterparty(ies) of the submitter of data sets.
/// This message is used to pass on information related to the purchasing agreement(s) covered by the transaction(s) referred to in the message.
/// Usage
/// The ForwardDataSetSubmission message can be sent by the matching application to forward the details of a DataSetSubmission message that it has obtained.
/// </summary>
[Serializable]
[Description(@"Scope|The ForwardDataSetSubmissionReport message is sent by the matching application to the counterparty(ies) of the submitter of data sets.|This message is used to pass on information related to the purchasing agreement(s) covered by the transaction(s) referred to in the message.|Usage|The ForwardDataSetSubmission message can be sent by the matching application to forward the details of a DataSetSubmission message that it has obtained.")]
public partial record ForwardDataSetSubmissionReportV05 : IOuterRecord<ForwardDataSetSubmissionReportV05,ForwardDataSetSubmissionReportV05Document>
    ,IIsoXmlSerilizable<ForwardDataSetSubmissionReportV05>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.017.001.05";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FwdDataSetSubmissnRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ForwardDataSetSubmissionReportV05Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the report.
    /// </summary>
    [IsoId("_kTZ6FQgGEeSeS5xdjFfOTw")]
    [Description(@"Identifies the report.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    [Required]
    public required MessageIdentification1 ReportIdentification { get; init; }
    
    /// <summary>
    /// Identifies the transactions that this submission relates to and provides associated information.
    /// </summary>
    [IsoId("_kTZ6FwgGEeSeS5xdjFfOTw")]
    [Description(@"Identifies the transactions that this submission relates to and provides associated information.")]
    [DataMember(Name="RltdTxRefs")]
    [XmlElement(ElementName="RltdTxRefs")]
    [Required]
    public required DataSetSubmissionReferences4 RelatedTransactionReferences { get; init; }
    
    /// <summary>
    /// This reference must be used for all data sets belonging to the same submission group.
    /// </summary>
    [IsoId("_kTZ6GQgGEeSeS5xdjFfOTw")]
    [Description(@"This reference must be used for all data sets belonging to the same submission group.")]
    [DataMember(Name="CmonSubmissnRef")]
    [XmlElement(ElementName="CmonSubmissnRef")]
    [Required]
    public required SimpleIdentificationInformation CommonSubmissionReference { get; init; }
    
    /// <summary>
    /// The financial institution that has submitted the data sets to the matching engine.
    /// </summary>
    [IsoId("_kTZ6GwgGEeSeS5xdjFfOTw")]
    [Description(@"The financial institution that has submitted the data sets to the matching engine.")]
    [DataMember(Name="Submitr")]
    [XmlElement(ElementName="Submitr")]
    [Required]
    public required BICIdentification1 Submitter { get; init; }
    
    /// <summary>
    /// The financial institution of the buyer, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_kTZ6HQgGEeSeS5xdjFfOTw")]
    [Description(@"The financial institution of the buyer, uniquely identified by its BIC.")]
    [DataMember(Name="BuyrBk")]
    [XmlElement(ElementName="BuyrBk")]
    [Required]
    public required BICIdentification1 BuyerBank { get; init; }
    
    /// <summary>
    /// The financial institution of the seller, uniquely identified by its BIC.
    /// </summary>
    [IsoId("_kTZ6HwgGEeSeS5xdjFfOTw")]
    [Description(@"The financial institution of the seller, uniquely identified by its BIC.")]
    [DataMember(Name="SellrBk")]
    [XmlElement(ElementName="SellrBk")]
    [Required]
    public required BICIdentification1 SellerBank { get; init; }
    
    /// <summary>
    /// Commercial information that has been submitted to the matching application by the other party.
    /// </summary>
    [IsoId("_kTZ6IQgGEeSeS5xdjFfOTw")]
    [Description(@"Commercial information that has been submitted to the matching application by the other party.")]
    [DataMember(Name="ComrclDataSet")]
    [XmlElement(ElementName="ComrclDataSet")]
    public CommercialDataSet5? CommercialDataSet { get; init; }
    
    /// <summary>
    /// Transport information that has been submitted to the matching application by the other party.
    /// </summary>
    [IsoId("_kTZ6IwgGEeSeS5xdjFfOTw")]
    [Description(@"Transport information that has been submitted to the matching application by the other party.")]
    [DataMember(Name="TrnsprtDataSet")]
    [XmlElement(ElementName="TrnsprtDataSet")]
    public TransportDataSet5? TransportDataSet { get; init; }
    
    /// <summary>
    /// Insurance information that has been submitted to the matching application by the other party.
    /// </summary>
    [IsoId("_kTZ6JQgGEeSeS5xdjFfOTw")]
    [Description(@"Insurance information that has been submitted to the matching application by the other party.")]
    [DataMember(Name="InsrncDataSet")]
    [XmlElement(ElementName="InsrncDataSet")]
    public InsuranceDataSet1? InsuranceDataSet { get; init; }
    
    /// <summary>
    /// Certificate information that has been submitted to the matching application by the other party.
    /// </summary>
    [IsoId("_kTZ6JwgGEeSeS5xdjFfOTw")]
    [Description(@"Certificate information that has been submitted to the matching application by the other party.")]
    [DataMember(Name="CertDataSet")]
    [XmlElement(ElementName="CertDataSet")]
    public CertificateDataSet2? CertificateDataSet { get; init; }
    
    /// <summary>
    /// Other certificate information that has been submitted to the matching application by the other party.
    /// </summary>
    [IsoId("_kTZ6KQgGEeSeS5xdjFfOTw")]
    [Description(@"Other certificate information that has been submitted to the matching application by the other party.")]
    [DataMember(Name="OthrCertDataSet")]
    [XmlElement(ElementName="OthrCertDataSet")]
    public OtherCertificateDataSet2? OtherCertificateDataSet { get; init; }
    
    /// <summary>
    /// Next processing step required.
    /// </summary>
    [IsoId("_kTZ6KwgGEeSeS5xdjFfOTw")]
    [Description(@"Next processing step required.")]
    [DataMember(Name="ReqForActn")]
    [XmlElement(ElementName="ReqForActn")]
    public PendingActivity2? RequestForAction { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ForwardDataSetSubmissionReportV05Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ForwardDataSetSubmissionReportV05Document ToDocument()
    {
        return new ForwardDataSetSubmissionReportV05Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FwdDataSetSubmissnRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptId", xmlNamespace );
        ReportIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RltdTxRefs", xmlNamespace );
        RelatedTransactionReferences.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "CmonSubmissnRef", xmlNamespace );
        CommonSubmissionReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "Submitr", xmlNamespace );
        Submitter.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "BuyrBk", xmlNamespace );
        BuyerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "SellrBk", xmlNamespace );
        SellerBank.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (CommercialDataSet is CommercialDataSet5 CommercialDataSetValue)
        {
            writer.WriteStartElement(null, "ComrclDataSet", xmlNamespace );
            CommercialDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (TransportDataSet is TransportDataSet5 TransportDataSetValue)
        {
            writer.WriteStartElement(null, "TrnsprtDataSet", xmlNamespace );
            TransportDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (InsuranceDataSet is InsuranceDataSet1 InsuranceDataSetValue)
        {
            writer.WriteStartElement(null, "InsrncDataSet", xmlNamespace );
            InsuranceDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (CertificateDataSet is CertificateDataSet2 CertificateDataSetValue)
        {
            writer.WriteStartElement(null, "CertDataSet", xmlNamespace );
            CertificateDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherCertificateDataSet is OtherCertificateDataSet2 OtherCertificateDataSetValue)
        {
            writer.WriteStartElement(null, "OthrCertDataSet", xmlNamespace );
            OtherCertificateDataSetValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RequestForAction is PendingActivity2 RequestForActionValue)
        {
            writer.WriteStartElement(null, "ReqForActn", xmlNamespace );
            RequestForActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ForwardDataSetSubmissionReportV05 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ForwardDataSetSubmissionReportV05"/>.
/// </summary>
[Serializable]
public partial record ForwardDataSetSubmissionReportV05Document : IOuterDocument<ForwardDataSetSubmissionReportV05>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.017.001.05";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ForwardDataSetSubmissionReportV05"/> is required.
    /// </summary>
    [DataMember(Name=ForwardDataSetSubmissionReportV05.XmlTag)]
    public required ForwardDataSetSubmissionReportV05 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ForwardDataSetSubmissionReportV05.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
