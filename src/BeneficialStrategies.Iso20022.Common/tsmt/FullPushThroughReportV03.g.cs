//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for FullPushThroughReportV03.  ISO2002 ID# _paNNeNE8Ed-BzquC8wXy7w_-1602880214.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.FullPushThroughReportV03>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.018.001.03 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The FullPushThroughReport message is sent by the matching application to a party involved in a transaction.
/// This message is used to pass on information that the matching application has received from the submitter. The forwarded information can originate from an InitialBaselineSubmission or BaselineReSubmission or BaselineAmendmentRequest message.
/// Usage
/// The FullPushThroughReport message can be sent by the matching application to a party to convey
/// - the details of an InitialBaselineSubmission message that it has obtained, or
/// - the details of a BaselineResubmission message that it has obtained, or
/// - the details of a BaselineAmendmentRequest message that it has obtained.
/// </summary>
[Serializable]
[Description(@"Scope|The FullPushThroughReport message is sent by the matching application to a party involved in a transaction.|This message is used to pass on information that the matching application has received from the submitter. The forwarded information can originate from an InitialBaselineSubmission or BaselineReSubmission or BaselineAmendmentRequest message.|Usage|The FullPushThroughReport message can be sent by the matching application to a party to convey|- the details of an InitialBaselineSubmission message that it has obtained, or|- the details of a BaselineResubmission message that it has obtained, or|- the details of a BaselineAmendmentRequest message that it has obtained.")]
public partial record FullPushThroughReportV03 : IOuterRecord<FullPushThroughReportV03,FullPushThroughReportV03Document>
    ,IIsoXmlSerilizable<FullPushThroughReportV03>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.018.001.03";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "FullPushThrghRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => FullPushThroughReportV03Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the report.
    /// </summary>
    [IsoId("_paNNedE8Ed-BzquC8wXy7w_-1602880211")]
    [Description(@"Identifies the report.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    [Required]
    public required MessageIdentification1 ReportIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.
    /// </summary>
    [IsoId("_paNNetE8Ed-BzquC8wXy7w_-1602880178")]
    [Description(@"Unique identification assigned by the matching application to the transaction.|This identification is to be used in any communication between the parties.")]
    [DataMember(Name="TxId")]
    [XmlElement(ElementName="TxId")]
    [Required]
    public required SimpleIdentificationInformation TransactionIdentification { get; init; }
    
    /// <summary>
    /// Unique identification assigned by the matching application to the baseline when it is established.
    /// </summary>
    [IsoId("_paNNe9E8Ed-BzquC8wXy7w_-1602879810")]
    [Description(@"Unique identification assigned by the matching application to the baseline when it is established.")]
    [DataMember(Name="EstblishdBaselnId")]
    [XmlElement(ElementName="EstblishdBaselnId")]
    public DocumentIdentification3? EstablishedBaselineIdentification { get; init; }
    
    /// <summary>
    /// Identifies the status of the transaction by means of a code.
    /// </summary>
    [IsoId("_paNNfNE8Ed-BzquC8wXy7w_-1602880093")]
    [Description(@"Identifies the status of the transaction by means of a code.")]
    [DataMember(Name="TxSts")]
    [XmlElement(ElementName="TxSts")]
    [Required]
    public required TransactionStatus4 TransactionStatus { get; init; }
    
    /// <summary>
    /// Reference to the transaction for the financial institution which submitted the baseline.
    /// </summary>
    [IsoId("_paW-cNE8Ed-BzquC8wXy7w_-1602879793")]
    [Description(@"Reference to the transaction for the financial institution which submitted the baseline.")]
    [DataMember(Name="UsrTxRef")]
    [XmlElement(ElementName="UsrTxRef")]
    public required ValueList<DocumentIdentification5> UserTransactionReference { get; init; } = []; // Min=0, Max=2
    
    /// <summary>
    /// Specifies the type of report.
    /// </summary>
    [IsoId("_paW-cdE8Ed-BzquC8wXy7w_-1602880136")]
    [Description(@"Specifies the type of report.")]
    [DataMember(Name="RptPurp")]
    [XmlElement(ElementName="RptPurp")]
    [Required]
    public required ReportType1 ReportPurpose { get; init; }
    
    /// <summary>
    /// Specifies the commercial details of the underlying transaction.
    /// </summary>
    [IsoId("_paW-ctE8Ed-BzquC8wXy7w_-1602879673")]
    [Description(@"Specifies the commercial details of the underlying transaction.")]
    [DataMember(Name="PushdThrghBaseln")]
    [XmlElement(ElementName="PushdThrghBaseln")]
    [Required]
    public required Baseline3 PushedThroughBaseline { get; init; }
    
    /// <summary>
    /// Person to be contacted in the organisation of the buyer.
    /// </summary>
    [IsoId("_paW-c9E8Ed-BzquC8wXy7w_-1602879715")]
    [Description(@"Person to be contacted in the organisation of the buyer.")]
    [DataMember(Name="BuyrCtctPrsn")]
    [XmlElement(ElementName="BuyrCtctPrsn")]
    public ContactIdentification1? BuyerContactPerson { get; init; }
    
    /// <summary>
    /// Person to be contacted in the organisation of the seller.
    /// </summary>
    [IsoId("_paW-dNE8Ed-BzquC8wXy7w_-1602879163")]
    [Description(@"Person to be contacted in the organisation of the seller.")]
    [DataMember(Name="SellrCtctPrsn")]
    [XmlElement(ElementName="SellrCtctPrsn")]
    public ContactIdentification1? SellerContactPerson { get; init; }
    
    /// <summary>
    /// Person to be contacted in the buyer's bank.
    /// </summary>
    [IsoId("_paW-ddE8Ed-BzquC8wXy7w_-1602879518")]
    [Description(@"Person to be contacted in the buyer's bank.")]
    [DataMember(Name="BuyrBkCtctPrsn")]
    [XmlElement(ElementName="BuyrBkCtctPrsn")]
    public ContactIdentification1? BuyerBankContactPerson { get; init; }
    
    /// <summary>
    /// Person to be contacted in the seller's bank.
    /// </summary>
    [IsoId("_paW-dtE8Ed-BzquC8wXy7w_-1602879638")]
    [Description(@"Person to be contacted in the seller's bank.")]
    [DataMember(Name="SellrBkCtctPrsn")]
    [XmlElement(ElementName="SellrBkCtctPrsn")]
    public ContactIdentification1? SellerBankContactPerson { get; init; }
    
    /// <summary>
    /// Person to be contacted in another bank than the seller or buyer's bank.
    /// </summary>
    [IsoId("_paW-d9E8Ed-BzquC8wXy7w_-595440751")]
    [Description(@"Person to be contacted in another bank than the seller or buyer's bank.")]
    [DataMember(Name="OthrBkCtctPrsn")]
    [XmlElement(ElementName="OthrBkCtctPrsn")]
    public ContactIdentification3? OtherBankContactPerson { get; init; }
    
    /// <summary>
    /// Information on the next processing step required.
    /// </summary>
    [IsoId("_pagIYNE8Ed-BzquC8wXy7w_-1602879750")]
    [Description(@"Information on the next processing step required.")]
    [DataMember(Name="ReqForActn")]
    [XmlElement(ElementName="ReqForActn")]
    public PendingActivity2? RequestForAction { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="FullPushThroughReportV03Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public FullPushThroughReportV03Document ToDocument()
    {
        return new FullPushThroughReportV03Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("FullPushThrghRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptId", xmlNamespace );
        ReportIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "TxId", xmlNamespace );
        TransactionIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (EstablishedBaselineIdentification is DocumentIdentification3 EstablishedBaselineIdentificationValue)
        {
            writer.WriteStartElement(null, "EstblishdBaselnId", xmlNamespace );
            EstablishedBaselineIdentificationValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        writer.WriteStartElement(null, "TxSts", xmlNamespace );
        TransactionStatus.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "UsrTxRef", xmlNamespace );
        UserTransactionReference.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "RptPurp", xmlNamespace );
        ReportPurpose.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "PushdThrghBaseln", xmlNamespace );
        PushedThroughBaseline.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (BuyerContactPerson is ContactIdentification1 BuyerContactPersonValue)
        {
            writer.WriteStartElement(null, "BuyrCtctPrsn", xmlNamespace );
            BuyerContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SellerContactPerson is ContactIdentification1 SellerContactPersonValue)
        {
            writer.WriteStartElement(null, "SellrCtctPrsn", xmlNamespace );
            SellerContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (BuyerBankContactPerson is ContactIdentification1 BuyerBankContactPersonValue)
        {
            writer.WriteStartElement(null, "BuyrBkCtctPrsn", xmlNamespace );
            BuyerBankContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (SellerBankContactPerson is ContactIdentification1 SellerBankContactPersonValue)
        {
            writer.WriteStartElement(null, "SellrBkCtctPrsn", xmlNamespace );
            SellerBankContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (OtherBankContactPerson is ContactIdentification3 OtherBankContactPersonValue)
        {
            writer.WriteStartElement(null, "OthrBkCtctPrsn", xmlNamespace );
            OtherBankContactPersonValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
        if (RequestForAction is PendingActivity2 RequestForActionValue)
        {
            writer.WriteStartElement(null, "ReqForActn", xmlNamespace );
            RequestForActionValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static FullPushThroughReportV03 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="FullPushThroughReportV03"/>.
/// </summary>
[Serializable]
public partial record FullPushThroughReportV03Document : IOuterDocument<FullPushThroughReportV03>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.018.001.03";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="FullPushThroughReportV03"/> is required.
    /// </summary>
    [DataMember(Name=FullPushThroughReportV03.XmlTag)]
    public required FullPushThroughReportV03 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(FullPushThroughReportV03.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
