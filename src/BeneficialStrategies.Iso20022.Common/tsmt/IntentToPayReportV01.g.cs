//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for IntentToPayReportV01.  ISO2002 ID# _quPoNdE8Ed-BzquC8wXy7w_-1126725598.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsmt.IntentToPayReportV01>;

namespace BeneficialStrategies.Iso20022.tsmt;


/// <summary>
/// This record is an implementation of the tsmt.046.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// Scope
/// The IntentToPayReport message is sent by the matching application to the two primary banks after receiving an IntentToPayNotification message.
/// This message is a report per transaction that were referenced in the IntentToPayNotice message. For each transaction, the matching application has accumulated the amounts present in all previous IntentToPayNotice messages and reports the total.
/// Usage
/// The IntentToPayReport message is a report that is automatically generated by the matching application following an IntentToPayNotice message. No response is expected.
/// </summary>
[Serializable]
[Description(@"Scope|The IntentToPayReport message is sent by the matching application to the two primary banks after receiving an IntentToPayNotification message.|This message is a report per transaction that were referenced in the IntentToPayNotice message. For each transaction, the matching application has accumulated the amounts present in all previous IntentToPayNotice messages and reports the total.|Usage|The IntentToPayReport message is a report that is automatically generated by the matching application following an IntentToPayNotice message. No response is expected.")]
public partial record IntentToPayReportV01 : IOuterRecord<IntentToPayReportV01,IntentToPayReportV01Document>
    ,IIsoXmlSerilizable<IntentToPayReportV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsmt.046.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "InttToPayRpt";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => IntentToPayReportV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Identifies the report message.
    /// </summary>
    [IsoId("_quPoNtE8Ed-BzquC8wXy7w_-1126725320")]
    [Description(@"Identifies the report message.")]
    [DataMember(Name="RptId")]
    [XmlElement(ElementName="RptId")]
    [Required]
    public required MessageIdentification1 ReportIdentification { get; init; }
    
    /// <summary>
    /// Reports on the intention to pay per purchase order.
    /// </summary>
    [IsoId("_quPoN9E8Ed-BzquC8wXy7w_747097845")]
    [Description(@"Reports on the intention to pay per purchase order.")]
    [DataMember(Name="RptdItms")]
    [XmlElement(ElementName="RptdItms")]
    public ReportLine1? ReportedItems { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="IntentToPayReportV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public IntentToPayReportV01Document ToDocument()
    {
        return new IntentToPayReportV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("InttToPayRpt");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "RptId", xmlNamespace );
        ReportIdentification.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (ReportedItems is ReportLine1 ReportedItemsValue)
        {
            writer.WriteStartElement(null, "RptdItms", xmlNamespace );
            ReportedItemsValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static IntentToPayReportV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="IntentToPayReportV01"/>.
/// </summary>
[Serializable]
public partial record IntentToPayReportV01Document : IOuterDocument<IntentToPayReportV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsmt.046.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="IntentToPayReportV01"/> is required.
    /// </summary>
    [DataMember(Name=IntentToPayReportV01.XmlTag)]
    public required IntentToPayReportV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(IntentToPayReportV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
