//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for ExtendOrPayResponseV01.  ISO2002 ID# _9iZZEnltEeG7BsjMvd1mEw_519258789.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsrv.ExtendOrPayResponseV01>;

namespace BeneficialStrategies.Iso20022.tsrv;


/// <summary>
/// This record is an implementation of the tsrv.015.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The ExtendOrPayResponse message is sent by the party that requested issuance of the undertaking (applicant or obligor) to the party that issued the undertaking, in response to the issuer's request for the applicant's response to the beneficiary’s request to extend or pay.
/// </summary>
[Serializable]
[Description(@"The ExtendOrPayResponse message is sent by the party that requested issuance of the undertaking (applicant or obligor) to the party that issued the undertaking, in response to the issuer's request for the applicant's response to the beneficiary’s request to extend or pay.")]
public partial record ExtendOrPayResponseV01 : IOuterRecord<ExtendOrPayResponseV01,ExtendOrPayResponseV01Document>
    ,IIsoXmlSerilizable<ExtendOrPayResponseV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsrv.015.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "XtndOrPayRspn";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => ExtendOrPayResponseV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Details of the extend or pay response.
    /// </summary>
    [IsoId("_9iZZE3ltEeG7BsjMvd1mEw_-29894697")]
    [Description(@"Details of the extend or pay response.")]
    [DataMember(Name="XtndOrPayRspnDtls")]
    [XmlElement(ElementName="XtndOrPayRspnDtls")]
    [Required]
    public required ExtendOrPayQuery2 ExtendOrPayResponseDetails { get; init; }
    
    /// <summary>
    /// Digital signature of the response.
    /// </summary>
    [IsoId("_9iZZFHltEeG7BsjMvd1mEw_1281187011")]
    [Description(@"Digital signature of the response.")]
    [DataMember(Name="DgtlSgntr")]
    [XmlElement(ElementName="DgtlSgntr")]
    public PartyAndSignature2? DigitalSignature { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="ExtendOrPayResponseV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public ExtendOrPayResponseV01Document ToDocument()
    {
        return new ExtendOrPayResponseV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("XtndOrPayRspn");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "XtndOrPayRspnDtls", xmlNamespace );
        ExtendOrPayResponseDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        if (DigitalSignature is PartyAndSignature2 DigitalSignatureValue)
        {
            writer.WriteStartElement(null, "DgtlSgntr", xmlNamespace );
            DigitalSignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static ExtendOrPayResponseV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="ExtendOrPayResponseV01"/>.
/// </summary>
[Serializable]
public partial record ExtendOrPayResponseV01Document : IOuterDocument<ExtendOrPayResponseV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsrv.015.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="ExtendOrPayResponseV01"/> is required.
    /// </summary>
    [DataMember(Name=ExtendOrPayResponseV01.XmlTag)]
    public required ExtendOrPayResponseV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(ExtendOrPayResponseV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
