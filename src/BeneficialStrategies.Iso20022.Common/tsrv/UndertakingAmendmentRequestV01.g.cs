//
// GENERATED CODE, DO NOT EDIT THIS FILE!
//
// Generated by MainMessageGenerator for UndertakingAmendmentRequestV01.  ISO2002 ID# _9f3CdnltEeG7BsjMvd1mEw_-206674723.
//

using System.ComponentModel.DataAnnotations;
using BeneficialStrategies.Iso20022.Components;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using BeneficialStrategies.Iso20022.Choices;
using BeneficialStrategies.Iso20022.ExternalSchema;
using BeneficialStrategies.Iso20022.UserDefined;
using System.Xml;
using System.Xml.Linq;
using Helper = BeneficialStrategies.Iso20022.Framework.IsoXmlSerializationHelper<BeneficialStrategies.Iso20022.tsrv.UndertakingAmendmentRequestV01>;

namespace BeneficialStrategies.Iso20022.tsrv;


/// <summary>
/// This record is an implementation of the tsrv.004.001.01 ISO standard message type.
/// There are significant differences between different variants of the same message. It is crucial that you select exactly the implementation you intend to send or receive.
/// The UndertakingAmendmentRequest message is sent by the party that requested issuance of the undertaking (applicant or obligor) to the party that issued the undertaking to request issuance of a proposed amendment to the undertaking. The undertaking could be a demand guarantee, standby letter of credit, counter-undertaking (counter-guarantee or counter-standby), or suretyship undertaking. The message provides details on proposed changes to the undertaking, for example, to the expiry date, amount, and/or terms and conditions. It may also be used to request termination or cancellation of the undertaking.
/// </summary>
[Serializable]
[Description(@"The UndertakingAmendmentRequest message is sent by the party that requested issuance of the undertaking (applicant or obligor) to the party that issued the undertaking to request issuance of a proposed amendment to the undertaking. The undertaking could be a demand guarantee, standby letter of credit, counter-undertaking (counter-guarantee or counter-standby), or suretyship undertaking. The message provides details on proposed changes to the undertaking, for example, to the expiry date, amount, and/or terms and conditions. It may also be used to request termination or cancellation of the undertaking.")]
public partial record UndertakingAmendmentRequestV01 : IOuterRecord<UndertakingAmendmentRequestV01,UndertakingAmendmentRequestV01Document>
    ,IIsoXmlSerilizable<UndertakingAmendmentRequestV01>, ISerializeInsideARootElement
{
    
    /// <summary>
    /// The official ISO 20022 designation for this version of this message.
    /// </summary>
    public const string IsoIdentifier = "tsrv.004.001.01";
    
    /// <summary>
    /// The ISO specified XML tag that should be used for standardized serialization of this message.
    /// </summary>
    public const string XmlTag = "UdrtkgAmdmntReq";
    
    /// <summary>
    /// The XML namespace in which this message is delivered.
    /// </summary>
    public static string IsoXmlNamspace => UndertakingAmendmentRequestV01Document.DocumentNamespace;
    
    #nullable enable
    /// <summary>
    /// Details related to the request for an amendment of an undertaking.
    /// </summary>
    [IsoId("_9f3Cd3ltEeG7BsjMvd1mEw_-1387733041")]
    [Description(@"Details related to the request for an amendment of an undertaking.")]
    [DataMember(Name="UdrtkgAmdmntReqDtls")]
    [XmlElement(ElementName="UdrtkgAmdmntReqDtls")]
    [Required]
    public required Amendment3 UndertakingAmendmentRequestDetails { get; init; }
    
    /// <summary>
    /// Instructions specific to the bank receiving the message.
    /// </summary>
    [IsoId("_MZwWVX_6EeGOn4dfTT_QdQ")]
    [Description(@"Instructions specific to the bank receiving the message.")]
    [DataMember(Name="InstrsToBk")]
    [XmlElement(ElementName="InstrsToBk")]
    public required SimpleValueList<IsoMax2000Text> InstructionsToBank { get; init; } = []; // Min=0, Max=5
    
    /// <summary>
    /// Digital signature of the undertaking amendment request.
    /// </summary>
    [IsoId("_9f3CeHltEeG7BsjMvd1mEw_-2129123977")]
    [Description(@"Digital signature of the undertaking amendment request.")]
    [DataMember(Name="DgtlSgntr")]
    [XmlElement(ElementName="DgtlSgntr")]
    public PartyAndSignature2? DigitalSignature { get; init; }
    
    #nullable disable
    
    /// <summary>
    /// Using the state of this record, returns a populated <seealso cref="UndertakingAmendmentRequestV01Document"/>, usually for the purpose of ISO20022 standard serialization.
    /// </summary>
    public UndertakingAmendmentRequestV01Document ToDocument()
    {
        return new UndertakingAmendmentRequestV01Document { Message = this };
    }
    public static XName RootElement => Helper.CreateXName("UdrtkgAmdmntReq");
    
    /// <summary>
    /// Used to format the various primative types during serialization.
    /// </summary>
    public static SerializationFormatter SerializationFormatter { get; set; } = SerializationFormatter.GlobalInstance;
    
    /// <summary>
    /// Serializes the state of this record according to Iso20022 specifications.
    /// </summary>
    public void Serialize(XmlWriter writer, string xmlNamespace)
    {
        writer.WriteStartElement(null, "UdrtkgAmdmntReqDtls", xmlNamespace );
        UndertakingAmendmentRequestDetails.Serialize(writer, xmlNamespace);
        writer.WriteEndElement();
        writer.WriteStartElement(null, "InstrsToBk", xmlNamespace );
        InstructionsToBank.Serialize(writer, xmlNamespace, "Max2000Text", SerializationFormatter.IsoMax2000Text );
        writer.WriteEndElement();
        if (DigitalSignature is PartyAndSignature2 DigitalSignatureValue)
        {
            writer.WriteStartElement(null, "DgtlSgntr", xmlNamespace );
            DigitalSignatureValue.Serialize(writer, xmlNamespace);
            writer.WriteEndElement();
        }
    }
    public static UndertakingAmendmentRequestV01 Deserialize(XElement element)
    {
        throw new NotImplementedException();
    }
}

/// <summary>
/// This is the outer document that contains the XML serialization wrapper and necessary namespaces for proper serialization.
/// For a more complete description of the business meaning of the message, see the underlying <seealso cref="UndertakingAmendmentRequestV01"/>.
/// </summary>
[Serializable]
public partial record UndertakingAmendmentRequestV01Document : IOuterDocument<UndertakingAmendmentRequestV01>, IXmlSerializable
{
    
    /// <summary>
    /// The ISO specified XML namespace that should be used for standardized serialization of this message type.
    /// </summary>
    public const string DocumentNamespace = "urn:iso:std:iso:20022:tech:xsd:tsrv.004.001.01";
    
    /// <summary>
    /// The ISO specified XML element name that must surround the inner content to achieve standardized serialization.
    /// </summary>
    public const string DocumentElementName = "Document";
    
    /// <summary>
    /// The instance of <seealso cref="UndertakingAmendmentRequestV01"/> is required.
    /// </summary>
    [DataMember(Name=UndertakingAmendmentRequestV01.XmlTag)]
    public required UndertakingAmendmentRequestV01 Message { get; init; }
    public void WriteXml(XmlWriter writer)
    {
        writer.WriteStartElement(null, DocumentElementName, DocumentNamespace );
        writer.WriteStartElement(UndertakingAmendmentRequestV01.XmlTag);
        Message.Serialize(writer, DocumentNamespace);
        writer.WriteEndElement();
        writer.WriteEndElement();
        writer.WriteEndDocument();
    }
    
    public void ReadXml(XmlReader reader)
    {
        throw new NotImplementedException();
    }
    
    public System.Xml.Schema.XmlSchema GetSchema() => null;
}
